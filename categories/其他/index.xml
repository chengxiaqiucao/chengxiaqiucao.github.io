<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>其他 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/categories/%E5%85%B6%E4%BB%96/</link><description>Recent content in 其他 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Thu, 05 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/categories/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Github月度新锐热门工具 - 202506</title><link>https://chengxiaqiucao.github.io/post/100-temp/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/100-temp/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/100-temp/snap_20250604.png" alt="Featured image of post Github月度新锐热门工具 - 202506" />&lt;p>上一篇，我们介绍了通过腾讯的智能编程助手开发了一款微信小程序，动态获取过去一个月新出现的最热门开源工具。&lt;/p>
&lt;p>初版虽然很快就搭建出来了，奈何bug不少，又经过数小时的不断调教，功能总算基本正常了。
&lt;img src="https://chengxiaqiucao.github.io/post/100-temp/snap_20250604.png"
width="377"
height="790"
srcset="https://chengxiaqiucao.github.io/post/100-temp/snap_20250604_hu_398679620c3ef8f7.png 480w, https://chengxiaqiucao.github.io/post/100-temp/snap_20250604_hu_c0ebe3de7cb5ff7c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="47"
data-flex-basis="114px"
>&lt;/p>
&lt;p>项目的Readme介绍文档：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/100-temp/snap_20250604-1.png"
width="370"
height="786"
srcset="https://chengxiaqiucao.github.io/post/100-temp/snap_20250604-1_hu_7bed51d8dddf4aa.png 480w, https://chengxiaqiucao.github.io/post/100-temp/snap_20250604-1_hu_6f4f94686a931250.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="47"
data-flex-basis="112px"
>&lt;/p>
&lt;p>以下就是上一个月最受欢迎的几个开源项目，我们也一起了解下，现在最受关注的项目都是哪些？&lt;/p>
&lt;h2 id="1-bytedancedeer-flow">1. &lt;strong>bytedance/deer-flow&lt;/strong>
&lt;/h2>&lt;p>字节跳动的&lt;strong>深度研究框架&lt;/strong>，基于LangChain/LangGraph构建多智能体（Multi-Agent）系统，支持复杂任务如自动生成研究报告、PPT及双人播客（借助火山引擎TTS）。其创新点包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Replay模式&lt;/strong>：可视化多轮Agent协作流程，便于调试与学习。&lt;/li>
&lt;li>&lt;strong>人机协同&lt;/strong>：用户可通过自然语言实时修改AI生成内容，动态调整研究方向和细节。&lt;/li>
&lt;li>&lt;strong>高效架构&lt;/strong>：通过&amp;quot;Handoffs&amp;quot;机制减少Token消耗，优化任务执行流程。&lt;br>
&lt;strong>适用场景&lt;/strong>：自动化内容生成、学术研究助手。需Python 3.12+和Node.js 22+环境部署。&lt;/li>
&lt;/ul>
&lt;p>总之，把AI打造成一个小团队，协作完成一些复杂任务。而且随时插手实时改变它的工作方向，不至于看AI在错误的方向上一路狂奔！&lt;/p>
&lt;blockquote>
&lt;p>GitHub：https://github.com/bytedance/deer-flow&lt;/p>&lt;/blockquote>
&lt;h2 id="2-agentcodeecursor-free-everyday">2. &lt;strong>agentcodee/cursor-free-everyday&lt;/strong>
&lt;/h2>&lt;p>破解&lt;strong>Cursor Pro版限制&lt;/strong>的工具，解决官方14天试用期后的功能封锁问题（如GPT-4调用次数限制）。特点包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>自动账号管理&lt;/strong>：一键获取临时账号，绕过设备绑定限制。&lt;/li>
&lt;li>&lt;strong>全平台支持&lt;/strong>：兼容Windows/macOS/Linux，提供图形化激活程序。&lt;/li>
&lt;li>&lt;strong>免费开源&lt;/strong>：社区驱动，持续更新适配新版本。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>一句话&lt;/strong>：绕过Cursor IDE的14天试用限制，白嫖GPT-4写代码。&lt;/p>
&lt;blockquote>
&lt;p>GitHub：https://github.com/agentcodee/cursor-free-everyday&lt;/p>&lt;/blockquote>
&lt;h2 id="3-ngxsonsmolvlm-realtime-webcam">3. &lt;strong>ngxson/smolvlm-realtime-webcam&lt;/strong>
&lt;/h2>&lt;p>基于&lt;strong>轻量视觉模型SmolVLM&lt;/strong>（20亿参数）的实时摄像头处理工具，专为边缘计算设计。核心优势：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>低资源需求&lt;/strong>：预加载模型+多线程优化，低配设备可流畅运行。&lt;/li>
&lt;li>&lt;strong>即插即用&lt;/strong>：提供Python/Node.js脚手架，快速实现物体识别、人流统计等功能。&lt;/li>
&lt;li>&lt;strong>端侧适配&lt;/strong>：图像Token压缩率提升9倍，推理速度较同类模型快3-16倍。&lt;/li>
&lt;/ul>
&lt;p>用2B参数小模型就可以在普通电脑跑实时图像识别。&lt;/p>
&lt;blockquote>
&lt;p>GitHub：https://github.com/ngxson/smolvlm-realtime-webcam&lt;/p>&lt;/blockquote>
&lt;h2 id="4-enescingozawesome-n8n-templates生态项目">4. &lt;strong>enescingoz/awesome-n8n-templates&lt;/strong>（生态项目）
&lt;/h2>&lt;p>&lt;strong>n8n自动化工具的模板库&lt;/strong>，提供开箱即用的工作流示例（如滴答清单同步Notion）。技术亮点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>事件驱动架构&lt;/strong>：通过HTTP节点、Shell脚本节点灵活集成第三方API。&lt;/li>
&lt;li>&lt;strong>低成本自托管&lt;/strong>：支持Docker部署，替代Zapier等高成本方案。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>：可结合OpenAI API增强自动化逻辑（如邮件自动分类）。&lt;/li>
&lt;/ul>
&lt;p>n8n是智能工作流的主流方案，这个库其实就是提供大量抄作业模板&lt;/p>
&lt;blockquote>
&lt;p>GitHub：https://github.com/enescingoz/awesome-n8n-templates&lt;/p>&lt;/blockquote>
&lt;h2 id="5-ag-ui-protocolag-ui">5. &lt;strong>ag-ui-protocol/ag-ui&lt;/strong>
&lt;/h2>&lt;p>&lt;strong>AI Agent与前端交互协议&lt;/strong>，标准化多智能体协作的通信流程。核心特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>事件驱动&lt;/strong>：定义16种标准事件（如状态同步、流式消息），支持SSE/WebSocket传输。&lt;/li>
&lt;li>&lt;strong>框架兼容&lt;/strong>：无缝接入LangGraph、CrewAI等Agent框架。&lt;/li>
&lt;li>&lt;strong>安全路由&lt;/strong>：通过Secure Proxy中间件保障通信安全。&lt;/li>
&lt;/ul>
&lt;p>通过这个库，规范化了AI和前端界面的交互标准，突破长时间等待AI出结果以及在任务执行中随时干预的优点。&lt;/p>
&lt;blockquote>
&lt;p>GitHub：https://github.com/ag-ui-protocol/ag-ui&lt;/p>&lt;/blockquote></description></item><item><title>AI技巧，用本地Deepseek也可以生图啦</title><link>https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/</link><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613.png" alt="Featured image of post AI技巧，用本地Deepseek也可以生图啦" />&lt;blockquote>
&lt;p>我们都知道，Deepseek是个文本模型，不具备生成图像能力。而在线的各种图像生成AI要么收费，要么有额度限制，这里就跟大家分享一个通过本地部署的Deepseek，全免费的AI生图技巧。&lt;/p>&lt;/blockquote>
&lt;h2 id="ai生图接口">AI生图接口
&lt;/h2>&lt;p>Deepseek本身目前当然是没办法生成图片，但 github 这个宝藏，自然是能找到惊喜。本文我们介绍的这个图像生成工具，来自一个德国的AI初创公司，支持文生图、文生音频等功能。&lt;/p>
&lt;h3 id="pollinationsai-介绍">pollinations.ai 介绍
&lt;/h3>&lt;p>该项目支持通过基本的Restful API接口来完成图像的生成。&lt;/p>
&lt;p>开源项目地址：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/pollinations/pollinations" target="_blank" rel="noopener"
>https://github.com/pollinations/pollinations&lt;/a>&lt;/p>
&lt;p>官网：&lt;/p>
&lt;p>&lt;a class="link" href="https://pollinations.ai/" target="_blank" rel="noopener"
>https://pollinations.ai/&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613.png"
width="1900"
height="736"
srcset="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613_hu_8e574bda685cf311.png 480w, https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613_hu_d0e934fe2a6c5b3d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="619px"
>&lt;/p>
&lt;p>官网虽简陋，但无需注册和密钥，开源免费，简直太香了&lt;/p>
&lt;h3 id="api定义">API定义
&lt;/h3>&lt;p>生成图像的API 是最基本的 &lt;code>get&lt;/code> 方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">GET https://image.pollinations.ai/prompt/{prompt}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>API支持的参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">参数&lt;/th>
&lt;th style="text-align: center">是否必须&lt;/th>
&lt;th style="text-align: center">作用&lt;/th>
&lt;th style="text-align: center">默认值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;code>prompt&lt;/code>&lt;/td>
&lt;td style="text-align: center">Yes&lt;/td>
&lt;td style="text-align: center">图像生成提示词&lt;/td>
&lt;td style="text-align: center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>model&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">使用的生图模型&lt;/td>
&lt;td style="text-align: center">&lt;code>flux&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>seed&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">随机种子&lt;/td>
&lt;td style="text-align: center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>width&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">图像宽度（像素）&lt;/td>
&lt;td style="text-align: center">1024&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>height&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">图像高度（像素）&lt;/td>
&lt;td style="text-align: center">1024&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>nologo&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">是否保留pollinations的logo&lt;/td>
&lt;td style="text-align: center">&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>private&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">是否公开生成的图像&lt;/td>
&lt;td style="text-align: center">&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>enhance&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">是否使用LLM增强提示词&lt;/td>
&lt;td style="text-align: center">&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>safe&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">十八禁&lt;/td>
&lt;td style="text-align: center">&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;code>transparent&lt;/code>&lt;/td>
&lt;td style="text-align: center">No&lt;/td>
&lt;td style="text-align: center">透明背景(仅gptimage model有效).&lt;/td>
&lt;td style="text-align: center">&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>支持的模型清单：&lt;/p>
&lt;ul>
&lt;li>&lt;code>flux&lt;/code>（基本模型）&lt;/li>
&lt;li>&lt;code>flux-pro&lt;/code>（加强效果）&lt;/li>
&lt;li>&lt;code>flux-realism&lt;/code>（写实风格）&lt;/li>
&lt;li>&lt;code>flux-anime&lt;/code>（动漫风格）&lt;/li>
&lt;li>&lt;code>flux-3d&lt;/code>（3D 风格）&lt;/li>
&lt;li>&lt;code>flux-cablyai&lt;/code>（未知）&lt;/li>
&lt;li>&lt;code>turbo&lt;/code>（快速生成）&lt;/li>
&lt;/ul>
&lt;p>http的get方法，其实通过html是可以直接请求并渲染的，这就给我们基于Deepseek来完成图像生成带来机会。也就是我们可以制定规则，让Deepseek生成需要的提示词，并按HTML格式将 pollinations api 生成的图像在html中呈现出来&lt;/p>
&lt;h2 id="本地deepseek和cherry-studio配置">本地Deepseek和cherry studio配置
&lt;/h2>&lt;p>本地通过 Ollama 部署 Deepseek，并通过cherry studio 交互的方法，在前文 【】中有详细描述，这里不再赘述。&lt;/p>
&lt;p>本地运行 Deepseek 模型后，比如 &lt;code>deepseek-r1:14b&lt;/code>, 打开cherry studio， 增加一个角色，如图像生成助手。并设置其系统提示词，定义相关规则(具体提示词参见文末)&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613-1.png"
width="1901"
height="1004"
srcset="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613-1_hu_34b11996a56598f6.png 480w, https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613-1_hu_4096203d1e2a2826.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>接下来，测试一下，在 cherry studio 中输入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">秋天，古城墙根下，一丛荒草随风摇摆 动漫风格，16:9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Deepseek 经过一番思考，成功生成了一幅 &lt;strong>城下秋草图&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613-2.png"
width="1504"
height="1773"
srcset="https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613-2_hu_f78de925c2993027.png 480w, https://chengxiaqiucao.github.io/post/095-deepseek%E7%94%9F%E5%9B%BE/snap_20250613-2_hu_68c75c1b14119bbc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="203px"
>&lt;/p>
&lt;p>大家快试试吧~~&lt;/p>
&lt;h3 id="附">附：
&lt;/h3>&lt;p>提示词设定规则模板&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#角色：你是一个专业的图像创作助手
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">#技能：能根据用户输入的简单描述，生成一幅完整画面的&amp;#34;详细描述&amp;#34;。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">#规则：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">用户输入的简单描述，插入到【输出】的{&lt;/span>&lt;span class="n">user_prompt&lt;/span>&lt;span class="err">}部分&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">生成的&lt;/span>&lt;span class="s2">&amp;#34;详细描述&amp;#34;&lt;/span>&lt;span class="err">尽可能全面，细节丰富，从图像的专业生成角度补充如光线使用、构图、材质、视角、色彩、渲染方式等。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">将&lt;/span>&lt;span class="s2">&amp;#34;详细描述&amp;#34;&lt;/span>&lt;span class="err">插入到【输出】的{&lt;/span>&lt;span class="n">ai_chinese_prompt&lt;/span>&lt;span class="err">}部分&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">将&lt;/span>&lt;span class="s2">&amp;#34;详细描述&amp;#34;&lt;/span>&lt;span class="err">完整、准确翻译成英文，插入到【输出】的{&lt;/span>&lt;span class="n">ai_english_prompt&lt;/span>&lt;span class="err">}部分&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">如果用户的描述中包含高度信息，直接插入到【输出】的{&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="err">}部分，否则插入默认值&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1280&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">如果用户的描述中包含宽度信息，直接插入到【输出】的{&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="err">}部分，否则插入默认值&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1280&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">如果出现比例，指宽&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">高，宽度默认用&lt;/span>&lt;span class="mi">1280&lt;/span>&lt;span class="err">，根据比例计算高度，插入到【输出】的{&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="err">}部分&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">随机生成一个整数，插入到【输出】的{&lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="err">}部分&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">根据用户对画面风格的描述，选择对应的模型。如果用户没有特别指定，从下面&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">个模型中随机选一个模型，插入到【输出】的{&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="err">}部分&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">flux&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（基本模型）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">flux&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pro&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（加强效果）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">flux&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">realism&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（写实风格）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">flux&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">anime&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（动漫风格）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">flux&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">风格）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">flux&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">cablyai&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（未知）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">turbo&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">（快速生成）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">输出结果直接渲染，不展示为代码块&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">#输出：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">Image&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Generator&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">h2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">ai_chinese_prompt&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">h2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">h4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">ai_english_prompt&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">h4&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://image.pollinations.ai/prompt/{ai_english_prompt}?width={width}&amp;amp;height={height}&amp;amp;seed={seed}&amp;amp;enhance=true&amp;amp;private=true&amp;amp;nologo=true&amp;amp;safe=false&amp;amp;model={model}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">alt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{user_prompt}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Cursor收费？没事，咱们还有codebuddy！</title><link>https://chengxiaqiucao.github.io/post/092-codebuddy/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/092-codebuddy/</guid><description>&lt;p>之前我们介绍通过AI生成自动化测试代码，以及通过 mcp server 控制浏览器，使用的是AI编程IDE &lt;strong>Cursor&lt;/strong>, Cursor以其强大的智能分析和辅助编程能力，在我们用自然语言给出一个编程需求时，即可自动帮我们完成代码的实现，高效且效果很好。但 Cursor 并不是一个免费软件，试用期结束后，作为日常工具的话，费用还是比较高昂。&lt;/p>
&lt;p>但现在，腾讯也出手推出了一个代码助手，正是本文主角，CodeBuddy。编程能力比Cursor不遑多让，更是对小程序这样腾讯生态下的应用有光环加成，更重要的是：完全免费！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601.png"
width="1864"
height="748"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601_hu_a6a7c5383c51629a.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601_hu_6bca803f41c61e5a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;p>CodeBuddy本身并没有提供单独的IDE，但是对于各种主流IDE，都提供了插件支持&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-2.png"
width="1347"
height="343"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-2_hu_14512690b13ddb8a.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-2_hu_8d6b89237956795d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>&lt;/p>
&lt;p>在各款开发工具的插件市场中搜索”腾讯云代码助手“，均能找到对应插件，相应进行安装即可&lt;/p>
&lt;p>以vs code为例，插件安装后，打开插件界面，即可类似Copilot或Cursor的助手页面那样进行编程辅助， 在CodeBuddy中，称为 &lt;strong>Craft&lt;/strong> 模式&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-3.png"
width="1920"
height="1080"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-3_hu_cc0331be89deb021.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-3_hu_34205d90cfba55c2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>除了辅助生成代码这个模式，还包括Chat模式，可以类似生成式AI那样进行对话交流。&lt;/p>
&lt;p>此外Code Review模式可以帮助完成已有代码的评审，Unit Test则会针对当前代码自动编写单元测试脚本。&lt;/p>
&lt;h2 id="小程序开发实测">小程序开发实测
&lt;/h2>&lt;p>而CodeBuddy本身基于腾讯生态，对于像小程序开发这样的工作，可以说是有着先天的右手。&lt;/p>
&lt;p>这里笔者在微信开发者工具中，安装CodeBuddy插件之后，仅仅通过几次交互问答，就帮助我完成了一个小程序的实现。&lt;/p>
&lt;p>如下，就是我通过它完成的获取Github最近一个月最热门仓库的实现，总用时大概10多分钟，实测可用且界面友好。&lt;/p>
&lt;p>以后可能真的人人都是开发者，即便对编程不甚了解，只要有想法，也能轻松转化为现实！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-1.png"
width="1848"
height="937"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-1_hu_a9b662602227106e.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-1_hu_4d774c2fbd25080f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>附上完成这个应用的完整交互过程&lt;/p>
&lt;blockquote>
&lt;p>请帮我开发一个简单的小程序，获取github上当日最热门的5个repo的介绍，界面重点突出，保证视觉效果&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CodeBuddy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">用户需要一个小程序来展示GitHub上当日最热门的5个仓库，并且要求界面视觉效果突出。我需要进一步了解用户的需求，并收集一些信息来制定合适的计划。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先，我需要明确以下几点：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 小程序的平台 - 是Web应用、移动应用还是桌面应用？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 技术栈偏好 - 用户是否有特定的编程语言或框架偏好？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. &amp;#34;当日最热门&amp;#34;的定义 - 是基于星标数、fork数还是其他指标？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 视觉效果的具体要求 - 用户对UI/UX有什么特定的期望？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 功能需求 - 除了展示仓库介绍外，是否需要其他功能，如点击跳转到仓库页面等？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我先看看项目目录结构，了解当前的环境：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根目录0个文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">明白了，这是一个全新的项目。让我与用户进行需求澄清，以便更好地规划这个项目。我需要询问一些关键问题来确保我们能够开发出符合用户期望的应用。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为了更好地帮助您开发这个展示GitHub热门仓库的应用，我需要确认一些关键细节：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **平台选择**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 您期望这个应用是网页应用（Web App）还是桌面应用（Desktop App）？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **技术栈偏好**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 您是否有特定的编程语言或框架偏好？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 比如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Web应用：React、Vue、Angular等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 桌面应用：Electron、Python+Qt等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **UI/视觉需求**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 您对视觉效果有什么具体期望？比如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 深色/浅色主题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 卡片式布局
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 动画效果等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **功能细节**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 除了显示仓库名称和介绍外，您是否需要显示：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库星标数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 作者信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编程语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 直接跳转链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 是否需要自动刷新功能？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">请告诉我您的偏好，这样我可以制定一个更符合您需求的具体实现方案。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>平台：微信小程序；技术偏好：vue；视觉效果：现代简约；功能：包含当前建议功能&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CodeBuddy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">感谢用户的回复，现在我有了更明确的需求信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 平台：微信小程序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 技术偏好：Vue (在微信小程序中，我们可以使用类似Vue的MVVM框架，即微信小程序原生开发方式)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 视觉效果：现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 功能：包含我建议的功能，即：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示仓库名称和介绍
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示仓库星标数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示作者信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示编程语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 提供直接跳转链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我可以制定一个更具体的实施计划。微信小程序开发需要使用微信开发者工具，并且需要调用GitHub API来获取热门仓库信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">感谢您的回复！基于您提供的信息，我们将开发一个**微信小程序**，使用**类Vue的开发方式**，采用**现代简约**的视觉风格，展示GitHub当日最热门的5个仓库。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">还有几个技术细节需要确认：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **GitHub API 访问方式**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 微信小程序对跨域请求有限制，我们需要考虑如何调用GitHub API
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选项1：使用云函数作为中间层（推荐，更安全且避免跨域问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选项2：直接在小程序中调用API（可能面临跨域限制）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **热门仓库的定义**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- GitHub API提供多种排序方式，您希望基于哪种指标来定义&amp;#34;热门&amp;#34;？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 当日新增星标数最多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 总星标数最多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 当日新建且受关注度高的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **刷新机制**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 是否需要下拉刷新功能？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 是否需要定时自动刷新（如每小时更新一次）？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些信息将帮助我设计一个更符合您期望的小程序方案。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>github API使用云函数，热门指标：当日新增星标最多；启动App时进行刷新即可&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;span class="lnt">261
&lt;/span>&lt;span class="lnt">262
&lt;/span>&lt;span class="lnt">263
&lt;/span>&lt;span class="lnt">264
&lt;/span>&lt;span class="lnt">265
&lt;/span>&lt;span class="lnt">266
&lt;/span>&lt;span class="lnt">267
&lt;/span>&lt;span class="lnt">268
&lt;/span>&lt;span class="lnt">269
&lt;/span>&lt;span class="lnt">270
&lt;/span>&lt;span class="lnt">271
&lt;/span>&lt;span class="lnt">272
&lt;/span>&lt;span class="lnt">273
&lt;/span>&lt;span class="lnt">274
&lt;/span>&lt;span class="lnt">275
&lt;/span>&lt;span class="lnt">276
&lt;/span>&lt;span class="lnt">277
&lt;/span>&lt;span class="lnt">278
&lt;/span>&lt;span class="lnt">279
&lt;/span>&lt;span class="lnt">280
&lt;/span>&lt;span class="lnt">281
&lt;/span>&lt;span class="lnt">282
&lt;/span>&lt;span class="lnt">283
&lt;/span>&lt;span class="lnt">284
&lt;/span>&lt;span class="lnt">285
&lt;/span>&lt;span class="lnt">286
&lt;/span>&lt;span class="lnt">287
&lt;/span>&lt;span class="lnt">288
&lt;/span>&lt;span class="lnt">289
&lt;/span>&lt;span class="lnt">290
&lt;/span>&lt;span class="lnt">291
&lt;/span>&lt;span class="lnt">292
&lt;/span>&lt;span class="lnt">293
&lt;/span>&lt;span class="lnt">294
&lt;/span>&lt;span class="lnt">295
&lt;/span>&lt;span class="lnt">296
&lt;/span>&lt;span class="lnt">297
&lt;/span>&lt;span class="lnt">298
&lt;/span>&lt;span class="lnt">299
&lt;/span>&lt;span class="lnt">300
&lt;/span>&lt;span class="lnt">301
&lt;/span>&lt;span class="lnt">302
&lt;/span>&lt;span class="lnt">303
&lt;/span>&lt;span class="lnt">304
&lt;/span>&lt;span class="lnt">305
&lt;/span>&lt;span class="lnt">306
&lt;/span>&lt;span class="lnt">307
&lt;/span>&lt;span class="lnt">308
&lt;/span>&lt;span class="lnt">309
&lt;/span>&lt;span class="lnt">310
&lt;/span>&lt;span class="lnt">311
&lt;/span>&lt;span class="lnt">312
&lt;/span>&lt;span class="lnt">313
&lt;/span>&lt;span class="lnt">314
&lt;/span>&lt;span class="lnt">315
&lt;/span>&lt;span class="lnt">316
&lt;/span>&lt;span class="lnt">317
&lt;/span>&lt;span class="lnt">318
&lt;/span>&lt;span class="lnt">319
&lt;/span>&lt;span class="lnt">320
&lt;/span>&lt;span class="lnt">321
&lt;/span>&lt;span class="lnt">322
&lt;/span>&lt;span class="lnt">323
&lt;/span>&lt;span class="lnt">324
&lt;/span>&lt;span class="lnt">325
&lt;/span>&lt;span class="lnt">326
&lt;/span>&lt;span class="lnt">327
&lt;/span>&lt;span class="lnt">328
&lt;/span>&lt;span class="lnt">329
&lt;/span>&lt;span class="lnt">330
&lt;/span>&lt;span class="lnt">331
&lt;/span>&lt;span class="lnt">332
&lt;/span>&lt;span class="lnt">333
&lt;/span>&lt;span class="lnt">334
&lt;/span>&lt;span class="lnt">335
&lt;/span>&lt;span class="lnt">336
&lt;/span>&lt;span class="lnt">337
&lt;/span>&lt;span class="lnt">338
&lt;/span>&lt;span class="lnt">339
&lt;/span>&lt;span class="lnt">340
&lt;/span>&lt;span class="lnt">341
&lt;/span>&lt;span class="lnt">342
&lt;/span>&lt;span class="lnt">343
&lt;/span>&lt;span class="lnt">344
&lt;/span>&lt;span class="lnt">345
&lt;/span>&lt;span class="lnt">346
&lt;/span>&lt;span class="lnt">347
&lt;/span>&lt;span class="lnt">348
&lt;/span>&lt;span class="lnt">349
&lt;/span>&lt;span class="lnt">350
&lt;/span>&lt;span class="lnt">351
&lt;/span>&lt;span class="lnt">352
&lt;/span>&lt;span class="lnt">353
&lt;/span>&lt;span class="lnt">354
&lt;/span>&lt;span class="lnt">355
&lt;/span>&lt;span class="lnt">356
&lt;/span>&lt;span class="lnt">357
&lt;/span>&lt;span class="lnt">358
&lt;/span>&lt;span class="lnt">359
&lt;/span>&lt;span class="lnt">360
&lt;/span>&lt;span class="lnt">361
&lt;/span>&lt;span class="lnt">362
&lt;/span>&lt;span class="lnt">363
&lt;/span>&lt;span class="lnt">364
&lt;/span>&lt;span class="lnt">365
&lt;/span>&lt;span class="lnt">366
&lt;/span>&lt;span class="lnt">367
&lt;/span>&lt;span class="lnt">368
&lt;/span>&lt;span class="lnt">369
&lt;/span>&lt;span class="lnt">370
&lt;/span>&lt;span class="lnt">371
&lt;/span>&lt;span class="lnt">372
&lt;/span>&lt;span class="lnt">373
&lt;/span>&lt;span class="lnt">374
&lt;/span>&lt;span class="lnt">375
&lt;/span>&lt;span class="lnt">376
&lt;/span>&lt;span class="lnt">377
&lt;/span>&lt;span class="lnt">378
&lt;/span>&lt;span class="lnt">379
&lt;/span>&lt;span class="lnt">380
&lt;/span>&lt;span class="lnt">381
&lt;/span>&lt;span class="lnt">382
&lt;/span>&lt;span class="lnt">383
&lt;/span>&lt;span class="lnt">384
&lt;/span>&lt;span class="lnt">385
&lt;/span>&lt;span class="lnt">386
&lt;/span>&lt;span class="lnt">387
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CodeBuddy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">非常感谢用户的进一步澄清。现在我有了完整的需求信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 平台：微信小程序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 技术偏好：Vue风格的微信小程序开发
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 视觉效果：现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. GitHub API访问方式：使用云函数作为中间层
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 热门仓库定义：当日新增星标数最多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 刷新机制：启动App时进行刷新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">基于这些信息，我可以制定一个详细的实施计划，包括项目结构、主要功能模块、UI设计思路以及开发步骤。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># GitHub热门仓库微信小程序开发计划
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**项目概述**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">开发一个微信小程序，展示GitHub当日新增星标数最多的5个仓库，采用现代简约的UI设计，使用云函数调用GitHub API。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**技术栈**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 前端：微信小程序原生开发（WXML, WXSS, JS）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 后端：微信云开发（云函数）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- API：GitHub REST API
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**项目结构**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">`├── miniprogram/ # 小程序前端代码 │ ├── pages/ # 页面文件 │ │ ├── index/ # 主页面 │ │ └── detail/ # 详情页面（可选） │ ├── components/ # 自定义组件 │ │ └── repo-card/ # 仓库卡片组件 │ ├── images/ # 图标和图片资源 │ ├── styles/ # 公共样式 │ └── utils/ # 工具函数 └── cloudfunctions/ # 云函数 └── getHotRepos/ # 获取热门仓库的云函数`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**功能模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**1. 云函数模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建`getHotRepos`云函数，负责：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 调用GitHub API获取当日新增星标最多的仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 数据处理和过滤，返回前5个仓库的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 处理API请求限制和错误情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**2. 前端展示模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 主页面（index）：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 顶部标题栏，展示应用名称和刷新状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库列表区域，使用卡片式布局展示5个热门仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 加载状态和错误提示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库卡片组件（repo-card）：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库名称和描述
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 作者信息和头像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 星标数（总数和今日新增）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编程语言（带颜色标识）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 跳转按钮（可打开web-view或复制链接）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**3. 数据交互模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 应用启动时自动调用云函数获取数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现下拉刷新功能（可选）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 数据缓存机制，减少不必要的API调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**UI设计思路**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配色方案：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 主色调：GitHub深蓝色 (#0366d6)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 背景色：浅灰色或白色 (#f6f8fa)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 强调色：GitHub绿色 (#2ea44f)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 卡片设计：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 圆角矩形卡片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 适当的阴影效果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 信息层次分明
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 动效：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 加载动画
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 卡片点击反馈
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 平滑的列表滚动效果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**开发步骤**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **项目初始化**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建微信小程序项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置云开发环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **云函数开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编写获取GitHub热门仓库的云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试API调用和数据处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **前端页面开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 设计并实现主页面布局
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 开发仓库卡片组件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现数据加载和展示逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **样式优化**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 应用现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 优化视觉效果和交互体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. **功能测试与优化**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试数据加载和展示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 优化性能和用户体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. **发布与部署**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置小程序基本信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 提交审核并发布
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**注意事项**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- GitHub API有请求频率限制，需要合理设计缓存策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 微信小程序对网络请求和页面大小有限制，需注意性能优化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 确保UI在不同尺寸的设备上都有良好的展示效果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根据用户提供的开发计划，我需要开发一个微信小程序，展示GitHub当日新增星标数最多的5个仓库。这个项目需要使用微信小程序原生开发和云开发。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先，我需要创建项目的基本结构，包括：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 创建小程序前端代码结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 创建云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 实现主要功能模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我先检查当前目录是否为空，然后开始创建项目结构。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根目录0个文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">目录为空，我们需要从头开始创建项目结构。首先创建基本的项目目录结构，包括小程序前端代码和云函数目录。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我们先创建以下关键文件：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. project.config.json - 小程序项目配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. app.json - 小程序全局配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. app.js - 小程序入口文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. app.wxss - 小程序全局样式文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们先创建项目配置文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">project.config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+78 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们已经创建了项目配置文件，接下来需要创建小程序的基本结构。首先创建miniprogram目录，然后在其中创建app.js、app.json和app.wxss文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 创建miniprogram目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 创建app.js - 小程序入口文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 创建app.json - 小程序全局配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 创建app.wxss - 小程序全局样式文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们先创建miniprogram目录，然后创建这些基本文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p miniprogram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">目录创建成功，现在让我们创建小程序的基本文件。首先创建app.json，配置小程序的全局设置，包括页面路径、窗口样式等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/app.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+16 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建app.js文件，这是小程序的入口文件，用于初始化小程序。我们将在这里初始化云开发环境。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/app.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+22 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接下来创建app.wxss文件，定义全局样式。我们将使用GitHub的配色方案，并定义一些通用样式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/app.wxss
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+80 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建主页面（index）的相关文件。我们需要在miniprogram/pages/index/目录下创建以下文件：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. index.js - 页面逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. index.wxml - 页面结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. index.wxss - 页面样式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. index.json - 页面配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先创建index目录，然后创建这些文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p miniprogram/pages/index
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">目录创建成功，现在让我们创建index页面的文件。首先创建index.wxml，设计页面的基本结构，包括加载状态、仓库列表等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.wxml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+58 -2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建index.wxss文件，为主页面添加样式。我们将使用现代简约的设计风格，包括卡片式布局、适当的阴影效果等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.wxss
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+144 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接下来创建index.js文件，实现页面的业务逻辑，包括：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 页面加载时获取热门仓库数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 处理刷新操作
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 实现复制链接和打开仓库等功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+78 -40
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建index.json文件，配置页面的基本设置，包括启用下拉刷新等功能。然后我们需要创建云函数getHotRepos来获取GitHub热门仓库数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+7 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建一些必要的图片资源。我们需要在miniprogram目录下创建images文件夹，并准备一些基本图标，如加载图标、星标图标等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先创建images目录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p miniprogram/images
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建云函数getHotRepos。首先创建cloudfunctions目录和getHotRepos云函数目录，然后创建云函数的相关文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 创建cloudfunctions/getHotRepos目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 创建package.json和index.js文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p cloudfunctions/getHotRepos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建云函数的package.json文件，添加必要的依赖，包括用于发起HTTP请求的axios。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cloudfunctions/getHotRepos/package.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+17 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建云函数的主文件index.js，实现获取GitHub热门仓库的逻辑。我们将：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 使用GitHub API搜索仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 按照当日新增星标数排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 获取前5个仓库的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 处理错误情况和API限制
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cloudfunctions/getHotRepos/index.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+144 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建一些基本的图标文件。由于我们无法直接创建二进制图片文件，我们可以创建一个sitemap.json文件，这是微信小程序必需的文件，用于配置小程序的索引规则。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">然后，我们可以创建一个README.md文件，提供项目的说明和使用指南。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/sitemap.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+8 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在让我们创建一个README.md文件，提供项目的详细说明、安装步骤和使用指南。这将帮助其他开发者理解和使用这个项目。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+88 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们已经完成了项目的基本结构和核心功能的开发。让我们总结一下已完成的工作和下一步需要用户进行的操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 已完成的工作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了完整的项目结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了主页面的UI和逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了云函数获取GitHub热门仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了项目文档
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 用户需要进行的操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置微信开发者工具和AppID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 开通云开发环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置GitHub Token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 上传和部署云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在images目录中添加必要的图标文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我使用attempt_completion工具来总结项目的完成状态和后续步骤。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># GitHub热门仓库小程序开发完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**已完成的开发工作**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **项目结构搭建**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了完整的微信小程序项目结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置了必要的项目文件（project.config.json, app.json等）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了云函数目录结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **前端开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了主页面（index）的完整功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 设计了现代简约风格的UI界面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了下拉刷新等交互功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **后端开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了getHotRepos云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 集成了GitHub API的调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了数据处理和错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **文档编写**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了详细的README.md文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 提供了完整的安装和使用说明
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**后续步骤**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">要运行这个项目，您需要：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **环境配置**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 使用微信开发者工具打开项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在project.config.json中配置您的AppID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 开通云开发并创建云环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在app.js中配置云环境ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **资源准备**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在miniprogram/images/目录下添加必要的图标：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- loading.gif（加载动画）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- star.png（星标图标）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **云函数部署**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 进入cloudfunctions/getHotRepos目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 安装依赖：npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在云开发控制台中配置GitHub Token（可选）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 上传并部署云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **运行测试**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编译运行项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试数据加载功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试下拉刷新功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试仓库链接复制功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**注意事项**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 请确保正确配置了所有必要的环境变量和配置项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 建议配置GitHub Token以避免API限制
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 首次运行时需要等待云函数部署完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 如遇到问题，请查看README.md中的详细说明
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">项目源码已经准备就绪，您可以按照上述步骤开始使用和测试了。如果有任何问题，欢迎参考README.md文件或提出问题。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>AutoHotKey：让效率倍增的桌面自动化利器</title><link>https://chengxiaqiucao.github.io/post/085-autohotkey/</link><pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/085-autohotkey/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>之前在介绍Markdown文档中图片处理方法的文章 【&lt;a class="link" href="https://mp.weixin.qq.com/s/Mom021usUHUFwE8aGXVtVg" target="_blank" rel="noopener"
>本地Markdown编写的文档，发布到网上如何处理图片？&lt;/a>】 中，介绍了可以使用 &lt;strong>AutoHotKey&lt;/strong> 来辅助完成截图和链接的自动生成。有小伙伴私信问这个工具的具体用法。&lt;/p>
&lt;p>下文我们就比较系统地介绍下这个工具，了解通过ahk的脚本魔法，如何让重复操作一键完成！&lt;/p>
&lt;h2 id="ahk简介">AHK简介
&lt;/h2>&lt;p>在追求效率的软件开发与技术工作中，&lt;strong>重复性操作&lt;/strong>往往吞噬宝贵时间。AutoHotkey（AHK）作为一款轻量级、开源的&lt;strong>Windows桌面自动化工具&lt;/strong>。可以通过编写简洁的脚本，将用户从繁琐、重复的键盘鼠标操作中解放出来，显著提升工作效率。&lt;/p>
&lt;p>理解AHK的关键在于其&lt;strong>脚本语言&lt;/strong>。核心功能包括模拟键盘输入（&lt;code>Send&lt;/code>）、鼠标操作（&lt;code>Click&lt;/code>）、程序运行（&lt;code>Run&lt;/code>）、条件判断（&lt;code>If&lt;/code>）和循环控制（&lt;code>Loop&lt;/code>）等。用户无需编译环境，脚本文件（&lt;code>.ahk&lt;/code>）可直接运行，资源占用极低。&lt;/p>
&lt;p>AHK的应用场景极为广泛。简单如自动填写表单、快捷输入预设短语；进阶如批量重命名文件、自动化软件测试、定制专属工作流；甚至可开发带有图形界面（GUI）的小工具。其强大之处在于&lt;strong>深度集成Windows系统&lt;/strong>，能够操作窗口、读写注册表、访问文件系统，实现高度的定制化自动化。&lt;/p>
&lt;p>简单来说，AutoHotKey 赋予了用户&lt;strong>用脚本指挥电脑&lt;/strong>的能力。无论是开发者、办公人员还是追求效率的普通用户，都能通过它定制专属的“快捷键魔法”，将重复劳动转化为瞬间完成的自动化操作。&lt;/p>
&lt;h2 id="ahk-核心语法与常用函数">AHK 核心语法与常用函数
&lt;/h2>&lt;h3 id="基础热键">**基础热键
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>热键定义&lt;/strong>：由一个热键后跟双冒号组成.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">^&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="c1"> ; Ctrl+J 热键&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Hello&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="c1"> ; 发送文本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果只有一行执行的操作， &lt;code>return&lt;/code> 也可省略&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>&lt;code>#&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Win 键 (Windows 徽标键)&lt;br>- 等待 Win 释放后发送文本（Vista+）&lt;br>- 可能导致额外模拟击键（详见 &lt;code>#MenuMaskKey&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>!&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Alt 键&lt;br>- 可能导致额外模拟击键（详见 &lt;code>#MenuMaskKey&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>^&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Ctrl 键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>+&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Shift 键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;amp;&lt;/code>&lt;/strong>&lt;/td>
&lt;td>组合任意两个按键/鼠标按钮创建自定义热键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;lt;&lt;/code>&lt;/strong>&lt;/td>
&lt;td>使用成对按键中的左侧键（如 &lt;code>&amp;lt;!a&lt;/code> 仅左 Alt 触发）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;gt;&lt;/code>&lt;/strong>&lt;/td>
&lt;td>使用成对按键中的右侧键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;lt;^&amp;gt;!&lt;/code>&lt;/strong>&lt;/td>
&lt;td>AltGr 键（替代图形键）&lt;br>- 表示 AltGr 组合键（如 &lt;code>&amp;lt;^&amp;gt;!m&lt;/code>）&lt;br>- 单独使用：&lt;code>LControl &amp;amp; RAlt&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>*&lt;/code>&lt;/strong>&lt;/td>
&lt;td>通配符：即使附加修饰键按住也能触发&lt;br>- 示例：&lt;code>*#c&lt;/code>（Win+C/Shift+Win+C 等均触发）&lt;br>- 强制使用键盘钩子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>~&lt;/code>&lt;/strong>&lt;/td>
&lt;td>保留按键原生功能（不屏蔽操作系统事件）&lt;br>- 示例：&lt;code>~RButton&lt;/code>（右键点击仍发送到窗口）&lt;br>- 影响所有组合行为&lt;br>- 强制使用键盘钩子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$&lt;/code>&lt;/strong>&lt;/td>
&lt;td>强制使用键盘钩子，避免 Send 命令触发自身&lt;br>- 对鼠标热键无效&lt;br>- 替代方案：&lt;code>#InputLevel&lt;/code>/&lt;code>SendLevel&lt;/code> (v1.1.06+)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>UP&lt;/code>&lt;/strong>&lt;/td>
&lt;td>在按键释放时触发（非按下时）&lt;br>- 示例：&lt;code>^!r Up::&lt;/code>（释放 Ctrl+Alt+R 触发）&lt;br>- 限制：&lt;br> 1) 不适用于控制器按钮&lt;br> 2) 需配合普通热键避免卡键&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>示例&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">#a::&lt;/span>&lt;span class="n">Run&lt;/span> &lt;span class="n">Calculator&lt;/span>&lt;span class="c1"> ; Win+A 启动计算器&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">^!+&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Send&lt;/span> &lt;span class="n">Hello&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="c1"> ; Ctrl+Alt+Shift+S 发送文本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">RButton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MsgBox&lt;/span> &lt;span class="n">Right&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="c1"> ; 保留右键原生功能的弹窗&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="n">LWin&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Reload&lt;/span>&lt;span class="c1"> ; 左Win+R 重载脚本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">#c&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Run&lt;/span> &lt;span class="n">cmd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="c1"> ; 任何修饰键+Win+C 启动命令提示符&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">^!&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="n">Up&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MsgBox&lt;/span> &lt;span class="n">Released&lt;/span>&lt;span class="c1"> ; 释放组合键时触发&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="热字串">热字串
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>热字串&lt;/strong>：由一个冒号, 零个或多个选项, 另一个冒号, 缩写字符和双冒号组成.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">:*:&lt;/span>&lt;span class="n">btw&lt;/span>&lt;span class="o">::&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">way&lt;/span>&lt;span class="c1"> ; 输入btw后按空格/回车替换&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者也可以通过热字串执行复杂些的操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">:*:&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="c1"> ; 此热字串通过后面的命令把 &amp;#34;]d&amp;#34; 替换成当前日期和时间.&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">FormatTime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CurrentDateTime&lt;/span>&lt;span class="p">,,&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">yyyy&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">mm&lt;/span> &lt;span class="n">tt&lt;/span>&lt;span class="c1"> ; &lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">SendInput&lt;/span> &lt;span class="nv">%CurrentDateTime%&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="核心命令函数">&lt;strong>核心命令函数&lt;/strong>
&lt;/h3>&lt;p>常用的一些核心函数包括：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数名&lt;/th>
&lt;th>类别&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>&lt;code>FileExist&lt;/code>&lt;/strong>&lt;/td>
&lt;td>文件操作&lt;/td>
&lt;td>检查文件/文件夹是否存在并返回属性（如 &amp;ldquo;D&amp;rdquo; 表示目录）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>GetKeyState&lt;/code>&lt;/strong>&lt;/td>
&lt;td>输入检测&lt;/td>
&lt;td>检测键盘/鼠标按键状态，返回 1（按下）或 0（松开）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>InStr&lt;/code>&lt;/strong>&lt;/td>
&lt;td>字符串处理&lt;/td>
&lt;td>查找子串在字符串中的位置，支持从左/右搜索&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>StrLen&lt;/code>&lt;/strong>&lt;/td>
&lt;td>字符串处理&lt;/td>
&lt;td>获取字符串长度（字节数或字符数）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>SubStr&lt;/code>&lt;/strong>&lt;/td>
&lt;td>字符串处理&lt;/td>
&lt;td>截取字符串指定位置开始的子串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>WinActive&lt;/code>&lt;/strong>&lt;/td>
&lt;td>窗口控制&lt;/td>
&lt;td>检测指定窗口是否活动，返回窗口句柄（HWND）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>WinExist&lt;/code>&lt;/strong>&lt;/td>
&lt;td>窗口控制&lt;/td>
&lt;td>检测指定窗口是否存在，返回首个匹配窗口句柄&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>Format&lt;/code>&lt;/strong>&lt;/td>
&lt;td>数据处理&lt;/td>
&lt;td>格式化字符串（类似 sprintf 功能）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>DllCall&lt;/code>&lt;/strong>&lt;/td>
&lt;td>系统交互&lt;/td>
&lt;td>调用 Windows API 等外部 DLL 函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>Run&lt;/code>&lt;/strong>&lt;/td>
&lt;td>进程控制&lt;/td>
&lt;td>启动程序/执行命令（已在初稿列出，此处补充完整描述）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>示例:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 组合使用示例&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">if &lt;/span>&lt;span class="nf">WinActive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ahk_exe chrome.exe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nf">GetKeyState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Ctrl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;P&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">FileAppend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[%time%] Ctrl pressed in Chrome`n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">Send&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="c1"> ; 在Chrome中新建标签页&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量与表达式">&lt;strong>变量与表达式&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>变量无需声明，直接赋值（如 &lt;code>count := 10&lt;/code>）&lt;/li>
&lt;li>支持字符串拼接（&lt;code>.&lt;/code> 运算符）与数学运算&lt;/li>
&lt;/ul>
&lt;h2 id="实用案例说明">实用案例说明
&lt;/h2>&lt;h3 id="案例-1截图自动生成-markdown-图片链接">案例 1：截图自动生成 Markdown 图片链接
&lt;/h3>&lt;p>&lt;strong>痛点&lt;/strong>：手动截图→保存→复制路径→插入 Markdown 繁琐
&lt;strong>解决方案&lt;/strong>：一键完成截图并生成标准链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">#s::&lt;/span>&lt;span class="c1"> ; Win+S 快捷键&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Run&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%A_WinDir%&lt;/span>\&lt;span class="n">System32&lt;/span>\&lt;span class="n">SnippingTool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="c1"> ; 启动截图工具&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Snip&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Sketch&lt;/span>&lt;span class="c1"> ; 等待窗口激活&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^+&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="c1"> ; 模拟新建截图快捷键（Ctrl+Shift+N）&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ahk_class&lt;/span> &lt;span class="n">Microsoft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ScreenSketch&lt;/span>&lt;span class="c1"> ; 等待截图完成&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="c1"> ; 保存截图&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Save&lt;/span> &lt;span class="n">As&lt;/span>&lt;span class="c1"> ; 等待保存对话框&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">FormatTime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CurrentTime&lt;/span>&lt;span class="p">,,&lt;/span> &lt;span class="n">yyyyMMdd_HHmmss&lt;/span>&lt;span class="c1"> ; 生成时间戳文件名&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">SendInput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%CurrentTime%&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">png&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="c1"> ; 输入文件名&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="c1"> ; 等待保存完成&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nv">clipboard&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;![](&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">A_Desktop&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s">&amp;#34;\&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="n">CurrentTime&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s">&amp;#34;.png)&amp;#34;&lt;/span>&lt;span class="c1"> ; 生成MD链接&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">MsgBox&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Markdown截图链接已复制到剪贴板&lt;/span>&lt;span class="err">！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>效果&lt;/strong>：按 Win+S → 截图 → 自动保存为带时间戳的 PNG → 剪贴板生成 &lt;code>![](路径)&lt;/code> 格式链接。&lt;/p>
&lt;h3 id="案例-2一键执行复杂命令序列">案例 2：一键执行复杂命令序列
&lt;/h3>&lt;p>&lt;strong>痛点&lt;/strong>：部署环境需重复输入多条命令
&lt;strong>解决方案&lt;/strong>：单键触发命令组合&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">^!&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="c1"> ; Ctrl+Alt+D&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Run&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">:&lt;/span>\&lt;span class="n">MyProject&lt;/span>&lt;span class="c1"> ; 打开CMD并进入项目目录&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ahk_class&lt;/span> &lt;span class="n">ConsoleWindowClass&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">git&lt;/span> &lt;span class="n">pull&lt;/span> &lt;span class="n">origin&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="c1"> ; 等待git pull完成&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mvn&lt;/span> &lt;span class="n">clean&lt;/span> &lt;span class="n">install&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5000&lt;/span>&lt;span class="c1"> ; 等待Maven构建&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">docker&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">compose&lt;/span> &lt;span class="n">up&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">MsgBox&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">环境部署命令已执行！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>效果&lt;/strong>：一键完成代码拉取、项目构建、容器启动。&lt;/p>
&lt;h3 id="案例-3自动化测试数据生成">案例 3：自动化测试数据生成
&lt;/h3>&lt;p>&lt;strong>痛点&lt;/strong>：手动创建大量测试数据效率低下
&lt;strong>解决方案&lt;/strong>：脚本批量生成结构化数据&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">F9::&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">testData&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Loop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1"> ; 生成100条数据&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;User&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">A_Index&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;user&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">A_Index&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s">&amp;#34;@test.com&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1"> ; 自定义Random函数生成随机数&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">testData&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">`n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="c1"> ; 拼接CSV格式&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">FileAppend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%testData%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">:&lt;/span>\&lt;span class="n">TestData&lt;/span>\&lt;span class="n">users&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">csv&lt;/span>&lt;span class="c1"> ; 写入文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Run&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">notepad&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">:&lt;/span>\&lt;span class="n">TestData&lt;/span>\&lt;span class="n">users&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">csv&lt;/span>&lt;span class="c1"> ; 打开查看&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Random&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rand&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">return&lt;/span> &lt;span class="n">rand&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>效果&lt;/strong>：按 F9 自动生成含用户名、邮箱、年龄的 100 条 CSV 测试数据。&lt;/p>
&lt;hr>
&lt;h2 id="总结为什么使用autohotkey">总结：为什么使用AutoHotKey？
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>极简入门&lt;/strong>：语法接近自然语言，无需编译环境&lt;/li>
&lt;li>&lt;strong>资源友好&lt;/strong>：轻量级（安装包 &amp;lt; 3MB），后台占用可忽略&lt;/li>
&lt;li>&lt;strong>深度集成&lt;/strong>：无缝操作窗口、注册表、文件系统&lt;/li>
&lt;li>&lt;strong>生态丰富&lt;/strong>：官方论坛提供海量脚本库与插件支持&lt;/li>
&lt;li>&lt;strong>跨场景适用&lt;/strong>：从文本处理到 GUI 自动化全覆盖&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>进一步学习：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a class="link" href="https://www.autohotkey.com/docs/" target="_blank" rel="noopener"
>https://www.autohotkey.com/docs/&lt;/a>&lt;/li>
&lt;li>脚本仓库：&lt;a class="link" href="https://github.com/AutoHotkey" target="_blank" rel="noopener"
>https://github.com/AutoHotkey&lt;/a>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;strong>你的下一个自动化脚本，准备解决哪个痛点？&lt;/strong>&lt;/p></description></item><item><title>提示词工程权威指南：赋能软件测试的艺术与科学</title><link>https://chengxiaqiucao.github.io/post/080-%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B/</link><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/080-%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B/</guid><description>&lt;p>在人工智能（AI）和大型语言模型（LLM）浪潮席卷全球的今天，软件测试领域正迎来一场深刻的变革。传统的测试方法正在与前沿的AI技术相融合，而**提示词工程（Prompt Engineering）**正是驾驭这场变革的核心技能。本指南将深入探讨提示词工程的理论、实践与高级技巧，并提供一系列面向软件测试岗位的具体案例，旨在帮助测试工程师和团队有效利用AI提升测试效率、覆盖率和深度。&lt;/p>
&lt;hr>
&lt;h3 id="第一章初识提示词工程与ai高效对话的艺术">第一章：初识提示词工程——与AI高效对话的艺术
&lt;/h3>&lt;h4 id="11-什么是提示词工程">1.1 什么是提示词工程？
&lt;/h4>&lt;p>&lt;strong>提示词工程&lt;/strong>是一门旨在设计、构建和优化输入文本（即“提示词”）的学科，其目的是引导大型语言模型（LLM）如GPT-4、Claude等，生成我们期望的、高质量且相关的输出。如果说LLM是一个强大的、拥有海量知识的引擎，那么提示词就是控制这个引擎方向盘和油门。&lt;/p>
&lt;p>对于软件测试而言，提示词工程不仅仅是“向AI提问”，它是一种&lt;strong>战略性的沟通方式&lt;/strong>。通过精心设计的提示词，测试人员可以驱使AI完成一系列复杂的测试任务，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>生成测试用例&lt;/strong>：基于需求文档、用户故事或代码片段，自动创建功能、边界、异常等各类测试用例。&lt;/li>
&lt;li>&lt;strong>创建测试数据&lt;/strong>：生成多样化、符合特定格式和业务规则的测试数据。&lt;/li>
&lt;li>&lt;strong>编写自动化脚本&lt;/strong>：辅助编写或直接生成Selenium、Cypress、Playwright等框架的自动化测试脚本。&lt;/li>
&lt;li>&lt;strong>分析测试结果&lt;/strong>：对大量的测试日志和报告进行摘要、分类和根本原因分析。&lt;/li>
&lt;li>&lt;strong>模拟用户行为&lt;/strong>：创建符合特定用户画像的交互场景，用于用户验收测试（UAT）或探索性测试。&lt;/li>
&lt;/ul>
&lt;p>掌握提示词工程，意味着测试工程师可以将繁琐、重复性的工作交由AI处理，从而将更多精力投入到更具创造性和战略性的测试活动中。&lt;/p>
&lt;h4 id="12-核心理念清晰具体有上下文">1.2 核心理念：清晰、具体、有上下文
&lt;/h4>&lt;p>成功的提示词工程遵循一个核心原则：&lt;strong>Garbage In, Garbage Out (GIGO)&lt;/strong>。你提供给AI的信息质量直接决定了其输出的质量。因此，一个优秀的提示词通常具备以下特点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>清晰明确 (Clear &amp;amp; Specific)&lt;/strong>：避免使用模糊、笼统的语言。直接告诉AI你想要什么。&lt;/li>
&lt;li>&lt;strong>提供上下文 (Contextual)&lt;/strong>：为AI提供充足的背景信息，如被测功能描述、相关代码、用户画像、业务规则等。&lt;/li>
&lt;li>&lt;strong>指定角色 (Role Assignment)&lt;/strong>：让AI扮演一个特定的角色，例如“你是一位资深的软件测试专家”，这有助于模型以更专业的视角和口吻进行回应。&lt;/li>
&lt;li>&lt;strong>明确输出格式 (Format Specification)&lt;/strong>：清晰地定义你希望得到的输出格式，如JSON、CSV、Markdown表格、项目列表等。&lt;/li>
&lt;li>&lt;strong>迭代优化 (Iterative Refinement)&lt;/strong>：很少有提示词能一次就达到完美。准备好根据AI的反馈进行多次尝试和调整。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="第二章提示词工程术语宝典">第二章：提示词工程术语宝典
&lt;/h3>&lt;p>为了更好地理解和应用提示词工程，熟悉以下关键术语至关重要。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>术语 (Term)&lt;/strong>&lt;/td>
&lt;td>&lt;strong>中文解释&lt;/strong>&lt;/td>
&lt;td>&lt;strong>说明&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Prompt&lt;/strong>&lt;/td>
&lt;td>提示词&lt;/td>
&lt;td>用户提供给LLM的输入文本，用于引导其生成回应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Zero-shot Prompting&lt;/strong>&lt;/td>
&lt;td>零样本提示&lt;/td>
&lt;td>在不提供任何示例的情况下，直接要求LLM完成任务。适用于模型已经熟练掌握的任务。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Few-shot Prompting&lt;/strong>&lt;/td>
&lt;td>少样本提示&lt;/td>
&lt;td>在提示词中提供少量（通常是1-5个）示例，向LLM展示期望的输入输出格式和风格。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Chain-of-Thought (CoT) Prompting&lt;/strong>&lt;/td>
&lt;td>思维链提示&lt;/td>
&lt;td>指导LLM在给出最终答案前，先进行一步一步的逻辑推理。通过加入“让我们一步一步地思考”等短语来触发。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Role Prompting / Persona&lt;/strong>&lt;/td>
&lt;td>角色提示/人设&lt;/td>
&lt;td>为LLM设定一个特定的角色或身份（如“资深安全测试工程师”），以影响其回应的风格、口吻和专业深度。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Context Window&lt;/strong>&lt;/td>
&lt;td>上下文窗口&lt;/td>
&lt;td>LLM在一次对话中能够记住和处理的信息量（以token计算）。超出此窗口的信息将被遗忘。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Token&lt;/strong>&lt;/td>
&lt;td>令牌&lt;/td>
&lt;td>LLM处理文本的基本单位，可以是一个单词、一个字符或一个词根。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Hallucination&lt;/strong>&lt;/td>
&lt;td>幻觉&lt;/td>
&lt;td>LLM生成看似合理但实际上是虚假或与事实不符的信息的现象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Temperature&lt;/strong>&lt;/td>
&lt;td>温度参数&lt;/td>
&lt;td>一个控制输出随机性的参数（通常在0到1之间）。较低的温度使输出更具确定性和一致性，较高的温度则更具创造性和多样性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Self-Consistency&lt;/strong>&lt;/td>
&lt;td>自我一致性&lt;/td>
&lt;td>一种高级技术，通过多次生成（使用较高的温度）并对结果进行“投票”，选出最一致的答案，以提高复杂推理任务的准确性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReAct (Reasoning and Acting)&lt;/strong>&lt;/td>
&lt;td>推理与行动&lt;/td>
&lt;td>一种高级框架，让LLM不仅能进行推理，还能执行某些“行动”（如调用外部API、执行代码），并将行动结果融入下一步的推理中。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Delimiter&lt;/strong>&lt;/td>
&lt;td>分隔符&lt;/td>
&lt;td>使用特殊字符或标签（如```, ###, &amp;lt;tag&amp;gt;）来清晰地分隔提示词的不同部分（如指令、上下文、示例）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="第三章软件测试中的提示词工程实践">第三章：软件测试中的提示词工程实践
&lt;/h3>&lt;p>本章将通过具体的案例，展示如何在软件测试的各个阶段应用提示词工程。&lt;/p>
&lt;h4 id="31-案例一基于用户故事生成测试用例-功能测试">3.1 案例一：基于用户故事生成测试用例 (功能测试)
&lt;/h4>&lt;p>假设我们有一个电商平台的&lt;strong>用户故事&lt;/strong>：“作为一个已登录用户，我希望能够将商品添加到购物车中，以便稍后一次性结算。”&lt;/p>
&lt;p>&lt;strong>一个糟糕的提示词 👎:&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>为添加购物车功能写测试用例。&lt;/p>&lt;/blockquote>
&lt;p>这个提示词过于模糊，没有提供任何上下文，AI可能会生成一些非常通用的、价值不高的用例。&lt;/p>
&lt;p>&lt;strong>一个优秀的提示词 (采用Few-shot和角色提示) 👍:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 指令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">你是一位经验丰富的电商软件测试专家。请根据以下用户故事和业务规则，为“添加商品到购物车”功能生成一套全面的功能测试用例。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 角色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 你非常注重细节，能够考虑到各种边界情况和异常场景。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 你生成的测试用例应包含：用例ID、测试标题、前置条件、测试步骤、预期结果和用例类型（正面/负面）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 输出格式应为Markdown表格。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 上下文：用户故事
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">“作为一个已登录用户，我希望能够将商品添加到购物车中，以便稍后一次性结算。”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 上下文：业务规则
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 用户必须是登录状态才能添加商品。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 购物车最多可以容纳50件不同的商品。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 单个商品的最大购买数量为99。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 已下架或库存为0的商品不能添加到购物车。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 添加成功后，页面右上角的购物车图标应实时更新商品数量。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 示例 (Few-shot)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">以下是一个参考示例：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| 用例ID | 测试标题 | 前置条件 | 测试步骤 | 预期结果 | 用例类型 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| :--- | :--- | :--- | :--- | :--- | :--- |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| TC-CART-001 | 验证登录用户可以成功添加一件商品到购物车 | 用户已登录；购物车为空 | 1. 浏览到一个有库存的商品详情页。&amp;lt;br&amp;gt;2. 点击“添加到购物车”按钮。 | 1. 页面提示“商品已成功添加到购物车”。&amp;lt;br&amp;gt;2. 购物车图标数量更新为1。 | 正面 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在，请基于以上信息，为该功能生成至少10个详细的测试用例，覆盖正面、负面和边界场景。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>AI可能的输出:&lt;/p>
&lt;p>AI将会遵循指令，以指定的Markdown表格格式，生成包括验证未登录用户、添加商品达到上限、添加无库存商品、验证数量输入边界值（0, 1, 99, 100）等一系列高质量的测试用例。&lt;/p>
&lt;h4 id="32-案例二生成特定格式的测试数据-数据驱动测试">3.2 案例二：生成特定格式的测试数据 (数据驱动测试)
&lt;/h4>&lt;p>在进行数据驱动测试时，我们常常需要大量符合特定格式和规则的数据。&lt;/p>
&lt;p>&lt;strong>场景&lt;/strong>：测试一个用户注册表单，该表单对用户名、密码和邮箱格式有特定要求。&lt;/p>
&lt;p>&lt;strong>一个优秀的提示词 (采用指令和格式规范) 👍:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 角色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">你是一个测试数据生成器。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">请为用户注册功能生成&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="err">组测试数据，并以&lt;/span>&lt;span class="n">CSV格式输出&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 数据要求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">数据应包含三列：&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 列定义和规则
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">必须是&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="err">个字符。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">只能包含小写字母和数字。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">请包含有效和无效的用户名（例如，过短、过长、包含特殊字符）。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">必须是&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="err">个字符。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">必须包含至少一个大写字母、一个小写字母、一个数字和一个特殊字符（&lt;/span>&lt;span class="o">!@&lt;/span>&lt;span class="c1">#$%^&amp;amp;*）。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">请包含符合规则的强密码和不符合规则的弱密码。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">必须是有效的电子邮件格式。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">请包含一些常见的邮箱提供商（如&lt;/span>&lt;span class="n">gmail&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">outlook&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">yahoo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="err">）以及一些格式无效的邮箱（例如，缺少&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="err">符号，域名无效）。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 输出格式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">请严格按照以下&lt;/span>&lt;span class="n">CSV格式输出&lt;/span>&lt;span class="err">，包含表头：&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">```&lt;/span>&lt;span class="n">csv&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>AI可能的输出:&lt;/strong>
AI将生成一个CSV格式的文本块，包含20行数据，其中混合了有效的和刻意构造的无效数据，可以直接用于自动化测试脚本或手动测试。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csv" data-lang="csv">&lt;span class="line">&lt;span class="cl">&lt;span class="s">username&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">password&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">email&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">validuser1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">ValidPass1!&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">test.user1@gmail.com&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">short&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">WeakPass1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">test.user2@outlook.com&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">toolongusername123&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">AnotherGoodP@ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">test.user3@yahoo.com&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">invalid-user&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">Weak1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">invalid-email&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">user.123&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">StrongerP@ssword123&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">test.user4@gmail.com&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">... (and so on)&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="33-案例三辅助编写自动化测试脚本-测试自动化">3.3 案例三：辅助编写自动化测试脚本 (测试自动化)
&lt;/h4>&lt;p>对于测试自动化工程师来说，AI可以成为一个强大的编程助手。&lt;/p>
&lt;p>&lt;strong>场景&lt;/strong>：需要为前面提到的“添加购物车”功能编写一个使用Selenium和Python的自动化测试脚本。&lt;/p>
&lt;p>&lt;strong>一个优秀的提示词 (采用思维链和代码生成) 👍:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 角色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">你是一名资深的自动化测试工程师，精通Python和Selenium WebDriver。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 任务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">请为“验证登录用户可以成功添加一件商品到购物车”这个测试场景，编写一个完整的、可执行的Python Selenium自动化测试脚本。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 指令与思考过程 (Chain-of-Thought)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们一步一步地完成这个任务：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **设置环境**：导入必要的Selenium库，初始化WebDriver（请使用Chrome浏览器），并设置隐式等待。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **登录操作**：首先，编写一个函数`login(username, password)`，导航到登录页面，输入用户名和密码，然后点击登录按钮。请使用ID选择器定位元素。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **导航到商品页**：登录后，导航到一个具体的商品页面。假设商品页面的URL是 &amp;#34;[http://example.com/product/123](http://example.com/product/123)&amp;#34;。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **执行添加操作**：定位“添加到购物车”按钮（假设其ID为`add-to-cart-button`）并点击。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. **断言验证**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * 添加一个显式等待，等待成功提示信息出现（假设其CSS选择器为`.success-message`）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * 获取该提示信息的文本，并断言其内容为“商品已成功添加到购物车”。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * 获取购物车图标旁边的数量元素（假设其ID为`cart-item-count`）的文本，并断言其值为 &amp;#34;1&amp;#34;。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. **清理**：最后，关闭浏览器`driver.quit()`。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. **代码结构**：请将所有操作封装在一个主函数或测试类中，并添加注释来解释关键步骤。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 请输出完整的Python代码。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>AI可能的输出:&lt;/p>
&lt;p>AI会根据这个详细的、分步的指令，生成一个结构清晰、注释完整、包含所有必要操作和断言的Python Selenium脚本。这种方式远比“给我写个Selenium脚本”这样的简单请求要高效和准确得多。&lt;/p>
&lt;hr>
&lt;h3 id="第四章高级提示词工程技巧">第四章：高级提示词工程技巧
&lt;/h3>&lt;p>当你掌握了基础后，可以运用更高级的技巧来应对复杂的测试挑战。&lt;/p>
&lt;h4 id="41-思维链-chain-of-thought-的深化应用">4.1 思维链 (Chain-of-Thought) 的深化应用
&lt;/h4>&lt;p>对于需要复杂逻辑推理的任务，如&lt;strong>根本原因分析 (Root Cause Analysis)&lt;/strong>，深化CoT的应用至关重要。&lt;/p>
&lt;p>&lt;strong>场景&lt;/strong>：一个API测试失败，返回了500错误，你需要分析可能的原因。&lt;/p>
&lt;p>&lt;strong>提示词:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 角色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">你是一名顶级的站点可靠性工程师（&lt;/span>&lt;span class="n">SRE&lt;/span>&lt;span class="err">），正在诊断一个&lt;/span>&lt;span class="n">API故障&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 上下文
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">API端点&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`/&lt;/span>&lt;span class="n">api&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">v1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">profile&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">问题&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">在高并发负载测试期间，该端点偶尔返回&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HTTP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">内部服务器错误。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">日志片段&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">```&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ERROR&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Connection&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exhausted&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Could&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">connection&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Caused&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">sql&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SQLTransientConnectionException&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HikariPool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Connection&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">is&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">available&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">timed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">out&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">after&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">30000&lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">请使用“思维链”方法，一步一步地分析这个问题的潜在根本原因，并为每个原因提出具体的调查步骤和解决方案建议。请像专家一样思考，从多个层面（应用层、数据库层、配置层）进行分析。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">思考开始：&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">日志分析&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">日志明确指出了“&lt;/span>&lt;span class="n">Connection&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exhausted&lt;/span>&lt;span class="err">”（数据库连接池耗尽）。这是最直接的线索。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">为什么连接池会耗尽&lt;/span>&lt;span class="o">?**&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">原因&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">连接未被释放。&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">应用代码中是否存在某个逻辑分支，在查询数据库后没有正确关闭连接（&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">close&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">）？&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">原因&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">连接池太小。&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">HikariCP&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">的&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">maximumPoolSize&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">配置是否对于当前的并发负载来说过低？&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">原因&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">查询本身过慢。&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">是否存在慢查询，导致连接被长时间占用，在高并发下迅速耗尽了连接池？&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">原因&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">数据库性能瓶颈。&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">数据库服务器本身是否达到了&lt;/span>&lt;span class="n">CPU&lt;/span>&lt;span class="err">、内存或&lt;/span>&lt;span class="n">IO的瓶颈&lt;/span>&lt;span class="err">，导致查询响应变慢，从而间接导致连接池耗尽？&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">如何调查&lt;/span>&lt;span class="o">?**&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">针对原因&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">审查处理&lt;/span>&lt;span class="o">`/&lt;/span>&lt;span class="n">api&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">v1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">profile&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">请求的所有代码路径，特别是异常处理块，确保&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">finally&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">语句中正确关闭了连接。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">针对原因&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">检查应用的配置文件（如&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">application&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">properties&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">或&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">yml&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">），查看&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">datasource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hikari&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maximum&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">的值。监控连接池的实时使用情况。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">针对原因&lt;/span>&lt;span class="n">C&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">开启数据库的慢查询日志，分析在问题发生时间点是否有慢查询记录。对该&lt;/span>&lt;span class="n">API涉及的SQL语句进行&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ANALYZE&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">针对原因&lt;/span>&lt;span class="n">D&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">检查数据库服务器的监控仪表盘（&lt;/span>&lt;span class="n">CPU使用率&lt;/span>&lt;span class="err">、内存、磁盘&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">O&lt;/span>&lt;span class="err">、活跃连接数）。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="err">解决方案建议&lt;/span>&lt;span class="o">?**&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 输出
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">请根据以上的思维链，整理成一份正式的故障分析报告。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种CoT提示词不仅引导AI得出结论，更重要的是强迫它展示一个结构化的、逻辑清晰的分析过程，这对于复杂的诊断任务非常有价值。&lt;/p>
&lt;h4 id="42-自我一致性-self-consistency-用于探索性测试">4.2 自我一致性 (Self-Consistency) 用于探索性测试
&lt;/h4>&lt;p>在需要创造性和发散性思维的&lt;strong>探索性测试&lt;/strong>中，可以利用&lt;code>Self-Consistency&lt;/code>来生成更多样化的测试想法。&lt;/p>
&lt;p>&lt;strong>场景&lt;/strong>：为一个新的“在线文档协作”功能设计探索性测试的思路。&lt;/p>
&lt;p>&lt;strong>提示词:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 角色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">你是一个极具创造力和破坏性的软件测试员，擅长找到用户意想不到的&lt;/span>&lt;span class="n">Bug&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 任务
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">请为“在线文档实时协作”功能，生成&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="err">个不同的、创造性的探索性测试思路（&lt;/span>&lt;span class="n">charter&lt;/span>&lt;span class="err">）。我需要的是多样化的、非常规的想法。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1"># 指令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">我将多次运行此提示。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">请你思考并生成&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="err">个测试思路，专注于并发操作、网络延迟、数据冲突和非常规用户交互。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">请以项目列表的形式输出。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">你可以将模型的&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="err">参数调高，例如&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="err">，然后多次运行这个提示词&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>运行1的可能输出:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>模拟断网重连&lt;/strong>: 两个用户同时编辑，其中一个用户突然断网，进行大量修改后再重连，观察数据如何合并。&lt;/li>
&lt;li>&lt;strong>疯狂光标移动&lt;/strong>: 多个用户在同一行疯狂地输入、删除、移动光标，测试渲染性能和同步的准确性。&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>运行2的可能输出:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>权限动态变更&lt;/strong>: 当一个用户正在编辑时，管理员突然将其权限从“可编辑”降为“只读”，观察其客户端的行为。&lt;/li>
&lt;li>&lt;strong>混合富文本与纯文本&lt;/strong>: 一个用户粘贴复杂的富文本（带格式、图片），另一个用户同时在附近输入纯文本，检查格式是否错乱。&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>通过多次生成并综合所有独特的想法，测试人员可以获得一个远比单次请求更丰富、更全面的探索性测试清单。&lt;/p>
&lt;hr>
&lt;h3 id="第五章总结与展望">第五章：总结与展望
&lt;/h3>&lt;p>提示词工程正迅速成为软件测试工程师的核心竞争力之一。它不是要取代测试人员的思考，而是要增强他们的能力，将他们从重复劳动中解放出来，去完成更需要智慧和洞察力的任务。&lt;/p>
&lt;p>&lt;strong>成功的关键在于实践&lt;/strong>。从今天起，尝试将本文介绍的技巧应用到你的日常工作中。从小任务开始，比如用AI帮你润色缺陷报告，或者为你正在测试的功能头脑风暴一些边缘案例。随着你对模型“脾气”的了解加深，你将能够构建出越来越强大的提示词，真正实现与AI的高效协同，将软件测试的效率和质量提升到一个全新的高度。&lt;/p>
&lt;p>未来的软件测试，将是人类智慧与人工智能深度融合的时代，而提示词工程，正是开启这扇大门的钥匙。&lt;/p>
&lt;hr></description></item><item><title>Google推出A2A协议</title><link>https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/</link><pubDate>Fri, 11 Apr 2025 11:36:52 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411.png" alt="Featured image of post Google推出A2A协议" />&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411.png"
width="1247"
height="429"
srcset="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411_hu_80be8e802c2c15a1.png 480w, https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411_hu_b451699b8955eab0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="290"
data-flex-basis="697px"
>&lt;/p>
&lt;blockquote>
&lt;p>4月9日，Google重磅发布了&lt;strong>A2A(Agent to Agent)&lt;/strong> 协议，为 AI Agent能力开放和标准化，又添了一把火。那么这个 &lt;strong>A2A协议&lt;/strong> 到底做什么？和之前火爆的&lt;strong>MCP Server&lt;/strong>又是什么关系？是不是会产生标准之争？ 本文我们就来了解下这个新进出炉的A2A协议，以及它的应用场景。&lt;/p>&lt;/blockquote>
&lt;h2 id="a2a与mcp">A2A与MCP
&lt;/h2>&lt;p>&lt;strong>A2A&lt;/strong>，即 Agent to Agent 协议，是由 Google刚刚推出的一个AI基础开源协议，旨在实现 AI Agent之间的通信和互操作性。通过为代理提供标准化的协作方式，即无论其底层框架或供应商如何，不同 AI Agent都能够安全地进行信息交换和协作，并可以跨各种企业平台和应用程序工作。&lt;/p>
&lt;p>这个协议提供的 Agent 和 Agent 之间的一个通用通信标准。&lt;/p>
&lt;p>它和近期大火的 &lt;strong>MCP (Model Context Protocol)&lt;/strong>（前文介绍 【】）其实并不是竞争关系。Google官方在发布声明中也重点说到，这个协议其实是针对MCP协议的补充。&lt;/p>
&lt;p>&lt;strong>MCP&lt;/strong> 是 AI 公司 Anthropic（claude母公司）去年底推出的开放协议，它旨在标准化大语言模型（LLM）与外部数据源、工具之间的交互接口。&lt;/p>
&lt;p>随着 OpenAI 等主流大模型宣布支持MCP接入，MCP目前很有潜力成为 AI 应用领域的一个基础规范，近期各种MCP Server雨后春笋般纷纷涌现，也证明这个协议得到了广泛认可。&lt;/p>
&lt;p>所谓&lt;strong>三流企业做产品、二流企业做品牌、一流企业做标准&lt;/strong>，Google 很敏锐地捕捉到了 AI Agent 应用标准拼图中，MCP之外很重要的一块。&lt;/p>
&lt;p>就是MCP定义了 LLM 和 Agent 之间的连接，可以利用 Agent 为LLM扩充能力，以后也肯定会出现类似App Store这样的Agent商店，整合各类不同的Agent。&lt;/p>
&lt;p>但对于后续大规模的的AI应用，将会集成很多Agent共同协作，这些Agent之间的交互就是目前缺失的一块拼图。A2A起到的就是这个作用。很类似于微服务系统中的服务间通信协议。&lt;/p>
&lt;h2 id="a2a的设计原则">A2A的设计原则
&lt;/h2>&lt;p>官方给出了A2A协议的设计原则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>拥抱代理能力&lt;/strong>：A2A 致力于使代理能够以自然、非结构化的模式进行协作，即使它们不共享内存、工具和上下文。我们正在实现真正的多代理场景，而不将代理局限于单一的“工具”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>基于现有标准：&lt;/strong> 该协议建立在现有的流行标准之上，包括 HTTP、SSE、JSON-RPC，这意味着它更容易与企业日常使用的现有 IT 堆栈集成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>默认安全&lt;/strong>：A2A 旨在支持企业级身份验证和授权，在启动时与 OpenAPI 的身份验证方案相同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持长时间运行的任务：&lt;/strong> 设计 A2A 时就考虑到了灵活性，并支持各种场景，使其能够出色地完成各种任务，从快速任务到深度研究，这些任务可能需要数小时甚至数天的时间（如果人工参与）。在此过程中，A2A 可以为用户提供实时反馈、通知和状态更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与模态无关：&lt;/strong> 代理世界不仅限于文本，这就是我们设计 A2A 来支持各种模态（包括音频和视频流）的原因。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="主要功能">主要功能
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250412.png"
width="1036"
height="825"
srcset="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250412_hu_84e49ee97b84a478.png 480w, https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250412_hu_b47b550deb239991.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>能力发现：&lt;/strong> 代理可以使用 JSON 格式的“代理卡”来宣传其能力，从而允许客户端代理识别能够执行任务的最佳代理并利用 A2A 与远程代理进行通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>任务管理：&lt;/strong> 客户端与远程代理之间的通信以任务完成为导向，代理负责执行最终用户的请求。此“任务”对象由协议定义，并具有生命周期。它可以立即完成，或者，对于长时间运行的任务，每个代理可以进行通信，以彼此保持同步，了解任务的最新完成状态。任务的输出称为“工件”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>协作：&lt;/strong> 代理可以互相发送消息来传达上下文、回复、工件或用户指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用户体验协商：&lt;/strong> 每条消息包含“部分”，即完整形成的内容片段，例如生成的图像。每个部分都有指定的内容类型，允许客户端和远程代理协商所需的正确格式，并明确包含对用户 UI 功能（例如 iframe、视频、Web 表单等）的协商。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>A2A、MCP、LLM之间的关系：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411-1.png"
width="1456"
height="1009"
srcset="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411-1_hu_32d1bc6b1780202c.png 480w, https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250411-1_hu_88474295bca49db5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;h2 id="协议说明">协议说明
&lt;/h2>&lt;p>该协议目前在github开源，主要是一个json schema的格式说明文件 ( 关于 json schema 的介绍，参见【】)，具体定义可查看源文档。&lt;/p>
&lt;p>这里说明下其中包含的主要部分及其作用：&lt;/p>
&lt;h3 id="1-agentauthentication">&lt;strong>1. AgentAuthentication&lt;/strong>
&lt;/h3>&lt;p>这部分定义了支持的认证方式，例如 OAuth 或 API 密钥。&lt;/p>
&lt;h3 id="2-agentcapabilities">&lt;strong>2. AgentCapabilities&lt;/strong>
&lt;/h3>&lt;p>用于标识 Agent 的能力范围，例如是否支持实时通信。&lt;/p>
&lt;h3 id="3-agentcard">&lt;strong>3. AgentCard&lt;/strong>
&lt;/h3>&lt;p>提供 Agent 的核心信息，例如它的功能和技能，便于被发现&lt;/p>
&lt;h3 id="4-agentprovider">&lt;strong>4. AgentProvider&lt;/strong>
&lt;/h3>&lt;p>标识提供者的组织或公司信息。&lt;/p>
&lt;h3 id="5-agentskill">&lt;strong>5. AgentSkill&lt;/strong>
&lt;/h3>&lt;p>描述 Agent 的技能，例如可以执行的任务或功能。&lt;/p>
&lt;h3 id="6-错误定义">&lt;strong>6. 错误定义&lt;/strong>
&lt;/h3>&lt;p>包含了一些预定义的Error， &lt;strong>PushNotificationNotSupportedError&lt;/strong>、&lt;strong>InvalidParamsError&lt;/strong>、&lt;strong>JSONParseError&lt;/strong> 分别指示通知不支持、参数无效、Json解析等错误类型&lt;/p>
&lt;h3 id="7-filecontent--filepart">&lt;strong>7. FileContent &amp;amp; FilePart&lt;/strong>
&lt;/h3>&lt;p>用于传递文件相关的数据，例如上传或下载操作。&lt;/p>
&lt;h2 id="案例">案例
&lt;/h2>&lt;p>&lt;code>a2aprotocol.net&lt;/code> 提供了一个 A2A 和 MCP 协作的案例场景说明&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250412-1.png"
width="719"
height="1130"
srcset="https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250412-1_hu_ab78a1cf9cae3785.png 480w, https://chengxiaqiucao.github.io/post/075-google%E6%8E%A8%E5%87%BAa2a%E5%8D%8F%E8%AE%AE/Pasted-20250412-1_hu_eb20dfc829b11034.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="152px"
>&lt;/p>
&lt;p>在测试领域的应用，像 【】一文后，有小伙伴提到的更丰富场景，将用例解析、Playwright执行、问题收集并汇报等集成起来，这个就可以由不同Agent来完成，分别负责用例的生成、Playwright执行、向禅道Jira等提交等工作，这里除了Agent之间的工作流，像用例、Bug等在不同Agent之间的传输，就可以用A2A协议来实现。&lt;/p>
&lt;p>相关实践，还有待相关Agent的丰富，后续本号也会持续跟踪！&lt;/p></description></item><item><title>没代码能力还能否从事测试工作</title><link>https://chengxiaqiucao.github.io/post/065-%E6%B2%A1%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E8%BF%98%E8%83%BD%E5%90%A6%E4%BB%8E%E4%BA%8B%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C/</link><pubDate>Sat, 15 Mar 2025 00:04:55 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/065-%E6%B2%A1%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E8%BF%98%E8%83%BD%E5%90%A6%E4%BB%8E%E4%BA%8B%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/065-%E6%B2%A1%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E8%BF%98%E8%83%BD%E5%90%A6%E4%BB%8E%E4%BA%8B%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C/Pasted-20250316.png" alt="Featured image of post 没代码能力还能否从事测试工作" />&lt;blockquote>
&lt;p>很多想往测试方向转的非IT从业者，道听途说软件测试门槛低，就算不会写代码也可以进入这个行业工作。那么是不是这样呢？&lt;/p>&lt;/blockquote>
&lt;p>应该说：&lt;/p>
&lt;p>&lt;strong>没代码能力，要从事软件测试，实际上可以做，但实际上又不能做。&lt;/strong>&lt;/p>
&lt;h2 id="实际上可以做">实际上可以做
&lt;/h2>&lt;p>软件测试并不是一个建立在代码能力上的技术，所以说实际上可以做。&lt;/p>
&lt;p>软件测试是通过测试，暴露出产品中的质量问题，其实是一个发现未知的技能。所以更关键的是试验、探索、观察、推理、设问、建模这些方面的能力；而有代码能力，更多是能去帮助自己理解产品的实现过程，或者可以通过代码帮助自己扩展测试手段、去提升测试效率，从这个意义上，代码能力是一个辅助能力，用来辅助测试工作，但它并不是决定测试工作是否能完成的的关键！&lt;/p>
&lt;p>James Bach在论文 《testing and checking》 中，阐述了 &lt;code>测试&lt;/code> 和 &lt;code>检查&lt;/code> 的关系&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/065-%E6%B2%A1%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E8%BF%98%E8%83%BD%E5%90%A6%E4%BB%8E%E4%BA%8B%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C/testing-checking.png"
width="748"
height="571"
srcset="https://chengxiaqiucao.github.io/post/065-%E6%B2%A1%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E8%BF%98%E8%83%BD%E5%90%A6%E4%BB%8E%E4%BA%8B%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C/testing-checking_hu_894995043907226c.png 480w, https://chengxiaqiucao.github.io/post/065-%E6%B2%A1%E4%BB%A3%E7%A0%81%E8%83%BD%E5%8A%9B%E8%BF%98%E8%83%BD%E5%90%A6%E4%BB%8E%E4%BA%8B%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C/testing-checking_hu_fc91b077f293f5bc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;code>测试&lt;/code>是一个更大范围的概念，而&lt;code>检查&lt;/code>只是测试的子集，并且检查还分为人工检查和借助机器（工具）来检查。&lt;/p>
&lt;p>而代码能力，影响的部分，更多是在利用工具检查这部分。&lt;/p>
&lt;p>所以早年，很多测试工作做得出色的测试专家，其实并不长于编码，但多半是相关业务领域的业务专家，且有出色的测试思维，也就是上面说到的类似侦探那样的观察、推理等能力。&lt;/p>
&lt;p>所以说，实际上，没有代码能力，并不影响是否能把测试工作做到出色。&lt;/p>
&lt;h2 id="实际上不能做">实际上不能做
&lt;/h2>&lt;p>但是，我们还要说，没有代码能力，实际又不能做。&lt;/p>
&lt;p>上面我们也说了，&lt;strong>早年&lt;/strong>，还存在不会代码的测试专家。时移事易，当下的现状其实不一样了。随着行业发展，测试这个行当的方向可以说已经脱离了原先轨道。挺可悲可叹！&lt;/p>
&lt;p>原因多种：&lt;/p>
&lt;h3 id="敏捷研发等强调快速交付的研发模式流行">敏捷研发等强调快速交付的研发模式流行
&lt;/h3>&lt;p>在敏捷研发模式中，其实已经不再有专门的测试角色，更多强调团队成员是多面手，各种研发任务可以一专多能，包括开发和测试！测试人员作为团队一份子，自然也就不能仅仅只能做测试，必要时也要能接手开发，至少包括单元测试、集成测试等原来开发范畴的工作也要去承担。当然代码能力就是满足这个条件的硬性要求了&lt;/p>
&lt;h3 id="对自动化测试能力的强制要求">对自动化测试能力的强制要求
&lt;/h3>&lt;p>也是因为敏捷，持续集成等研发模式的需要，自动化测试成为其中必不可少的环节。而作为自动化测试的基础能力，代码能力自然也就是必然。&lt;/p>
&lt;p>&lt;em>但这里必须要指出，像自动化测试这种，为了“快速完成测试”，按上图测试和检查的关系，实际上并不是真正的“测试”，更多是“检查”。一味强调代码能力，某种意义其实是对测试工作要求的弱化，也就是更多只要求了“检查”，而不是“测试”&lt;/em>&lt;/p>
&lt;h3 id="人才市场供大于求">人才市场供大于求
&lt;/h3>&lt;p>最后，还是行业环境。在早年互联网兴起阶段，人力缺口大，很多“验证” 工作也是由不需要代码能力的初级或者0基础小白去人工完成，人工“检查”比重更大。&lt;/p>
&lt;p>但行业下行时，企业压缩成本，导致人才市场供大于求。所以入行门槛自然会抬高，从业要求也水涨船高，对工具“验证”的期望也更高，所以代码能力，自动化测试、工具开发等等几乎已经就成了必备技能。&lt;/p>
&lt;p>再叠加当下敏捷研发等研发模式的流行，对自动化测试的要求，可以说，没有代码能力，在当前环境下，实际上已经很难说还可以从事测试工作，无门可入。&lt;/p>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>所以，目前情况下，对于测试工作，虽然没代码能力，不代表不能完成测试工作，但不具备代码能力却已很难搭上车&lt;/p>
&lt;p>所以，作为个体，时代洪流下，能做的就是不要逆时而行，踏实去构建顺应潮流的个人能力。
但还是要理解这个工作的核心要求是什么，厚积薄发，吹尽黄沙始到金！&lt;/p></description></item><item><title>敏捷是否是适用大多项目的灵丹妙药？对敏捷的一点反思</title><link>https://chengxiaqiucao.github.io/post/064-%E5%AF%B9%E6%95%8F%E6%8D%B7%E7%9A%84%E5%8F%8D%E6%80%9D/</link><pubDate>Fri, 07 Mar 2025 13:50:37 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/064-%E5%AF%B9%E6%95%8F%E6%8D%B7%E7%9A%84%E5%8F%8D%E6%80%9D/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/064-%E5%AF%B9%E6%95%8F%E6%8D%B7%E7%9A%84%E5%8F%8D%E6%80%9D/Agile.png" alt="Featured image of post 敏捷是否是适用大多项目的灵丹妙药？对敏捷的一点反思" />&lt;blockquote>
&lt;p>现代项目管理中，敏捷研发越来越流行；言必称敏捷，似乎不敏捷就是跟不上时代。敏捷真的就是现代软件项目的灵丹妙药吗？它是否真的是一个普适的研发方法？&lt;/p>&lt;/blockquote>
&lt;h2 id="敏捷缘起">敏捷缘起
&lt;/h2>&lt;p>先说结论：敏捷研发其实是一个非常有局限性的方法，不具备普适性！ 它的发展壮大只是因为契合了互联网高速发展，较好匹配了互联网应用对需求变化和发布频率的需要。&lt;/p>
&lt;p>而互联网软件，相比传统软件，还具备增量交付，线上问题可快速修复，对质量问题容忍度相对较高等特点。这使得敏捷开发会更容易在互联网项目中落地。&lt;/p>
&lt;p>而随着互联网巨头们对敏捷方法的采用，以及敏捷机构的大力推广，到今日敏捷似乎成了可以放诸四海而皆准的通用方法。也诞生出像Scrum、SAFe、LeSS、Nexus等等各种框架来应用敏捷&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/038-%e6%95%8f%e6%8d%b7%e7%a0%94%e5%8f%91%e6%a8%a1%e5%9e%8b%e7%9f%a5%e5%a4%9a%e5%b0%91/scrum.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/038-%e6%95%8f%e6%8d%b7%e7%a0%94%e5%8f%91%e6%a8%a1%e5%9e%8b%e7%9f%a5%e5%a4%9a%e5%b0%91/SAFe.png"
loading="lazy"
>&lt;/p>
&lt;p>但我们观察这些框架的发展过程和应用场景，其实会发现每种框架都有不小的约束。小型框架如Scrum对团队人数有特别限定，有会议仪式的要求；大型框架如SAFe有对组织架构、多种配套角色和专门团队的要求。等等&amp;hellip;&lt;/p>
&lt;p>而大型框架的诞生，也是在实践中应对实际项目的真实运作，演进而来，是为了应对特定场景的问题，不断添砖加瓦，增加了更多的角色、仪式、流程。但这，似乎也在重蹈传统软件研发流程发展脉络，也同样是在向高复杂度团队的方向上一路狂奔！&lt;/p>
&lt;h2 id="敏捷的局限">敏捷的局限
&lt;/h2>&lt;p>所以我们不由得要反思一下，敏捷是否真的是一种有普遍适用性的方法？是解决传统问题的灵丹妙药？&lt;/p>
&lt;p>不能排除敏捷中强调协作、响应变化等思想的正面价值，敏捷宣言本身，对传统僵化的软件流程进行变革是极为必要的。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/037-%e6%95%8f%e6%8d%b7%e6%a6%82%e8%bf%b0/agile_mani_sign.png.png"
loading="lazy"
>&lt;/p>
&lt;p>但问题在于，敏捷是托生于对软件研发流程的思考，提出敏捷宣言的十七位大牛专家，无一例外，都来自软件开发领域。我们不能说这些大牛的思想和视野不够超前，但这个宣言，本身主要是针对软件开发这个领域的原有问题提出的解决思路。&lt;/p>
&lt;p>也就是说，敏捷方法，&lt;strong>先天只针对软件开发，而不是针对软件产品和项目管理&lt;/strong>。组成一个软件项目，经营一个产品，除了开发，还有产品、设计、运营、客服、质量、安全等等其他角色，这些角色的缺位，使这个方法在产品级落地时，就会缺少对应视角的针对性思考，而更多只关注在研发角色在产品中遇到的问题上。&lt;/p>
&lt;p>正是因为这个先天的局限，敏捷在实际落地中，往往会遇到各种各样的问题。项目孵化期，专注研发时，是敏捷最容易产生价值的时期。但一旦产品走向正轨，需要面对更多不同单位、角色的协作时，敏捷往往就会显现力不从心的一面。&lt;/p>
&lt;h2 id="敏捷的价值">敏捷的价值
&lt;/h2>&lt;p>任何企业、项目的成功，其实离不开两部分，制度和文化。&lt;/p>
&lt;ul>
&lt;li>敏捷方法，因为其先天的局限性，作为制度，不具备普适性。&lt;/li>
&lt;li>但敏捷方法中传递出来的文化和价值观，才是敏捷的价值所在，无论是否采用敏捷方法，即便我们使用传统流程，拥抱敏捷的价值观，也依然能够帮助项目走向成功。&lt;/li>
&lt;/ul>
&lt;p>个人浅见，更多关于敏捷研发的介绍文章可参见合集：&lt;/p></description></item><item><title>Deepseek为什么会选择开源？</title><link>https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/</guid><description>&lt;hr>
&lt;blockquote>
&lt;p>有人问，国外的大模型基本都是闭源的，Deepseek这么强为什么会选择开源？&lt;/p>&lt;/blockquote>
&lt;p>回答这个问题，其实了解下梁文锋是谁，他靠什么起家，以及网上关于他的几段访谈就清楚了！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224-2.png"
width="617"
height="418"
srcset="https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224-2_hu_56ff032a5f87c66c.png 480w, https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224-2_hu_3fa5f93afcb8fb7a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;h2 id="deepseek是兴趣产物">Deepseek是兴趣产物
&lt;/h2>&lt;p>幻方作为国内头部的量化私募，依托的就是基于机器学习这样的AI技术大杀四方。已经极为成功。换句话说，幻方自己赚的钱已经够多了，基于已有的技术积累，投入做Deepseek这个大模型，更多是主创者的兴趣产物，而不是核心产品。本意最多也是给主页赋能，但绝不是自己的主赛道。&lt;/p>
&lt;p>当然现在Deepseek到这个位置，也不排除以后幻方的方向就变成大模型了。&lt;/p>
&lt;p>就好像诺基亚当初做纸浆，兰博基尼当年做拖拉机的一样&amp;hellip;. 无心插柳。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224-1.png"
width="1062"
height="729"
srcset="https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224-1_hu_fe57dd50addd5a14.png 480w, https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224-1_hu_93ea4454cc035927.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>所以做Deepseek首要考虑的并不是商业模式，如何赚钱！开源还是闭源，在商业模式上并无太多纠结！&lt;/p>
&lt;h2 id="技术的核心不是技术本身而是产生技术的人才">技术的核心不是技术本身，而是产生技术的人才
&lt;/h2>&lt;p>而从梁文锋的访谈也可以知道，他对开源的看法：人是产生创新的关键！AI这种颠覆性的创新面前，靠闭源获得的护城河是极为短暂的，热爱、好奇、勇于尝试的顶尖人才才是产生这种技术的源头！&lt;/p>
&lt;p>他也举了英伟达的例子，就是英伟达的技术本身也没有特别秘密之处，但组件团队、打造生态和追赶，需要时间，这个时间才是护城河！&lt;/p>
&lt;h2 id="">
&lt;/h2>&lt;p>骨子中的自信和以天下为己任的使命感&lt;/p>
&lt;p>梁文锋在访谈中，多次谈到中国以前的技术发展，多是跟随者和微调式的创新而缺乏颠覆性的创新。需要从模仿阶段向原创过度，人类科技进步中要体现中国人的贡献。相信这也是自己在有经济实力的基础上，给了团队中这些全本土人才充分的自由度和创新空间，厚积薄发产生的结果！&lt;/p>
&lt;p>梁文锋是真正做到了：达则兼济天下&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224.png"
width="620"
height="197"
srcset="https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224_hu_9c7a63e498eb5d32.png 480w, https://chengxiaqiucao.github.io/post/036-deepseek%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%80%E6%BA%90/Pasted-20250224_hu_5c9b3bd1871abb21.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="314"
data-flex-basis="755px"
>&lt;/p>
&lt;hr></description></item><item><title>如何快速完成测试</title><link>https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/</link><pubDate>Wed, 12 Feb 2025 15:31:20 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212.png" alt="Featured image of post 如何快速完成测试" />&lt;blockquote>
&lt;p>有同学提问，团队中没有专职的测试人员，要怎么才能快速完成测试？&lt;/p>&lt;/blockquote>
&lt;p>先说结论，这里并没有标准答案！&lt;/p>
&lt;p>没有测试岗位只是没有专门负责这个职能的人员，但测试这个事并没有消失&lt;/p>
&lt;p>快速完成测试，其实应该换种说法，就是快速建立质量信心。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212.png"
width="512"
height="512"
srcset="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212_hu_abba87d4733d6d62.png 480w, https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212_hu_f4e60964569403a6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>因为测试无穷尽，所以没有绝对的完成测试，按历史经验或大家达成基本共识，产品应该没啥问题了，就算完成测试。&lt;/p>
&lt;p>那既然我们现在希望做的就是快速建立这个质量信心，或者说能快速跟相关干系人达成质量OK的共识，基于这个思路，要考虑哪些因素呢？&lt;/p>
&lt;h3 id="待测范围">待测范围
&lt;/h3>&lt;p>要快速做完测试，一个途径就是测试范围少，比如改动很小，而且没啥关联影响模块，快速检验一下就可以了。道理跟开发代码及时提交、高频集成是一样的，不要积累变更，节省出问题后倒查一堆变更的时间。&lt;/p>
&lt;p>开发阶段充分自测，并及时集成测试，不要积累变更。&lt;/p>
&lt;h3 id="已有质量">已有质量
&lt;/h3>&lt;p>另一个方面是是否对产品现有质量有信心，开发是增量的，之前的存量是否质量是过关的？新增部分和存量部分的关联、影响是否都是已知的？产品质量是全量的，历史功能或影响同样对影响当前的质量信心，所以是否清晰新增和存量的关系，存量本身的质量是否过关也是关键。&lt;/p>
&lt;h3 id="潜在问题">潜在问题
&lt;/h3>&lt;p>再有就是，测试是黑盒的，并不能清晰知道冰山之下有多大的危险。但质量信心这个东西其实跟潜在问题并没有直接关系，它主要跟已知问题和已测范围相关，也就是已知问题越少、已测范围越大则信心越足。背后的逻辑就是，已知问题越多，往往意味着潜在问题越多，发现一只蟑螂，可能代表有一窝蟑螂。所以还是强调提测质量！自测没充分，就先别集成测试了，每个开发先把自己的一亩三分地扫干净先。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-1.png"
width="512"
height="512"
srcset="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-1_hu_83c4de157a81ff7b.png 480w, https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-1_hu_e9aae0c38c7e98e3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h3 id="问题暴露风险">问题暴露风险
&lt;/h3>&lt;p>最后，还有一道防火墙，就是出问题的风险。问题暴露，炸了！ 但炸的影响其实不同，是冒个火星就灭了，还是炸个洞，甚至整栋楼塌了！除了问题本身的大小，不同产品对问题的接受程度其实也不一样，在一个等着拆迁的大楼里放个炮仗，大不了也就是提前拆迁了，容忍度高，信心就足！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-2.png"
width="640"
height="360"
srcset="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-2_hu_74fa70fcd5d9b2b1.png 480w, https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-2_hu_99a93e33a749c607.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>综合以上几个方面，快速完成测试，归根到底就是能不能尽快建立交付的信心，跟个人能力、产品属性、研发流程都有关。其实是个认知问题&lt;/p>
&lt;p>最后，还是要说，任何事物都无法背离内在规律，一个运行稳定，健壮，耐造的系统，必然是会要经过各种磨合、内外部各种问题锤炼才可能达成的。&lt;/p>
&lt;p>你以为的快速交付、一战功成，哪有什么岁月静好，不过是有人替你负重前行罢了。只是这个负重的可能是前期的开发人员、也可能是测试人员、或者运维人员，抑或最后，靠用户抗下所有！&lt;/p></description></item><item><title>马斯克的审计风暴，比Deepseek更直接的AI震撼</title><link>https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/</link><pubDate>Mon, 10 Feb 2025 11:20:27 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/</guid><description>&lt;p>春节假期，咱这边举国欢庆，其乐融融。哪吒票房一路高歌猛进；Deepseek也出圈，强势刷屏，服务器长时间繁忙。&lt;/p>
&lt;p>而于此同时，大洋对岸，随着1月20日懂王入主白宫，马斯克也上任DOGE并当天光速开工， 开始对联邦政府支出进行大规模审计。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/Pasted-20250210-1.png"
width="811"
height="608"
srcset="https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/Pasted-20250210-1_hu_c920a6007b91c76d.png 480w, https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/Pasted-20250210-1_hu_9d89e8f50b1e2664.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>此DOGE非彼数字货币DOGE，是美国&lt;strong>政府效率部&lt;/strong>的缩写。&lt;/p>
&lt;h2 id="马斯克和doge审计风暴">马斯克和DOGE审计风暴
&lt;/h2>&lt;p>和我们预想的传统大规模审计，要先成立审计部门，然后成百上千的审计师和动辄数月的准备、入驻、核对工作不同，DOGE到如今，仅用不到20天的时间，已经把美国政坛捅了个天翻地覆&lt;/p>
&lt;p>&amp;mdash; &lt;strong>1 月 20 日，关闭首席多元化官员执行委员会（CDOEC）；&lt;/strong>&lt;/p>
&lt;p>&amp;mdash; 1 月 25 日，取消约 4.2 亿美元的现有/即将签订的合同；&lt;/p>
&lt;p>&amp;mdash; 1 月 27 日，劳工部、交通部、农业部、商务部、卫生和公共服务部和财政部取消了 16 份 DEIA 合同，节省 1.45 亿美元；&lt;/p>
&lt;p>&amp;mdash; 1 月 28 日，联邦总务管理局（GSA）终止了三份几乎空置的办公空间租约，关闭了 17 个 DEIA 网站，节省了 160 万美元；&lt;/p>
&lt;p>&amp;mdash; 1 月 29 日，取消为缅甸提供的 4500 万美元 DEI 奖学金；&lt;/p>
&lt;p>（截至 2025 年 1 月 29 日，教育部、总务管理局等 26 个部门已终止 85 份 DEIA 相关合同，总额约 10 亿美元；）&lt;/p>
&lt;p>&amp;mdash; 2 月 3 日，未充分利用的建筑的租约终止数量增加到 22 起，节省的金额从 160 万美元增加到 4460 万美元；&lt;/p>
&lt;p>&amp;mdash; &lt;strong>2 月 3 日，关闭美国国际开发署（USAID）；&lt;/strong>&lt;/p>
&lt;p>&amp;mdash; 2 月 4 日，共有 6 个机构终止了 36 份合同，共节省约 1.65 亿美元，其中包括国土安全部的「人文调查和气候支持服务」合同；&lt;/p>
&lt;p>&amp;mdash; 2 月 5 日，终止 12 份咨询合同（在 GSA 和教育部），共节省约 3000 万美元；&lt;/p>
&lt;p>&amp;mdash; 2 月 6 日，社会保障局已终止其「性别 X 倡议标记」的合同，节省 100 多万美元；NASA 取消 Politico 订阅，节省 50 万美元；DEI、不良资产、媒体和咨询类别的 78 份合同因终止，总节省额约为 1.1 亿美元；&lt;/p>
&lt;p>&amp;mdash; 2 月 8 日，宣布在过去 48 小时内，卫生与公众服务部取消了 62 份价值 1.82 亿美元的合同；教育部终止了三项总额为 1500 万美元的 DEI 培训补助金。&lt;/p>
&lt;p>然而，如此快速高效的审计结果和行动背后，却并没有庞大的团队，依靠的仅仅是几个平均年龄20出头的天才少年和他们的AI算法加持。&lt;/p>
&lt;h2 id="doge六灵童">DOGE六灵童
&lt;/h2>&lt;p>难以想象，以上清单上的手笔，依靠的是下面6个毛头小伙子&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/Pasted-20250210.png"
width="976"
height="579"
srcset="https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/Pasted-20250210_hu_8ed95766874ee390.png 480w, https://chengxiaqiucao.github.io/post/053-%E9%A9%AC%E6%96%AF%E5%85%8Bai%E6%B2%BB%E5%9B%BD/Pasted-20250210_hu_b28ceb7a2a94488.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>加文·克里格（25 岁）&lt;/strong>：克里格毕业于加州大学伯克利分校电子工程和计算机科学专业，曾在美国 AI 数据分析公司 Databricks 担任高级软件工程师，是人工智能与大数据分析的专家。克里格的任务是&lt;strong>撰写行政命令&lt;/strong>，并确保它们能够在政府内部迅速生效，那封发给 USAID 全体员工周一不用回总部上班的电子邮件，便出自他手。他还直接起草了针对美国财政部的资金审查令，参与 OPM 的大规模裁员计划，并负责制定公务员的「重新聘用标准」，使得未来的政府雇员必须经过 DOGE 的审批才能入职。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>卢克·法里托（23 岁）&lt;/strong>：法里托尔已从内布拉斯加大学林肯分校退学，后来为 GitHub 背后的硅谷企业家纳特·弗里德曼（Nat Friedman）工作。他曾在 SpaceX 实习过，为泵、阀门和其他有助于为火箭提供燃料的组件编写软件。法里托尔目前被列为美国卫生与公众服务部（HHS）部长办公室的「执行工程师」，亲自监督了 USAID 的&lt;strong>数字封锁&lt;/strong>行动，接下来的目标已经瞄准了负责合同的医疗保险和医疗补助服务中心的系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>爱德华·科里斯廷（19 岁）&lt;/strong>：科里斯汀是最小的一位，刚刚高中毕业，在波士顿的美国东北大学就读学习机械工程和物理学，去年夏天在马斯克的脑机接口公司 Neuralink 工作了三个月，目前他的具体职责尚未明确。科里斯汀曾使用非政府的谷歌 Gmail 加入美国总务管理局员工的通话中，要求他们检查自己编写的代码并证明自己的工作合理性，此举引发联邦雇员不满。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>阿卡什·博巴（21 岁）&lt;/strong>：博巴来自加州大学伯克利分校，曾是桥水基金的投资工程实习生，此前还在 Meta，和 MAGA 资助者蒂尔（Peter Thiel）创办的美国软件服务商 Palantir 实习过，专长是人工智能、数据分析和金融建模。他负责&lt;strong>设计算法监控政府资金流向&lt;/strong>，主导的「财政支出实时监控系统」允许在不经过国会审查的情况下，实时冻结联邦「低效支出」。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>伊桑·绍特兰（22 岁）&lt;/strong>：绍特兰是哈佛大学计算机科学专业的大四学生，是团队中唯一有人工智能创业经验的人，他创办的人工智能公司 Energize AI 获得了 OpenAI 的 10 万美元资助，曾在马斯克的人工智能公司 xAI 举办的黑客马拉松比赛中曾获得过亚军。绍特兰负责 DOGE 的 AI 政府计划，目标是&lt;strong>用算法取代政府传统的人力决策机制&lt;/strong>，将大部分行政审批、预算评估、甚至国会报告自动化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>戈蒂埃·科尔·基利安（24 岁）&lt;/strong>：破解财政部安全系统，获取支付网络权限。基利安毕业于麦吉尔大学，在金融数据处理方面有极强的能力，曾在 Jump Trading 公司担任工程师，该公司专门从事高频金融交易和算法。基利安的主要任务是帮助 DOGE 团队&lt;strong>破解财政部的安全防线&lt;/strong>，使他们能够访问政府支付网络，绕开安全检查直接读取数百万笔交易记录。基利安也是少数几个获得白宫高级访问权限的年轻人之一，马斯克对他的信任极高。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>就这么几个大学生年纪的工程师，在取得数据权限后，仅仅两周左右就依靠AI将之前数十年隐藏在冰山之下的各种问题浮上水面。可以说是，确实是兵贵神速，美国的那些官老爷们估计还没缓过神，就发现家被抄了。&lt;/p>
&lt;h2 id="感慨">感慨
&lt;/h2>&lt;p>无论马斯克和这乙巳六章京，维新风暴最终走向哪里，&lt;strong>AI&lt;/strong> 已经实实在在以一种让人瞠目结舌的方式，开始左右大洋对岸的政局，也必将深度影响到我们生活的方方面面。&lt;/p></description></item><item><title>Scrum敏捷四会 回顾会</title><link>https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241201.png" alt="Featured image of post Scrum敏捷四会 回顾会" />&lt;p>在前面的分享中，我们已经梳理了计划会、每日站会和复盘会的召开要点，本篇我们再对Scrum敏捷四大仪式中的最后一个会议仪式 - &lt;strong>迭代回顾会&lt;/strong> 进行探讨&lt;/p>
&lt;h2 id="回顾会的目的和作用">回顾会的目的和作用
&lt;/h2>&lt;p>回顾会因为和复盘会一般都放在迭代的最后一天，而且通常安排是相邻在一起的会议，所以很多时候大家会错误地认为这两个会议是同一个敏捷仪式，把这两个会等同起来。&lt;/p>
&lt;p>这个其实是对复盘和回顾这两个不同仪式的错误认识。这两个会议，作用、目的，包括会议的参与人员其实都有明显不同，所以，不能因为这两个仪式时间上比较连贯，就想当然地认为它们是同一个会议。&lt;/p>
&lt;p>复盘会的主要目的是通过对迭代交付物的演示，及时收集产品干系人的反馈和意见，以便确认阶段交付符合预期并对后续迭代进行及时调整。 着眼点是&lt;strong>面向外部的反馈收集，针对产品本身&lt;/strong>&lt;/p>
&lt;p>而回顾会的着眼点在&lt;strong>团队内部的回顾总结，针对流程和团队协作&lt;/strong>。&lt;/p>
&lt;p>所以回顾会的目的是在迭代结束后，再回过头检视迭代的运作，从中总结经验，汲取教训。&lt;/p>
&lt;p>而通过召开回顾会，能产生以下作用：&lt;/p>
&lt;ul>
&lt;li>团队在通过多个迭代去实现产品愿景的同时，也会定期地检视迭代的运作，发现问题，总结经验，及时改进，持续提升。&lt;/li>
&lt;li>团队成员通过回顾会这个窗口，有一个相对正式和公开的平台，都可以提出对团队运作方式的建议或发现可能的问题。&lt;/li>
&lt;li>回顾会也是增进团队凝聚力的一个重要仪式，是团队成员间互相肯定或开诚布公交换意见的一个渠道。&lt;/li>
&lt;/ul>
&lt;p>总之，回顾会可以看作是团队内部的一个闭门会议，是团队自我更新和优化的一个仪式。&lt;/p>
&lt;h2 id="回顾会中的不同角色">回顾会中的不同角色
&lt;/h2>&lt;p>所以基于上面的目的，这个会议也不应该和复盘会作为同一个会议召开。&lt;/p>
&lt;p>不同角色参与会议的角色其实也都有所区别：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>必须参加&lt;/strong>：作为一个团队内部的总结会议，面向的是团队自身的改进，所以Dev Team和Scrum Master是必须要参与会议的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>尽量参加&lt;/strong>：PO虽然也是团队一份子，但PO的职责更多还是面向产品本身，而且基本不直接参与产品研发本身。所以PO在团队回顾这点上，不是必须要参加；但是作为团队的重要成员，很多情况下，有些意见和改进举措也是需要PO提出或参与的，因此PO是尽可能参加。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免参加&lt;/strong>：而把回顾会和复盘会分开的一个重要原因，其实就是作为团队内部的改进会议，为了让团队成员能够更直接地表达意见，参与复盘会议的一些利益干系人，比如用户、经理层等，最好是避免参会。当然有些特殊情况下，比如产生重大分歧、产品目标有重大风险等情况下，可能也会请关键的干系人参与回顾。（当然，老板非要参加一般也没法拒绝）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209.png"
width="899"
height="611"
srcset="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209_hu_cd6b023c8ae75d9.png 480w, https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209_hu_f4805339191698b3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="353px"
>&lt;/p>
&lt;h2 id="会议流程">会议流程
&lt;/h2>&lt;p>回顾会通常建议是尽可能线下召开，而因为团队都比较熟悉，又是迭代结束，气氛尽快可能营造得轻松些，准备些小零食，小礼品有助于帮助会议达到更好效果。&lt;/p>
&lt;p>会议大体流程如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-1.png"
width="1719"
height="265"
srcset="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-1_hu_31b40120eddd15a5.png 480w, https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-1_hu_8da67b14dd9ecac0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="648"
data-flex-basis="1556px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先当然还是Scrum Master来主持会议。在进行回顾之前，通常还要做些准备。比如收集迭代过程中的相关数据，比如burn-down燃尽图，团队的速率图。以及在以前迭代回顾会上的跟踪项，目前的状态，这些都在在召开会议开始阶段，让团队总体做个了解。当然然对于比较新的团队，还要介绍下回顾会的规则。要用到的配套工具比如卡片、投票贴纸等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下一个环节，是收集团队对迭代运作的建议，也就是团队成员各自把自己对当前迭代的观察结果写下来，哪些方面做得好，应该保持：哪些方面还不够好，可以改进，包括如果想单独感谢谁都可以写到不同颜色的贴纸上。大家都写完以后，将相关贴纸贴到准备好的白板上对应区域中，而在意见收集完以后，大家可以集中到白板前，由SM或者团队任意一个成员，大声地复述每一个贴纸卡片的内容。这个过程其实相当于团队一起重温迭代运作的过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在读完大家所有的意见之后，会进入投票环节。比如每人都可以规定有3票，然后针对这些意见，每人投出自己觉得最值得在下一个迭代采取行动的3条意见。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成投票以后，统计得票最多的意见，比如每人三票，那么最后就选出得票最多的三条意见，作为需要在下一个迭代采取行动的待办项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确定待办项后，团队还要共同针对对应的事项，讨论具体的措施内容，确定如何来进行改进和提升。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上面讨论产生的结果，要明确到可实施的具体行动，指定对应的负责人。这些要作为下一个迭代的任务安排，纳入迭代看板进行任务跟踪。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过上面这个会议流程，达到团队自我持续更新和改进提升的目的。这里一个非常重要的核心就是成员应该开诚布公，需要大家真正从团队本身的提升为出发点来进行回顾。&lt;/p>
&lt;h2 id="常用回顾会工具">常用回顾会工具
&lt;/h2>&lt;p>回顾会的主要内容，其实就是收集大家对迭代运作观察和建议的改进事项。一般线下是通过不同验收的贴纸在白板上体现。&lt;/p>
&lt;p>不过现在很多团队可能是异地或居家办公，这种线上回顾会也可以利用一些线上的配套工具。&lt;/p>
&lt;p>比较常用的有：&lt;/p>
&lt;h3 id="ideaboardz">IdeaBoardZ
&lt;/h3>&lt;p>通过 &lt;a class="link" href="https://ideaboardz.com/" target="_blank" rel="noopener"
>https://ideaboardz.com/&lt;/a> 可以方便地建立一个回顾模板&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-3.png"
width="2105"
height="968"
srcset="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-3_hu_1e5569cb6509f46.png 480w, https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-3_hu_b852e1608cb979fd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="521px"
>&lt;/p>
&lt;p>按最基本的&lt;/p>
&lt;ul>
&lt;li>团队执行比较好的地方&lt;/li>
&lt;li>值得改进的地方&lt;/li>
&lt;li>需要采取的行动&lt;/li>
&lt;/ul>
&lt;p>从这几方面收集大家的意见&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-2.png"
width="1169"
height="445"
srcset="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-2_hu_b08e81f52492d1b3.png 480w, https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-2_hu_aab6830d5cbec2e4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="630px"
>&lt;/p>
&lt;h3 id="海星图">海星图
&lt;/h3>&lt;p>除了上面的基本模型外，有的团队还会利用&lt;strong>海星图&lt;/strong>对观察结果进行细分，划分出五个不同区域&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-4.png"
width="470"
height="456"
srcset="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-4_hu_8bbcd0febefd91c7.png 480w, https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-4_hu_264f7df08a26cf93.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>KEEP&lt;/strong>: 应该继续保持的行为&lt;/li>
&lt;li>&lt;strong>MORE&lt;/strong>: 应该更多执行的行为&lt;/li>
&lt;li>&lt;strong>LESS&lt;/strong>: 应该在后续迭代减少的行为&lt;/li>
&lt;li>&lt;strong>START&lt;/strong>: 应该在后续迭代开始实施的行为&lt;/li>
&lt;li>&lt;strong>STOP&lt;/strong>: 应该在后续迭代停止的行为&lt;/li>
&lt;/ul>
&lt;h3 id="帆船图">帆船图
&lt;/h3>&lt;p>类似的其实还有 &lt;strong>帆船图&lt;/strong> 这样的模型，目的基本相似，都是起到 回顾检视，后事之师的目的。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-5.png"
width="846"
height="644"
srcset="https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-5_hu_242f86d50d08f6d5.png 480w, https://chengxiaqiucao.github.io/post/034-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%9B%9E%E9%A1%BE%E4%BC%9A/Pasted-20241209-5_hu_674497bdf56e8645.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>以上就是关于 &lt;strong>Sprint 回顾会&lt;/strong> 的一些梳理。实际运作中，千万不要把回顾会开成抱怨、诉苦会或互相指责，不管运作过程中发现的问题多么严重，大家最终还是要立足团队发展，成员和团队共同得到提升才是目的。&lt;/p></description></item><item><title>细说敏捷：敏捷四会之复盘会</title><link>https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/</link><pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201.png" alt="Featured image of post 细说敏捷：敏捷四会之复盘会" />&lt;p>前两篇文章，我们分享了敏捷四会中的计划会和每日站会，本文我们继续介绍在敏捷 Sprint 结束后会召开的敏捷复盘(Review)会议。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201.png"
width="1728"
height="959"
srcset="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201_hu_3c6c2fbe5cce67cb.png 480w, https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201_hu_a6ff5a4100cd1a8d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;h2 id="目的和作用">目的和作用
&lt;/h2>&lt;p>Sprint Review Meeting 作为一个Sprint迭代结束后召开的会议，主要目的其实是体现敏捷思想中的“和客户合作”，“快速反馈”，是敏捷小步快跑思想的重要体现。&lt;/p>
&lt;p>具体来说，这个会议的目的，是向产品的业务团队、用户和利益干系人来展示当前 Sprint 的工作成果，听取他们对产品的反馈，确认当前产品的输出 &lt;strong>增量（Increment）&lt;/strong> 是否符合预期，有无新的意见，便于后续 Sprint 的及时调整。&lt;/p>
&lt;p>这也是敏捷区别于传统研发模式的一个显著区别，也就是在一个短周期的Sprint，就会通过这个会议的展示，和最终需求方及时确认进展，而不是像传统流程那样，直到经过一个长周期的完整研发流程后，才会把最终产品交付给用户进行确认。&lt;/p>
&lt;p>所以，这个会议的作用，除了团队的成果交付，更主要的是通过对产品Increment的展示，获取外部业务方和其他干系人的反馈，便于及时调整。&lt;/p>
&lt;h2 id="误区">误区
&lt;/h2>&lt;p>很多人把这个会议看作是Sprint团队内部，跟PO的一个交付确认会议，其实是不正确的。&lt;/p>
&lt;p>它更多是基于和团队外部的沟通目的。&lt;/p>
&lt;p>也因此，有些特殊状况下，某些Sprint这个会议也是可以不召开。比如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Sprint的 Increment 产出并无可直接展示的比较明显的业务变更，更多是一些技术调整，架构层面的变化时，并无多少需要业务方确认的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关键的业务方或利益干系人无法参加，不能匹配当前 Sprint的节奏。Sprint的结束时间比较固定，但关键利益干系人的时间如果无法匹配，那么这个会议可能会取消。这种情况下，后续Sprint 的复盘会时会包含当前sprint的相关输出展示&lt;/p>
&lt;/li>
&lt;li>
&lt;p>团队本身评估Sprint Goal就没有达成，关键的产出达不到预期时，自然也不适合跟外部进行产品展示。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参会人员">参会人员
&lt;/h2>&lt;p>基于这个会议的目的，其实复盘会可能参与的人员会比较多，一般会包含下面这样一些角色：&lt;/p>
&lt;ul>
&lt;li>Scrum Team 当然都是应该参加的，包括PO、SM、Dev Team&lt;/li>
&lt;li>关键的利益干系人，通常指这个产品的投资人（产品总监/研发总监这样的角色）&lt;/li>
&lt;li>团队成员的相关汇报对象，开发经理、测试经理、UE经理等&lt;/li>
&lt;li>和Sprint产出相关的其他关键关联团队角色，比如有协作的其他Scrum团队关键成员（PO、SM），或者像安全、法务、质量、售后、售前、客服等。&lt;/li>
&lt;/ul>
&lt;p>复盘会一般都在Sprint结束的最后一天召开。而Scrum 团队中，PO作为和外部各种干系人的沟通渠道，会在会议召开前（通常提前1~2天）发出会议邀请，既告知相关人员当前Sprint的主要输入内容和范围，也便于确认会议与会人，并给团队预留一些复盘演示的必要准备时间。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201-2.png"
width="1075"
height="1054"
srcset="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201-2_hu_43482dbbfe986f8a.png 480w, https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201-2_hu_8dbe488a6291c7f4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>&lt;/p>
&lt;h2 id="会议流程">会议流程
&lt;/h2>&lt;p>迭代最后一天，大家完成迭代工作，根据PO的会议邀请，参与Review Meeting。&lt;/p>
&lt;p>会议的流程大致如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201-1.png"
width="1320"
height="222"
srcset="https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201-1_hu_d07cdd77c3adb380.png 480w, https://chengxiaqiucao.github.io/post/033-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E5%A4%8D%E7%9B%98%E4%BC%9A/Pasted-20241201-1_hu_a205db4f60f07bdd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="594"
data-flex-basis="1427px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Scrum Master主持会议，一般会在开始欢迎参会的相关干系人，并简单介绍下参会的成员，如果Scrum团队有新成员加入，可能还会让新成员做个简单的自我介绍。如果相关人员都比较熟悉，就是个简单的开场白。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来，会由 PO 说明下当前这个Sprint增量的主要内容，也是接下来演示的主要功能范围。如果是间隔了多个sprint才召开的Review，这里通常会包含多个Sprint的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后就是演示环节，一般是PO 自己来进行演示说明，因为 PO 全程参与Sprint，对相关内容也比较熟悉。实际工作中，也可以是团队中比较熟悉相关功能的成员来进行演示，通常负责测试的同学执行这个演示会比较多。最好不要在演示过程中，频繁切换不同人员来进行演示。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下面这个环节，其实通常也会贯穿在演示过程中，就是干系人对产品实现上的一些反馈沟通，基于产品的目标和价值，包括下一Sprint的预期，对产品会有一些疑问或改进意见，团队可以就这些问题，和干系人进行直接的沟通和讨论。这部分其实占用了这个会议最主要的时间，气氛或融洽或激烈，但最终都会对形成一些原有需求的修订或新增。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所以在上一个环节的输出其实会产生一个更新的PBI清单，而这也会是后续Sprint的主要输入，是会后PO需要进一步梳理精炼的素材。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，SM进行会议总结，通常会汇总下讨论结果，包括确认后续要跟踪落实的需求和其他事项，如相关技术的调研攻关等。当然，这里的总结，其实也会提醒干系人散会，但对团队来说，也是提醒后续回顾会的召开（回顾会通常紧接复盘会召开）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>复盘会一般控制在2小时内（针对2周的Sprint），SM在过程中要控制会议节奏，根据演示内容的多少，对一些过于发散和深入的讨论进行时间上的把控，比如另行预定专门的会议讨论等。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>那么总结下复盘会的关键事项：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先这个会议是一个迭代结束后，获取迭代产出反馈的一个会议。是敏捷小步快跑思想的主要体现。但实际运作中，并不是一个必定会每个Sprint都会召开的一个会议。只是应尽可能不要间隔时间太长，给团队来根据干系人的反馈进行及时调整有灵活性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这个会议并不是一个验收会，它并不是用于向PO确认Sprint Goal有没有达成的一个会。沟通反馈才是主要目的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会议的过程和产出，是敏捷迭代，产品演进的重要一环，是确定PBI，及时纠偏的重要过程，可以确保团队的工作和用户的期望是匹配的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，这个会议也是Sprint中Dev Team和相关干系人直接沟通，感受压力和直面用户或老板们真实想法的唯一一个正式的窗口。对于避免团队闭门造车、想当然或工程师思维有重要意义。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>以上就是关于Sprint Review Meeting相关召开要点的梳理和总结，欢迎关注秋草，持续带更多软件研发、测试、技术的深度梳理和思考。&lt;/p></description></item><item><title>细说敏捷之每日站会</title><link>https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standupMeeting.png" alt="Featured image of post 细说敏捷之每日站会" />&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standupMeeting.png"
width="914"
height="472"
srcset="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standupMeeting_hu_f535eee33a620b62.png 480w, https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standupMeeting_hu_6af6806b02b3b670.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="464px"
>
上一篇文章中，我们讨论了 &lt;strong>敏捷四会&lt;/strong> 中 &lt;strong>冲刺计划会&lt;/strong> 的实施要点，本篇我们继续分享敏捷四会中实施最频繁，团队最容易实施但往往也最容易走形的第二个会议：&lt;strong>每日站会&lt;/strong>&lt;/p>
&lt;h2 id="关于每日站会的误区">关于每日站会的误区
&lt;/h2>&lt;p>站会是一个比较有标志性的仪式活动，大部分号称敏捷的团队，也都会实施站会这个实践，但其实对站会的理解上，其实还是有不少误区。&lt;/p>
&lt;ol>
&lt;li>很多人会认为站会是由Scurm Master负责的一个会议。把它理解成像传统项目一样，PM听取团队工作汇报目的的一个会议。&lt;/li>
&lt;/ol>
&lt;p>但在Scrum中，SM其实一个辅助性的角色，团队本身才是对各项具体工作负责的人。所以站会的Owner其实是团队。虽然通常也会由SM来主持，但SM的主要作用是协调和掌控节奏，会议本身主要还是为了完成团队内部自身的协作。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>第二个误区，就是这个会议也不是一个状态更新会，它既不是用来向SM，也不是向PO汇报工作进展的。更新状态本身不是会议的目的，而主要是为了让团队成员对其他人的工作都有清晰的了解，便于当天工作的进一步协作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还有一个误区，也是很多人会不自觉进入的误区。就是这个会议也不是用来解决问题的。它只是一个很简短的团队成员之间的同步会议。要保证会议效率，避免进入具体细节的长时间讨论。做到反映团队当前的进展、识别工作障碍就达到了目的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="每日站会的作用">每日站会的作用
&lt;/h2>&lt;p>所以，澄清了以上误区，站会的作用也就比较清楚了：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>会议的负责人是团队本身。一个很成熟的Scrum团队，甚至也可以不需要SM来组织并主持站会的召开&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会议的主要目的是用于团队进展的同步，成员间互相了解进展，使每个人都能知道团队目前处在完成 sprint 目标的一个什么位置，还有哪些需要调整的地方&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，通过站会，也可以识别出当前主要的困难和阻碍，便于进一步及时采取措施。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="站会的内容">站会的内容
&lt;/h2>&lt;p>而因为站会的主要作用是同步和协同，所以通常会放在一天工作的开始，站会就是团队当天工作的起点。 会议的召开流程，通常也是大家一起集中到看板前，每个团队成员轮流说明下三个问题：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standup-3question.png"
width="1328"
height="796"
srcset="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standup-3question_hu_39ee246cf55e6ec8.png 480w, https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/standup-3question_hu_e1aabb1be939ac6f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;ul>
&lt;li>前一天我完成了哪些工作？&lt;/li>
&lt;li>今天的工作计划是什么？&lt;/li>
&lt;li>有哪些遇到的困难或需要他人协作的事项？&lt;/li>
&lt;/ul>
&lt;p>每位成员都通过说明这三个问题，让团队其他人都能知道自己目前的工作进展，然后判断出当天各自要协作的对象是谁，还有哪些需要下一步尽快讨论的问题，说明需要的支持或者在别人需要支持时予以协助。&lt;/p>
&lt;p>正因为站会的作用就是同步信息，而且每天都会召开，会议的时长应严格控制，通常不应该超过15分钟。大家快速更新完各自的进展，任何需要进一步讨论的问题都应该放到会后，再单独和相关的伙伴就问题的细节或解决方案深入讨论。&lt;/p>
&lt;h2 id="站会中的不同角色">站会中的不同角色
&lt;/h2>&lt;p>而作为 Scurm 中的三种不同角色，每种角色参与站会的话应该做些什么？发挥什么作用呢？&lt;/p>
&lt;h3 id="scrum-master">Scrum Master
&lt;/h3>&lt;p>SM作为团队的组织者和支持者，参与站会最主要的作用其实就是维持站会的纪律，保证会议召开的效率，使会议符合敏捷精神。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在出现有问题可能需要深入讨论的时候，及时中断，并且把问题放入看板的&lt;code>停车场&lt;/code>部分中，站会后再安排继续讨论&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据团队成员同步的进展和工作内容情况，判断完成冲刺目标的进度风险，并提醒团队成员可能落后的进度，视情况协调其他成员参与协作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>成员提出的阻碍如果会上无法在团队内部立即解决，记录并在当天进行进展跟踪&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会议结束前，SM 还可以快速地和团队分享下 sprint 的当前燃尽图和看板中主要条目的状态，使大家对当前的总体进展有一个整体的了解&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p> - 最后，SM应该控制会议时间，不超过15分钟结束&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/burnDown.png"
width="1283"
height="830"
srcset="https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/burnDown_hu_f468fe059180f86a.png 480w, https://chengxiaqiucao.github.io/post/032-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A/burnDown_hu_86aa574874b2a243.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;blockquote>
&lt;p>燃尽图是一个当前实际完成工作量和理想进度的拟合图，可以直观反映出团队当前进展是否符合预期&lt;/p>&lt;/blockquote>
&lt;h3 id="dev-team">Dev Team
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>准时参会，不要迟到。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最主要的当然是进度同步，说明清楚上面的三个问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会议前，及时将自己的负责的任务状态更新到最新，保证看板的任务的状态信息是准确的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有任何阻碍或者需要协调、澄清的问题，站会上应该及时地提出来，这也是这个会议主要的目的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="po">PO
&lt;/h2>&lt;p>PO在 sprint 进行中，主要职责是澄清和确认需求，但站会的作用主要是团队的工作进展同步，所以PO 不一定必须参加这个会。但也不是不能参加，参与站会也有他的作用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对PO自身，通过参与站会，可以知道团队当前的进展情况，能对 Sprint Goal 的达成有更加及时和清晰的判断。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>站会如果有关于需求的疑问或者需要澄清的，简单一两句话就可以在会议上完成说明的就可以在会议上解决。对于比较复杂的，也可以及时地掌握情况，方便会后立即单独进行沟通。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还有就是 Sprint 进行中，如果正在进行中的需求发生了调整或者优先级变化，就需要及时在站会上跟团队说明，方便团队进行相应的调整和应对&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有时团队识别的困难或阻碍是跟跟PO相关的，这时 PO 也可以及时跟进，包括对于之前反馈过的阻碍事项的解决进展也可以跟团队进行通报。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>总体说来，对于 Scrum 中三种角色参与站会的要求：&lt;/p>
&lt;ul>
&lt;li>SM - 非必须，但推荐参加&lt;/li>
&lt;li>Dev Team - 所有成员必须参加（包括远程电话参会），成员临时无法参与，最好也请其他成员代为说明。&lt;/li>
&lt;li>PO - 不要求，但可以参会&lt;/li>
&lt;/ul>
&lt;h2 id="召开注意事项">召开注意事项
&lt;/h2>&lt;p>最后，站会能否达到它的效果，也是很多敏捷团队实践走形的一些注意事项，总结如下：&lt;/p>
&lt;p>-  &lt;strong>会议应该定点，定时&lt;/strong>。站会每天都开，大家应该形成习惯，每天在固定的时间，固定的地点来参会，避免因为经常调整，浪费会议召集的时间。&lt;/p>
&lt;p>-  &lt;strong>简要&lt;/strong>。每个成员发言要清楚会议的目的就是进展同步，把三个相关问题说明清楚就可以了。而不是在这里探讨和解决问题。控制每个人的发言时间在1分钟左右。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>准时&lt;/strong>。站会要求Dev Team成员都应该参与，这样才能清楚了解其他人的进展，在需要协作的事项上可以及时进行协同。而且站会比较简单，所以准时参会就尤为重要，不能因为个人原因浪费团队的时间。&lt;/li>
&lt;/ul>
&lt;p>确实出现成员迟到的情况，通常也不会等待大家到齐。定时召开的时间要严格保证。（对于异地办公、或者远程的团队成员，可以通过视频会议、电话的方式拨入，但也要保证参会。如果有团队成员中途休假，通常也应该将自己的进展情况委托其他成员代为说明。）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>专注&lt;/strong>。这是个容易忽略的注意事项。道理和上面一样，因为站会的作用是协同，所以每个成员都应该是专注在会议上的，确保能清楚所有人的进展情况，而不应该出现在会议中处理其他工作事务、接电话、玩手机、或者开小会的情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>停车场&lt;/strong>。这个看板上的一块专门区域，通常是站会时不可避免遇到一些需要深入讨论的问题时，为了保证会议的效率，暂时把问题记录下来，所放置的一个单独区域。停车场的作用就是避免会议进入深入讨论，但会后可以由对应成员再针对停车场中的问题，继续深入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>站立会议&lt;/strong>。站会，顾名思义，就是希望所有人在会议期间是站立进行的。特别是对于在一个办公室办公的团队来说，站立可以有效避免会议时间拉得过长，而且对于有实物看板的团队来说，站立姿势来移动看板上的事项会更加方便，站着说话也能更容易让所有人都听清。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>站会是 Sprint 进行过程中，全体成员都会参加的一个例行的信息同步仪式。所以效率很重要，是团队自组织和高效协同的重要体现。掌握站会的目的和各个角色参与的要点和注意事项，可以帮助我们更好地把站会开好，真正发扬出敏捷精神。&lt;/p>
&lt;hr>
&lt;p>关注秋草的公众号，及时了解更新动态&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/001-postman%e5%9f%ba%e7%a1%80%e7%af%87/qrcode.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>Scrum敏捷四会 计划会</title><link>https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/</link><pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/sprint_planning.png" alt="Featured image of post Scrum敏捷四会 计划会" />&lt;p>在 Scrum 敏捷模型中，敏捷的落地，其实主要是通过 Scrum 定义的四个主要仪式，也就是我们通常说的 &lt;strong>敏捷四会&lt;/strong> 来完成的，本文我们探讨四会中 &lt;strong>Sprint Planning&lt;/strong> 会议的作用以及其实践要点。&lt;/p>
&lt;h2 id="planning会议的作用">Planning会议的作用
&lt;/h2>&lt;p>在每一个Sprint的开始，首先就会召开这个Sprint Planning会议，同时这个会议也标志着Sprint开始。&lt;/p>
&lt;p>这个会议的主要作用，当然如其名，就是制定当前Sprint运作的计划，确定团队在当前Sprint的工作内容和工作方向，形成Sprint的待办列表 SBI。&lt;/p>
&lt;h3 id="会议的输入">会议的输入
&lt;/h3>&lt;h4 id="pbi">PBI
&lt;/h4>&lt;p>Planning会议最主要的输入，是产品待办清单 PBI。&lt;/p>
&lt;p>会议中的主要讨论其实主要是围绕 PBI 展开的，也就是要从 PBI 中提取经过团队共同确认的待办项，纳入当前迭代，形成 SBI&lt;/p>
&lt;p>而作为会议输入的 PBI，应该是已经和团队一起经过梳理、提炼的需求。团队成员对需求本身也有了充分的理解，并完成对待办项工作量的估算。所有待办项也都有优先级的定义。&lt;/p>
&lt;p>这也是在召开Planning会议前，PBI最好是已经经过grooming会议做过了需求澄清和估算的主要原因。以提高planning会议的效率。 当然在Planning会议上，也会存在对需求的进一步澄清和确认过程，只是为了控制时间，这部分可以尽可能提前打好充分基础。&lt;/p>
&lt;h4 id="dordod">DOR/DOD
&lt;/h4>&lt;p>另外一个重要的输入是团队集体对DOR和DOD的定义，这个通常在sprint 0上确认。后续Sprint可以沿用，如果有修正再重新确认。&lt;/p>
&lt;p>关于DOR 和 DOD，我们介绍Sprint工件的时候有过说明，不再赘述。&lt;/p>
&lt;p>DOR 其实是可以进入Sprint的待处理需求的标准，符合DOR的需求才应该进入 Planning的讨论。
DOD 则是Sprint进行中，每个待办项可以认为完成的标准。&lt;/p>
&lt;p>Planning会议上应该确认大家对此有共识。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/Pasted-20241101-1.png"
width="788"
height="615"
srcset="https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/Pasted-20241101-1_hu_d0c607e0e790f3ad.png 480w, https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/Pasted-20241101-1_hu_26a8e5a54d372c6a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;h4 id="capacity产能">Capacity（产能）
&lt;/h4>&lt;p>这个体现的是团队的生产能力。每个 Sprint 团队成员的产能是不固定的，因为可能有成员休假，借调或者本来就不是全职投入的情况。因此在召开 Planning 会议前， Scrum Master应该提前收集掌握好当前Sprint团队整体的Capacity。&lt;/p>
&lt;h3 id="会议要解决的问题">会议要解决的问题
&lt;/h3>&lt;p>在Planning会议上其实主要就是要解决三个问题： Why？ What？ How？&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Why？&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>为什么我们要进行这个sprint？ 团队要理解这个sprint中的工作带给产品的价值是什么。 PO需要向大家说明他希望达成的价值目标，要能够回答团队为什么我们要做这些需求？为什么这些需求应该要放到当前这个sprint？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>What？&lt;/strong>
Sprint中具体要做的是什么？如果需求已经经过了grooming的梳理和提炼，这里就会节省很多时间。但如果需求还没有充分澄清，或者会议中产生了新的一些思路，PO和团队这里要完成对需求细节的梳理，识别相关的风险和依赖，并达成理解一致。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>How？&lt;/strong>
这部分更多是开发团队成员的讨论内容，就是确定具体如何纳入Sprint的需求实现？并将需求Story再拆分成不同的工作任务，匹配到人，Scrum Master会和团队一起，完成任务的分配和团队Capacity的平衡。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="会议的输出">会议的输出
&lt;/h3>&lt;p>Planning会议最主要的输出，当然就是SBI，包含当前迭代中需要完成的所有任务项。&lt;/p>
&lt;p>此外，还有一个我们之前介绍过的工件，Sprint Goal。 这个阐明了团队和PO共同达成的迭代应该要力争完成的目标摘要。&lt;/p>
&lt;h3 id="会议时长">会议时长
&lt;/h3>&lt;p>敏捷组织的经验数据是根据sprint的长度，每周对应2小时，也就是如果sprint是1周的话，sprint计划会大概要开2h，而通常sprint一般是2周的长度，这时sprint计划会则需要4个小时。&lt;/p>
&lt;p>当然这只是经验数据，不同团队根据团队规模、成熟度和工作的复杂程度会有所不同。&lt;/p>
&lt;h2 id="不同角色应如何参与">不同角色应如何参与
&lt;/h2>&lt;p>Planning会议主要是团队内部会议，参与人包括团队全体成员。极少数的情况下，会邀请主要的利益干系人（直接老板）。在需要他们给出一些决策输入时，可能需要邀请参加。对于比较大的项目，存在多个Scrum团队合作的情况，可能也会邀请到其他团队的关键工程师，来参与一些重要的技术评估。但总体来说，这个会主要还是团队内部的讨论为主，参与人是PO、SM和Dev Team。&lt;/p>
&lt;h3 id="po">PO
&lt;/h3>&lt;p>PO在计划会前，要完成PBI的优先级排列，并和团队提前完成需求的grooming。&lt;/p>
&lt;p>在会议进行中，则主要是要解答Why和What的问题，并提出期望的sprint goal，确认Scope。&lt;/p>
&lt;p>会议最后，要团队一起确认会议输出：sprint Goal和SBI。&lt;/p>
&lt;h3 id="sm">SM
&lt;/h3>&lt;p>Scrum Master在会前要预定会议，收集团队的投入产能，有那些人需要休假，每位成员在Sprint中的投入时间。&lt;/p>
&lt;p>会议中，SM负责主持，要组织会议流程，协助团队进行任务的分解和工作分配，确保scope中的所有任务都有对应的owner负责人。&lt;/p>
&lt;p>在任务分配和认领过程中，要随时检查团队成员的任务和个人可投入时间的匹配情况，避免出现过度认领。还包括在一些互相依赖任务上进行协调的工作。&lt;/p>
&lt;p>最后，SM要负责汇总出SBI，并和团队一起确认goal。一般还会有一个收集大家对完成Sprint goal的信息指数环节。&lt;/p>
&lt;p>在会后，SM还一应该准备好sprint看板，把相关任务设置到初始状态，并发出会议纪要。&lt;/p>
&lt;h3 id="dev-team">Dev Team
&lt;/h3>&lt;p>会前，团队成员应该将个人在当前迭代的投入时间告知SM，提前参与PO的grooming，充分了解PBI中的相关需求细节。&lt;/p>
&lt;p>在会议召开过程中，确保自己理解了sprint的目标，另外如果有需求需要进一步说明，积极参与梳理，理解需求，完成估算，主动提出并讨论识别到的风险、依赖。 然后和团队一起，根据自己迭代中的Capacity认领任务，承诺产出）。&lt;/p>
&lt;p>最后大家一起确认sprint goal，给出自己对sprint完成goal的信心指数。完成sprint的启动&lt;/p>
&lt;h2 id="会议流程">会议流程
&lt;/h2>&lt;p>再总体梳理下会议进行的流程&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/Pasted-20241118.png"
width="1363"
height="336"
srcset="https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/Pasted-20241118_hu_49098a62f5ea414e.png 480w, https://chengxiaqiucao.github.io/post/031-scrum%E6%95%8F%E6%8D%B7%E5%9B%9B%E4%BC%9A-%E8%AE%A1%E5%88%92%E4%BC%9A/Pasted-20241118_hu_44f4dc53606e4284.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="405"
data-flex-basis="973px"
>&lt;/p>
&lt;p>SM 召集会议后，&lt;/p>
&lt;ol>
&lt;li>
&lt;p>PO首先说明期望的sprint目标和当前Sprint的工作范围。并给出相关的理由，对产品的价值说明。团队一起就这部分完成讨论，初步确定scope和goal&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来针对Scope中的需求逐一进行澄清，对照DOR，如果没有进行过groom的需求，这时完成梳理澄清和工作量估算。同时识别可能的风险和依赖，并讨论应对措施。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这两个阶段是Planning会议的上半场，也是PO的主场&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>接下来的下半场是开发团队的主场，针对已经理解的需求，再进行任务的拆分，具体分配到人。SM根据任务认领情况，要同步观察Capacity的匹配情况，确保没有遗漏任务和过度认领。这个环节视情况，PO不是必须参加。即使参加，也主要是回答一些讨论中出现的对需求的疑问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，所有团队成员共同确认达成一致的sprint goal，输出SBI。也代表团队对目标和范围的承诺。最后，团队全体可以对成功完成sprint给i出一个信心指数（0~5）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>会议全程，SM负责主持，应该控制会议节奏，注意进度和时间。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>通过上面的说明，大家应该可以看到，sprint planning会议是敏捷运作中非常关键的一个会议：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过计划会，产生了一个明确的sprint目标&lt;/p>
&lt;/li>
&lt;li>
&lt;p>团队正式开始Sprint前，通过计划会完成了充分沟通，整体工作范围、目标对所有成员透明化，增进了理解&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽可能准确地匹配了团队的产能和纳入迭代中的工作任务&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每项待办需求经过拆分和认领，都有了明确的负责人&lt;/p>
&lt;/li>
&lt;li>
&lt;p>团队集体完成了SBI和目标，加强了互相之间的合作。也为完成迭代奠定了信心&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>关注秋草的公众号，及时了解更新动态&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/qrcode_for_gh_e12c318badb4_258%20%281%29.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>关于测试和开发的选择</title><link>https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/</link><pubDate>Sun, 03 Nov 2024 23:54:39 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/</guid><description>&lt;blockquote>
&lt;p>面试时被问，为什么会选择做测试而不是做开发？&lt;/p>&lt;/blockquote>
&lt;h2 id="实际是问的什么">实际是问的什么？
&lt;/h2>&lt;p>提问代表面试的是测试岗位。而面试官这个问题，其实两方面原因：&lt;/p>
&lt;p>第一，确认面试人是主动还是被动。&lt;/p>
&lt;p>主动：自己有想法，目标就是奔着测试岗位来的。&lt;/p>
&lt;p>被动：其实更想做开发，但自己编程能力不够，算法、设计模式等一团糟。&lt;/p>
&lt;p>第二，看面试人对这两个岗位核心要求的理解。&lt;/p>
&lt;h2 id="如何应对">如何应对？
&lt;/h2>&lt;p>理解了问题背后的目的，那么应对策略其实也就明确了：&lt;/p>
&lt;p>首先当然应该向面试官表明是主动考虑这个岗位的。而考虑这个岗位的原因其实就是自己对测试工作的理解。&lt;/p>
&lt;p>比如我之前的回答&lt;/p>
&lt;p>&lt;a class="link" href="https://chengxiaqiucao.github.io/post/07-%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84/" target="_blank" rel="noopener"
>软件测试的目的是什么？&lt;/a>&lt;/p>
&lt;p>测试这个岗位其实需要很多和开发工作不同的特质，比如比较善于质疑、关注细节、喜欢刨根问底等等。&lt;/p>
&lt;p>Jame Bach关于测试和检查的区别的论述中其实也指明了很多测试工作需要的特殊能力。&lt;/p>
&lt;p>&lt;img src="https://picx.zhimg.com/80/v2-76b121b6af77ba6f4b7aa827ac815fce_1440w.png"
loading="lazy"
>&lt;/p>
&lt;p>除此之外，也可以表现自己在测试相关领域的一些积累，比如对测试工具、自动化测试也有较多的掌握，如果有相关的可拿得出手的项目经历就更有说服力了。这里的言外之意，就是自己不选择开发并不是因为没有编程能力，做不了开发，只是因为兴趣点更多是在测试这一边。&lt;/p>
&lt;p>对于测试和开发这个两个岗位的差异，还可以从这么一些角度阐述：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>开发是推陈出新，测试是不破不立&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发工作更追求确定性，测试则基于不确定性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发强调创造，测试长于节外生枝&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>等等&amp;hellip;
&lt;img src="https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/Pasted-20241104-1.png"
width="1006"
height="554"
srcset="https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/Pasted-20241104-1_hu_fe102e9c78cccb44.png 480w, https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/Pasted-20241104-1_hu_ab092d331fdf9d89.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;h2 id="注意">注意
&lt;/h2>&lt;p>以上，虽然说的是应对策略，但最好还是真的是因为测试工作的性质更倾向这个工作，而不是退而求其次&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/Pasted-20241104.png"
width="829"
height="762"
srcset="https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/Pasted-20241104_hu_f5272a2754e2b83c.png 480w, https://chengxiaqiucao.github.io/post/046-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E9%80%89%E6%8B%A9/Pasted-20241104_hu_10fc59b0a54a5884.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="261px"
>&lt;/p></description></item><item><title>敏捷中的三大工件</title><link>https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/</link><pubDate>Sun, 03 Nov 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/</guid><description>&lt;p>之前的系列，我们介绍了 Scrum 敏捷中的三大主要角色。而具体实施 Scrum，还牵涉一些具体的工作对象或产出物，这些材料在 Scrum 中叫做 工件 &lt;strong>（Artifacts）&lt;/strong>。&lt;/p>
&lt;h2 id="工件">工件
&lt;/h2>&lt;p>在 Scrum 中，常说的工件其实主要指三大核心工件：产品待办清单PBI、Sprint迭代待办清单SBI、产品增量Increment。但除了这三种核心工件外，其实还定义有和这三大工件相关的其他的几种工件。&lt;/p>
&lt;p>在敏捷中，工件作为我们的工作对象，产出物。应该是整个Scrum团队集体共同工作和维护的，并且应该对所有人透明，也就是这些工件，对团队中的所有人都是可视化的。这也是敏捷的原则，强化团队对事物的一致理解和沟通，大家应该工作在同一个频道上，透明、可视、随时可查阅极为关键。&lt;/p>
&lt;h2 id="产品待办清单-product-backlogpbi">产品待办清单 Product Backlog（PBI）
&lt;/h2>&lt;p>第一个核心工件是&lt;strong>Product Backlog Items （PBI）&lt;/strong>， PBI 是一个有序列表，包含有产品的所有待完成的未尽事项，包括产品需求、未修复的bug、技术优化、内部改进、工作任务等等各种需要团队后续处理的、和产品相关的事务。&lt;/p>
&lt;p>PBI应该具备以下几个重要特征，或者说DEEP原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Detailed&lt;/strong>：细节描述。对待办的事项有清晰，无歧义的说明，团队成员可以充分了解待办事项的必要信息。这也是Scrum中需求精炼的的必要性，越是优先级高的，细节描述应该越充分。&lt;/li>
&lt;li>&lt;strong>Emergent&lt;/strong>：涌现式的。PBI是一个动态列表，可以根据需要随时进行插入和调整。&lt;/li>
&lt;li>&lt;strong>Estimated&lt;/strong>：有估算。待办条目在需要落实之前，应该要完成工作量以及对产品价值的估算，估算是否准确，是团队实际生产力的基础。&lt;/li>
&lt;li>&lt;strong>Prirotized&lt;/strong>：有优先级的。PBI中的待办事项，应该是有优先次序的，在PBI中，不存在两个优先级完全相同的条目。这也是列表的优点，列表先天就是有排列顺序的，PBI列表中，排在前面的项优先级更高。团队在从PBI中提取迭代任务的时候，也会按照优先级来依次提取。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241102.png"
width="736"
height="521"
srcset="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241102_hu_e3f4c7de233c4941.png 480w, https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241102_hu_8343c01209ab85af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>和其他工件一样，PBI虽然也是需要团队共同维护的一个产出物，但 PBI 的owner，是&lt;strong>PO（产品负责人）&lt;/strong>，其他成员虽然也会参与到PBI的细节补充、方案完善，包括PBI的工作量估算也是需要团队给出，但最终对 PBI 负责的只有PO，PO对PBI有最终解释和优先级的决定权。&lt;/p>
&lt;p>PBI的生成和维护过程中，通常是PO会尽可能把相关的Feature、Story、Enhancement（优化）纳入PBI中，作为后续工作的基础。再经过和团队的充分沟通，一般会通过产品的需求精炼会议(grooming)，对需求进行细化和实现方案的讨论，团队还会分解出具体的技术任务并对需要的工作量进行估算。&lt;/p>
&lt;p>所以 PBI 它其实就是Scrum敏捷研发的源头，相当于是传统研发中，需求分解阶段的主要产出PRD的作用。PBI是启动 Sprint 的基础，也是 SBI 的来源。&lt;/p>
&lt;h3 id="产品愿景-product-vision">产品愿景 Product Vision
&lt;/h3>&lt;p>和PBI 配套的，其实还有一个辅助工件，或者Scrum定义中也叫做 PBI 的commitment（承诺产出物）。就是产品愿景Product Vision。&lt;/p>
&lt;p>Product Vision是一个在产品早期就应该完成定义的东西，主要是总体上概括产品要实现什么目标，大家共同做的这个东西到底是为了达到什么目的，对用户有什么价值。也就是让整个团队直到自己在为什么工作。&lt;/p>
&lt;p>是一个比较长远的对整个产品蓝图的描述。&lt;/p>
&lt;h2 id="sprint待办清单-sprint-backlog-sbi">Sprint待办清单 Sprint Backlog （SBI）
&lt;/h2>&lt;p>&lt;strong>Sprint&lt;/strong> 是冲刺的意思。Scrum中定义的一个短周期的时间窗，在这个较短的周期内团队可以完成一些可交付的产品功能。并基于已完成的功能获取相关干系人的反馈，以便及时地调整整个产品的演进路线。是敏捷“小步快跑”思想的具体体现。&lt;/p>
&lt;p>而SBI，就是在Sprint这个周期中，团队需要完成的所有待办事项的清单。因此 SBI 其实是从 PBI中提取出来的，分布到不同 Sprint 中的团队需要完成的工作。&lt;/p>
&lt;p>通常在Sprint 正式启动前的Sprint Planning会议上，依据PBI的优先级和团队的生产力(Capacity)，由团队共同完成 SBI 的提取。&lt;/p>
&lt;p>SBI在计划会确定以后，一般是尽可能维持不变的。但现实总有各种意外情况发生，而且敏捷提倡拥抱变化，所以并不意味 SBI 确定以后会在 Sprint 中一定是恒定的。PO 根据优先级的调整，在和团队达成一致后，SBI 也是可以进行增删改的，但前提是要团队达成共识。&lt;/p>
&lt;p>通常SBI 调整意味着工作量的浪费，因此在 Sprint 周期内，应该尽可能维持稳定。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241102-1.png"
width="2112"
height="1224"
srcset="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241102-1_hu_98b94d7384164be7.png 480w, https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241102-1_hu_b5a8fb8a10cae01a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>如图，是常用敏捷管理软件 Jira 中，已经纳入到 Sprint 中的 SBI。Sprint 开始以后，则会通过 Scrum 的迭代看板来实时反映 Sprint 的进展情况。&lt;/p>
&lt;h3 id="sprint-goal">Sprint Goal
&lt;/h3>&lt;p>类似的，和 SBI 配套的也有一个辅助工件或commitment，就是 Sprint 目标。这个工件通常由PO定义，整体上概述整个Sprint应该达成的核心目标。在和团队确认并达成一致后，Sprint Goal 其实也代表了团队整体在这个周期中承诺的产出。&lt;/p>
&lt;p>对于未参与迭代的各种干系人，通过 Sprint Goal 也可以了解当前产品进展的总体情况。&lt;/p>
&lt;h2 id="增量-increment">增量 Increment
&lt;/h2>&lt;p>&lt;strong>Increment&lt;/strong>，增量的意思。在敏捷中，因为提倡小步快跑，每个迭代的工作成果其实都是面向产品愿景，是在原有基础上的增强，不仅是一个累积的过程，也是不断向用户交付价值的过程。&lt;/p>
&lt;p>基于敏捷原则，Increment 应该是可工作的软件，可以呈现出产品的价值。也就是 Increment和之前 Sprint产出的叠加， 应该总是一个面向未来的、最小的可用软件 MVP（&lt;em>Minimum Viable Product&lt;/em>）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103.png"
width="450"
height="288"
srcset="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103_hu_efb67444719fc8c7.png 480w, https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103_hu_c3fbaee2dae0461a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>Sprint 是否达到了 Sprint Goal，通常是在Sprint评审会上通过演示Increment的功能效果，来向相关干系人进行展示，并获取反馈。&lt;/p>
&lt;h3 id="dod完成定义-definition-of-done">DOD（完成定义 Definition of Done）
&lt;/h3>&lt;p>和 Increment 相关的commitment， 其实就是SBI中每个待办项的完成情况。那这里怎么定义这个&lt;strong>完成&lt;/strong>，在 Scrum 中，对应的就是 &lt;strong>DOD&lt;/strong>。DOD 是关于主要待办项类型的一些共性定义。&lt;/p>
&lt;p>其实除了 DOD 外，还有 DOR，DOR 是定义一个待办项在什么情况下可以定义为&lt;strong>就绪&lt;/strong>。只有就绪的待办项才应该纳入SBI&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/031-Scrum%e6%95%8f%e6%8d%b7%e5%9b%9b%e4%bc%9a-%e8%ae%a1%e5%88%92%e4%bc%9a/Pasted-20241101-1.png"
loading="lazy"
alt="Jira中关于DOD、DOR的定义"
>&lt;/p>
&lt;h2 id="其他工件">其他工件
&lt;/h2>&lt;p>除了 Scrum 中定义的这三种核心工件以及辅助的 commitment 工件，还定义了反映迭代进展状态的工件&lt;/p>
&lt;h3 id="燃尽图-burndown-chart">燃尽图 Burndown Chart
&lt;/h3>&lt;p>&lt;strong>燃尽图&lt;/strong>是一种能够及时反映出 Sprint 进展状况的可视化图形。&lt;/p>
&lt;p>X轴：迭代的进行时间
Y轴：迭代的工作量，通常通过SBI中估算的故事点（Story Point）反映完成这个这个迭代的预估总工作量。&lt;/p>
&lt;p>基于工作量和时间的关系，先绘制一条线性的故事点的理想燃尽线，再根据迭代进行中，实际每天完成的工作量，绘制一条实际燃尽线。 这两条线的匹配度，其实能反映迭代当前进度是否正常。是Scrum Master和团队每日站会时应该随时关注的一个迭代关键状态图。&lt;/p>
&lt;p>因此通常会将燃尽图也作为 Scrum中的一个重要工件来看待。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241101.png"
width="933"
height="569"
srcset="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241101_hu_a9c82f2783072c64.png 480w, https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241101_hu_a5e4ee4f0a5a9067.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/p>
&lt;p>除了燃尽图外，其实还有很多其他的图形可以用来分析迭代当前进展，比如常用的还有：&lt;/p>
&lt;p>&lt;strong>累积流图 (Cumulative flow diagram）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103-1.png"
width="1375"
height="737"
srcset="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103-1_hu_cd6138de5ca1625c.png 480w, https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103-1_hu_dc93cedf5ae29426.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>通过累积流图，可以看出 Sprint 中，总体需求在不同状态间变化的趋势，往往在识别团队瓶颈、平衡成员间工作量时发挥重要作用。&lt;/p>
&lt;p>&lt;strong>速度表（Velocity）&lt;/strong>&lt;/p>
&lt;p>另一个常用的图还有 Velocity，这个图更多是通过对多个Sprint 完成工作量的跟踪，来观察团队的生产力是否稳定，进而对团队成熟度有个基本的判断。&lt;/p>
&lt;p>越是稳定的敏捷团队，每个迭代的产出应该是比较恒定的。而如果差别波动较大，则代表团队在任务平衡、估算、应对干扰等方面还存在较多问题。是一个观察指标&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103-2.png"
width="875"
height="601"
srcset="https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103-2_hu_d008b08a67479d8c.png 480w, https://chengxiaqiucao.github.io/post/044-%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%B7%A5%E4%BB%B6/Pasted-20241103-2_hu_c3f0c4e62f0c4e39.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于Scrum敏捷中，团队工作对象和产出，工件的介绍。 欢迎大家继续关注这个系列，持续更新中&amp;hellip;.&lt;/p></description></item><item><title>是否要容忍品行不端但业绩优秀的员工</title><link>https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/</link><pubDate>Sat, 02 Nov 2024 18:03:14 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block.jpg" alt="Featured image of post 是否要容忍品行不端但业绩优秀的员工" />&lt;h2 id="问题是什么">问题是什么
&lt;/h2>&lt;p>老板是否会容忍平行不端的员工？ 这里品行不端，其实我们可以把它理解为违背纪律甚至法律，无视公序良俗等，也就是员工存在价值观上的问题。&lt;/p>
&lt;p>但这里其实还隐含着另一个前提，就是这个员工其实能力应该很强（不考虑背景之类，当然背景其实也算是某种能力）。否则就没有要讨论是否容忍的基础了。&lt;/p>
&lt;h2 id="理论上的正确做法">理论上的正确做法
&lt;/h2>&lt;p>因此，这里我们要讨论的就是管理中，对员工评估的问题。通常企业在评估员工时，都会综合业绩、价值观两个维度来看&lt;/p>
&lt;h3 id="ge人才九宫格">GE人才九宫格
&lt;/h3>&lt;p>比如GE评估员工，就会根据这两个维度，综合上、中、下三个级别综合得出一个9宫格。&lt;/p>
&lt;p>绿色：评估优秀&lt;/p>
&lt;p>蓝色：合格或可改进&lt;/p>
&lt;p>红色：应淘汰&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block.jpg"
width="1080"
height="605"
srcset="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block_hu_a9056f782a031f7a.jpg 480w, https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block_hu_b3f9c494a6bf228c.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>而且，从这个9宫格上，价值观的权重比业绩其实是更看重的，即便业绩很好，也依然是偏红的，倾向淘汰。&lt;/p>
&lt;h3 id="阿里的五类员工模型">阿里的五类员工模型
&lt;/h3>&lt;p>类似的，据说阿里其实也有对员工的5种类型划分&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/ali-5%E7%B1%BB%E5%91%98%E5%B7%A5.png"
width="961"
height="758"
srcset="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/ali-5%E7%B1%BB%E5%91%98%E5%B7%A5_hu_ebe0fe80beb88a76.png 480w, https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/ali-5%E7%B1%BB%E5%91%98%E5%B7%A5_hu_b419d728a731546b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>明星：业绩亮眼，贡献突出，价值观正确，绩效重点倾斜&lt;/p>
&lt;/li>
&lt;li>
&lt;p>黄牛：兢兢业业，尽职尽责，是团队基本盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>野狼：能力出众，但价值观有问题。不能及时纠正，需要坚决汰换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>白兔：看上去工作勤恳，价值观很好，但能力不行。如无法提升，也要淘汰&lt;/p>
&lt;/li>
&lt;li>
&lt;p>土狗：能力和价值观都不行，坚决淘汰&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以从上面可看出，成熟企业对于价值观有问题的员工，其实态度都是比较明确的，即便你业绩再好，也应该是要淘汰的。即不会容忍品行不端。&lt;/p>
&lt;h2 id="现实中的可能情况">现实中的可能情况
&lt;/h2>&lt;p>以上，更多是理论上的正确做法。&lt;/p>
&lt;p>不过现实中，老板会作何选择，通常还是会根据所在企业所处的阶段，当然也包括老板个人的价值观所共同左右。&lt;/p>
&lt;p>马克思早就指出过，“资本来到世上，每个毛孔都滴着血和肮脏的东西”。当然这里更多指的是资本原始积累阶段，为了实现资本的增长，往往会不择手段。也就是说，品行不端，在资本积累的早期，往往极大概率不可避免。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/%E9%A9%AC%E5%85%8B%E6%80%9D-%E8%B5%84%E6%9C%AC%E5%87%BA%E7%94%9F.png"
width="1032"
height="515"
srcset="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/%E9%A9%AC%E5%85%8B%E6%80%9D-%E8%B5%84%E6%9C%AC%E5%87%BA%E7%94%9F_hu_15e2a397b136a45d.png 480w, https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/%E9%A9%AC%E5%85%8B%E6%80%9D-%E8%B5%84%E6%9C%AC%E5%87%BA%E7%94%9F_hu_185ec1cd48f3173b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>所以，现实中，老板作何选择的逻辑，其实也很简单：&lt;/p>
&lt;p>如果企业的生存是第一需求，拿到业绩，先活下去往往对老板来说更重要，这时多半会对不择手段但业绩优秀的员工更多容忍。&lt;/p>
&lt;p>而一旦做大做强，继续容忍不端行为，可能会影响企业的健康和长远发展，那么自然就不可能再继续容忍。&lt;/p>
&lt;p>&lt;strong>当然，我们还是应该相信，确实存在有强大格局、人格的企业家从最初就坚持那些美好的价值观。只是，企业面临生死存亡时，会选择采用的做法会更有说服力。&lt;/strong>&lt;/p></description></item><item><title>团队管理中沟通的重要性</title><link>https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link><pubDate>Mon, 28 Oct 2024 15:18:27 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-1.png" alt="Featured image of post 团队管理中沟通的重要性" />&lt;p>任何团队，沟通其实都是管理者的核心工作。所谓管理，各种管理方法、思路要转化到团队的执行力，其实都是通过沟通去达成的。&lt;/p>
&lt;p>管理者需要投入大量精力在团队的沟通上，沟通是桥梁和连接，是凝聚团队的必然途径。但沟通其实并不是双方谈谈话这么简单&lt;/p>
&lt;h2 id="沟通漏斗">沟通漏斗
&lt;/h2>&lt;p>沟通其实是一个信息传递、建立共识的过程，但人与人之间的沟通，存在一个叫&lt;strong>沟通漏斗&lt;/strong>的规律&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028.png"
width="817"
height="756"
srcset="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028_hu_c42fbba9115d4c7d.png 480w, https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028_hu_fd0aee0a70bc15d8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果心里想的，针对我们要沟通的事情，原本的信息量是 100%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>那经过口头或书面表达，传递出来的信息 可能就只有80%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而对方能接收到的信息，会下降到 60%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>即便接收到信息中，真正可以正确理解，不曲解的 就估计只剩 40%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再将相关的信息内容转换成实际行动 继续下降20%&lt;/p>
&lt;/li>
&lt;li>
&lt;p>随着时间的流逝，甚至衰减到基本没有&amp;hellip;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以信息的传递，其实具有明显的衰减效应，而应对这个沟通漏斗的衰减，就是团队管理中沟通管理的核心。&lt;/p>
&lt;p>包括多种层面的确认；通过流程的定义和里程碑、检查点的设立来检查偏差；定期的复盘来回顾经验教训。&lt;/p>
&lt;h2 id="有效沟通模型---乔哈里窗">有效沟通模型 - 乔哈里窗
&lt;/h2>&lt;p>针对沟通的这种衰减效应，保证双方沟通中能充分地理解一致，达成共识，让大家能尽可能在同一个基础上提升沟通的成效。有一个著名的模型： &lt;strong>乔哈里沟通视窗模型&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-1.png"
width="696"
height="368"
srcset="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-1_hu_1ff9b5bf26cf920d.png 480w, https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-1_hu_913fba843954b785.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="453px"
>&lt;/p>
&lt;p>在这个模型中，根据沟通双方对信息掌握的程度，分为了四个区块&lt;/p>
&lt;ul>
&lt;li>
&lt;p>我知道，你也知道的信息，处于&lt;strong>开放区&lt;/strong>。 在这个区域中，双方对信息掌握的基础是一致的，也是我们在沟通时，建立信任的基础，这个区域约越大就越不容易产生误会，也就越能帮助我们实现高效沟通。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我知道，你不知道的信息，在&lt;strong>隐藏区&lt;/strong>。是人都会有秘密，有隐藏在外在之下的真实自我。但有时候，要做到有效的沟通，适度地打开隐藏区，是赢得他人信任并建立高效沟通的一个捷径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>他人知道，但自己不知道的信息，比如一些别人对你的真实看法，个人的一些弱点，自己并不掌握的一些信息，这些都属于信息的&lt;strong>盲点区&lt;/strong>。盲点区越小，那么自己对事物的判断就越接近真实，做正确决定的可能性就越大。保持探索精神，努力去缩小自己的盲点区。&lt;code>stay foolish, stay hungry&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>未知区，则是双方都不了解得信息。在这个区域中的信息既是风险，也可以是团队的发展潜力。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在乔哈里窗中，要做好高效沟通，其实也就是四句话：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-2.png"
width="444"
height="385"
srcset="https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-2_hu_163e433f996bdfc9.png 480w, https://chengxiaqiucao.github.io/post/043-%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%E4%B8%AD%E6%B2%9F%E9%80%9A%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/Pasted-20241028-2_hu_4c60887ba9c9cf5e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>扩大开放区，开放区越大，大家的共识就越多，就越容易达成一致。是彼此信任的基础&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开隐藏区，帮助我们增强互信的有效手段，隐藏区的打开，也可以帮助我们扩大开放区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缩小盲点区，可以帮助我们更多的了解事实。扩大自我认知，进行自我提升。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>探索未知区，广开言路，多方位、多渠道地去充分掌握信息，尽可能消除未知的风险。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>敏捷Scrum中三大角色</title><link>https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/agile_dev_team.png" alt="Featured image of post 敏捷Scrum中三大角色" />&lt;p>在本系列的前几篇，我们梳理了敏捷的起源和目前的主要落地框架。其中 Scrum 框架是敏捷实践的绝对主流，几乎是团队级敏捷实践的事实标准。而规模敏捷框架也大多是在 Scrum 的基础上来进行扩展。因此我们后续的总结将以 Scrum 为基础，探讨敏捷在软件研发过程中落地实践的主要做法运作方式。&lt;/p>
&lt;p>本篇我们将从探讨 Scrum 框架的角色组成来谈起。&lt;/p>
&lt;h2 id="scrum-团队">Scrum 团队
&lt;/h2>&lt;p>在 Scrum 中，Scrum 团队只面向一个目的，就是&lt;strong>每次&lt;/strong>都是为了完成产品的&lt;strong>一个有价值的目标&lt;/strong>而存在。Scrum团队作为敏捷组织中有凝聚力的最小生产力单位，Scrum团队内不再有层级结构。团队由&lt;strong>跨职能&lt;/strong>的专业人员组成，团队成员应该具备完成产品目标的&lt;strong>所有技能&lt;/strong>。&lt;/p>
&lt;p>在运作中，Scrum团队会负责所有与产品目标相关的活动，包括同利益相关者的协作、验证、维护、操作、实验、研究和开发，以及其他任何可能需要的活动。Scrum团队是自组织并自我驱动的，以一种可持续的节奏，保持专注并不断交付价值。&lt;/p>
&lt;p>虽然在团队规模上没有明确约束，但通常一个 Scrum 团队的理想规模应该限制在 &lt;strong>10人以内&lt;/strong>。小型团队会有更好的沟通效率，更高的单位生产力。&lt;/p>
&lt;p>在每个迭代（Sprint）中，交付有价值的增量（Increment）是整个团队的职责所在。Scrum 针对这个目标，定义了团队中的三种不同角色：开发团队（Developers）、产品负责人（Product Owner）和 Scrum 教练（Scrum Master）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025.png"
width="604"
height="512"
srcset="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025_hu_de3c28b81641624e.png 480w, https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025_hu_aa7971a45125946a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="283px"
>&lt;/p>
&lt;h2 id="产品负责人-product-owner">产品负责人 Product Owner
&lt;/h2>&lt;p>PO这个角色，从命名也可以看出，是团队工作产物-产品 的拥有者。产品最终要做成什么样子，PO有决定权。
在团队中，他是最终用户的代言人，是需求的来源方、定义者和最终决策人。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025-1.png"
width="951"
height="774"
srcset="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025-1_hu_8fff9f50c7be9602.png 480w, https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025-1_hu_15bfa9afe6a17c18.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>所以PO的职责，包括以下几方面：&lt;/p>
&lt;h3 id="1-定义需求管理产品待办清单">1. 定义需求，管理产品待办清单
&lt;/h3>&lt;p>作为PO最主要的职责，也就是定义需求。需求是团队工作的源头，也是基础。需求的定义和确定，虽然并不完全是PO独立完成的工作，团队成员也会参与到需求的讨论、梳理和完善中，但PO会是需求最终的决策拍板者。完成定义的需求，也就是产品待办清单&lt;strong>PBI(Product Backlog Item)&lt;/strong>, PO 是PBI的管理人和负责人，即便团队也会参与到需求条目的维护和一些技术细节的细化工作中，但PO会对PBI中的每一个条目负责。&lt;/p>
&lt;p>PBI中包含的需求，是所有未实现的需求清单，包括当期和远期的需求，所以在管理 PBI时，PBI的一个重要属性就是它的&lt;strong>优先级&lt;/strong>，定义 PBI 的优先级是PO的职责。PO要根据需求对产品的价值，以及团队的反馈，综合风险和收益，确定每一个需求的优先排列顺序。&lt;/p>
&lt;p>这也是 PBI 以列表形式存在的一个先天优势，每一条需求在列表中都会有一个唯一的位置，这个位置就代表优先级。列表中越排得靠前，代表优先级越高。PO管理待办清单，重要的一点就是要管理好每条需求对应的排列顺序。有效管理的 PBI 是后续迭代启动的基础。&lt;/p>
&lt;h3 id="2-向团队澄清需求及时反馈">2. 向团队澄清需求，及时反馈
&lt;/h3>&lt;p>而对于敏捷团队而言，既然需求是工作的输入，所以 PO 还有一个重要的职责就是向团队解释需求的定义，澄清可能存在的误解或不够清晰明确的描述。&lt;/p>
&lt;p>这个过程是持续贯穿在研发活动中的，既包括前期，在迭代计划会之前的需求梳理精炼会（grooming meeting），也包括在迭代进行中，当成员对需求有疑问或需要决策的时候，能够及时给出反馈和说明。这也是为什么说 Scrum 团队是应该要大家一起工作，保持沟通效率的重要因素。&lt;/p>
&lt;h3 id="3-维系和利益干系人的关系">3. 维系和利益干系人的关系
&lt;/h3>&lt;p>Scrum 团队在工作中，必然会牵涉各种利益干系人，包括投资人（各产品各相关部门的主管），客户，终端用户、内部关联部门（销售、售后、客服、法务合规、安全、审计、质量等等）都会有一些和产品的关联，这些不同渠道的意见、声音和反馈可能都会影响到产品相关需求、实现的定义，所以PO是维系这些渠道，和这些不同干系人进行沟通和协调的责任人。这也是为什么作为PO这个角色的成员，应该是一个具备很好沟通能力和协作能力的人。&lt;/p>
&lt;h3 id="4-工作产出increment的成果确认人">4. 工作产出（Increment）的成果确认人
&lt;/h3>&lt;p>作为产品的Owner，团队每个迭代的工作成果，是否符合要求，能否达到预期的产品要求，是由PO来进行确认的。&lt;/p>
&lt;p>Scrum中虽然没有定义单独的测试角色，但测试这个工作其实是包含在开发团队中的，对产品的验收确认，虽然最终是PO拍板，但并不是说 PO会负责这里的测试工作。更多还是根据测试成员的评估或者迭代的演示评审会上的反馈，来判断产品目标是否达成。&lt;/p>
&lt;hr>
&lt;p>总而言之，PO 作为Scrum团队中一个非常核心的角色，极为关键。 专人专职其实很有必要，在有的敏捷项目中，PO可能身兼数职，游离于团队之外，其实都是没搞清楚这个角色的重要性。&lt;/p>
&lt;h2 id="scrum大师教练-scrum-master">Scrum大师（教练） Scrum Master
&lt;/h2>&lt;p>在有些似是而非的敏捷项目中，会把SM和传统的项目经理PM混为一谈，认为Scrum Master的工作就是传统PM的作用。这是完全错误的理解。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/scrum-master.png"
width="942"
height="899"
srcset="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/scrum-master_hu_643da106519a9996.png 480w, https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/scrum-master_hu_c29b252f9aa2ebdb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/p>
&lt;h3 id="1-并不是团队成员的上级">1. 并不是团队成员的上级
&lt;/h3>&lt;p>传统项目中，PM是一个项目的负责人，需要对项目的成功负责。同时PM也会具备相应的项目管理权，对项目成员的工作分配权，对成员的工作成果的考核权，和项目成员是不同层级的关系。&lt;/p>
&lt;p>但是在Scrum中，SM和团队成员是平级的关系，更没有考核、评估权。SM的主要职责是保证团队工作的顺利开展，是作为协调人，以自己对敏捷的专业理解和实践经验，引领团队尽可能高效地完成迭代工作。其实定位是一个服务者的角色。在sprint执行过程中，通过观察和监测迭代运作情况，及时消除阻碍，并鼓舞大家的干劲，必要时给大家打打鸡血。&lt;/p>
&lt;h3 id="2-敏捷价值观和敏捷实践的推行">2. 敏捷价值观和敏捷实践的推行
&lt;/h3>&lt;p>作为Scurm大师，敏捷教练。SM的职责是贯彻敏捷的价值观，并把这个价值观传递给所有成员，并以自己的实践经验让团队的运作符合敏捷的原则。&lt;/p>
&lt;p>作为Scrum团队的牵头人，SM会需要负责迭代中的一些主要活动的组织，最主要的就是Scrum中的四大仪式会议。当然还会包括一些其他的需要协调组织的活动，比如一些紧急事项的讨论，重要的澄清、评审等等。在这些活动中，SM通常需要作为主持者，保证活动的效果，避免跑偏。&lt;/p>
&lt;h3 id="3-团队的防火墙">3. 团队的防火墙
&lt;/h3>&lt;p>SM职责中很关键的一点就是，SM需要作为团队的防火墙。这也是作为SM非常有挑战的地方。对一个迭代来说，迭代目标的达成是团队在sprint周期中最重要的事项，迭代过程中的工作都应该围绕这个目标展开。&lt;/p>
&lt;p>但在任何组织中，都难免可能出现一些干扰到团队成员工作的地方。比如一些领导会临时交办一些额外的任务，做临时的人员抽调等等。这时SM需要起到防火墙的作用，要能够将这些任务顶回去或者通过协调，寻求外部支持等保证当前的迭代目标不受到影响。一切以完成sprint的既定目标、保持团队战斗力为目的。而不是让团队成员直接被各种外部事务干涉，影响到当前迭代任务的完成。&lt;/p>
&lt;h2 id="开发团队-developers">开发团队 Developers
&lt;/h2>&lt;p>Scrum团队的主体其实就是开发者团队Developers Team。但这里的开发者，并不应该理解成传统理解的程序员。Scrum团队的定义，是团队应该具备完成产品目标的所有技能，所以这里的开发者团队，其实是一个笼统的概念。除了程序员，还会包含测试人员、视觉设计，可能还会有架构师、DBA、配置管理等等多种传统项目中不同的角色，但在Scrum中，都统称为Developers。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/agile_dev_team.png"
width="526"
height="525"
srcset="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/agile_dev_team_hu_13aa36aaf343a68a.png 480w, https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/agile_dev_team_hu_422feab2dceb9fcf.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h3 id="1-具备各种完成目标的技能">1. 具备各种完成目标的技能
&lt;/h3>&lt;p>所以对于开发者团队来说，首要的职责，就是要具备完成产品目标的各项技能。包括设计、开发、测试、部署、配置等等。但这些工作，是被看作一个整体，不会明确对应到具体的单个成员。也就是团队中成员的技能可能会是综合的，一专多才，不会将团队整体能力建立在对个别成员的依赖上。&lt;/p>
&lt;p>相对传统研发，Scrum的开发团队成员，应该是跨职能的，每个成员都会有承担不同任务类型的技能要求和对应能力。简单来说，这里的开发者团队，每个成员的技能会有侧重点，会承担对应的任务类型，但不绝对，也有可能会要承担非主技能范畴的工作，一切以完成迭代工作目标为目的。&lt;/p>
&lt;h3 id="2-待办清单和需求的评估">2. 待办清单和需求的评估
&lt;/h3>&lt;p>开发团队的另一项职责是要评估PBI中的待办项。&lt;/p>
&lt;p>PBI中需求的实现终归还是开发团队负责，实现的方案、技术、团队的能力成熟度都会对完成每一条需求的实现工作量产生影响。&lt;/p>
&lt;p>而实现需求的工作量，又直接影响需求的完成和交付，所以在敏捷中，对需求的估算是一个重要的事项。&lt;/p>
&lt;p>这里的估算就是开发团队的主要职责之一。在Scrum中估算一般会发生在需求澄清会或者计划会时完成。可以通过经验估算法或者按计划扑克法尽可能客观地评估出每个需求的实现复杂度和工作量。&lt;/p>
&lt;p>估算的准确度会直接影响迭代目标的完成情况和迭代运作的健康水平。也是开发团队成熟度的一个指标。&lt;/p>
&lt;h3 id="3-目标分解和任务认领">3. 目标分解和任务认领
&lt;/h3>&lt;p>在PBI中，需求主要是业务层面的要求。但其具体的实现方案和实施，通常还需要拆分成不同的任务，比如前端任务、设计任务、后端任务、测试任务等等。这些都需要开发团队来完成任务的分解和通过自组织的认领、分配。这个工作一般会在计划会上，团队集体完成分派和认领。&lt;/p>
&lt;h3 id="4-完成承诺交付价值">4. 完成承诺，交付价值
&lt;/h3>&lt;p>最后就是完成迭代的承诺并交付产品增量，提供产品价值。保质保量地完成迭代计划时承诺的既定目标，是开发团队整体工作的核心。迭代的承诺达成率是一个Scrum团队是否成熟，Scrum敏捷落地是否成功，最直接的一个观察指标。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>以上就是对Scrum框架中三大角色，其各自职责和要求的分享。用三句话提炼总结就是：&lt;/p>
&lt;ul>
&lt;li>PO负责让大家做对的事&lt;/li>
&lt;li>开发团队负责把事做成&lt;/li>
&lt;li>SM负责让团队把事做好&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025-3.png"
width="802"
height="461"
srcset="https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025-3_hu_cb425e019a29e02d.png 480w, https://chengxiaqiucao.github.io/post/039-%E6%95%8F%E6%8D%B7scrum%E4%B8%AD%E4%B8%89%E5%A4%A7%E8%A7%92%E8%89%B2/Pasted-20241025-3_hu_48e928fb088435c2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p></description></item><item><title>大话网络协议-OSI七层模型和TCP/IP四层模型</title><link>https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-2.png" alt="Featured image of post 大话网络协议-OSI七层模型和TCP/IP四层模型" />&lt;p>时至今日，互联网已经是大家日常生活中不可或缺的一部分，购物、点餐、刷剧、网课，已经融入了我们生活的方方面面。但网络具体是怎么工作的呢？ 特别是我们具体从事软件研发、ICT行业的同学，理解和掌握这个我们产品运行的基础设施尤为必要。&lt;/p>
&lt;p>本文，我们会力争用最简单易懂的方式，弄清网络协议的地基：&lt;code>OSI七层模型&lt;/code> 和 &lt;code>TCP/IP四层模型&lt;/code>&lt;/p>
&lt;h2 id="网络的起源">网络的起源
&lt;/h2>&lt;p>要说 OSI 七层模型，我们首先还是要回顾下网络技术本身的发展和渊源。&lt;/p>
&lt;p>现今的网络技术，其实最初是军事目的，萌芽于美苏争霸的冷战背景下。1957 年苏联成功发射第一颗人造卫星，引起美国恐慌，并成立了&lt;strong>APRA&lt;/strong>（Advanced Research Project Agency，美国国防部高级研究计划局）。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021.png"
width="935"
height="896"
srcset="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021_hu_a0313a5f02a50148.png 480w, https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021_hu_9dc6bbed5f709c47.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>1961 年，苏联又成功试射了 R-16 洲际导弹，使核打击美国本土成为可能。为了应对可能来临的攻击，美国国防部授权 APRA 研发一种 &lt;strong>“分布式”的军事指挥系统&lt;/strong>。&lt;/p>
&lt;p>1966年，这个系统的雏形，被命名为 &lt;strong>ARPANET&lt;/strong> （阿帕网），它也就是现代互联网的前身。&lt;/p>
&lt;p>1969年，美国国防部正式对 ARPANET 开始商业招标，BBN公司中标，并在同年组建了研发中心。&lt;/p>
&lt;p>1969年底，第一个 ARPANET 诞生，将加利福尼亚州大学洛杉矶分校、加州大学圣巴巴拉分校、斯坦福大学、犹他州大学四所大学的 4 台大型计算机进行了互联。人类社会开始进入 “网络时代”。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-1.png"
width="932"
height="615"
srcset="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-1_hu_a6164cb5e3c33af1.png 480w, https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-1_hu_c796cb41083ac572.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>在 ARPANET 的继续演进过程中，网络协议的需求被提出，以解决不同节点间的信号识别问题。最开始建立的网络协议叫 NCP （net control protocol）&lt;/p>
&lt;p>1977年，为了解决 NCP 本身要求同构系统的缺点，以及支持的主机数量有限，提出了传输控制协议 TCP V1和V2版本。&lt;/p>
&lt;p>1978年，TCP V3版本基于分层思想，将原先的协议分为了TCP协议和IP协议。前者负责可靠传输，后者负责寻址互联。并进一步演进到稳定的V4版本。&lt;/p>
&lt;p>到1984年，美国国防部将 ARPANET 划分为军用和民用两部分。Internet 至此诞生&lt;/p>
&lt;p>同样在1984年，为了解决不同系统间的互操作问题，国际标准化组织 &lt;strong>ISO&lt;/strong>， 提出了 &lt;strong>OSI （Open System Interconnect）开放系统互联模型&lt;/strong>，并大力推广。&lt;/p>
&lt;p>与此同时，Unix操作系统中捆绑了TCP/IP协议，并随着Unix系统的推广流行，TCP/IP被后续各种操作系统支持，TCP/IP的四层模型成为在实际中被采用更多的实现。&lt;/p>
&lt;p>但 OSI 七层模型和 TCP/IP 四层模型虽然定义不同，但基本上是可以匹配对应的。OSI 模型更偏理论，TCP/IP则实际采用更多。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-2.png"
width="823"
height="617"
srcset="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-2_hu_1b199481b10d97b5.png 480w, https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-2_hu_f2c5d7bb1c8cf78a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;h2 id="osi七层网络模型">OSI七层网络模型
&lt;/h2>&lt;p>下面我们来具体说明 OSI 七层模型是如何划分，每一层具体的作用和它所处的角色。&lt;/p>
&lt;h3 id="物理层">物理层
&lt;/h3>&lt;p>现代计算机网络技术的基础，其实最底层还是数字电路技术。也就是将电磁波形信号中的电压位对应的高电平信号和低电平信号，处理为二进制中的1和0。也就是二进制中的位 &lt;strong>Bit&lt;/strong>。 我们在电脑、手机上的各种操作，最后通过网络传送出去的，最终实际上就是一连串的二进制信号&lt;strong>bits&lt;/strong>，也就是&lt;strong>比特流&lt;/strong>。&lt;/p>
&lt;p>所以物理层的作用，处理的就是物理意义上的连通，通过网卡、网线，或者光纤、无线电磁波信号等，把我们当前使用的设备，跟目标主机之间的通信通道建立起来。通过这个通道，把比特流传导到对端。&lt;/p>
&lt;h3 id="数据链路层">数据链路层
&lt;/h3>&lt;p>但是&lt;strong>比特流&lt;/strong>只是一串二进制的信号，这串信号要发去哪里，物理层其实是不知道的。这就是数据链路层的作用了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在这一层，首先会把二进制的比特流，以8位一组转换为&lt;strong>字节&lt;/strong>（1个字节对应8位），&lt;strong>字节&lt;/strong>也就是我们计算机存储的基本单位。
按字节分组组织好的数据，定义上把这个叫做&lt;strong>帧（frame）&lt;/strong>。链路层的第一个作用，是对数据进行重组，将&lt;strong>比特&lt;/strong>转换为&lt;strong>帧&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一个链路层的关键作用，还包括&lt;strong>MAC地址&lt;/strong>的添加。用来标记要发送的数据去到哪里。
这里的mac地址，也叫&lt;strong>网络物理地址&lt;/strong>，是我们每一个网卡，在网卡出厂的时候就被烧录进去的一个唯一地址，不可变更。通过这个唯一的地址，我们就能知道这个数据具体是要发给谁的。就像写信时我们要有个地址一样，这样信件才能知道发到哪里。
但是一开始如果并不知道通过物理层连接的这个设备的mac地址， 就还需要寻址。
&lt;strong>寻址&lt;/strong>是通过寻址协议（ARP），先发送一个广播消息，带上自己的mac地址和从网络层拿到的IP地址，在当前网络中询问要访问的目标IP对应的MAC地址。而对应的目标，在收到广播消息后，就会根据收到消息中的源mac地址，将自己的mac地址发送给他，这样，原来的发送方拿到目标mac地址后，就能够完成数据帧的封装，并根据地址进行正确的传递。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-3.png"
width="973"
height="316"
srcset="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-3_hu_e2bf620bce3e41cd.png 480w, https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-3_hu_6fe8c5b186ea9796.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="307"
data-flex-basis="738px"
>&lt;/p>
&lt;p>这一层中，通常会存在二层交换机在当前网络中，用来进行消息的转发。&lt;/p>
&lt;p>所以数据链路层的主要作用就是帧的封装，以及mac寻址。（而通过交换机，还能完成一些差错检测和纠正，以及流量控制的目的）&lt;/p>
&lt;h3 id="网络层">网络层
&lt;/h3>&lt;p>在链路层我们说的&lt;strong>寻址&lt;/strong>，是要在同一个网络下，通过广播喊上一嗓子，对方能够收到，然后才能把mac地址告诉你。但实际中我们访问互联网，目标服务器和自己相隔十万八千里，这时要怎么找到对方并完成通信呢？&lt;/p>
&lt;p>这时就有了不同网络的概念，互联网实际上是由大大小小各种各样不同的网络构成的。在不同网络之间完成通信，你的数据可能会经过很多个不同网络的计算机才能到达对端，同时我们还要找出最快速的路径来让传输的效率更高。&lt;/p>
&lt;p>所以，我们的电脑要联网，其实都有一个&lt;strong>IP地址&lt;/strong>，相对mac地址对应物理地址，IP地址是&lt;strong>逻辑地址&lt;/strong>。ip地址按照IP协议定义，我们目前常用的是IPV4，也就是我们常见的四段十进制点分数字（形如192.168.101.11这样），对应到二进制，它实际是一个32位的二进制数串。 当然，现在因为IPV4地址已经用尽，目前网络IP也在向128位的IPV6转化，但相当长时间内，IPV4还是会继续使用。&lt;/p>
&lt;p>在这32位的IP中，会同时标明当前电脑所在的&lt;strong>网络号&lt;/strong>和&lt;strong>主机号&lt;/strong>。而区分网络号和主机号，是IP地址中子网掩码的作用（具体IP协议的梳理理解，我们后续文章再总结）&lt;/p>
&lt;p>而这里就是网络层的主要作用，会把IP地址封装到&lt;strong>数据包&lt;/strong>中，也就是这一层经过封装的数据叫做&lt;strong>包（package）&lt;/strong>。会包括源IP和目标IP，经过下一层链路层的继续封装，补上MAC地址，就会发送到当前网络的默认网关（也就是默认路由），默认网关收到这个包后，如果发现目标地址不是当前网络的，会通过保存的&lt;strong>路由表&lt;/strong>来选择最优的路径来进行数据包的路由转发。经过一系列的转发，终于到达目标网络，再由目标网络的网关将收到的这个数据包，转换成&lt;strong>帧&lt;/strong>，最后转发给目标主机。&lt;/p>
&lt;p>所以，网络层，主要是完成数据包的封装并进行路由转发。在整个网络通信过程中，极为关键的一层。&lt;/p>
&lt;h3 id="传输层">传输层
&lt;/h3>&lt;p>之前几层我们讨论的数据传输是从主机到主机，但我们在计算机上运行着很多不同的程序，听着歌，开着QQ，打着游戏&amp;hellip; 这些不同的程序都会产生网络通信，那这些传输的数据都怎么正确区分，让不同程序处理各自所需要的数据呢？&lt;/p>
&lt;p>这就是传输层要做的。操作系统会通过端口来对应不同的应用程序，不同应用对应的数据，加上它对应的端口封装起来，这样封装的数据叫做&lt;strong>段（segment）&lt;/strong>。 在段中主要就是添加上了&lt;strong>源端口&lt;/strong>，和&lt;strong>目的端口&lt;/strong>。
此外，段的作用，还有一点，就是应用要处理的数据可能会比较多，要保证数据处理的连贯性和完整性，不可能等所有数据都拿到以后再一次性处理，所以传输层还有个作用就是将数据进行分割，一段一段来传输。在传输层有有两个最重要的协议，一个是TCP（Transmission Control Protocol）、一个是UDP（User Datagram Protocol）。主要是完成对数据进行分段、排序、重组。&lt;/p>
&lt;h3 id="会话层">会话层
&lt;/h3>&lt;p>从这一层向上，是OSI模型中的上三层，主要是程序层面的处理。在TCP/IP模型中，这三层统一看作一层。&lt;/p>
&lt;p>会话层的作用是建立两端通信实体之间的连接，负责通信过程中认证、鉴权以及检查点记录，以便在会话意外中断时还能够继续传输数据。如会话保持、登录信息的记录，断点记录等。&lt;/p>
&lt;h3 id="表示层">表示层
&lt;/h3>&lt;p>表示层，主要是为了消除通信两端不同系统之间的一些差异，负责数据的表示和编解码，实现不同系统之间的数据格式转换和表示方式的统一。通俗地说就是完成两个系统翻译部分的工作。另外还包括像数据的加密和压缩、瘦身，也是定义在这一层来完成。&lt;/p>
&lt;h3 id="应用层">应用层
&lt;/h3>&lt;p>应用层是我们平时使用各种应用时直接接触的一层。主要负责对用户的操作进行处理，完成用户的应用需求。
比如最常用的互联网协议http协议就在这一层。此外还有像邮件协议SMTP、POP3、文件传输协议FTP、远程登录协议telnet等，都是属于应用层。&lt;/p>
&lt;p>用一张图来体现数据在各层的传递如下图&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-4.png"
width="1209"
height="740"
srcset="https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-4_hu_7ca836fc8caaabd7.png 480w, https://chengxiaqiucao.github.io/post/041-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/Pasted-20241021-4_hu_463a0c239104a395.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;h2 id="对osi模型的通俗理解">对OSI模型的通俗理解
&lt;/h2>&lt;p>以上是从技术原理层面对这个模型进行的分析。 如果用一个我们生活中的例子来类比，会更方便理解：&lt;/p>
&lt;p>双十一到了，要买一个心心念念的笔记本&lt;/p>
&lt;ol>
&lt;li>首先各种比价，找到一个平台，性价比满意，决定在这个平台购买。 这里这个平台，其实就是应用层，满足购物需求。（应用层：具体的应用服务）&lt;/li>
&lt;li>下完订单，卖家在发货前，肯定会把电脑以及各种配件、赠品重新打包好，确保到你手上时没有损坏。那这个打包、保护的过程，就相当于表示层的工作。（表示层：数据编解码，格式化）&lt;/li>
&lt;li>在你下订单前，可能还会联系客服，确认赠品，备注发货时间，挑选颜色这些，这个跟客服沟通的过程，就是会话层 （会话层：维持双方的沟通通道）&lt;/li>
&lt;li>确认无误，商家给你发货，这时要有一个快递公司负责送货，这个快递公司是顺丰或者四通一达，目的都是负责把笔记本安全按时交到你手上。 这里快递公司的作用就是传输层。（传输层：负责数据的可靠传递）&lt;/li>
&lt;li>快递公司怎么送货呢？当然要知道商家地址和买家地址，并根据地址选择最优路径的快递员取货、送货，这就是网络层 （网络层：负责逻辑寻址和路由）&lt;/li>
&lt;li>买的笔记本从卖家那里送到了自己所在的区域站点了，这时还会有个快递小哥送货上门，通常都会打个电话，联系你是不是在家。通过电话确定你的具体位置，相当于物理寻址。这是数据链路层 （链路层：物理寻址并传递数据帧）&lt;/li>
&lt;li>最后，整个送货的过程中，会用到卡车、送货面包车、小哥的三轮和双腿，这就是物理层，具体的交通工具 （物理层：物理介质传递比特流）&lt;/li>
&lt;/ol>
&lt;p>通过这样的类比，我们是不是就比较清楚 OSI 七层模型具体怎么工作了呢？&lt;/p>
&lt;hr></description></item><item><title>敏捷研发模型知多少</title><link>https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/</link><pubDate>Fri, 18 Oct 2024 16:04:07 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/scrum.png" alt="Featured image of post 敏捷研发模型知多少" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在本系列上一篇博文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/37-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/" target="_blank" rel="noopener"
>《敏捷Agile概述，何为敏捷？》&lt;/a> 中，我们初步介绍了何为敏捷，敏捷提出的背景和为什么目前得到了广泛的应用。&lt;/p>
&lt;p>但敏捷本身，更多只是一种价值观，是一个思想层面的指引。在组织中实际应用，还是需要借助一些具体的实践模型来进行落地。随着敏捷的发展，其实涌现出非常多不同的实践模型，基于这些模型来组织我们的研发过程，都可以称之为&lt;code>敏捷研发&lt;/code>。&lt;/p>
&lt;p>下面，我们将重点梳理下，在敏捷研发实践中，比较常见的一些模型以及它们的优缺点。&lt;/p>
&lt;h2 id="团队级敏捷">团队级敏捷
&lt;/h2>&lt;p>敏捷从提出之初，更多是首先从开发者的个人视角出发，在软件开发、协作过程中，希望建立的合作关系和开发理念，这种合作，通常是团队内部的开发协作。所以敏捷初期的主要实践模型，主要还是面向团队级别的实践。&lt;/p>
&lt;h3 id="scrum">Scrum
&lt;/h3>&lt;p>Scrum其实提出得比较早，1995年，Jeff Sutherland和Ken Schwaber在他们的论文《Scrum_软件开发过程》中首次提出了Scrum框架。这两位也都参与了敏捷宣言的签署。&lt;/p>
&lt;p>随着敏捷的推广，Scrum被广为采用。根据最新版的敏捷状态报告(17th)，&lt;strong>&lt;code>Scrum&lt;/code>&lt;/strong> 依然是目前最流行的团队级敏捷框架，调查的团队中使用率超过6成。所以完全可以说，Scrum就代表了敏捷的主流实践。&lt;/p>
&lt;p>我们这个系列后续的敏捷实践分享，也将主要以 Scrum 为准来进行探讨。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018.png"
width="1525"
height="306"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018_hu_c535da9891895b11.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018_hu_a7541a9f2c7489d7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="498"
data-flex-basis="1196px"
>&lt;/p>
&lt;p>Scrum 模型框架的的构成：&lt;/p>
&lt;ul>
&lt;li>核心过程：以Sprint 为固定研发周期&lt;/li>
&lt;li>三大角色定义：PO、Scrum Master、Dev Team&lt;/li>
&lt;li>三大工件： PBI（产品待办清单）、SBI（Sprint 待办清单）、Increment（产品增量）&lt;/li>
&lt;li>四大工作仪式：计划会、站会、评审会、回顾会&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/scrum.png"
width="1278"
height="550"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/scrum_hu_6a6082a0359cb0b3.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/scrum_hu_ffcc481533b75ec8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="557px"
>&lt;/p>
&lt;p>Scrum框架强调以一个固定的短研发周期（sprint），定期地交付产品的增量，通过四种不同的工作仪式来跟踪、协作日常工作，强调团队自组织和紧密、机动的合作关系。&lt;/p>
&lt;h3 id="kanban">Kanban
&lt;/h3>&lt;p>Kanban 其实起源更早，来源于上世纪四十年代丰田汽车的生产管理理论。强调的是用一种可视化的方式来提高工作效率，同时便于工作流的调整和优化。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-1.png"
width="1306"
height="834"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-1_hu_a35f1d4b21617708.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-1_hu_ed894e1a9f9bc70.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>Kanban的核心原则是通过可视化的看板向所有成员清晰地展示项目进度和工作分配情况，限制在制品的数量避免过载和积压导致资源浪费，在看板上定义并区分出清晰的工作流程，如任务的创建、分派、执行、测试和完成等。 强调持续集成，通过定期回顾来进行持续改进。&lt;/p>
&lt;h3 id="极限编程xp">极限编程（XP）
&lt;/h3>&lt;p>极限编程（Extreame Programming）简称 XP，是Kent Beck在1996年提出并在自己参与的C3项目中进行了实践。&lt;/p>
&lt;blockquote>
&lt;p>Kent Beck 进行 XP 实践的C3项目，是克莱斯勒公司的一个薪酬管理系统，项目参与人包括多位后来敏捷运动的重要人物，如敏捷宣言的另两位签署人Ron Jeffries， Ward Cunningham也都参与过该项目。但该项目其实并不成功，延期多个月才交付，并且在运作了一段时间后因为存在严重性能问题，之后被彻底关闭。还是比较讽刺的。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-4.png"
width="1368"
height="1004"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-4_hu_1c56dd46f938dff6.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-4_hu_942a87eedb650fc1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="327px"
>&lt;/p>
&lt;p>XP 主要从团队运作、研发过程和开发技术实践三个维度， 定义了13种实践原则，包括持续集成、结对编程、测试驱动开发、客户验收等等，对后续敏捷宣言以及敏捷的12条原则有重要影响。&lt;/p>
&lt;h3 id="精益研发lean">精益研发（Lean）
&lt;/h3>&lt;p>Lean Development，精益研发，其实也是脱胎于丰田的精益生产管理理论。&lt;/p>
&lt;p>后来发展到软件领域，主要包括以下7大核心：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>消除浪费：Eliminate Waste&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内嵌质量：Build Quality In&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创造知识：Create Knowledage&lt;/p>
&lt;/li>
&lt;li>
&lt;p>延迟决策：Defer Commitment&lt;/p>
&lt;/li>
&lt;li>
&lt;p>快速交付：Deliver Fast&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尊重他人：Respect People&lt;/p>
&lt;/li>
&lt;li>
&lt;p>整体优化：Optimize Whole&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>精益更强调在向用户交付价值的同时尽可能消除浪费，并从更整体的业务环境来看待研发。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-2.png"
width="1297"
height="961"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-2_hu_7c1207c538bfecd4.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-2_hu_2e9089947fcea824.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;h3 id="水晶方法crystal">水晶方法（Crystal）
&lt;/h3>&lt;p>水晶法是Alistair Cockburn于 1991 年为 IBM 开发的一种团队协作和沟通制定指导方针，Alistair Cockburn被认为是敏捷早期的普及者，敏捷宣言发表后，包括Crystal在内的方法开始走入大家的视野。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-3.png"
width="1216"
height="614"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-3_hu_a95d7dfc8b8a79f8.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/Pasted-20241018-3_hu_977463797ad11c97.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>水晶方法可细化为&lt;strong>透明水晶方法&lt;/strong>（Crystal Clear）、&lt;strong>黄色水晶方法&lt;/strong>（Crystal Yellow）、&lt;strong>橙色水晶方法&lt;/strong>（Crystal Orange）以及&lt;strong>红色水晶方法&lt;/strong>（Crystal Red）。这几种水晶方法论按照项目重要程度以及参加人员规模进行划分。&lt;/p>
&lt;ul>
&lt;li>Crystal Clear ： 6人左右的团队&lt;/li>
&lt;li>Crystal Yellow：20人左右&lt;/li>
&lt;li>Crystal Orange：40人左右&lt;/li>
&lt;li>Crystal Red：80人左右&lt;/li>
&lt;/ul>
&lt;p>Crystal方法中同样也强调了7大主要特征：&lt;/p>
&lt;p>&lt;strong>1. 经常交付&lt;/strong>&lt;/p>
&lt;p>&lt;strong>2. 反思改进&lt;/strong>&lt;/p>
&lt;p>&lt;strong>3. 渗透式交流&lt;/strong>&lt;/p>
&lt;p>&lt;strong>4. 个人安全&lt;/strong>&lt;/p>
&lt;p>&lt;strong>5. 焦点&lt;/strong>&lt;/p>
&lt;p>&lt;strong>6. 与专家、用户建立方便的联系&lt;/strong>&lt;/p>
&lt;p>&lt;strong>7. 自动化测试、配置管理和经常集成的技术环境&lt;/strong>&lt;/p>
&lt;p>相比于XP、Scrum等，Crystal纪律性较弱，它的主要原则依据团队规模不同会动态变化，所以实际中被应用得并不多。&lt;/p>
&lt;hr>
&lt;p>除了以上5种常见的团队敏捷框架外，还有类似DSM、FDD等团队级别的敏捷实践模型，但目前应用最广的其实主要还是Scrum。&lt;/p>
&lt;p>敏捷模型虽然多种多样，实际应用其实也并没有非此即彼的排斥性，因为它们更多还是敏捷思想的落地，我们理解这些模型定义背后的出发点，取长补短应该才是更加务实地去进行敏捷实践的方式。&lt;/p>
&lt;p>当然，现代软件的规模其实越来越庞大，仅仅依赖一个小型团队，并不能完成软件产品的系统级研发，这些基于团队级别的敏捷框架，如果应用到大型的软件系统，在组织级别的敏捷，通常并不适用，因此针对这种级别的敏捷，又出现了 &lt;strong>大规模敏捷框架&lt;/strong>， 下一篇我们会继续分享敏捷框架中的这部分框架介绍&lt;/p>
&lt;hr>
&lt;h2 id="大规模敏捷">大规模敏捷
&lt;/h2>&lt;p>以上敏捷模型，是基于敏捷提出之初的一些理念发展而来，主要是面向小规模团队的敏捷实践。但是现代软件规模其实越来越庞大，仅仅依赖一个小型团队，并不能完成软件产品的系统级研发。所以为了整合多个通过的小型团队，敏捷组织又提出了多种不同的大规模敏捷模型。&lt;/p>
&lt;p>相比 Scrum 在团队级别敏捷中绝对优势的主流地位，大规模敏捷框架则显得百花齐放，并没有某种模型占据绝对主流。下面我们介绍其中比较知名的几种规模敏捷框架。&lt;/p>
&lt;h3 id="safe">SAFe
&lt;/h3>&lt;p>基于最新的敏捷状态报告，SAFe是目前应用最多的大规模敏捷框架，但也只有 22% 左右的占有率。&lt;/p>
&lt;p>SAFe是 Sacled Agile Framework 的缩写， 诞生于2011年，到目前已经更新到 6.0 版本。&lt;/p>
&lt;p>它提供了一整套结构化的方式来对敏捷实践进行扩展，并提供了四种不同的配置以适应不同级别，分别是：&lt;/p>
&lt;ul>
&lt;li>Essentail：团队级别（中小型项目）&lt;/li>
&lt;li>Large Solution：大型解决方案级别（大型项目）&lt;/li>
&lt;li>Portfolio：投资组合级别（产品线）&lt;/li>
&lt;li>Full：组织级别（企业级）&lt;/li>
&lt;/ul>
&lt;p>SAFe 框架中，在Scrum 迭代（Sprint）的基础上，引入了PI（Program Increment）和敏捷发布火车（ART）的概念，以一个包含数个 Sprint 的周期，构成PI，通过多个不同Scrum团队的合作，来共同致力完成一个较大规模的产品增量。&lt;/p>
&lt;p>在 Scrum 定义的三大角色PO、Scrum Master、Dev Team之外，SAFe中又定义了产品经理PM（product manager）、发布列车工程师RTE（release train engineer）、方案架构师SA（Solution Architect）、业务负责人BO（Business Owner）等新角色，以管理多个团队和更大规模的产品路线图、技术架构以及跨部门的协调。&lt;/p>
&lt;p>SAFe强调的四个核心价值观：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>一致性（Alignment）&lt;/strong>：确保组织中的每个人都朝着相同的方向努力，清晰的目标和愿景是关键。&lt;/li>
&lt;li>&lt;strong>内置质量（Built-in Quality）&lt;/strong>：从一开始就关注质量，避免后期修复，确保产品在每个开发阶段都符合高质量标准。&lt;/li>
&lt;li>&lt;strong>透明度（Transparency）&lt;/strong>：创建一个开放、透明的工作环境，鼓励团队成员间的沟通和反馈。&lt;/li>
&lt;li>&lt;strong>程序执行（Program Execution）&lt;/strong>：通过一致的开发和交付节奏来确保程序和产品的顺利交付。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/SAFe.png"
width="1512"
height="816"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/SAFe_hu_3d8edc8b78a95858.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/SAFe_hu_c6d0437558eac366.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;p>SAFe 以其比较完备的、适应不同规模组织的实践方法论，以及广泛的认证推广，目前在规模敏捷领域，得到越来越多的应用。&lt;/p>
&lt;h3 id="sos">SoS
&lt;/h3>&lt;p>SoS （Scrum of Scrums）其实是一个非常早的规模敏捷模型。2001年（敏捷宣言发布那一年）就由Scrum创建者 Jeff Sutherland提出，并在GE的项目实践中进行了应用。&lt;/p>
&lt;p>这个框架其实理解比较简单。&lt;/p>
&lt;p>本质上是一个同步机制，每个Scrum团队派出一个成员，通常称为&lt;strong>大使&lt;/strong>，这些人再组成一个Scurm，也就是SoS。这个团队同样参照Scrum的原则来运作，有Sprint，站会，backlog等。但SoS的主要关注事项是跨团队的进展、障碍和协调。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/SoS.png"
width="789"
height="567"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/SoS_hu_7a4cf1050dd08e0c.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/SoS_hu_da1168e87222c7ec.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="333px"
>&lt;/p>
&lt;p>SoS也是目前规模化敏捷中采用比较多的方式，但是它的规模一般也不会太大，5~7个Scrum小组的规模。在其之上还扩展出SoSoS，但这个复杂度就进一步上升，运作起来容易混乱。&lt;/p>
&lt;h3 id="nexus">NEXUS
&lt;/h3>&lt;p>另一个规模框架Nexus， 是由scrum的另一个提出者，scrum之父Ken Schewaber创建，然后通过&lt;a class="link" href="https://scrum.org" target="_blank" rel="noopener"
>scrum.org &lt;/a> 于2015年推出的，可以说属于Scrum半官方性质的规模敏捷框架。它的提出时间较晚，目前应用得很少，敏捷状态报告中看到只有约 1% 的应用率，推广不利。&lt;/p>
&lt;p>Nexus主要是在Scrum的基础上，针对更大范围的团队合作进行了少量改进。框架上本身没有太大的变化，也是主要有几点不同：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>它的主要工作会在跨团队层面完成，包括sprint计划、复盘、回顾， 但站会是分小组来开。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由3-9个Scrum team组成Nexus team。 规模更大就会难以组织。这些不同 scrum小组会在同一个迭代周期来运作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nexus引入了一个Nexus 集成团队。这个集成团队，职能和SoS差不多，主要负责不同scrum团队间的工作协调，进展同步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nexus 共享同一份产品backlog，只有一个PO角色，在召开计划前，会召开跨团队的需求提炼会。 而工作成果也是同一个increment&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/nexus.png"
width="2118"
height="902"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/nexus_hu_5893539621207498.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/nexus_hu_a6d516e1861395c3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="563px"
>&lt;/p>
&lt;p>这个框架对团队间的协同要求非常高，而且很多事项是多个Scrum小组共同参与完成并同步，所以效率上较难保证，这可能也是这个框架难以得到更多应用的主要原因。&lt;/p>
&lt;h2 id="less">LeSS
&lt;/h2>&lt;p>LeSS（Large-Scale Scrum）是一种轻量级的敏捷框架，旨在将Scrum扩展到多个团队，同时保持Scrum的核心原则和简单性，于2005年提出。也是比较早的一个框架&lt;/p>
&lt;p>和NeXus类似， LeSS敏捷框架采用同一个产品列表，所有敏捷团队在同一个Sprint中工作，各团队协同完成这个冲刺。&lt;/p>
&lt;p>但在 LeSS 中，Sprint开始时有2个 Sprint 计划会，第一个冲刺计划会中由各团队派人参加讨论和管理彼此间的依赖及协作工作。第二个 Sprint 才是Scrum团队自己的冲刺。在 Sprint 结束时，同样有2个回顾会，一个是敏捷团队内部的回顾会，一个是整个大型敏捷项目的回顾会。&lt;/p>
&lt;p>LeSS灵活度比较高，相比Scrum来说，保留了Scrum的所有角色并且没有引入新的角色，更加依赖团队的自组织能力。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/LeSS.png"
width="1449"
height="684"
srcset="https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/LeSS_hu_5d591f5439e8456f.png 480w, https://chengxiaqiucao.github.io/post/038-%E6%95%8F%E6%8D%B7%E7%A0%94%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9F%A5%E5%A4%9A%E5%B0%91/LeSS_hu_91bb8d69937a3abb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="508px"
>&lt;/p>
&lt;p>相比SAFe等其他框架，LeSS不会引入额外的角色或过多的其他流程，而是通过简化结构来扩展敏捷，但也造成了落地时可操作性上的困难。目前最新的敏捷状态报告中，应用率在2%&lt;/p>
&lt;hr>
&lt;p>以上就是关于敏捷各种实践模型的梳理和总结。帮助大家可以对敏捷的应用和当前的发展状态，有一个整体上的认知。&lt;/p>
&lt;p>欢迎继续关注这个系列，努力持续更新中~&lt;/p></description></item><item><title>敏捷Agile概述，何为敏捷？</title><link>https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_principle.png" alt="Featured image of post 敏捷Agile概述，何为敏捷？" />&lt;p>Agile 敏捷研发可能是现今 IT行业最为流行，也是被广为应用的研发模型。但实际运作中，似乎和预期总有不少的偏差。所以开一个系列来详细梳理下和 Agile 敏捷研发相关的知识并谈一谈自己的 Agile 的理解。&lt;/p>
&lt;h2 id="敏捷的起源">敏捷的起源
&lt;/h2>&lt;p>要谈敏捷，首先我们还是要看看它被提出的背景是什么。&lt;/p>
&lt;h3 id="软件危机">软件危机
&lt;/h3>&lt;p>我们知道，在上世纪70年代到90年代，计算机逐渐开始成为普通消费品，开始进入千家万户。以此为契机，计算机软件行业也开始高速蓬勃发展。但同时，随着软件应用规模的增大，其复杂性也急剧增强，这个阶段发生了大量因为软件导致的问题，也就是现在称为的“软件危机”时期。&lt;/p>
&lt;p>软件危机主要表现为：&lt;/p>
&lt;ul>
&lt;li>超预算&lt;/li>
&lt;li>超时&lt;/li>
&lt;li>低效&lt;/li>
&lt;li>低质量&lt;/li>
&lt;li>不满足需求&lt;/li>
&lt;li>无法管理、难以维护代码&lt;/li>
&lt;li>永远无法交付&lt;/li>
&lt;/ul>
&lt;p>而为了应对上面&lt;code>软件危机&lt;/code> 中产生的问题，&lt;code>软件工程&lt;/code> 开始作为一个学科，快速发展，针对软件研发的各种理论、论文开始涌现。这其中，从制造业的工程管理转化而来的 &lt;code>瀑布模型&lt;/code> 以及其衍生而来的 &lt;code>V模型&lt;/code>, &lt;code>W模型&lt;/code> 占据了主流，影响直到今天&lt;/p>
&lt;h3 id="瀑布模型">瀑布模型
&lt;/h3>&lt;p>但是瀑布模型也存在很明显的缺点，也就是它是一种线性的研发流程，一些影响发布的问题往往要到后期才能暴露。而且这种模型，对风险控制的要求很高，看重计划和流程，所以文档、规范要求非常严格，各种繁文缛节也造成了很大的效率问题。使用瀑布模型，但软件项目失败的例子也依然层出不穷。&lt;/p>
&lt;h3 id="互联网兴起">互联网兴起
&lt;/h3>&lt;p>另外一个背景，就是90年代互联网的兴起。基于互联网的应用，和传统的桌面应用不同，软件发布即送达，且用户群极为庞大。另外互联网的免费策略，使得用户切换同类产品的成本极低，所以互联网应用先天就是一个需求变化极为频繁，对于产品的迭代、更新有极高要求的行业。传统重流程的瀑布模型已经很难适应互联网产品的这种高速的要求。&lt;/p>
&lt;p>正是在以上背景下，敏捷模型应运而生。&lt;/p>
&lt;h2 id="敏捷的历史">敏捷的历史
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_history.png"
width="1002"
height="354"
srcset="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_history_hu_12ec5f95eaca2ba8.png 480w, https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_history_hu_ddd98d31a54daa40.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="679px"
>
&lt;a class="link" href="https://www.smartsheet.com/content/agile-methodologies" target="_blank" rel="noopener"
>图源自smartSheet&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>早在上世纪40年代，丰田在它的汽车生产管理上，就采取过不少现在敏捷研发中推崇的理念。最典型的就是kanban。这个kanban的主要作用就是通过可视化的方式管理生产过程和物料，让生产根据需求而不是早期的计划来推动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>到90年代了，互联网开始兴起。1991年，Crystal水晶方法提出，1994年 动态系统开发方法（dynamic system develop methodology）DSDM被提出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1995年, Scrum正式作为一种研发模式被提出，由Scrum之父 ken schwaber 和 Jeff Sutherland共同发表。这也是现在敏捷研发中应用最广泛的一种模式，几乎是敏捷的代名词。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1996年，XP极限编程 发表，作者是Kent Beck。他也是后面发表的敏捷宣言中排名第一的牛人。敏捷中的很多原则其实都来源于极限编程。题外话，Kent还是著名自动化测试框架&lt;code>Junit&lt;/code>的作者。可以说后世的很多自动化框架都受Junit的重要影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2001年，敏捷宣言发表，包括ken，Jeff，kent，还有marting fowler等17个软件开发领域的专家，在美国犹他的雪鸟滑雪胜地共同签署发表。也从此，敏捷开始逐渐走向主流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2005， 大型敏捷框架LeSS( large scale scrum) 框架被提出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2006年， 第一届敏捷中国大会召开，由著名的咨询公司ThoughtWorks牵头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2009年，敏捷认证体系DA (Disciplined Agile) 建立&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2011年，大规模敏捷框架 SAFe(Scaled Agile Framework) 被提出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2018年， BizDevOps被提出，旨在打通业务到研发的通路.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>发展到现在，敏捷依然在全球范围内广泛传播，但同时，敏捷也暴露了一些本身的问题，所以 Agile 2.0 也已经开始被提及和讨论。&lt;/p>
&lt;h2 id="敏捷宣言">敏捷宣言
&lt;/h2>&lt;p>在敏捷的发展中，敏捷宣言的发表是一个里程碑的事件。 从此 敏捷开始逐步走入实践领域并逐步得到广泛应用&lt;/p>
&lt;p>&lt;a class="link" href="https://agilemanifesto.org/" target="_blank" rel="noopener"
>敏捷宣言官网&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_mani_sign.png.png"
width="1077"
height="1027"
srcset="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_mani_sign.png_hu_9e2093298f7f66f7.png 480w, https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_mani_sign.png_hu_e27be009a6c26d10.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/p>
&lt;p>&lt;strong>个体和互动高于流程和工具&lt;/strong>： 敏捷更加强调个体的作用，强调个体的主观能动性比靠流程和工具能更加高效和有用&lt;/p>
&lt;p>&lt;strong>工作的软件高于文档&lt;/strong>：这里说详尽的文档，就是指的是很重的僵化的文档，写出来也没多少人真的去看的繁文缛节。而工作的软件，是指能实际运行的软件，&amp;ldquo;百闻不如一见&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>客户合作高于合同谈判&lt;/strong>： 强调的是沟通，开发者是软件生产者，客户是使用者，二者更多直接的沟通才能更好地去确定做的东西和你要的东西是不是一样的，而不是提前靠所谓的合同来约定&lt;/p>
&lt;p>&lt;strong>响应变化高于遵循计划&lt;/strong>，就是变化是肯定存在的，一个好的软件开发过程应该去适应这种变化，而不是按部就班一条道走到黑。&lt;/p>
&lt;p>&lt;em>&lt;strong>签署敏捷宣言的17位签署人，都是在其领域内有很高成就和声望的专家，这也为敏捷的广泛传播打下了良好的基础。 但是这17人主要都是软件开发领域的专家，对于整个软件产品的生命周期而言，其他角色的缺位，也为敏捷本身的适应性埋下了局限性上的不足。&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="敏捷-12-原则">敏捷 12 原则
&lt;/h2>&lt;p>除了敏捷宣言外，敏捷还针对实际的应用提出了12项基本原则&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_principle.png"
width="1125"
height="698"
srcset="https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_principle_hu_917db489f0bf6dd5.png 480w, https://chengxiaqiucao.github.io/post/037-%E6%95%8F%E6%8D%B7%E6%A6%82%E8%BF%B0/agile_principle_hu_d972b3b1d6f1aacf.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>客户满意&lt;/strong> ： 以用户的价值位导向。客户满意意味着软件的价值得到体现，软件体现出价值是我们研发软件的最终目标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>拥抱变化&lt;/strong>： 变化是一定存在的，与其控制变化，不如接受变化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>频繁交付&lt;/strong>： 小步快跑，快速交付，快速得到反馈，方便及时纠偏&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>相互合作（业务和研发）&lt;/strong>： 业务的需求方，用户代表和生产者、开发团队应该一起工作。及时确认&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>积极的团队&lt;/strong>：自我激励的团队，团队本身是积极主动的，没有内耗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>面对面&lt;/strong>：及时沟通，百闻不如一见&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可工作的软件&lt;/strong>：所见即所得&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>稳定的节奏&lt;/strong>：固定的节奏能更好地形成默契&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>好的设计（技术卓越）&lt;/strong>：强调软件开发的内功，通过的更好的设计解决问题，降低风险。强调技术卓越&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简单即美&lt;/strong>：软件不应该过度开发，逐步满足用户的需求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自组织&lt;/strong>：研发过程的控制权要在开发者自己手中，不要有各种行政命令。  Scrum之父ken 曾经明确表明过，敏捷的目的就是要干掉经理这个职位。😂😂&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>反思和调整&lt;/strong>: 这条是自我组织的补充，敏捷运作过程种，不可避免也会出现各种失败或者运作不畅的地方，这时要及时回顾和反思，及时调整补救。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="笔者对敏捷的看法">笔者对敏捷的看法
&lt;/h2>&lt;p>敏捷虽然如今在业界广为应用，但也并不是银弹，我们依然要辩证地看待敏捷，天底下没有放诸四海而皆准的理论和方法。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>它提出的理念和发展出的一些原则和实践出发点是极好的，但并不是所有的情况都适用，应用敏捷依然要根据产品、项目的实际情况来确定应用方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从敏捷宣言和原则中其实也看出来，敏捷本身更多传递的是一种价值观，是软件研发理想的方向，而不是一套方法论。它不是一个指导项目如何运作的执行层面的方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>敏捷的提出，更多是从软件开发角度来思考的，是这些开发大牛们基于软件开发视角出发得出的思考结论。但敏捷应用在产品领域，很多做法是过于理想化的，比如和客户一起工作，自组织团队等等，特别在一起传统企业，会面临极大阻力。非组织层面的根本性转变是不可能进行推进的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>所以，敏捷本身不是银弹，它也不是方法论。而是一种文化层面的思想，真正理想地得到应用，是需要组织层面的变革方可推进，并不是一个可以从十数人的小团队自下而上推行就可以成功应用的实践。&lt;/p>
&lt;hr>
&lt;p>关于敏捷实际应用，后续还会针对 Scurm 框架进行更多分享。敬请关注。&lt;/p>
&lt;p>秋草观“测”台，观察测试业。（公众号：秋草说测试）&lt;/p></description></item><item><title>软件测试岗位及其职业发展前景</title><link>https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/TestingCareer.png" alt="Featured image of post 软件测试岗位及其职业发展前景" />&lt;p>最近经常被问到软件测试这个行业的前景，网上也有大量唱衰测试这个行业的声音，很多选择职业方向的同学对是否要进入这个职业也非常迷茫。&lt;/p>
&lt;p>所以开一贴来聊一聊秋草对软件测试这个岗位的要求以及对其前景的看法。&lt;/p>
&lt;h2 id="软件测试到底是个什么样的岗位">软件测试到底是个什么样的岗位？
&lt;/h2>&lt;p>选择一个行业，首先要了解这个行业存在的目的，到底是提供什么价值的？&lt;/p>
&lt;p>软件测试作为软件行业的一个技术分支，是一个面向软件质量的岗位。&lt;/p>
&lt;p>这个职业存在的目的，是基于质量作为产品的核心属性之一，需要得到最大程度地保证。测试工作就是在产品交付用户前，用于完成对产品质量的评估，尽可能暴露产品中潜在的质量问题，以便产品研发团队进行改进和补救。&lt;/p>
&lt;p>所以软件测试这个工作的目的： &lt;strong>尽可能及时、准确地评估出被测试对象的质量状态&lt;/strong>&lt;/p>
&lt;p>我的另一篇博文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/07-%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84/" target="_blank" rel="noopener"
>《软件测试的真正目的》&lt;/a> 中对这一点进行了详细的说明，这里不再赘述。&lt;/p>
&lt;p>从软件测试职业的目的和它的价值来说，这个职业不是生产单位，而是保障单位。是通过这个职位关联的各种测试技术，去保障产品，使之不因为质量问题出现损失的一个职业。&lt;/p>
&lt;p>因此，只要质量依然是产品的核心属性，质量问题会影响到产品成功与否，那么测试这个职能就依然是一个必要的技术分支，是软件产品研发中必须包含的一个职能。&lt;/p>
&lt;h2 id="软件测试的技能要求">软件测试的技能要求
&lt;/h2>&lt;p>既然软件测试是一个技术岗位，那么要做好这个工作，离不开掌握各种相关技能。&lt;/p>
&lt;h3 id="基础技能">基础技能
&lt;/h3>&lt;ol>
&lt;li>首先是跟软件研发流程和软件项目运作本身相关的知识。理解软件工程从需求到交付的完整过程，理解项目运作以及测试这个岗位在其中的作用。软件研发生命周期 SDLC 具体是什么？测试生命周期又是什么？传统研发模型和敏捷研发的关系？敏捷有哪些活动等等？&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010.png"
width="432"
height="265"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010_hu_d98f78ab15a795ae.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010_hu_e14c36440ff5b1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/p>
&lt;ol start="2">
&lt;li>对测试基础理论的掌握，主要是各种不同的测试方法、测试类型，对各种测试概念的理解&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-1.png"
width="666"
height="790"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-1_hu_e6a9df773e0343b3.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-1_hu_c08f673618549e95.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="202px"
>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>测试工作本身相关的技能要求。包括测试用例、测试报告的编写，Bug的提交要求，故障定级标准、故障处理流程、状态报告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>业务理解能力要求。软件需求的构成要素，产品整体架构和需求的关系，产品的软件设计和功能的关系等，要建立起对产品和业务逻辑的理解。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>有了上述的基础技能，那么就基本达到了完成测试工作的基本要求。&lt;/p>
&lt;h3 id="技术能力">技术能力
&lt;/h3>&lt;p>而除了掌握基础技能之外，将测试工作完成好，必然还需要掌握进一步的进阶类的关联知识&lt;/p>
&lt;ol>
&lt;li>关联的IT技能。主要是操作系统、数据库、网络这几大块。而这每一块都有足够的深度和广度。很少有人能在每个方向上都做到极为精通。但要成长为一个优秀的测试人员。这几部分能力却是不可或缺的。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-2.png"
width="560"
height="698"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-2_hu_e6e73b845e0fb7cf.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-2_hu_93f17325d21e61c5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ol start="2">
&lt;li>一些进阶的测试类型，需要建立在更高技术能力基础上的测试类型，主要有性能测试、安全测试以及一些专项测试&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-3.png"
width="570"
height="325"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-3_hu_1a48fc55b4fdf40a.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-3_hu_9e30eff1c1b647c6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;ol start="3">
&lt;li>自动化测试相关的技能。能够实施自动化，目前已经是测试人员的必备技能了。而自动化能力建立在编程能力和不同自动化类型工具的基础上。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-4.png"
width="600"
height="728"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-4_hu_51a521534806ad67.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-4_hu_79f0de20a89a00e0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="197px"
>&lt;/p>
&lt;h3 id="软技能">软技能
&lt;/h3>&lt;p>软件测试也是一个非常强调协作和沟通能力的岗位。因此除了技术能力之外，相关的一些软技能对于能否把这个工作做好、做漂亮也尤为关键。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>测试不等同于检查， 测试能力很重要的部分还包括推理能力、设问能力、观察能力等软技能。细心、发现线索、有探究精神对于测试工作尤为重要。
&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/testing-checking.png"
width="748"
height="571"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/testing-checking_hu_894995043907226c.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/testing-checking_hu_fc91b077f293f5bc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>归纳总结、书面表达能力。 输出故障说明、测试报告等等都是归纳总结和书写能力的表现。测试工作的目的是能够评估出产品的质量状态，而把这个评估出的状态呈现出来，关联的就是这里的书面表达能力了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协作沟通能力。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>测试工作因为工作性质，会需要频繁地和BA、和开发包括和项目其他成员频繁地沟通和协作，澄清问题，很多时候都需要说服别人理解问题对质量的影响。所以良好的协作沟通也是测试工程师的重要能力组成。&lt;/p>
&lt;ol start="4">
&lt;li>演示宣讲能力&lt;/li>
&lt;/ol>
&lt;p>测试作为产品发布前的最后一道检验程序，很多时候在向用户交付，或者敏捷团队中的演示会环节会需要担负起向其他人员进行产品功能介绍、演示的职责，这种情况下自己的演示宣讲能力就不仅是对个人，也是对团队提供价值的一种能力了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-5.png"
width="678"
height="369"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-5_hu_fa953188ffafce94.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/Pasted-20241010-5_hu_5d33eb3751ffd76e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;h2 id="职业发展通道">职业发展通道
&lt;/h2>&lt;p>从事测试行业，个人的职业发展方向，总体上来说有三个方向。网上有一张测试发展路线图其实比较清晰地说明了测试的成长路径。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/TestingCareer.png"
width="1282"
height="675"
srcset="https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/TestingCareer_hu_29438aed3a12ea21.png 480w, https://chengxiaqiucao.github.io/post/035-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E5%89%8D%E6%99%AF/TestingCareer_hu_66bc18cc7221839e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;ol>
&lt;li>管理路线&lt;/li>
&lt;/ol>
&lt;p>这条线其实是主线，在中国国情下，经验、技术、资历达到一定程度，还是会逐步向管理转型，从测试主管、测试经理、测试总监到质量总监、副总，沿这样一条线逐步晋升成长。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>技术路线
而作为一个技术岗位，大多公司其实也提供技术发展通道，通过软件技术路线，从中高级工程师到资深工程师乃至专家工程师，以技术提升得到职业发展。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>业务路线
此外，测试作为研发团队中，对整体业务相对更熟悉的岗位，向业务路线发展也是一个重要的成长通道，从测试分析到业务分析以至项目管理、QA等岗位角色，同样也是适合的发展方向。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="未来的前景">未来的前景
&lt;/h2>&lt;p>最后，再谈谈很多同学，包括不少测试同行对软件测试这个职业前景的担心，测试是否已经式微？今后的发展方向是否就是逐步淘汰测试？&lt;/p>
&lt;h3 id="传统研发已过时敏捷研发中并不需要测试">传统研发已过时，敏捷研发中并不需要测试？
&lt;/h3>&lt;p>其实早几年已经有过一次认为测试岗位可以逐步取消的风潮。“google、facebook裁撤测试团队”，“开发测试人员比例减小到10：1”， 包括流行起来的敏捷研发，也只定义了一个开发团队。似乎测试在现代软件研发流程中已经不再是一个必备岗位。&lt;/p>
&lt;p>其实在敏捷研发中，并没有削弱测试，反而是更加强调了测试，特别是测试前移。包括TDD（测试驱动开发），需求验收标准这样的实践，都在强调功能测试的重要性。只是这些实践，更多是把测试放到开发团队内，而不是一个单独的专职测试团队。不再区分敏捷团队（dev team）中的不同角色，而是强调，团队中应该具备完成产品研发的各种角色和能力。&lt;/p>
&lt;p>也就是说，虽然敏捷中只定义了PO、Scrum Master、Dev Team三个角色。但Dev team中其实应该包含具备各种能力的成员，包括设计人员、开发人员、测试人员，不细分具体的职责，强调的是团队整体，可能有的成员会身兼数职。&lt;/p>
&lt;p>所以，并不是敏捷排斥了测试，而是把包括测试在内的研发活动作为一个整体来看待。我们也可以说敏捷中不再有设计，不再有配置管理等等。&lt;/p>
&lt;h4 id="专职测试">专职测试？
&lt;/h4>&lt;p>而这个变化，是不是又说明专职的测试人员岗位会消失？
从敏捷的定义中来看，确实如此。就像敏捷中也不再会有专职的设计人员、配置人员，包括开发人员定义一样。从这个意义上，敏捷团队中不再有专门的测试工程师。&lt;/p>
&lt;p>但另一方面，我在其他的文章中也讨论过，敏捷强调团队整体，整体对质量负责，团队自组织完成产品研发的各方面事务。这是提出敏捷概念的这群软件开发大师们的理想，但理想不等于现实。&lt;/p>
&lt;p>现实是术业有专攻，特别是开发和测试这两个职能，先天是比较对立的。&lt;/p>
&lt;ul>
&lt;li>开发人员更倾向追求确定性。基于确定性的需求，步骤，定义产品的表现。&lt;/li>
&lt;li>测试人员则需要基于不确定性来考虑各种可能路径和分支场景，基于未知来评估产品的可能表现。&lt;/li>
&lt;/ul>
&lt;p>这两种思维方式上的对立，决定了很难让一个角色很好地完成开发兼测试两种职能。敏捷团队中，依然会需要更偏重测试的角色存在。专职的测试人员必然还会发挥他的专业价值。&lt;/p>
&lt;h4 id="测试人员本身的转型">测试人员本身的转型
&lt;/h4>&lt;p>当然，敏捷的提出，也为测试人员纠正一些原先错误的价值观提供了契机。测试并不是为了发现Bug，也不是仅仅为了验证需求。而是基于产品质量的视角，去评估产品的质量状态，目标还是产品本身的价值体现。测试应该承担起敏捷团队中QA的部分职能。&lt;/p>
&lt;h3 id="自动化测试ai-会替代测试岗位">自动化测试/AI 会替代测试岗位？
&lt;/h3>&lt;p>另一个主要的担心，是随着 AI 的发展，测试岗位是否会被 AI 代替？ 当然不仅仅是测试，其他 IT 岗位包括开发人员也存在类似的担忧。&lt;/p>
&lt;p>坦白说，以现在AI发展的速度，十年后很难说像编程、软件开发还是一个多么依赖强技能的职业，开发产品可能更多是将自己的想法准确地描述给AI，AI根据输入的需求完成实现。&lt;/p>
&lt;p>测试岗位理论上也类似，很多本来程序员会犯的错误，AI在实现的时候先天就会规避掉，所以程序本身的bug将极大减少。但除此之外，测试工作中还有一部分是未考虑到的测试场景，当然AI可以根据需求自行补充很多异常场景，但如果这个场景是强业务相关的，AI可能还是难以靠自身的推演完全覆盖。&lt;/p>
&lt;p>此外，很多异常测试场景是严重依赖测试环境构造的，而这些异常情况的模拟如断网、资源不足、高并发等等，脱离实际操作人员的干预，应该还比较困难。&lt;/p>
&lt;p>还有一点，AI自身的训练，也存在数据毒药的问题，就像现在自动化测试也存在测试脚本本身Bug的问题类似，对AI本身成效的验证，也是属于测试范畴。&lt;/p>
&lt;p>所以从这些角度来看，AI 近期内还替代不了测试工作。&lt;/p></description></item><item><title>常用流程图类型及其作用</title><link>https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/</link><pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-2.png" alt="Featured image of post 常用流程图类型及其作用" />&lt;p>在企业管理、软件研发过程中，经常会需要进行各种业务流程梳理，而流程图就是梳理业务时必要的手段，同时也是梳理的产出。但在不同的情况下适用的流程图又不尽相同。
本文我们就一起来总结一下8 种最常见的流程图类型&lt;/p>
&lt;h2 id="数据流程图">数据流程图
&lt;/h2>&lt;p>&lt;strong>数据流程图（Data Flow Diagram）&lt;/strong>
是一种用于描述系统中数据流动和处理过程的图形。一般主要用于分析和设计信息系统，帮助理解系统的功能以及数据的输入、输出和存储&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-1.png"
width="990"
height="569"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-1_hu_5cb904fd685bb885.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-1_hu_c3d8cda25a69f0b9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/p>
&lt;h2 id="状态迁移图">状态迁移图
&lt;/h2>&lt;p>&lt;strong>状态迁移图（State Transition Diagram）&lt;/strong>
通常用在业务对象有较多不同的状态，为了梳理不同状态之间的迁移关系和触发条件。
比如订单的状态迁移：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001.png"
width="1142"
height="831"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001_hu_c361534838e8b98d.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001_hu_b0c143082ed2f491.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;h2 id="过程流程图">过程流程图
&lt;/h2>&lt;p>&lt;strong>过程流程图（Process Flow Diagram）&lt;/strong>
也就是我们通常所说的一般流程图。是用于描述和分析业务流程、工作流程或系统操作的图形。它通过图形符号和连接线展示流程的各个步骤及其顺序，帮助理解和优化过程&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-2.png"
width="1290"
height="578"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-2_hu_65d72f228388809d.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-2_hu_6fc1bf15363ad852.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="535px"
>&lt;/p>
&lt;h2 id="泳道流程图">泳道流程图
&lt;/h2>&lt;p>&lt;strong>泳道图（Swimlane Diagram）&lt;/strong>
是一种用于描述和分析跨部门或跨职能流程的图形。通过将不同的&amp;quot;泳道&amp;quot;分配给参与者或部门，通过泳道流程图清晰地展示了各方在整个流程中的角色与责任&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-3.png"
width="1375"
height="1037"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-3_hu_4face3a99273af72.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-3_hu_b8768850aa430bab.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;h2 id="工作流图">工作流图
&lt;/h2>&lt;p>&lt;strong>工作流图（Workflow Diagram）&lt;/strong>
是一种用于描述工作流程和业务过程的图形，通常用于显示任务的顺序、参与者的角色以及任务之间的逻辑关系。它帮助团队理解和优化工作流程，确保任务的高效执行&lt;/p>
&lt;p>比如代码版本控制管理中的 &lt;strong>gitflow&lt;/strong> 就是一种典型的工作流图&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-4.png"
width="1150"
height="1524"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-4_hu_dbad816bf21d59d0.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-4_hu_83481c12c78339b8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;h2 id="时序流程图">时序流程图
&lt;/h2>&lt;p>&lt;strong>时序图（Sequence Diagram）&lt;/strong>
是一种用于描述对象之间交互的图形，特别强调时间顺序。它通常用于建模系统中对象或组件之间的动态行为，特别是在软件工程和系统设计中。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-5.png"
width="1192"
height="978"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-5_hu_adc75acac48662e7.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-5_hu_f530512328b7ef20.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/p>
&lt;h2 id="系统架构图">系统架构图
&lt;/h2>&lt;p>&lt;strong>系统架构图（System Architecture Diagram）&lt;/strong>
是一种用于描述系统各个组件之间关系和交互的图形。它提供了系统的整体视图，帮助开发团队、项目经理和利益相关者理解系统的结构和设计&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-6.png"
width="1135"
height="877"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-6_hu_6d0922df4b6a1d24.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-6_hu_e0ddf14368785c6f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;h2 id="组织结构图">组织结构图
&lt;/h2>&lt;p>&lt;strong>组织结构图（Organizational Chart）&lt;/strong>
是一种用于展示组织内部各个部门、职位及其相互关系的图形。它帮助员工、管理层和利益相关者理解组织的层级结构和工作关系&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-7.png"
width="1584"
height="860"
srcset="https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-7_hu_4cf85ce3f0292ce2.png 480w, https://chengxiaqiucao.github.io/post/030-%E5%B8%B8%E8%A7%81%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/Pasted-20241001-7_hu_70a2228dde93a6f1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p></description></item><item><title>软件分支策略和集成模式梳理</title><link>https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/branch.png" alt="Featured image of post 软件分支策略和集成模式梳理" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>软件代码是任何一个软件研发团队的核心资产。而软件的分支管理就是团队中多人合作时，如何协调处理不同人员的代码同步、集成并解决冲突的主要方式。&lt;/p>
&lt;p>本文根据软件大牛Martin Flower的分支模型阅读笔记整理&lt;/p>
&lt;h2 id="基础模式">基础模式
&lt;/h2>&lt;h3 id="源分支">源分支
&lt;/h3>&lt;p>所有修改都记录到同一分支&lt;/p>
&lt;p>分支的定义：
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927.png"
width="701"
height="259"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927_hu_d4d3068e3f2598bc.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927_hu_a8449443230e7ad4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="649px"
>
创建分支：
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-1.png"
width="916"
height="590"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-1_hu_6098059e69a69708.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-1_hu_76295e80e62f86e2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>不同的两个开发者基于主分支拉去各自的开发分支：
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-2.png"
width="872"
height="439"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-2_hu_f52032f3cbeccd64.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-2_hu_a4a8cfd6c8cb1d23.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>Jonny LeRoy 指出我们绘制分支线时，其实忽略了随着时间，导致的复杂度提升
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-3.png"
width="883"
height="521"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-3_hu_3f48b100679b4356.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-3_hu_b114d269317d2d1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;h4 id="主干的定义">主干的定义：
&lt;/h4>&lt;p>&lt;strong>Master、Trunk&lt;/strong>&lt;/p>
&lt;p>是反映产品当前实际状态的唯一公用分支&lt;/p>
&lt;p>可以随时获得当前产品版本状态，并基于此进行开发&lt;/p>
&lt;h4 id="健康分支">健康分支：
&lt;/h4>&lt;p>为每一次提交进行自动化构建、测试，确保没有在当前分支引入故障（可工作的无故障分支）&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ol>
&lt;li>健康的公用分支，可以避免从这个分支上拉取的新分支工作在错误的基础上&lt;/li>
&lt;li>健康分支更易入直接发布到产品&lt;/li>
&lt;li>随时保持一个健康分支能极大降低集成的工作量并减少潜在风险。&lt;/li>
&lt;li>便于进行差异调试。（可以将调试失败的commit去除，仅保留健康的commit）&lt;/li>
&lt;li>在集成到主干时如果出现问题，就可以非常明确地确认是冲突导致而非代码错误&lt;/li>
&lt;/ol>
&lt;p>可能是公用分支、也可以是自己的分支。
自测代码是健康分支的核心，自测应可以快速得到结果（分钟级）&lt;/p>
&lt;h2 id="集成模式">集成模式
&lt;/h2>&lt;h3 id="主线集成">主线集成
&lt;/h3>&lt;p>开发从主干拉取代码进行开发，集成，并将健康的更改推送回主干
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-4.png"
width="1086"
height="253"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-4_hu_13469664a5d85941.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-4_hu_e78cbd5209ceaec2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1030px"
>
从主干拉取分支到本地，并在本地分支上进行开发&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-5.png"
width="1058"
height="302"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-5_hu_2e852c5d48edaa74.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-5_hu_95b356c339ee0ff5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="840px"
>
开发过程中，其他开发已经提交了变更到主干分支
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-6.png"
width="1021"
height="313"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-6_hu_1c0b4402c038b960.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-6_hu_9c1d222d40356939.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="326"
data-flex-basis="782px"
>
此时如需向主干提交，则首先需要合入其他的变更
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-7.png"
width="1067"
height="334"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-7_hu_71458497204245e0.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-7_hu_73d9f4f1fb973746.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="766px"
>
有时，本地的修改和已经提交的变更会有冲突，此时需要先解决冲突
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-8.png"
width="1055"
height="322"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-8_hu_4e9aad39450c55f7.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-8_hu_aafa4ba988541945.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="786px"
>
再重新将修改并自测后的健康代码提交到主干分支&lt;/p>
&lt;p>使用主干时，意味着我们会实行&lt;strong>主干集成模式&lt;/strong>&lt;/p>
&lt;h3 id="特性分支">特性分支
&lt;/h3>&lt;p>为每一个功能特性拉取它独立的分支，并在feture完成后集成回主干&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-9.png"
width="933"
height="366"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-9_hu_74b95c7ee6bcc59d.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-9_hu_32c0ddbd05ee967a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>
从主干拉取不同的特性分支并分别进行开发
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927175324.png"
width="952"
height="350"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927175324_hu_12d1719d35d77f7d.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927175324_hu_afcf5cdf5e2a68df.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="652px"
>
开发过程中会持续从主干拉取最新代码，如果有其他功能变更，要及时进行集成解决冲突（本地）。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-10.png"
width="885"
height="360"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-10_hu_20dd7f755d09ae7a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-10_hu_f29cffe845a9b55e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="590px"
>
特性完成开发后，集成回主干。（受影响的冲突已在本地解决，所有其他特性分支上直接拉取变更，不会存在冲突需要解决）&lt;/p>
&lt;h3 id="低频集成">低频集成
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-11.png"
width="1063"
height="335"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-11_hu_a05c68bed305ab44.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-11_hu_9daf312ea04c227f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="317"
data-flex-basis="761px"
>&lt;/p>
&lt;p>两条独立的开发分支上分别进行了几次本地提交，但没有向主干推送
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-12.png"
width="1015"
height="333"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-12_hu_26b3824f0bf7a0e8.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-12_hu_13f0a04d517dcf1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="731px"
>
主干上合入了变更&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-13.png"
width="1064"
height="338"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-13_hu_78ae884a57bcb222.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-13_hu_ed2fa66bb5a8fc68.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="314"
data-flex-basis="755px"
>
开发分支需要拉取变更并合入到本地分支（解决冲突）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-14.png"
width="1067"
height="342"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-14_hu_d54a092c550a112e.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-14_hu_819f06a28caca5af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="311"
data-flex-basis="748px"
>
分支A上继续完成了4，5两个提交，然后推送大主干
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-15.png"
width="1052"
height="321"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-15_hu_450e64d3035717ed.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-15_hu_11fe33b1a4c666ee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="786px"
>
分支B上完成了4，5，6几个提交后，需要在本地合入主干上A的提交，集成后推送到主干。（本地合入的大小代表工作量）&lt;/p>
&lt;h3 id="高频集成">高频集成
&lt;/h3>&lt;p>每次提交都向主干进行集成和推送呢？
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-16.png"
width="1057"
height="312"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-16_hu_af2461a8a4eeb452.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-16_hu_c2915e7288889683.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="338"
data-flex-basis="813px"
>
V完成第1次提交后就推送回主干&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-17.png"
width="1025"
height="324"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-17_hu_3bd84e894d966406.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-17_hu_5e73f50ccccec7f2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="759px"
>
S在完成第1次提交后就进行本地合入，并推送回主干
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-18.png"
width="1036"
height="327"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-18_hu_81fb63d9bcbd438c.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-18_hu_a427bc1c01c61ba7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="760px"
>
S的第2次推送，主干没有变更，没有本地合入工作
V完成第2次提交和本地合入，推送
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-19.png"
width="1074"
height="323"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-19_hu_3b84f8f85861beda.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-19_hu_711e4f940a79bb3e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="332"
data-flex-basis="798px"
>
S的第3次提交，需要本地合入，推送
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-20.png"
width="1078"
height="345"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-20_hu_92be6eb77101a99a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-20_hu_3e1c6ae613104a6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="312"
data-flex-basis="749px"
>
如此，每次本地的提交，都会向主干进行推送&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-21.png"
width="1021"
height="401"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-21_hu_d27d5d59cebb2a27.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-21_hu_e4a65e5ebd0a4c1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-22.png"
width="1053"
height="429"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-22_hu_f963bcda7ec114e5.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-22_hu_9b20a62829346550.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/p>
&lt;p>比较二者，高频集成会有更多的本地集成工作，但这些集成的工作量比低频集成低得多。
同时，比工作量减少更重要的是，这样做减少了风险。（虽然大多情况下，进行大的合入也能顺利完成，但有时却会有严重的冲突问题难以解决。这种情况，偶发的巨大问题比常规的小问题更糟糕）
如果每次常规集成10分钟，但50次集成合在一起要6小时，看起来6小时比500分钟还是要少，但是这会导致&lt;em>集成恐惧&lt;/em>（if it hurt，do it more often）&lt;/p>
&lt;p>而且高频集成模式下，可以更早发现代码间的冲突情况，并避免在冲突代码在后期才发现而导致中间持续产生了很多本不应该存在的更多冲突代码。&lt;/p>
&lt;p>源码控制系统其实更多是一个沟通平台，可以意识到其他团队成员的工作&lt;/p>
&lt;h3 id="持续集成">持续集成
&lt;/h3>&lt;p>开发者一旦完成一个健康的提交，就会尽快完成主干集成，一般不超过1天。&lt;/p>
&lt;p>（如果高频集成更有效率且可实施，但使用特性分支，意味着限制了变更不能比一个特性更小，那么集成频次就成了问题？）&lt;/p>
&lt;p>持续集成-只要特性上的开发是有进展并且是健康的，就可以向主干集成。唯一的原则就是每天都要进行集成（甚至更短）&lt;/p>
&lt;p>开发团队需要习惯在主干上存在未完成特性的情况并考虑如何在产品中不暴露这些特性。（通过隐藏入口、配置控制），有时我们还可以实现灰度发布。&lt;/p>
&lt;p>在持续集成模式下，开发着往往不需要创建自己的特性分支，只要在本地的主干分支上工作即可。&lt;/p>
&lt;p>特性分支和持续集成的区别不在于是否有特性分支存在，而在于何时向主干集成。&lt;/p>
&lt;p>两者的比较：&lt;/p>
&lt;p>两种模式的差异更多取决于特性的大小，如果特性足够小（一天以内可以完成），就可以同时实行特性分支和持续集成。&lt;/p>
&lt;p>特性分支最明显的问题在于合并的工作量和不确定性，然而更大的问题是它可能阻止重构。重构是软件优化最有效的途径，但是重构会产生冲突，当解决冲突工作量太大时，重构往往需要极大的勇气。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能分支&lt;/th>
&lt;th>持续集成&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>- 可以将某个功能中的所有代码作为一个单元进行质量评估&lt;br>- 功能完成后才将功能代码添加到产品中&lt;br>- 合并频率较低&lt;/td>
&lt;td>- 支持比特征长度更高的频率集成&lt;br>- 减少发现冲突的时间&lt;br>- 规模较小的合并&lt;br>- 鼓励重构&lt;br>- 需要致力于健康的分支（从而实现自我测试代码）&lt;br>- 科学证据表明它有助于提高软件交付性能&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="特性分支和开源软件">特性分支和开源软件
&lt;/h4>&lt;p>github的特性分支？pull request模式
上下文不同：分散、不定时、团队成员不了解 vs 全职、熟悉的团队成员、可靠&lt;/p>
&lt;p>提交的审核review&lt;/p>
&lt;ul>
&lt;li>代码审核·&lt;/li>
&lt;li>集成受阻&lt;/li>
&lt;li>模块化的重要性&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="发布模式">发布模式
&lt;/h2>&lt;p>主干分支是活动分支，代码持续在其上开发。如果能保持主干的健康状态，任何人都可以从一个稳定的基础开始自己的工作。
而且足够健康的话，也可以直接从主干分支进行产品的发布&lt;/p>
&lt;p>&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/b1dee5579befaf2a2e007af2dbb2c29f.png#pic_center"
loading="lazy"
alt="在这里插入图片描述"
>
对于实施CI/CD的团队，一个常用的实践是通过打Tag标记来跟踪每一个发布的版本。但不实践CD的团队，则需要其他的发布模式&lt;/p>
&lt;h3 id="release-branch-发布分支">Release Branch 发布分支
&lt;/h3>&lt;p>预备发布的分支，只接受以版本稳定和交付为目标的提交 （一般系统测试阶段）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-23.png"
width="716"
height="287"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-23_hu_81382339d9d451f8.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-23_hu_7bf94c3181911e26.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;p>Release分支从主干分支中拉取，不再接受任何新feature的合入。工作在release分支上的开发工作主要是修复发现的bug或影响交付的功能。所有的修改最终还需要合并回主干。
&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/4e7655a86c338d8ce135fc704ded3f97.png#pic_center"
loading="lazy"
alt="cherry-pick 到release分支"
>
尽管release分支上的工作往往比新feature的开发工作量更小，但是如果在其上的开发时间过长依然会导致合并回主干非常困难（主干上的提交越多，合入就越困难）&lt;/p>
&lt;p>实际工作中，因为release分支的存在，合并回主干的操作往往容易被忽视，特别是有困难的冲突需要解决并且存在发布压力的情况下。&lt;/p>
&lt;p>所以有的开发会采用另一种方式，继续在主干上开发，然后通过cherry-pick将只和发布相关的提交合入到release分支。这种方式的缺点是很多时候chrry-pick有时也很困难（对之前的commit有依赖的情况），在实际发布之前对release分支往往有一些重做工作。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-24.png"
width="1000"
height="430"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-24_hu_2d6097156d59f34e.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-24_hu_4afd22e582bedc82.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>
对于只有一个产品版本的团队来说，使用单一的release分支就好。但很多情况下，会存在需要支持多个产品版本的情况，比如客户本地部署的软件，可能会长时间运行在一个历史版本上，但是又需要继续做一些bug fix或者一些特别的需求，此时就需要维护多个不同的release 分支，并定期保持和主干同步&lt;/p>
&lt;p>对开发团队这明显是大大增加了维护难度和工作量，但这更多是产品策略带来的成本。唯一可以做的就是鼓励客户更及时地升级到最近版本（保持产品稳定非常关键，一旦产品不稳定导致问题，会使客户更倾向不再升级）&lt;/p>
&lt;p>Release分支对于难以保持主干分支持续在健康状态的团队非常有必要，团队可以关注在产品发布的功能验证上。但对于单一产品的团队，release分支并不必要，使用主干分支并保持健康状态即可（发布的版本进行Tag标记）
另外，对于发布流程存在很多阻塞的团队，relase分支也是必要的（比如有比较缓慢的审核流程，在应用商店上线的时间窗、安全、法务、合规等的审核等）&lt;/p>
&lt;h3 id="成熟分支">成熟分支
&lt;/h3>&lt;p>分支的head总是标记为最近版本的成熟代码基线&lt;/p>
&lt;p>根据团队对产品成熟度的不同定义，拉取出的对应的成熟分支。比如QA分支（提测）、Staging分支（预发）、production分支（上线）&lt;/p>
&lt;p>但很多情况下，使用清晰定义的Tag机制就可以代替成熟分支的作用。比如“成熟级别-内部版本号”，“qa-233”，“prod-445”
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-25.png"
width="808"
height="418"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-25_hu_384ca6b5a8e6e3fb.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-25_hu_5bc1629d3f4c0e2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="463px"
>&lt;/p>
&lt;h3 id="长期发布分支">长期发布分支
&lt;/h3>&lt;p>release分支一般在产品发布后就可以删除，但我们也可以维持一个长期的发布分支。它的作用可以看作是发布分支和成熟分支的集合。这个分支上进行release前的fix工作并合并回主线，并在实际发布时打上发布Tag，然后进入下一个版本的发布准备。
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-26.png"
width="940"
height="304"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-26_hu_9c8e0e55cb8f7a79.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-26_hu_53dfcd4c2a28453e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="742px"
>&lt;/p>
&lt;h3 id="环境分支">环境分支
&lt;/h3>&lt;p>通过不同的提交来配置代码的运行环境
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-27.png"
width="825"
height="467"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-27_hu_fecd763b06fd168d.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-27_hu_ddb2fac8f5b9c999.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>不同的产品运行环境往往会有不同的配置代码（测试环境、开发环境、性能验证、安全验证环境、预发环境、产品环境等），环境分支会包含这些配置的变更提交并触发对应的构建、部署。&lt;/p>
&lt;p>环境分支一般也用作成熟分支，比如QA的成熟分支，会包含QA环境的配置变更。&lt;/p>
&lt;p>但是环境分支并不是好的实践，不同的环境需要不同的编译代码会引入风险。如果产品程序在不同的环境上有不同的行为表现会使问题的修复、定位变得极其困难。所以最好保证不同环境下运行的可执行代码都是相同的，环境的配置都通过显式的配置文件或变量来控制。环境变更导致的任何更改都不应包含在源码控制系统中&lt;/p>
&lt;p>环境分支只应是缺乏这种环境切换控制机制团队的应急机制存在。&lt;/p>
&lt;h3 id="hotfix">Hotfix
&lt;/h3>&lt;p>用于进行紧急产品故障修复的分支&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-28.png"
width="908"
height="310"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-28_hu_acc30d14bafe8983.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-28_hu_d0d781cb2c1c3797.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="702px"
>
从主线分支对应的release版本拉取hotfix分支，并在完成后合入回主线（如果release时间比较久，合并工作可能会比较大）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-29.png"
width="819"
height="289"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-29_hu_de9c76df8a7edc9a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-29_hu_5c98c8fddd3a9342.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="680px"
>
对使用release 分支的团队，也可以直接在release分支上进行hotfix，此时相当于将原release分支转变为hotfix分支
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-30.png"
width="785"
height="293"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-30_hu_855c768ad01d0c1f.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-30_hu_f596bdaa59685590.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="643px"
>
对于实践CD的团队，甚至可以直接在主干上完成hotfix（还是会拉取hotfix分支，但会从最新的提交拉取），因为一般团队已经具备了不公开未发布特性的能力。而且在hotfix过程中，不允许向主线进行任何新的提交。（hotfix优先）&lt;/p>
&lt;p>如何定义hotfix？对于可以发布频率较高的团队，一般可以将问题纳入日常发布节奏而不需要进行hotfix。取决于团队发布频率和对业务的实际影响&lt;/p>
&lt;h3 id="release-train">release train
&lt;/h3>&lt;p>象火车发车一样有定期的发布间隔，特性完成后选择放入哪一次发布（和SAFe的Agile release train不是一个概念，那更多是组织层面的实践）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-31.png"
width="789"
height="361"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-31_hu_1167bd31713427f4.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-31_hu_8fd7313e73bea9d4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>
团队定义定期的发布计划，并确定每列发布列车上的功能，据此承诺、安排各自的工作任务。一旦火车发车，当前分支就转化为release分支，只会接受bug fix。发布列车一般会和feature分支一起使用。对于发布流程中存在较多阻塞的团队来说，release train是非常有用的，不会因为这些阻塞而影响后续功能的研发。
但比较明显的缺点是，如果一个功能很早就完成，也需要等到发车时间才能上线。&lt;/p>
&lt;p>release train可以看作是团队release流程的一个提升手段，对与很难进行稳定发布的团队，实施CD往往不够现实 ，此时release train会是一个好选择。&lt;/p>
&lt;h4 id="loading-future-trains">loading future trains
&lt;/h4>&lt;p>和旧列车发车后再向新的列车上装载需求不同，可以使用这种模式的变种。如果一些功能不能确定是否能在预定发车前完成，可以同时开启两列train（预期发车时间不同），在三月列车上完成的开发工作同时向4月列车上提交并在三月列车发车后继续在4月列车上完成剩余工作。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-32.png"
width="895"
height="304"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-32_hu_d04c6c121bd084fa.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-32_hu_aeb573cbb9964815.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="706px"
>
这种模式可以让4月列车上的工作不影响三月列车，但缺点是如果4月列车上的变更影响到3月的功能，会是后续的合并工作更加复杂。&lt;/p>
&lt;h4 id="和主线发布比较">和主线发布比较
&lt;/h4>&lt;p>release train的主要好处是可以有一个定期的产品发布日历，但是多个分支依然会引入复杂性。
其实使用主线模式也可以如此工作，在主线上开发，到发布日期后增加一个对应的发布分支即可。
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-33.png"
width="820"
height="445"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-33_hu_e9c39230173121cc.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-33_hu_8505908c388c8ec1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;h3 id="预发布主线">预发布主线
&lt;/h3>&lt;p>确保主线是绝对健康状态，并且主线的head永远能被直接发布到产品环境。（每个提交都具备直接发布的健康状态，但是只有实际发布的提交才需要加上tag）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-34.png"
width="796"
height="265"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-34_hu_58a256d1b3e13f3a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-34_hu_51c51264bf398328.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="720px"
>&lt;/p>
&lt;h2 id="其他发布模式">其他发布模式
&lt;/h2>&lt;h3 id="实验分支">实验分支
&lt;/h3>&lt;p>在代码基线上收集用于实验的工作，这些功能不会被直接合入产品环境&lt;/p>
&lt;p>实验性的点子
功能的不同实现方式&lt;/p>
&lt;h3 id="未来分支">未来分支
&lt;/h3>&lt;p>一个用于对其他分支侵入性太大的变更分支&lt;/p>
&lt;p>较少使用的模式，只会从主线pull而不会merge回其他分支。一旦使用，意味着团队中存在一个独立的代码特区。应尽可能缩短这个分支存在的时间。&lt;/p>
&lt;h3 id="合作分支">合作分支
&lt;/h3>&lt;p>用于开发者之间协同工作，但不需要进行正式的集成的情况。&lt;/p>
&lt;h3 id="团队集成分支">团队集成分支
&lt;/h3>&lt;p>在向主线集成前，允许子团队间先进行互相集成。（大型项目）&lt;/p>
&lt;hr>
&lt;p>原文参考Martin的博客 &lt;a class="link" href="https://martinfowler.com/articles/branching-patterns.html" target="_blank" rel="noopener"
>Branch Patterns&lt;/a>&lt;/p></description></item><item><title>用Typer快速开发python命令行应用</title><link>https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Typer.png" alt="Featured image of post 用Typer快速开发python命令行应用" />&lt;p>在Python语言中，开发命令行程序，最基本的方式是通过Python标准库argparse来进行命令行参数和各种交互定义。但相对来说还比较复杂，一些常用的场景也需要我们单独封装。&lt;/p>
&lt;p>本文我们介绍另一个非常强大，也非常容易上手使用的python命令行工具库&lt;code>typer&lt;/code>，看看如何利用它来帮我们快速完成一个命令行应用的实现。&lt;/p>
&lt;h2 id="安装和基本使用">安装和基本使用
&lt;/h2>&lt;h3 id="安装">安装
&lt;/h3>&lt;p>&lt;code>typer&lt;/code> 是一个由 热门开源web接口框架 &lt;code>FastAPI&lt;/code>推出的命令行实现工具。和其他 python 第三方库类似，安装很方便。&lt;/p>
&lt;p>&lt;code>pip instal typer&lt;/code>&lt;/p>
&lt;h3 id="基本用法">基本用法
&lt;/h3>&lt;h4 id="姿势一">姿势一
&lt;/h4>&lt;p>编写一个最基本的&lt;code>hello world&lt;/code>程序user_typer.py&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello world!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接通过&lt;code>typer&lt;/code>命令调用
运行：&lt;/p>
&lt;blockquote>
&lt;p>Demo&amp;gt;typer use_typer.py run&lt;/p>
&lt;p>hello world!&lt;/p>&lt;/blockquote>
&lt;h4 id="姿势二">姿势二
&lt;/h4>&lt;p>也可以在代码中引入typer，然后用它的&lt;code>run&lt;/code>方法直接在程序中调用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">typer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello world!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行：&lt;/p>
&lt;blockquote>
&lt;p>Demo&amp;gt;python use_typer.py&lt;/p>
&lt;p>hello world!&lt;/p>&lt;/blockquote>
&lt;h3 id="姿势三">姿势三
&lt;/h3>&lt;p>或者将程序声明为一个应用，然后用注解指定应用的每一个支持的命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">typer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Typer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.command&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello world!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行：&lt;/p>
&lt;blockquote>
&lt;p>Demo&amp;gt;python use_typer.py&lt;/p>
&lt;p>hello world!&lt;/p>&lt;/blockquote>
&lt;p>而且运行 &lt;code>python user_typer.py --help&lt;/code>， 可以看到已经自动生成了必要的帮助说明。
&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919.png"
width="1345"
height="388"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919_hu_2fa62d7f18696dcb.png 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919_hu_45c50febc1b01535.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="346"
data-flex-basis="831px"
>&lt;/p>
&lt;p>这里我们在main函数中加了一个参数，可以看到&lt;code>typer&lt;/code> 其实还会自动将对应的函数携带的参数解析为命令参数，无需重新定义。&lt;/p>
&lt;h2 id="命令帮助和默认值">命令帮助和默认值
&lt;/h2>&lt;p>当然作为命令行程序，命令的帮助信息定义是一个重要部分。&lt;/p>
&lt;p>&lt;code>typer&lt;/code>也提供了很方便的添加命令和参数帮助的途径。
比如我们再添加一个命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;问候指定的小伙伴&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Argument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;被问候的伙伴姓名&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;城下秋草&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 这里也可以直接作为命令帮助，和command的help参数作用一样，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 但优先级没有command注解高
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;你好，&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令本身的帮助信息可以直接在command注解中通过help参数说明，或者也可以通过函数本身的docstring，typer也会把它解析为命令帮助。但如果command注解中已经指定，则会以command注解中指定的帮助信息为准&lt;/p>
&lt;p>而指定的参数&lt;code>name&lt;/code>, 这里是通过python的类型扩展库，再通过&lt;code>type.Argument&lt;/code>的help参数来指定，并且同时还可以指定参数的默认值。
&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-1.png"
width="1341"
height="449"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-1_hu_f08e2c676030f08f.png 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-1_hu_357071c5656faf8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="716px"
>&lt;/p>
&lt;h2 id="可选参数和参数名">可选参数和参数名
&lt;/h2>&lt;p>这里我们通过&lt;code>type.Argument&lt;/code>指定的参数，其实是必填参数。那如果我们希望某一个参数是可选的呢？ 这里&lt;code>typer&lt;/code>中是根据两个不同类型来区分。定义上来说，&lt;/p>
&lt;ul>
&lt;li>typer.Argument 是必选&lt;/li>
&lt;li>typer.Option 是可选&lt;/li>
&lt;/ul>
&lt;p>对应到帮助信息中的 &lt;code>Arguments&lt;/code> 和 &lt;code>Options&lt;/code> 两个不同的pannel。 但是否必须输入，其实是根据是否指定了对应参数的默认值来确认的，如果没有指定默认值，那么就代表这个参数是必须输入的。&lt;/p>
&lt;p>另外 Option 和 Argument 的不同还在于 Option 是需要指定option名称, 也就是形如 &lt;code>--name&lt;/code>, &lt;code>--help&lt;/code> 这用带 &lt;code>--&lt;/code> 或者 &lt;code>-&lt;/code> 短参数标记&lt;/p>
&lt;p>默认 &lt;code>typer.Option&lt;/code>是直接将参数名转化为长标记，也可以自行指定其他别名。 同时也可以指定指定短标记&lt;/p>
&lt;p>比如我们可以再增加一个参数 &lt;code>last_name&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;问候指定的小伙伴&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Option&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--last&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;-l&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;被问候的人员姓什么&amp;#34;&lt;/span>&lt;span class="p">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Argument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;被问候的伙伴名称&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;城下秋草&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 这里也可以直接作为命令帮助，和command的help参数作用一样，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 但优先级没有command注解高
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;你好，&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-2.png"
width="1341"
height="466"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-2_hu_71cd3fd796b29070.png 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-2_hu_4a98f92b294e86f2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="287"
data-flex-basis="690px"
>&lt;/p>
&lt;h2 id="更丰富的界面增强">更丰富的界面增强
&lt;/h2>&lt;p>&lt;code>typer&lt;/code> 除了在参数定义上的灵活简便外，对于交互界面也提供了很多增强&lt;/p>
&lt;h3 id="颜色和结构化数据的显示支持">颜色和结构化数据的显示支持
&lt;/h3>&lt;p>比如针对命令行，不同颜色的信息区分，这里它利用了另一个第三方库 &lt;code>rich&lt;/code>， 可以简单地用rich库中的print方法替代掉python官方的简单打印语句，实现更丰富的颜色控制和结构化数据展示等&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;显示结构数据:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;不同颜色和emoji:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[bold red]警告！[/bold red] [green]数据data[/green] 不匹配！ :boom:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行效果
&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-3.png"
width="873"
height="343"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-3_hu_54cd16203d6bee9a.png 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-3_hu_1e8a516a57de7f6b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="610px"
>&lt;/p>
&lt;h3 id="提示信息">提示信息
&lt;/h3>&lt;p>&lt;code>typer.Option&lt;/code> 可以支持转为提示模式，也就是对于需要的参数，可以提示输入&lt;/p>
&lt;p>比如上面的例子，加上&lt;code>prompt=True&lt;/code>就会在没有输入参数时提示输入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;问候指定的小伙伴&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Option&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--last&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;-l&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;被问候的人员姓什么&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prompt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行：
&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/prompt.gif"
width="1322"
height="223"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/prompt_hu_177ed65dd34495e3.gif 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/prompt_hu_d62cb5b52ed8fdd7.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="592"
data-flex-basis="1422px"
>&lt;/p>
&lt;h3 id="密码和信息隐藏">密码和信息隐藏
&lt;/h3>&lt;p>对于一些密码类的参数，还支持隐藏和确认的选项，比如我们增加一个passwd参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;问候指定的小伙伴&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Option&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--last&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;-l&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;被问候的人员姓什么&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prompt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;黄&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">passwd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Option&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prompt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">confirmation_prompt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">hide_input&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Annotated&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Argument&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">help&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;被问候的伙伴名称&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;城下秋草&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 这里也可以直接作为命令帮助，和command的help参数作用一样，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 但优先级没有command注解高
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">passwd&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;你好，&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[bold red]密码输入错误，不能展示！[/bold red]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-4.png"
width="862"
height="430"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-4_hu_88cb267dd82dc4f2.png 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-4_hu_148d29d9437420f1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;h3 id="进度条实现">进度条实现
&lt;/h3>&lt;p>typer还能比较方便地支持进度条类的信息交互，同样可以利用rich中progress的增强&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">rich.progress&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">track&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">running&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">track&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;正在执行中....&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Fake processing time &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.01&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;已处理 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">total&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 任务&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/progress.gif"
width="1322"
height="223"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/progress_hu_fa1a7907cc9d420d.gif 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/progress_hu_681bc0034e86b2ba.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="592"
data-flex-basis="1422px"
>&lt;/p>
&lt;h2 id="多层命令嵌套">多层命令嵌套
&lt;/h2>&lt;p>对于多层的命令嵌套，&lt;code>typer&lt;/code>当然也提供了良好的支持。这里是通过声明不同的应用，再利用&lt;code>add_typer&lt;/code>方法完成层级的关联。&lt;/p>
&lt;p>官方给出的示例体现的很清楚&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">typer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Typer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">items_app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Typer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_typer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items_app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;items&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">users_app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">typer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Typer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_typer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">users_app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@items_app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;create&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">items_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Creating item: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@items_app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;delete&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">items_delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Deleting item: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@items_app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sell&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">items_sell&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Selling item: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@users_app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;create&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">users_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Creating user: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">user_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@users_app.command&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;delete&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">users_delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Deleting user: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">user_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用&lt;code>--help&lt;/code>看一下这样处理的效果
&lt;img src="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-5.png"
width="1261"
height="827"
srcset="https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-5_hu_fc72b3a1775b3f9.png 480w, https://chengxiaqiucao.github.io/post/014-%E7%94%A8typer%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91python%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BA%94%E7%94%A8/Pasted-20240919-5_hu_12c6c8203e565afb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于命令行工具 &lt;code>typer&lt;/code>的用法梳理。&lt;/p></description></item><item><title>理解敏捷宣言背后的文化逻辑</title><link>https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/</link><pubDate>Sun, 01 Sep 2024 14:32:39 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/agile_mani.png" alt="Featured image of post 理解敏捷宣言背后的文化逻辑" />&lt;p>敏捷是现今被广泛应用的一种研发理念和思想。著名的敏捷宣言也广为流传，被翻译为了60多种语言。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/agile_mani.png"
width="2147"
height="882"
srcset="https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/agile_mani_hu_e7cc042f16d0b9d7.png 480w, https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/agile_mani_hu_678312c338d5826e.png 1024w"
loading="lazy"
alt="敏捷宣言"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;p>这个宣言其实更多是提出了软件研发中的一些被这些先驱者们认为更重要的价值观，传递的是一种不同于传统研发的新理念。&lt;/p>
&lt;p>但提出这些理念背后的逻辑，又是什么呢？&lt;/p>
&lt;p>我们还是应该搞清楚为什么有这样的一个宣言，否则大家虽然都号称在施行敏捷，但又有点似是而非，甚至因为敏捷又搞出很多流程、仪式和各种敏捷工具，兜兜转转又回到原点。&lt;/p>
&lt;p>这里笔者尝试理解下敏捷宣言的背后逻辑和真正作用，抓住这个核心，其实就理解了敏捷的本质。&lt;/p>
&lt;h2 id="敏捷的核心是文化">敏捷的核心是文化
&lt;/h2>&lt;p>敏捷宣言中提倡的个体和互动、可工作的软件、客户合作、响应变化，其实都不是一些具体的实践，说是价值观可能更合适。&lt;/p>
&lt;p>而价值观，其实就是建立文化的重要要素。&lt;/p>
&lt;p>任何组织，发展到一定阶段，都会开始强调文化的重要性。&lt;/p>
&lt;p>因为成熟的组织，在经过规范化的发展，有成熟的制度体系后，会发现依然有很多事情是无法依靠制度就能很好解决的。这时，冀望解决的途径就是依靠文化的力量。&lt;/p>
&lt;p>敏捷正是在传统严重依赖流程、制度的研发流程基础上，针对大量无法依靠流程、规范来成功完成软件研发的经验教训，而提出的从文化层面上去指导大家建立正确的软件研发文化，去主动改进而不是否定原有流程、规范的作用。&lt;/p>
&lt;p>所以，这里思考的结论就是：&lt;/p>
&lt;blockquote>
&lt;p>敏捷其实是一种思想转变，是建立软件研发正确行为方式的一种价值观。实现途径可能千差万别，本质就是强调建立正确的研发价值观，比具体的流程、规范更为重要。&lt;/p>&lt;/blockquote>
&lt;h2 id="文化是制度的升华">文化是制度的升华
&lt;/h2>&lt;p>所以这里把敏捷理解为建立文化的行为，也就理解了敏捷各种实践、提倡做法的背后逻辑。&lt;/p>
&lt;p>文化和制度是一个组织发展的支撑。它们都是为了指导组织成员去正确地做事&lt;/p>
&lt;ul>
&lt;li>&lt;strong>制度&lt;/strong>通过各种明文规定、流程指引成员。遵守制度做事，是被动地正确行事&lt;/li>
&lt;li>&lt;strong>文化&lt;/strong>则是通过潜移默化，组织中大家拥有共同的使命、愿景、价值观，体现到成员的行为方式上。是主动地正确行事。&lt;/li>
&lt;/ul>
&lt;h2 id="文化是什么">文化是什么？
&lt;/h2>&lt;p>文化其实是实际中，组织成员的行为方式。&lt;/p>
&lt;p>了解企业文化，也会包括使命、价值观、愿景、战略这些文化的要素。&lt;/p>
&lt;p>它们的关系可以用下面这个图概括&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/Pasted-20240902.png"
width="1276"
height="636"
srcset="https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/Pasted-20240902_hu_96e600d6cb869aa3.png 480w, https://chengxiaqiucao.github.io/post/008-%E7%90%86%E8%A7%A3%E6%95%8F%E6%8D%B7%E5%AE%A3%E8%A8%80%E7%9A%84%E8%83%8C%E5%90%8E%E9%80%BB%E8%BE%91/Pasted-20240902_hu_6c1995aba6ace70f.png 1024w"
loading="lazy"
alt="culture"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>回到敏捷：&lt;/p>
&lt;p>敏捷宣言 其实是价值观
敏捷的12原则 其实是实施战略
敏捷的愿景 其实和所有产品一样，向用户交付价值&lt;/p>
&lt;p>最终，敏捷冀望达成的，就是建立起一种面向软件研发的新文化&lt;/p>
&lt;p>水无常形， 兵无常势。敏捷也不存在所谓的标准做法，符合敏捷价值观，达成共识并进行实践的团队，就是敏捷团队。&lt;/p>
&lt;hr>
&lt;p>推广下我的测试课程，感兴趣的小伙伴可以通过以下链接了解下哦&lt;/p>
&lt;p>❤️❤️❤️❤️ &lt;a class="link" href="https://coding.imooc.com/class/chapter/885.html#Anchor" target="_blank" rel="noopener"
>城下秋草的测试职业进阶提升课&lt;/a> ❤️❤️❤️❤️&lt;/p></description></item><item><title>Win11操作小技巧二则</title><link>https://chengxiaqiucao.github.io/post/010-windows%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Thu, 22 Aug 2024 15:40:10 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/010-windows%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>&lt;h2 id="windows11-右键恢复传统菜单">Windows11 右键恢复传统菜单
&lt;/h2>&lt;p>win11相比以前的版本进行了很多界面上的优化，不过有一个优化带来了不小的困扰，就是它的右键菜单，会默认折叠掉一些非系统的菜单项，必须多点击一步 &lt;code>显示更多选项&lt;/code> 才能看到原来默认一些其他菜单项。&lt;/p>
&lt;img src="Pasted-20240822.png" alt="右键菜单" width=300 />
&lt;p>这里其实有两个方法恢复传统方式：&lt;/p>
&lt;ol>
&lt;li>在点击菜单时，同时按下shift键，这时就会直接打开被折叠的菜单 （&lt;strong>推荐&lt;/strong>）&lt;/li>
&lt;li>另一种方式，彻底恢复的话，可以添加一个注册表项&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> reg.exe add &lt;span class="s2">&amp;#34;HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32&amp;#34;&lt;/span> /f /ve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行后需要重启下资源管理器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">taskkill /f /im explorer.exe &amp;amp; start explorer.exe
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就会彻底将右键菜单恢复成传统样式了。如果想恢复，删除改注册表项即可。&lt;/p>
&lt;h2 id="剪贴板历史小工具">剪贴板历史小工具
&lt;/h2>&lt;p>Win11下有一个很好用的小工具，可以记录多次剪贴板的历史记录。通过 &lt;code>win+v&lt;/code>键可以呼出这个工具。&lt;/p>
&lt;img src="Pasted-20240822-2.png" alt="剪贴板工具" width=350 />
&lt;p>除了可以方便地记录多次拷贝的历史记录，这个小工具还提供了插入emoji表情、颜文字、常用特殊字符以及gif图搜索等功能。&lt;/p>
&lt;p>❤️👍😎🏠🕍❄️ (●ˇ∀ˇ●)(❤️´艸｀❤️)◀▶◯◻&lt;/p>
&lt;p>要关闭剪贴板历史记录。可以去到 &lt;strong>系统设置&amp;gt;系统&amp;gt;剪贴板&lt;/strong> 中关闭&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/010-windows%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%B0%8F%E6%8A%80%E5%B7%A7/Pasted-20240822-1.png"
width="1289"
height="185"
srcset="https://chengxiaqiucao.github.io/post/010-windows%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%B0%8F%E6%8A%80%E5%B7%A7/Pasted-20240822-1_hu_560c7e4763a9b58.png 480w, https://chengxiaqiucao.github.io/post/010-windows%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%B0%8F%E6%8A%80%E5%B7%A7/Pasted-20240822-1_hu_fa42a580c2c171b8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="696"
data-flex-basis="1672px"
>&lt;/p>
&lt;hr></description></item><item><title>Hugo+Github搭建博客小记</title><link>https://chengxiaqiucao.github.io/post/009-hugo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/</link><pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/009-hugo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/</guid><description>&lt;blockquote>
&lt;p>　　虽然一直有码字，记录的习惯，但文章都比较零散。所以还是打算做一个自己的静态博客。之前一直知道Github是可以通过Github_Page直接发布一个github.io域名的静态页面的。然后目前我常用的写作工具是Obsidian，所以诉求就是可以通过Obsidian写完文章以后，可以做到比较方便地发布到github。&lt;br>
　　于是便动手，经过两天多的摸索，总算比较满意地把这个博客搭了起来。这里记录下实现的过程，以便后续参考。&lt;/p>&lt;/blockquote>
&lt;p>效果图：
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821.png"
width="1818"
height="971"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821_hu_3158c671d4dc874.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821_hu_34640f2984d57c1f.png 1024w"
loading="lazy"
alt="博客完成效果"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="449px"
>&lt;/p>
&lt;h2 id="hugo静态页面框架">Hugo静态页面框架
&lt;/h2>&lt;h3 id="什么是hugo">什么是hugo？
&lt;/h3>&lt;p>Hugo是一个用go语言编写的静态网站生成框架。具备性能好、快速易用、可配置的特点。可以依据MarkDown格式的文档，快速生成一个完全基于Html的网站。是一个生成博客站点的利器。&lt;/p>
&lt;h3 id="安装">安装
&lt;/h3>&lt;p>Hugo支持多种安装方式。 我是在windows系统上进行安装, 可以利用winget包管理器直接安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> winget install Hugo.Hugo.Extended
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，检查版本信息
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-1.png"
width="1666"
height="140"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-1_hu_f043b2045dc4f23a.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-1_hu_1b2383373e72d3be.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1190"
data-flex-basis="2856px"
>&lt;/p>
&lt;p>完成安装以后，可以通过 &lt;code>hugo&lt;/code> 命令来生成我们的博客站点&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> hugo new site BlogSite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会自动生成一个我们网站的结构&lt;/p>
&lt;blockquote>
&lt;p>-archetypes&lt;br>
-assets&lt;br>
-content&lt;br>
-data&lt;br>
-i18n&lt;br>
-layouts&lt;br>
-static&lt;br>
-themes&lt;br>
-hugo.toml&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>content&lt;/code>目录其实就是存放我们当前文章。&lt;code>theme&lt;/code>中则存放网站可以应用的主题。&lt;code>assets&lt;/code>中其实可以包含一些需要引用的资源。&lt;code>layout&lt;/code>是网站后续渲染的结构&lt;/p>
&lt;p>&lt;code>archetypes&lt;/code>中是可以定义页面的一些默认元数据信息(frontMatter), 一般放在&lt;code>default.md&lt;/code>中， Hugo会根据这个配置在生成新的页面时自动添加这些元数据。并在渲染时根据配置生成页面&lt;/p>
&lt;p>我这里配置如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{{ replace .File.ContentBaseName &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">date&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{{&lt;span class="w"> &lt;/span>&lt;span class="l">.Date }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">imageNameKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pasted&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">draft&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">Categories&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而正式生成md文档后，比如当前这篇文章，在Obsidian中反映出来就是文档属性信息：
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-2.png"
width="676"
height="388"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-2_hu_b9be43d5363cac7c.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-2_hu_27bd6ff65c21f2a0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;h3 id="stack主题">Stack主题
&lt;/h3>&lt;p>生成网站后，我们可以从&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>hugo官网丰富的模板&lt;/a>中，选择一个中意的。这里我使用的是Stack主题。
从github上将theme clone到生成网站的Theme目录下&lt;/p>
&lt;p>&lt;code>git clone https://github.com/CaiJimmy/hugo-theme-stack themes/stack &lt;/code>&lt;/p>
&lt;p>然后参照它的官方示例，在&lt;code>content&lt;/code>目录下包含&lt;code>page&lt;/code>、&lt;code>post&lt;/code>目录以及主页index.md文件&lt;/p>
&lt;p>具体的配置信息需要参考Stack示例站点下的hugo.yaml进行设置，主要是站点各种样式组织上的配置信息，这里不再赘述。&lt;/p>
&lt;h3 id="创建文章">创建文章
&lt;/h3>&lt;p>因为我们创建文章时，经常需要引用一些图片，为了便于直接在文档中按相对路径引用. 创建文章，可以使用下面的方式，也就是不直接生成页面，而是生成文章目录，并在目录中使用index.md的方式创建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> hugo new post/hugo+github搭建博客小记/index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在index.md中完成文章内容的编写&lt;/p>
&lt;h3 id="生成示例站点">生成示例站点
&lt;/h3>&lt;p>完成站点配置和必要的素材、文章编写后，可以执行下面的命令进行本地预览&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> Hugo Server --theme&lt;span class="o">=&lt;/span>stack --buildDrafts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>buildDrafts是会将有&lt;code>draft=true&lt;/code>标记的文章一起渲染&lt;/p>
&lt;p>执行以后，显示如下信息：
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-3.png"
width="2086"
height="784"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-3_hu_872f5532e65d0c29.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-3_hu_e9912806698254e9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="266"
data-flex-basis="638px"
>&lt;/p>
&lt;p>这时就可以从&lt;code>http://localhost:1313&lt;/code> 来预览当前的页面状态了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-4.png"
width="1383"
height="778"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-4_hu_4d7f99996cc07b74.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-4_hu_56c2085a6e8b65a2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>没有问题后，可以使用正式生成站点的命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> hugo --theme&lt;span class="o">=&lt;/span>stack --baseURL&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://chengxiaqiucao.github.io/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就会在站点的public目录下生成我们需要的静态站点内容了
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-5.png"
width="338"
height="483"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-5_hu_f60fbc0271b7e11d.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-5_hu_41bda0080f92bb79.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="167px"
>&lt;/p>
&lt;h2 id="发布到github-page">发布到Github Page
&lt;/h2>&lt;h3 id="github-仓库">github 仓库
&lt;/h3>&lt;p>完成本地调试后，要将我们的网站发布到Github上。首先当然是要有一个自己的Github账号。
然后创建一个自己账号的页面repo. 如&lt;code>chengxiaqiucao.github.io&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Console" data-lang="Console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> &lt;span class="nb">cd&lt;/span> public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> git remote add origin &lt;span class="s2">&amp;#34;https://github.com/chengxiaqiucao/chengxiaqiucao.github.io.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> git add -A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;first commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">&amp;gt;&lt;/span> git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过以上命令，就将pulic中的站点内容push到了github的页面仓库中了&lt;/p>
&lt;h3 id="仓库配置">仓库配置
&lt;/h3>&lt;p>然后要发布这个页面的话，github上进行如下配置：
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-6.png"
width="1709"
height="1049"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-6_hu_e50b02ebb096b914.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-6_hu_f43e37dbb46d2f2b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="391px"
>&lt;/p>
&lt;p>这样每次push新的内容到仓库中，就会触发构建。&lt;/p>
&lt;p>现在访问一下&lt;a class="link" href="https://chengxiaqiucao.github.io/" target="_blank" rel="noopener"
>https://chengxiaqiucao.github.io/&lt;/a>, 可以看到成果了&lt;/p>
&lt;h2 id="obsidian设置">Obsidian设置
&lt;/h2>&lt;p>然后，我们用Obsidian写文章时，为了方便贴图，需要配置下图片附件的存放位置
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-7.png"
width="1606"
height="941"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-7_hu_e95b8aec0a3d677.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-7_hu_63b8d1c6600846a9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>
另外这里还有一个坑，就是Obsidian在贴图时，会自动生成一个文件名，形如&lt;code>pasted image XXXXXX.png&lt;/code>&lt;/p>
&lt;p>但这里有个问题，就是这个文件名中存在空格，会导致Stack主题无法解析，图片显示不出来。这里推荐大家可以使用一个Obsidian插件，&lt;a class="link" href="https://github.com/reorx/obsidian-paste-image-rename" target="_blank" rel="noopener"
>paste image rename&lt;/a> 可以自己设置贴图文件格式。
&lt;img src="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-8.png"
width="1609"
height="783"
srcset="https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-8_hu_50ba73d68355b1a3.png 480w, https://chengxiaqiucao.github.io/post/009-hugo&amp;#43;github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/Pasted-20240821-8_hu_6ade5ad1f67279e6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="493px"
>&lt;/p>
&lt;p>好啦，到这里我们就建好了一个属于自己的博客空间啦，可以快乐地码字了~~~&lt;/p></description></item></channel></rss>
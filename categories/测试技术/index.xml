<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试技术 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/</link><description>Recent content in 测试技术 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Wed, 30 Jul 2025 18:00:11 +0800</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/categories/%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>十四年后，再谈“测试已死”</title><link>https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/</link><pubDate>Wed, 30 Jul 2025 18:00:11 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730-1.png" alt="Featured image of post 十四年后，再谈“测试已死”" />&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730-1.png"
width="1265"
height="713"
srcset="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730-1_hu_8a8e2eac4fffa180.png 480w, https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730-1_hu_3edd918931914c6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;h2 id="引子">引子
&lt;/h2>&lt;p>回到十四年前，2011年10月，在Google的&lt;code>GTAC&lt;/code>(Google Test Automation Conference)大会上，&lt;code>Alberto Savoia&lt;/code> 身着死神装扮走上讲台，以一种戏剧性地方式宣称 &amp;ldquo;软件测试已死&amp;rdquo;。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730.png"
width="917"
height="600"
srcset="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730_hu_f591dde53e0ea3e8.png 480w, https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/Pasted-20250730_hu_f9ef109a4f9ceb92.png 1024w"
loading="lazy"
alt="savoia演说现场"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;p>不久以后，测试界大牛&lt;code>Jame Whittaker&lt;/code> 在另一个测试大会 &lt;code>EuroSTAR&lt;/code> 上也以同样的主题，宣布&lt;code>Test is Dead&lt;/code>.&lt;/p>
&lt;p>这些言论的重点，在于认为软件测试不再需要作为软件开发过程中一个独立的角色。在软件流程和工具已经成熟的情况下，宏观的质量问题不再需要一个相对大型、专职的团队来进行保证。相反，测试应该演变成一系列微观的活动，分散给其他角色，例如项目经理、开发人员，甚至最终用户。
把测试活动分散到研发的其他环节。&lt;/p>
&lt;p>而随着这个宣言的广泛流传，包括google、微软在内的大量科技巨头开始裁撤专职测试岗位，测试转型为测试开发或软件效能部门。&lt;/p>
&lt;p>但十多年过去，测试这个职业真的消亡了吗？相反，包括 &lt;strong>Wittaker&lt;/strong> 本人也于去年(2024)发表了一篇 《软件测试业的复兴》重新审视测试行业的演变 (原文参见 &lt;a class="link" href="https://medium.com/@docjamesw/the-resurrection-of-software-testing-634423cd8411" target="_blank" rel="noopener"
>https://medium.com/@docjamesw/the-resurrection-of-software-testing-634423cd8411&lt;/a>)&lt;/p>
&lt;p>这篇文章，我们就再来深入探讨一下这个话题&lt;/p>
&lt;h2 id="测试已死论调的反复出现">&amp;ldquo;测试已死&amp;quot;论调的反复出现
&lt;/h2>&lt;p>从&amp;quot;测试已死&amp;quot;的论调提出，到如今其实已经被多次提及。这种说法至少在三个时期反复出现：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Selenium开源时代&lt;/strong>：当自动化测试工具逐渐走进企业的日常应用，机器代替人工似乎近在眼前&lt;/li>
&lt;li>&lt;strong>自动化测试框架和平台泛滥时期&lt;/strong>：市场上涌现出大量的自动化测试解决方案，都宣称可以极大减少测试工作&lt;/li>
&lt;li>&lt;strong>现今AI时代&lt;/strong>：现今AI大行其道，老调重弹，认为AI已经可以替代测试人员的工作&lt;/li>
&lt;/ol>
&lt;h3 id="为什么">为什么？
&lt;/h3>&lt;p>其实仔细思考一下，这种周期性出现也并非偶然，它反映的是技术变革与行业认知之间的常见错位。每当有新技术出现，人们就倾向于过度乐观地认为它可以完全替代人类的判断和创造力。&lt;/p>
&lt;p>除此之外，测试行业本身对测试的认知，也很大程度上在为这种论调提供论据。&lt;/p>
&lt;h4 id="大量培训机构包括很多测试人员自己也并不将测试视作一门技术">大量培训机构，包括很多测试人员自己也并不将测试视作一门技术
&lt;/h4>&lt;ul>
&lt;li>0基础入行&lt;/li>
&lt;li>小白也可做测试&lt;/li>
&lt;li>测试不过是“点点点”&lt;/li>
&lt;li>学会写自动化脚本就是高级测试&lt;/li>
&lt;/ul>
&lt;h4 id="企业混淆了自动化和测试">企业混淆了自动化和测试
&lt;/h4>&lt;p>很多企业，大力推广自动化，设立测试开发岗。&lt;/p>
&lt;p>但并没有真正认识到，所谓自动化测试，更多做得其实只是&lt;code>检查&lt;/code>，和真正的&lt;code>测试&lt;/code> 相距甚远。&lt;/p>
&lt;p>测试开发花费了大量的时间去搭建框架、建设平台，想方设法用工具提升效率，但鲜有真正在测试思维拓展和挖掘深层质量问题上拿出成果的案例。&lt;/p>
&lt;h4 id="对测试目标不清晰">对测试目标不清晰
&lt;/h4>&lt;p>如先前所说，认为测试就是为了验证需求的大有人在。测试人员更像是拿着检查表的“质检员”，以是否满足规格说明而非产品能否提供价值为标准。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/kanban.png"
width="1378"
height="805"
srcset="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/kanban_hu_610dc40424a1db2f.png 480w, https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/kanban_hu_5a68a07f5de9ae6a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>正是这些流行于整个测试行业的错误认知，恰恰对测试行业本身带来巨大伤害。&lt;/p>
&lt;p>但即便是削减了测试岗位以后呢？TDD，BDD，以终为始，开发其实承担了测试职责；或者让终端客户，在不知情的情况充当测试者，在客户发现问题后想办法去快速修复。&lt;/p>
&lt;p>所以并不是测试已死，只是执行测试的责任方和职责划分出现转移。&lt;/p>
&lt;h2 id="什么样的测试才真的应该消亡">什么样的“测试”才真的应该消亡？
&lt;/h2>&lt;p>正如我之前多篇文章都强调过软件测试的真正目的。【】&lt;/p>
&lt;p>测试真正的目的既不是简单地去验证需求，也不仅只是为了发现Bug。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/testing-checking.png"
width="748"
height="571"
srcset="https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/testing-checking_hu_894995043907226c.png 480w, https://chengxiaqiucao.github.io/post/116-%E6%B5%8B%E8%AF%95%E5%B7%B2%E6%AD%BB10%E5%B9%B4/testing-checking_hu_fc91b077f293f5bc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>&lt;code>测试&lt;/code>和&lt;code>检查&lt;/code> 也应该有着明确的区分。随着技术的进步，那些测试中的 &lt;code>检查&lt;/code> 才是应该逐渐从测试职责中逐渐弱化的部分。&lt;/p>
&lt;p>而自动化测试，那些测试用例清单和CI仪表盘上的绿色进度条，其实并不能算是真正地在面向质量进行测试，带来的只有虚假的安全感。&lt;/p>
&lt;p>这些按照既有脚本进行逐项Check的&amp;quot;勾选框活动&amp;rdquo;，才是真正应该区分于测试，应该消亡的那部分。&lt;/p>
&lt;p>把大量的时间用于编写、维护这些形式化的测试用例、测试脚本，反而减少去探索产品、洞察风险的真正&lt;code>测试&lt;/code>时间，实际上，正是在伤害测试的真正价值。&lt;/p>
&lt;h3 id="自动化测试-vs-真正的测试">自动化测试 vs 真正的测试
&lt;/h3>&lt;p>我们必须澄清如下核心认知：&lt;/p>
&lt;p>&lt;strong>自动化测试：通常只用于检查已知的部分，即我们预期系统完成的行为。&lt;/strong>
&lt;strong>真正的测试？是关于未知的。它是需要调查、探索、设问、推理、试验、求证的技术。没有脚本或AI能够完全替代。&lt;/strong>&lt;/p>
&lt;p>真正的测试价值永远应在于探索未知，是去发现那些通过自动化无法预见的问题&lt;/p>
&lt;h2 id="测试价值的重新定义">测试价值的重新定义
&lt;/h2>&lt;p>测试不仅仅是关于发现bug，也不仅仅是关于工具。它的价值应该包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>理解产品风险&lt;/strong>：识别可能影响用户或业务的潜在问题&lt;/li>
&lt;li>&lt;strong>沟通不确定性&lt;/strong>：清晰传达关于产品质量和风险的发现&lt;/li>
&lt;li>&lt;strong>建模用户行为&lt;/strong>：预测真实用户如何与系统互动&lt;/li>
&lt;li>&lt;strong>发现他人遗漏的问题&lt;/strong>：提供独特的视角和洞察&lt;/li>
&lt;/ul>
&lt;p>这些价值在任何软件开发生命周期中都是不可或缺的。当组织真正理解这些价值时，测试就必然会在软件研发过程中承担重要角色，即便不是由专职测试人员，也会由开发人员或其他角色来完成。&lt;/p>
&lt;h2 id="结论">结论
&lt;/h2>&lt;blockquote>
&lt;p>&lt;strong>测试从未消亡，只会不断重生!&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>&amp;ldquo;测试已死&amp;quot;的论调每隔几年就会出现一次，但测试从未真正消亡。
它只是在不断演变——从手工测试到自动化，从独立角色到分布式责任，从验证已知到探索未知。每一次演变都是测试适应新环境、新技术的结果。&lt;/p>
&lt;p>今天，当我们面对AI的浪潮时，同样的故事正在重演。有些人预言AI将取代测试人员，但历史告诉我们，技术会改变测试的方式，但不会消除测试的需求。AI可以自动化更多任务，但人类测试者的批判性思维、创造力和系统思维仍然不可替代。&lt;/p>
&lt;p>测试的未来不在于抵抗变化，而在于拥抱进化。测试人员需要发展新技能，采用新工具，但更重要的是，要坚守测试的核心价值——探索未知，评估风险，保障质量。&lt;/p></description></item><item><title>当AI编写应用程序，是质量的福音还是挑战？</title><link>https://chengxiaqiucao.github.io/post/114-test_ai_coded_app/</link><pubDate>Thu, 24 Jul 2025 16:49:36 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/114-test_ai_coded_app/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/114-test_ai_coded_app/AI_check.png" alt="Featured image of post 当AI编写应用程序，是质量的福音还是挑战？" />&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/114-test_ai_coded_app/AI_check.png"
width="1186"
height="680"
srcset="https://chengxiaqiucao.github.io/post/114-test_ai_coded_app/AI_check_hu_4a2e784331721820.png 480w, https://chengxiaqiucao.github.io/post/114-test_ai_coded_app/AI_check_hu_4a859469b16058e0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;h1 id="当ai编写应用程序是质量的福音还是挑战">当AI编写应用程序，是质量的福音还是挑战？
&lt;/h1>&lt;p>随着 AI 模型的能力越来越强，以Copilot、Cursor、Claude Code、Gemini Cli等为代表的AI编程工具开始逐渐进入软件开发的日常使用，“vibe coding”越来越成为应用开发的趋势。&lt;/p>
&lt;p>那么当AI越来越多地参与进实际应用程序的开发，对于基于这种方式完成的应用程序质量来说，到底是好是坏呢？&lt;/p>
&lt;p>本篇就结合笔者近期使用多款氛围编程工具的体会，谈谈看法。&lt;/p>
&lt;h2 id="ai编程看上去很美好">AI编程，看上去很美好
&lt;/h2>&lt;p>从接触AI编程开始，很多人都会惊叹于它极速、高效的强大能力，而且通常结合良好的提示词工程，能在极短时间内完成原型设计，得到的成品也往往能超出预期地功能完备。&lt;/p>
&lt;p>只要我们对软件应用开发有所了解，结合提示词工程，从前端、后端到数据库，AI 都能帮我们完成从设计到代码的全部工作。工程师需要做的，似乎就是不断地和AI完成沟通，对输出的结果进行不断地优化和调整。&lt;/p>
&lt;p>可以说，AI编程工具的出现，让很多非程序员也能完成很多创意应用的开发，大大降低了软件开发的门槛。&lt;/p>
&lt;p>在各大软件开发企业中，开发工程师借助AI工具辅助完成越来越多的代码，也逐渐成为常态。&lt;/p>
&lt;p>AI编程的未来，这么近，那么美~&lt;/p>
&lt;p>但是，如果不是验证原型目的，要按一个生产级应用的标准来要求AI开发的应用程序，那么复杂、痛苦的调试过程却必然不会缺席。&lt;/p>
&lt;p>“开发十分钟，调试两整天” 其实更是结合AI编程的常态。&lt;/p>
&lt;h2 id="让人无语的-ai-脑补">让人无语的 AI 脑补
&lt;/h2>&lt;p>虽然“提示词工程”总结和强调了和AI合作的一些最佳方式，但实际工作中，很多时候，工程师还是会倾向用简洁的指令和AI交流。&lt;/p>
&lt;p>而在这种指令信息不充分和精确的时候，AI 自然会脑补出很多它认为必要、但实际却似是而非的代码。这时，工程师必然需要花费大量的时间去检查和调整AI的行为。&lt;/p>
&lt;p>通过AI来进行编码实现的同学，应该都有因为部分基本的逻辑或前端界面调整，结果耗费了大量时间的经验。&lt;/p>
&lt;p>比如笔者就遇到过，仅仅是希望在页面表单中增加一个字段，同时后端数据库也同步进行调整的改动，AI却总是会错义，不是没同步就是去改动不相干的其他表单，反复拉锯，耗费大量时间。&lt;/p>
&lt;p>本来就是两行代码的事，却因为自己不熟悉AI生成的代码结构，依赖AI反复修改，虽然最后也达到了效果，却又无谓插入了大量的“屎山”代码。&lt;/p>
&lt;h2 id="集成和解耦性上的不足">集成和解耦性上的不足
&lt;/h2>&lt;p>AI生成代码，一般会首先根据初始需求确定好项目代码结构，然后再根据具体的拆分任务完成代码的填充。&lt;/p>
&lt;p>但随着项目进行和需求的不断优化，通常会将主要逻辑集中在部分主文件之中，很容易导致一些主文件过于臃肿。而AI依赖大模型的能力，通常又存在上下文窗口的限制，臃肿的文件对于代码的生成效率和成果又有很大制约。&lt;/p>
&lt;p>所有随着需求的不断细化和调整，代码越来越臃肿，也越来越混乱。很少会像实际工程中那样进行适当的解耦和重构，AI本身对代码的理解往往变得越来越困难，很难再有初始时的惊艳感。&lt;/p>
&lt;p>这时，工程师的干预就必不可少，否则，AI编码更像是在“屎上雕花”。&lt;/p>
&lt;h2 id="所见未必所得">所见未必所得
&lt;/h2>&lt;p>AI生成的代码，为了及时呈现成果，有时还会“作弊”，对一些数据效果的呈现进行硬编码。&lt;/p>
&lt;p>也许初期为了展示成果，必要的模拟数据必不可少。但区分硬编码和正确处理逻辑却并不能完全相信AI。&lt;/p>
&lt;p>笔者曾在一个AI辅助编写的工具中，向它指出当我录入某条特定数据后，实际效果和预期不符。结果AI在假模假式分析半天以后，告诉我找到原因。但我实际检查代码，竟发现它在这部分的处理，居然是针对这条特定数据做了个if判断，强制特殊处理拉倒。&lt;/p>
&lt;h2 id="对质量的挑战">对质量的挑战
&lt;/h2>&lt;p>所以通过以上的说明（吐槽），虽然AI在辅助编码上成效惊人，而且不乏和工程师配合良好的案例。但很多基于AI辅助生成的应用，并不能消除质量堪忧的疑虑。&lt;/p>
&lt;p>或许AI本身还会帮你生成单元测试，但就像智能驾驶依然不能代替人类决策，在质量这个领域，人类测试工程师的作用，依然不可替代，甚至在AI应用越来越多的情况下，人工测试的重要性还越来越凸显。&lt;/p>
&lt;ul>
&lt;li>代码本身的质量&lt;/li>
&lt;li>复杂应用的整体规划和大范围上下文理解&lt;/li>
&lt;li>可扩展性、性能、安全性等方面的不足&lt;/li>
&lt;li>模拟数据、硬编码&lt;/li>
&lt;/ul>
&lt;h2 id="测试工程师如何应对">测试工程师如何应对
&lt;/h2>&lt;p>那么针对AI生成应用的质量挑战，测试工程师也应该针对性地进行对它的输出进行测试和验证&lt;/p>
&lt;p>可以从如下几方面重点考虑：&lt;/p>
&lt;h4 id="传统标准的系统验证">传统标准的系统验证
&lt;/h4>&lt;p>作为一个产品，测试首先自然还是应该从需求和产品目标、用户使用角度去测试AI应用的成品，确保符合产品需求和质量标准&lt;/p>
&lt;h4 id="产品集成度可扩展性性能安全">产品集成度、可扩展性、性能、安全
&lt;/h4>&lt;p>针对AI代码的薄弱环节，从产品集成度、可扩展性、性能、安全等场景重点考虑，针对性测试&lt;/p>
&lt;h4 id="从黑盒到白盒">从黑盒到白盒
&lt;/h4>&lt;p>AI错觉的存在，要求测试工程师，不仅从黑盒角度去验证应用，也应该关心AI生成应用的过程，特别是工程师开发过程中，相关的提示词、上下文以及AI的响应记录，都是了解潜在质量问题的来源。很多如硬编码问题，可能就隐藏在一些误导的交互中。&lt;/p>
&lt;h4 id="拥抱ai用魔法打败魔法">拥抱AI，用魔法打败魔法
&lt;/h4>&lt;p>AI虽然还存在很多问题，错误的使用可能得到糟糕质量的产品。但使用AI得当，却也能切实提供很好的帮助。&lt;/p>
&lt;p>利用AI，我们可以分析产品代码、梳理项目架构，帮助我们更好去理解项目的实现，包括基于AI去辅助完成包括自动化测试在内的很多测试工作。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>总而言之，良好质量的产品，离不开成熟的团队和规范的流程。对于测试人员来说，AI时代也在重新定义我们角色的机会。拥抱AI驱动开发的挑战，测试人员也会是不可或缺的参与者和合作者，拥抱AI，也拥抱未来！&lt;/p></description></item><item><title>做测试真的比不上开发吗？</title><link>https://chengxiaqiucao.github.io/post/111-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E6%AF%94%E8%BE%83/</link><pubDate>Sun, 13 Jul 2025 11:26:50 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/111-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E6%AF%94%E8%BE%83/</guid><description>&lt;blockquote>
&lt;p>有小伙伴问，做测试的，是不是真的比不上开发？&lt;/p>&lt;/blockquote>
&lt;p>虽说各有各的看法，但我们思考下提出这个问题背后代表的主流观点，还是值得探讨一下的。&lt;/p>
&lt;p>下面就谈谈秋草的看法。&lt;/p>
&lt;h2 id="测试技术和开发技术并非同一赛道">测试技术和开发技术并非同一赛道
&lt;/h2>&lt;p>首先，要真正做好测试这个岗位，技能要求其实是挺高的。但测试技术和开发技术不是一个维度的技术，开发者拿软件开发技能比对吐槽测试者，就好比篮球运动员吐槽游泳运动员跑得慢。&lt;/p>
&lt;p>测试技术包含很多和开发技术并不相同的要求，具体可以参看我之前另一篇文章【】， 这里不再赘述。&lt;/p>
&lt;h2 id="对测试评价不高的现实原因">对测试评价不高的现实原因
&lt;/h2>&lt;p>但我们也要看到这样的客观事实：在大部分企业，测试岗位的话语权、薪资等等，相比同级别的开发者，通常是低一档的。&lt;/p>
&lt;p>而导致这种情况的形成，其实有多方面原因，主要还是对岗位的普遍认知，以及比较恶劣的行业环境。具体说来：&lt;/p>
&lt;h3 id="工作要求和预期产出的不匹配">工作要求和预期产出的不匹配
&lt;/h3>&lt;p>首先，目前大多的测试岗位要求，其实是围绕验证需求，包括测试用例设计、自动化测试实现，都是基于对已有需求的验证。&lt;/p>
&lt;p>但验证需求，其实更多是&lt;strong>检查&lt;/strong>工作，而非&lt;strong>测试&lt;/strong>工作。&lt;/p>
&lt;p>检查作为测试的子集， 其实要求较低，技术含量要求也不高。相应地，围绕需求验证的岗位要求，其实是一个低技术含量要求的岗位。&lt;/p>
&lt;p>但矛盾点在于，对于测试岗位的预期，是保障产品发布后的全面质量。而产品质量的覆盖要求，仅仅通过需求验证是完全无法达到的。&lt;/p>
&lt;p>需求的验证，主要是功能覆盖，而且通常还只包含基本场景，缺乏各种异常场景以及各种非功能场景。要达到质量覆盖，必须要靠研发阶段全流程的质量控制，包括在测试阶段的&lt;strong>测试&lt;/strong>工作。 这里的&lt;strong>测试&lt;/strong>，不仅仅是基本的&lt;strong>检查&lt;/strong>， 还要包含更多不同测试技术去加持的主动发现。
&lt;img src="https://chengxiaqiucao.github.io/post/111-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E6%AF%94%E8%BE%83/testing-checking.png"
width="748"
height="571"
srcset="https://chengxiaqiucao.github.io/post/111-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E6%AF%94%E8%BE%83/testing-checking_hu_894995043907226c.png 480w, https://chengxiaqiucao.github.io/post/111-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%BC%80%E5%8F%91%E7%9A%84%E6%AF%94%E8%BE%83/testing-checking_hu_fc91b077f293f5bc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="314px"
>&lt;/p>
&lt;p>而工作要求和预期产出的不匹配，也导致对测试岗位的工作效果的质疑。&lt;/p>
&lt;h3 id="较低的工作要求导致较低的行业门槛">较低的工作要求导致较低的行业门槛
&lt;/h3>&lt;p>当工作要求本身主要针对较低技术含量的&lt;strong>检查&lt;/strong>工作，那么当然也会降低从业门槛，很多没什么经验和技术的小白也可以入行来完成相关的检查工作。&lt;/p>
&lt;p>早些年甚至还有测试设计工程师和测试执行工程师的区分，这里的测试执行，更是只需要参照用例完成操作，记录结果即可。这种最基本的检查工作，确实谈不上需要多少测试技术。&lt;/p>
&lt;p>较低的技术水平和岗位要求，自然会影响对这个岗位的整体评价。&lt;/p>
&lt;h3 id="行业本身的误导">行业本身的误导
&lt;/h3>&lt;p>IT行业前些年的快速发展和较好的待遇水平，让IT成为热门就业选择。而因为上面说到的原因，当较低技术含量的检查工作被披上测试工作的外衣，这样的测试岗位，就成为非IT人员进入这个行业最好的入门渠道。&lt;/p>
&lt;p>大量希望进入这个行业的非IT专业人员，又引出了很多培训需求。&lt;/p>
&lt;p>于是经过各类培训机构的推波助澜，包括鼓吹0基础入行，小白也能高薪。也确实输送了大量人员进入行业，而这些短期速成的“人才”，在工作中的表现，也当然影响了对行业的整体评价。&lt;/p>
&lt;h3 id="行业寒冬下的重灾区">行业寒冬下的重灾区
&lt;/h3>&lt;p>随着IT寒冬的到来，企业在成本压力的情况下，压缩开支，削减人员，前述种种因素的叠加，又让
测试成为重灾区，恶性循环，大家对于测试这个岗位的普遍看法还在进一步背离它应有的价值。&lt;/p>
&lt;h2 id="写在最后">写在最后
&lt;/h2>&lt;p>就客观事实来说，确实现在国内所谓的“测试行业”大量从业者普遍难称合格， 说比不上开发岗位也没错。&lt;/p>
&lt;p>但这里的“测试”岗位是打了引号的，检查和测试，混为一谈。&lt;/p>
&lt;p>总而言之，当前整个测试行业的整体环境比较恶劣，误解较深，秋草也深感无力。&lt;/p>
&lt;p>不过也毋庸灰心，围绕岗位真正的目标去打造自身能力，为全面质量提供真正的价值，自然会是大潮褪下时，能依然站立的那个。&lt;/p></description></item><item><title>大话网络协议之HTTP不同版本的演进和区别</title><link>https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250702.png" alt="Featured image of post 大话网络协议之HTTP不同版本的演进和区别" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>大话网络协议这个系列，之前我们介绍过OSI七层模型和TCP/IP四层模型【】，也详细介绍过HTTPS协议及其实现加密通信的基本原理 【】。而现今互联网的运行，离不开HTTP协议这个基石，但HTTP协议我们目前能看到多个不同版本，如http/1.1， http/2，http/3等，那这些不同版本有何区别，具体应用场景如何？本篇我们就重点来聊聊HTTP协议中这些不同版本的异同。&lt;/p>
&lt;h2 id="http协议简介">HTTP协议简介
&lt;/h2>&lt;h3 id="概述">概述
&lt;/h3>&lt;p>&lt;strong>HTTP&lt;/strong>（超文本传输协议 Hypertext Transfer Protocol）位于 &lt;strong>OSI七层网络模型&lt;/strong>中的&lt;strong>应用层&lt;/strong>，它的核心使命是实现分布式系统间的资源传输。它和 TCP/UDP这样的传输层协议间更多是一种协作关系。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/OSI-7.png"
width="1150"
height="858"
srcset="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/OSI-7_hu_ac7e6a0c3873a958.png 480w, https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/OSI-7_hu_b7f8c621bc348aa5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>HTTP协议，从设计之初， 就包含如下一些核心特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>无状态设计&lt;/strong>：服务器不保存客户端上下文信息&lt;/li>
&lt;li>&lt;strong>请求/响应模型&lt;/strong>：基于标准的请求方法和状态码&lt;/li>
&lt;li>&lt;strong>可扩展头部&lt;/strong>：通过Header字段实现元数据传输&lt;/li>
&lt;li>&lt;strong>跨平台兼容&lt;/strong>：文本协议设计确保多系统互操作性&lt;/li>
&lt;/ul>
&lt;p>HTTP协议负责在客户端与服务器之间传输超文本资源。作为&lt;strong>无状态协议&lt;/strong>，HTTP不保留客户端交互记录，每个请求独立处理。通过这个协议规范，统一了Web资源访问方式，可以兼容各类操作系统和设备，并可通过头部字段实现功能扩展。 是当今互联网世界的基础协议。&lt;/p>
&lt;h3 id="协议构成">协议构成
&lt;/h3>&lt;p>HTTP通信基于请求/响应模型，通过TCP/IP协议栈传输：&lt;/p>
&lt;p>&lt;strong>请求报文结构&lt;/strong>：
&lt;img src="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250701.png"
width="976"
height="239"
srcset="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250701_hu_4eb860eb3291ff90.png 480w, https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250701_hu_e6fe4db646b9721b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="408"
data-flex-basis="980px"
>
如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">POST&lt;/span> &lt;span class="nn">/api/v1/users&lt;/span> &lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">api.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Content-Type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">application/json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Authorization&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Bearer xyz123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Content-Length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">48&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;john@example.com&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>响应报文结构&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250701-1.png"
width="977"
height="419"
srcset="https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250701-1_hu_405ca6b9ea57e5e1.png 480w, https://chengxiaqiucao.github.io/post/040-%E5%A4%A7%E8%AF%9D%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-http%E7%9A%84%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/Pasted-20250701-1_hu_4bba38441c40b6cb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="559px"
>
如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">201&lt;/span> &lt;span class="ne">Created&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Location&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">/api/v1/users/789&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Content-Type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">application/json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Date&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Mon, 15 Jul 2024 09:28:53 GMT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Content-Length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">35&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">789&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="http方法">HTTP方法
&lt;/h3>&lt;p>HTTP方法定义了对网络资源的操作语义，可以用下表总结不同http方法的应用场景&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>方法&lt;/strong>&lt;/th>
&lt;th>&lt;strong>幂等性&lt;/strong>&lt;/th>
&lt;th>&lt;strong>安全性&lt;/strong>&lt;/th>
&lt;th>&lt;strong>应用场景&lt;/strong>&lt;/th>
&lt;th>&lt;strong>RESTful实践案例&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>获取资源&lt;/td>
&lt;td>查询用户信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;td>创建资源/执行操作&lt;/td>
&lt;td>新建订单&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT&lt;/td>
&lt;td>是&lt;/td>
&lt;td>否&lt;/td>
&lt;td>全量更新资源&lt;/td>
&lt;td>更新用户资料&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE&lt;/td>
&lt;td>是&lt;/td>
&lt;td>否&lt;/td>
&lt;td>删除资源&lt;/td>
&lt;td>取消订单&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PATCH&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;td>部分更新资源&lt;/td>
&lt;td>修改订单地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HEAD&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>获取头部元数据&lt;/td>
&lt;td>检查资源是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OPTIONS&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>获取服务器支持的方法&lt;/td>
&lt;td>CORS预检请求&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="http状态码">HTTP状态码
&lt;/h3>&lt;p>状态码是响应消息中，以三位数字表示的请求处理结果。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>类别&lt;/strong>&lt;/th>
&lt;th>&lt;strong>常用状态码&lt;/strong>&lt;/th>
&lt;th>&lt;strong>技术含义&lt;/strong>&lt;/th>
&lt;th>&lt;strong>应用场景&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1xx&lt;/td>
&lt;td>101&lt;/td>
&lt;td>协议切换&lt;/td>
&lt;td>WebSocket升级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2xx&lt;/td>
&lt;td>200/201/204&lt;/td>
&lt;td>成功处理&lt;/td>
&lt;td>资源创建成功&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3xx&lt;/td>
&lt;td>301/302/304&lt;/td>
&lt;td>重定向/缓存有效&lt;/td>
&lt;td>永久迁移/临时跳转&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4xx&lt;/td>
&lt;td>400/401/404&lt;/td>
&lt;td>客户端错误&lt;/td>
&lt;td>参数错误/未授权/资源不存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5xx&lt;/td>
&lt;td>500/502/503&lt;/td>
&lt;td>服务器错误&lt;/td>
&lt;td>服务崩溃/网关错误/过载&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="http的不同版本和演进">HTTP的不同版本和演进
&lt;/h2>&lt;p>&lt;strong>演进路线&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">timeline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title HTTP协议演进
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1991 ： HTTP 0.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1996 ： HTTP 1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1997 ： HTTP 1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2015 ： HTTP 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020 ： HTTP 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="http09-1991">HTTP/0.9 (1991)
&lt;/h3>&lt;p>最初版本的 HTTP 协议并没有版本号，只是后来为了和后续版本区分，定义为了0.9版本。它基于&lt;strong>Tim Berners-Lee博士&lt;/strong>为 CERN 内部文档传输设计的初始协议，也被称为&lt;strong>单行协议&lt;/strong>（one-line）&lt;/p>
&lt;p>这个协议极为简单：&lt;/p>
&lt;p>请求：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">GET /mypage.html
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>响应只包含页面文档本身， 也不存在消息头：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 这是一个非常简单的 HTML 页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>局限性也显而易见：&lt;/p>
&lt;p>这个协议无法支持复杂Web应用，仅可以传输纯HTML文档，也没有状态码反映通信状态。&lt;/p>
&lt;h3 id="http10-1996">HTTP/1.0 (1996)
&lt;/h3>&lt;p>随着网络的发展，浏览器和服务器的应用快速增长，http协议也得到更多的应用。基于原协议增加了很多的特性，并在1996 整合到了标准文档 &lt;strong>RFC 1945&lt;/strong> 中进行了标准化，并定义为了HTTP/1.0，但这个协议并非官方标准，是个狭义的标准化版本。&lt;/p>
&lt;p>&lt;strong>HTTP/1.0 的核心改进&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>引入版本标识（HTTP/1.0）&lt;/li>
&lt;li>新增状态码（200/404等）&lt;/li>
&lt;li>支持头部字段（Content-Type/Cache-Control）&lt;/li>
&lt;li>扩展方法（POST/HEAD）&lt;/li>
&lt;/ol>
&lt;p>通信过程如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sequenceDiagram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Client-&amp;gt;&amp;gt;Server: GET /index.html (连接1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Server-&amp;gt;&amp;gt;Client: 200 OK + 关闭
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Client-&amp;gt;&amp;gt;Server: GET /style.css (连接2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Server-&amp;gt;&amp;gt;Client: 200 OK + 关闭
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但这个标准存在极为关键的性能开销问题：&lt;/p>
&lt;ul>
&lt;li>短连接机制，且每个资源使用独立连接，TCP握手开销大&lt;/li>
&lt;li>无压缩/缓存机制&lt;/li>
&lt;/ul>
&lt;h3 id="http11-1997">HTTP/1.1 (1997)
&lt;/h3>&lt;p>为了解决Web页面资源加载效率问题，从 HTTP/1.0发布之前，其实就已经在着手HTTP协议的官方标准化工作，并在1997年发布了&lt;strong>RFC 2068&lt;/strong>（也有将 1999 年的修订版本 &lt;strong>RFC 2616&lt;/strong> 看作HTTP/1,1标准），2014年还发布了修订版本&lt;strong>RFC 7235&lt;/strong>&lt;/p>
&lt;p>HTTP/1.1版本非常成功，直到今天依然广为应用。它实现如下一些主要的特性：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>特性&lt;/strong>&lt;/th>
&lt;th>&lt;strong>实现机制&lt;/strong>&lt;/th>
&lt;th>&lt;strong>性能提升&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>持久连接&lt;/td>
&lt;td>Connection: keep-alive&lt;/td>
&lt;td>减少60% TCP握手&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>管道化&lt;/td>
&lt;td>请求批量发送&lt;/td>
&lt;td>理论吞吐量增加30%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>分块传输&lt;/td>
&lt;td>Transfer-Encoding&lt;/td>
&lt;td>支持大文件流式传输&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内容协商&lt;/td>
&lt;td>Accept头系列&lt;/td>
&lt;td>多格式资源支持&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>HTTP/1.1 协议为提升效率，提供了&lt;strong>管道化机制&lt;/strong>，也就是可以让客户端向服务端同时发出多个请求来提升效率。但是这里存在的问题，就是虽然客户端效率得到提升，但是服务端依然只能一次一条来返回响应。也就是 &lt;strong>队头阻塞(Head-of-Line Blocking)&lt;/strong> 问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sequenceDiagram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Client-&amp;gt;&amp;gt;Server: 请求A (大文件下载)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Client-&amp;gt;&amp;gt;Server: 请求B (小文件)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Server-&amp;gt;&amp;gt;Client: 响应A处理中...（阻塞）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Note over Server: 请求B已完成但必须等待
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Server-&amp;gt;&amp;gt;Client: 响应A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Server-&amp;gt;&amp;gt;Client: 响应B
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>其他局限&lt;/strong>：&lt;/p>
&lt;p>除此之外，虽然这个版本引入了压缩机制，但是对于消息头并没有提供压缩支持，依然存在较大的性能浪费。&lt;/p>
&lt;p>而且 HTTP/1.1 无状态的特性，服务端依然只能被动等待客户端提交状态信息。&lt;/p>
&lt;h3 id="http2-2015">HTTP/2 (2015)
&lt;/h3>&lt;p>随着互联网上Web应用的丰富化和网络带宽的提升，传输内容要求也越来越高。为了进一步提升 HTTP协议的传输效率及其遗留问题，2015年基于谷歌的 &lt;strong>SPDY&lt;/strong> 协议基础上改进发布了 &lt;strong>RFC 7540&lt;/strong> 。&lt;/p>
&lt;p>在HTTP/2中，主要进行了以下改进：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>二进制帧&lt;/strong>：采用二进制而不是文本协议，不再可读，也不可无障碍地手动创建。&lt;/li>
&lt;li>&lt;strong>多路复用&lt;/strong>：单连接并发传输&lt;/li>
&lt;li>&lt;strong>头部压缩&lt;/strong>：通过HPACK算法对消息头进行压缩，可减少70-85%开销&lt;/li>
&lt;li>&lt;strong>服务器推送&lt;/strong>：主动发送关联资源，允许服务器在客户端缓存中填充数据&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>局限性&lt;/strong>：&lt;/p>
&lt;p>虽然 HTTP/2.0 提出了通过多路复用的方法来解决 &lt;strong>队头堵塞&lt;/strong>，但实际效果并不理想，根本原因是HTTP协议是基于TCP协议之上的应用层协议，也就是&lt;strong>即便在应用层可以通过多路复用，但在传输层，因为TCP的重传机制，依然要等待传输层的消息逐一返回，也就是在TCP层，依然存在队头堵塞&lt;/strong>。&lt;/p>
&lt;h3 id="http3-2020">HTTP/3 (2020)
&lt;/h3>&lt;p>为了彻底解决&lt;strong>队头堵塞&lt;/strong>问题，2020推出了HTTP/3协议，该协议最大的变化就是对协议栈进行了彻底重构，传输层不再基于TCP协议，而是基于UDP的&lt;strong>QUIC协议&lt;/strong>&lt;/p>
&lt;p>UDP协议因为设计上没有TCP的丢包重传机制，且通信效率较TCP协议有很大提升，而QUIC重新设计的通信方式，在几乎等同于TCP连接可靠性的同时，延迟大大减少。&lt;/p>
&lt;p>目前超过95%以上的浏览器均已支持了HTTP/3协议，且30%以上的网站也已开始支持HTTP/3。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>通过上述HTTP不同版本的主要区别介绍，可以概括如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>版本&lt;/strong>&lt;/th>
&lt;th>&lt;strong>核心贡献&lt;/strong>&lt;/th>
&lt;th>&lt;strong>主要局限&lt;/strong>&lt;/th>
&lt;th>&lt;strong>采用率&lt;/strong>(2024 )&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0.9&lt;/td>
&lt;td>建立请求/响应模型&lt;/td>
&lt;td>仅支持GET&lt;/td>
&lt;td>0%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1.0&lt;/td>
&lt;td>引入头部/状态码&lt;/td>
&lt;td>短连接效率低&lt;/td>
&lt;td>&amp;lt;1%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1.1&lt;/td>
&lt;td>持久连接/管道化&lt;/td>
&lt;td>队头阻塞&lt;/td>
&lt;td>52%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>二进制分帧/头部压缩&lt;/td>
&lt;td>TCP层阻塞&lt;/td>
&lt;td>96%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>QUIC协议/连接迁移&lt;/td>
&lt;td>基础设施支持待完善&lt;/td>
&lt;td>39%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>据Cloudflare 2024报告：全球HTTP流量中HTTP/3占比已达35%，预计2026年将成为主导协议。HTTP协议的持续演进体现了互联网基础设施对性能、安全、移动性需求的技术响应，开发者需深入理解各版本特性，构建适应未来网络环境的高性能应用。&lt;/p></description></item><item><title>开源一个测试练习项目，邀请大家共建</title><link>https://chengxiaqiucao.github.io/post/101-testmybookshelf/</link><pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/101-testmybookshelf/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611.png" alt="Featured image of post 开源一个测试练习项目，邀请大家共建" />&lt;p>之前曾经收集过一些用于测试练习的项目，清单详见（），但这些项目更多还是基于自动化测试练习目的，却很少有真正用于练习软件测试和故障发现能力的项目，所以便萌生了自己做一个这种项目的目的。&lt;/p>
&lt;h3 id="设计思路">设计思路
&lt;/h3>&lt;p>以一个真实需求的的项目开发为例，参照模拟敏捷研发的流程，按Sprint来进行迭代。每个迭代根据指定的需求来进行实现，但同时包含一些注入的已知Bug。&lt;/p>
&lt;p>练习者可以将每个迭代对应的分支（如sprint0，sprint1）看作提测版本进行测试和练习。同时也可以&lt;/p>
&lt;h3 id="诚邀共建">诚邀共建
&lt;/h3>&lt;p>个人力量有限，现邀请各位测试小伙伴一起共同完善该Demo项目，包括完善测试用例，补充存在的Bug清单和其他关联文档等，争取可以为测试初学者提供一个贴合实际软件研发、有实际学习价值的Demo。&lt;/p>
&lt;p>回复 &lt;code>进群&lt;/code> 进入测试交流群，和群友交流测试技术，共同完善和进步~&lt;/p>
&lt;h2 id="项目地址和介绍">项目地址和介绍
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/chengxiaqiucao/TestMyBookshelf" target="_blank" rel="noopener"
>https://github.com/chengxiaqiucao/TestMyBookshelf&lt;/a>&lt;/p>
&lt;p>sprint 首页
&lt;img src="https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611-1.png"
width="1309"
height="392"
srcset="https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611-1_hu_7443ff5a6cddf002.png 480w, https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611-1_hu_ff5bd7d93bfa99ee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="333"
data-flex-basis="801px"
>&lt;/p>
&lt;p>sprint1 首页
&lt;img src="https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611.png"
width="1323"
height="859"
srcset="https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611_hu_e37fde2dc07b2672.png 480w, https://chengxiaqiucao.github.io/post/101-testmybookshelf/snap_20250611_hu_77f871333557b07d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="369px"
>&lt;/p>
&lt;p>欢迎多提Issue~~&lt;/p>
&lt;p>ReadMe文档如下：&lt;/p>
&lt;hr>
&lt;h1 id="个人图书管理--我的书架">个人图书管理 &amp;ndash; 我的书架
&lt;/h1>&lt;p>测试练习项目 | 包含注入缺陷的图书管理系统 | FastAPI + SQLite 实现 | 适合 QA 培训使用&lt;/p>
&lt;p>这是一个用于测试练习作用的个人图书管理系统。该项目故意注入了一些典型的 Bug，用于测试人员练习 Bug 发现和验证。&lt;/p>
&lt;h2 id="项目特点">项目特点
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>基础功能完整：实现了图书的增删改查等基本功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>典型 Bug 注入：包含多个常见的问题场景&lt;/p>
&lt;/li>
&lt;li>
&lt;p>技术栈简单：使用主流但轻量级的技术组合&lt;/p>
&lt;/li>
&lt;li>
&lt;p>适合测试练习：Bug 类型多样，重现步骤清晰&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用
&lt;/h2>&lt;p>切换到不同sprint分支，针对分支需求进行测试&lt;/p>
&lt;h2 id="注意事项">注意事项
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>本项目主要用于测试练习，不建议用于生产环境&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有 Bug 都是故意注入的，用于测试练习&lt;/p>
&lt;/li>
&lt;li>
&lt;p>项目代码中不会标注 Bug 的位置，需要测试人员自行发现&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="测试目标">测试目标
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>验证所有注入的 Bug 是否可重现&lt;/p>
&lt;/li>
&lt;li>
&lt;p>练习 Bug 报告编写&lt;/p>
&lt;/li>
&lt;li>
&lt;p>熟悉常见 Web 应用问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>提高测试用例设计能力&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title> 自动化测试中应用Docker的正反两面</title><link>https://chengxiaqiucao.github.io/post/096-docker%E5%9C%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</link><pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/096-docker%E5%9C%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/096-docker%E5%9C%A8%E8%87%AA%E5%8A%A8%E5%8C%96/Docker%E8%87%AA%E5%8A%A8%E5%8C%96.png" alt="Featured image of post 自动化测试中应用Docker的正反两面" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>自动化测试是现如今软件研发中不可或缺的重要环节。而为了确保测试环境的一致性、简化配置并加速测试的反馈，Docker 技术被广泛应用于测试自动化框架，进行容器化封装。&lt;/p>
&lt;p>通常的共识是：一旦测试套件被 Docker 化，即可实现 &lt;strong>“一次构建，处处运行”&lt;/strong> 的理想状态，彻底消除环境差异带来的测试不确定性。&lt;/p>
&lt;p>然而，在实际工程实践中，Docker 化是否真的能完美保障测试执行的一致性？本篇我们将深入探讨 Docker 在自动化测试应用中的承诺与现实，揭示那些可能导致“一致性幻象”的关键因素，并提供相应的规避策略。&lt;/p>
&lt;h2 id="docker-的承诺环境封装与一致性">Docker 的承诺：环境封装与一致性
&lt;/h2>&lt;p>Docker 的核心价值在于通过镜像（Image）封装应用的完整运行环境（操作系统层、运行时、库、工具、代码及配置）。其工作流程通常为：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>构建镜像&lt;/strong>：在开发环境（如开发者本地PC）中，通过 Dockerfile 定义依赖安装和配置步骤，构建包含测试套件及其运行环境的镜像。&lt;/li>
&lt;li>&lt;strong>分发镜像&lt;/strong>：将构建好的镜像推送到镜像仓库（如 Docker Hub, Artifactory）。&lt;/li>
&lt;li>&lt;strong>运行容器&lt;/strong>：在目标环境（CI/CD 流水线、其他开发者机器、生产前环境等）中拉取该镜像并实例化为容器执行测试。&lt;/li>
&lt;/ol>
&lt;p>理论上，此流程应确保无论底层宿主机的具体配置如何，容器内部的测试执行环境始终保持一致，从而消除开发者 &lt;strong>“在我机器上能跑”&lt;/strong> 的经典问题，实现测试结果的可靠复现。&lt;/p>
&lt;h2 id="现实一致性的幻想">现实：一致性的幻想
&lt;/h2>&lt;p>理想丰满，现实骨感。尽管 Docker 提供了强大的环境隔离能力，但以下因素仍可能破坏测试的绝对一致性，形成“幻象”：&lt;/p>
&lt;h3 id="跨平台的宿主架构差异">跨平台的宿主架构差异
&lt;/h3>&lt;p>在 x86 架构宿主机上构建的镜像，在基于 ARM 架构的 CI 节点（如 Apple Silicon M1/M2）上运行时，可能导致依赖特定 CPU 指令集的二进制文件、包含 C 扩展的 Python 包等运行异常或崩溃，致使本地通过的测试在 CI 失败。&lt;/p>
&lt;blockquote>
&lt;p>原因：Docker 容器共享宿主机的内核。不同 CPU 架构（x86_64 vs arm64）的指令集不兼容。&lt;/p>&lt;/blockquote>
&lt;h4 id="如何解决">如何解决？
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>多架构镜像构建&lt;/strong>：使用 &lt;code>docker buildx&lt;/code> 工具构建支持多平台（如 linux/amd64, linux/arm64）的镜像。&lt;/li>
&lt;li>&lt;strong>显式指定平台&lt;/strong>：在运行或构建时通过 &lt;code>--platform&lt;/code> 参数强制指定目标平台（如 &lt;code>docker run --platform linux/amd64 my-test-image&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h3 id="外部依赖">外部依赖
&lt;/h3>&lt;p>测试容器内运行良好，但若测试用例需要访问容器外的真实服务（数据库、API、S3、需 VPN 访问的内部系统），则测试结果可能受外部服务的状态、网络延迟、DNS 解析差异、防火墙规则或 VPN 连接状态影响而波动。&lt;/p>
&lt;blockquote>
&lt;p>原因：Docker 容器化的是测试套件本身，而非其依赖的所有外部系统。网络请求突破了容器的隔离边界。&lt;/p>&lt;/blockquote>
&lt;h4 id="如何解决-1">如何解决？
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>依赖容器化&lt;/strong>：使用 Docker Compose 在测试运行时动态拉起所需的外部服务（如数据库、Mock 服务器）作为独立的容器，并与测试容器建立内部网络连接。&lt;/li>
&lt;li>&lt;strong>Mock/Stub 技术&lt;/strong>：在单元测试和集成测试中广泛应用 Mock 和 Stub 技术替代真实的外部依赖调用。&lt;/li>
&lt;li>&lt;strong>网络环境控制&lt;/strong>：严格管理测试环境的网络配置（DNS、代理、防火墙），确保其可预测性。&lt;/li>
&lt;/ul>
&lt;h3 id="宿主操作系统差异">宿主操作系统差异
&lt;/h3>&lt;p>在 Linux 宿主机上运行正常的挂载卷（Volume Mounts）操作或网络访问（&lt;code>localhost&lt;/code>），在 macOS 或 Windows（通过 Docker Desktop）上可能出现文件权限错误、符号链接失效、换行符（CRLF vs LF）问题、&lt;code>inotify&lt;/code> 事件监听失效，或 &lt;code>localhost&lt;/code> 指向歧义。&lt;/p>
&lt;blockquote>
&lt;p>原因：虽然容器内 OS 一致，但 Docker 与宿主 OS 交互的机制存在差异：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>文件卷挂载&lt;/strong>：涉及主机文件系统到容器文件系统的映射，不同 OS 对文件权限、元数据、事件通知的支持不同。&lt;/li>
&lt;li>&lt;strong>网络模型&lt;/strong>：在 Linux 上，容器网络通常更直接集成；在 macOS/Windows 上，Docker Desktop 使用虚拟机桥接，访问宿主机服务需使用特殊主机名 &lt;code>host.docker.internal&lt;/code> 而非 &lt;code>localhost&lt;/code>。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h4 id="如何解决-2">如何解决？
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>理解平台差异&lt;/strong>：明确意识到 Docker 并非完全 OS 无关，其行为受宿主机影响。&lt;/li>
&lt;li>&lt;strong>谨慎使用挂载卷&lt;/strong>：避免测试核心逻辑过度依赖主机卷挂载，尤其对于写操作（如生成报告、缓存）。优先使用容器内路径或复制（&lt;code>COPY&lt;/code>）机制。如需挂载，注意文件权限和换行符问题。&lt;/li>
&lt;li>&lt;strong>使用正确的网络访问方式&lt;/strong>：在容器内访问宿主机服务时，统一使用 &lt;code>host.docker.internal&lt;/code>（Mac/Windows）或了解 Docker 网络模式（bridge/host）下的服务访问规则（Compose 服务名）。避免硬编码 &lt;code>localhost&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="资源约束">资源约束
&lt;/h3>&lt;p>在资源充沛的本地开发机（如 16 核 32GB RAM）上测试通过，但在资源受限的 CI 节点（可能 CPU 被限流、内存不足、或与其他任务共享资源）上运行时，测试因超时、资源竞争（CPU、IO）而失败或变得不稳定（Flaky）。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>原因&lt;/strong>：Docker 容器共享宿主机的物理资源（CPU、内存、磁盘 IO、网络带宽）。CI 环境的资源配额通常低于开发机且存在竞争。&lt;/p>&lt;/blockquote>
&lt;h4 id="如何解决-3">如何解决？
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>资源限制与监控&lt;/strong>：在 Docker 运行命令或 Compose 文件中为测试容器明确设置资源限制（&lt;code>--cpus&lt;/code>, &lt;code>--memory&lt;/code>），使其更接近 CI 环境。监控 CI 节点的资源使用情况。&lt;/li>
&lt;li>&lt;strong>性能优化&lt;/strong>：优化测试用例和框架本身，减少资源消耗（如并行化控制、避免内存泄漏、优化 I/O 操作）。&lt;/li>
&lt;li>&lt;strong>选择匹配的 CI 环境&lt;/strong>：确保 CI 环境的基础资源配置能满足测试运行的最低要求。&lt;/li>
&lt;/ul>
&lt;h3 id="可变依赖与版本漂移latest标签的隐患">可变依赖与版本漂移：“latest”标签的隐患
&lt;/h3>&lt;p>镜像构建时使用基础镜像标签 &lt;code>FROM python:latest&lt;/code> 或未严格锁定依赖版本 &lt;code>pip install -r requirements.txt&lt;/code>（未使用 &lt;code>pip freeze&lt;/code> 或版本锁文件），导致后续构建的镜像因底层依赖（Python 解释器、库）的意外升级而引入不兼容或 Bug，破坏测试稳定性。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>原因&lt;/strong>：依赖项的“latest”标签或未锁定的版本号会随时间推移指向新版本，带来不确定性。&lt;/p>&lt;/blockquote>
&lt;h4 id="如何解决-4">如何解决？
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>严格版本锁定&lt;/strong>：在 Dockerfile 中使用确定版本的基础镜像标签（如 &lt;code>FROM python:3.11-slim&lt;/code>）。使用版本锁文件（如 &lt;code>requirements.txt&lt;/code> 明确每个依赖的版本号，或使用 &lt;code>poetry.lock&lt;/code>/&lt;code>Pipfile.lock&lt;/code>）管理依赖项。&lt;/li>
&lt;li>&lt;strong>可重现的构建&lt;/strong>：确保基于相同的锁文件，每次构建都能生成完全一致的镜像。定期有计划地更新依赖版本并重新测试验证。&lt;/li>
&lt;/ul>
&lt;h2 id="理性看待docker-的价值与工程实践">理性看待Docker 的价值与工程实践
&lt;/h2>&lt;p>尽管存在上述诸多问题，我们还是&lt;strong>不应否定 Docker 在测试自动化中的巨大价值&lt;/strong>。它在环境标准化、简化依赖管理、让CI/CD流水线更易管理等方面，依然有着不可替代的优势。&lt;/p>
&lt;p>所以应用Docker，关键在于理解：&lt;strong>Docker 是实现一致性的强大工具，但非一劳永逸的“银弹”&lt;/strong>。技术的应用还是需要通过良好的工程实践和有效约束发挥作用！&lt;/p>
&lt;h2 id="总结">&lt;strong>总结&lt;/strong>
&lt;/h2>&lt;p>Docker 为测试自动化环境的一致性筑起了一道坚固的“围栏”，极大地提升了测试的可信度和效率。然而，“围栏”并非密不透风。&lt;/p>
&lt;p>宿主架构差异、外部依赖渗透、OS 交互特性、资源竞争以及依赖版本漂移等因素，都可能悄然侵蚀预期的绝对一致性。&lt;/p>
&lt;p>实现真正可靠的 Docker 化测试自动化，不仅需要熟练运用 Docker 技术本身，更要求我们秉持严谨的工程实践——明确环境边界、严格依赖管理、优化资源利用、持续监控改进。唯有如此，我们才能有效破除“一致性幻象”，让 Docker 真正成为保障软件质量的坚实基石。&lt;/p>
&lt;p>所以，下次当我们听到 “&lt;strong>没问题，它已经 通过Docker容器化了&lt;/strong>”，不妨多问一句：&lt;/p>
&lt;ul>
&lt;li>它运行在什么架构上？&lt;/li>
&lt;li>依赖是否锁定？&lt;/li>
&lt;li>网络和文件访问是如何处理的？&lt;/li>
&lt;li>资源足够吗？&lt;/li>
&lt;/ul>
&lt;p>知己知彼，方能运筹帷幄。&lt;/p>
&lt;hr></description></item><item><title>谈谈Bug的生命周期和Bug状态变更原则</title><link>https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-1.png" alt="Featured image of post 谈谈Bug的生命周期和Bug状态变更原则" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在软件产品研发中，Bug既是测试工作最为重要的产出，也是开发人员修复问题的直接输入，更是产品质量改进的主要抓手。&lt;/p>
&lt;p>在前文【】中，我们从测试人员的角度，分析了在提交Bug时应如何帮助团队更高效地去进行质量改进。&lt;/p>
&lt;p>但除了Bug提交环节，在我们工作中，Bug从发现到被修复，会经历一个完整的生命周期，对应到我们提交的问题单，会呈现不同的状态。而Bug在这些不同状态间的迁移，其实反映了团队围绕Bug的协作沟通过程。实际工作中，因为Bug认定或状态设定上产生的分歧屡见不鲜，特别是在很多将Bug作为重要KPI数据的团队，测试和开发之间因为Bug产生激烈争论，时有发生。比如：&lt;/p>
&lt;ul>
&lt;li>开发和测试对Bug认定有分歧，测试觉得是Bug，开发觉得不是问题，怎么处理？&lt;/li>
&lt;li>Bug归属产生分歧，是前端问题还是后端问题？&lt;/li>
&lt;li>Bug无法复现，应不应该关闭？&lt;/li>
&lt;li>&amp;hellip;..等等&lt;/li>
&lt;/ul>
&lt;p>本文，我们就来详细梳理一下，Bug的完整生命周期，以及它在不同阶段的状态处理原则。&lt;/p>
&lt;h2 id="bug的生命周期及不同状态">Bug的生命周期及不同状态
&lt;/h2>&lt;p>Bug并不是凭空产生，是在测试过程中暴露出来的质量问题，从被发现到完成修复并确认无误，会经历一个过程，这个过程就是Bug的生命周期。在软件研发过程中，针对这个生命周期的管理，通常会由Bug管理系统（常用的比如Jira、禅道、Bugfree、HP QC等）来跟踪和同步每个Bug的状态，并在开发和测试人员之间起到协作桥梁的作用。&lt;/p>
&lt;p>Bug生命周期的主要过程大致如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513.png"
width="4188"
height="292"
srcset="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513_hu_38512c472d0f2fb4.png 480w, https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513_hu_d326b60d707e1ab3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1434"
data-flex-basis="3442px"
>&lt;/p>
&lt;h3 id="已提交open">已提交（Open）
&lt;/h3>&lt;p>&lt;strong>Open&lt;/strong> 状态，是Bug被发现以后的初始状态。通常由发现Bug的测试人员录入Bug管理系统，形成问题单，此时Bug的状态处于 &lt;strong>Open&lt;/strong> 状态，也表示该Bug待处理。&lt;/p>
&lt;p>另外，如果有已关闭的历史Bug，后来发现其实并未解决，也可以重新将Bug激活，此时Bug也会处于 &lt;strong>Open&lt;/strong> 状态。&lt;/p>
&lt;p>在该状态下，提交Bug的测试人员应该指定处理Bug的开发人员进行下一步处理，通常会根据Bug的现象，直接指定到能修复Bug的开发这里。不过一般Bug管理系统，也会设置默认处理人，对于&lt;strong>Open&lt;/strong> 状态的Bug，默认处理人通常会设置为开发负责人，会做进一步更准确的判断以便重新指派。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Open&lt;/td>
&lt;td style="text-align: center">初始状态，待处理&lt;/td>
&lt;td style="text-align: center">测试人员&lt;/td>
&lt;td style="text-align: center">开发负责人或Bug归属人&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="处理中in-progress">处理中（In Progress）
&lt;/h3>&lt;p>开发人员被指派Bug后，会进入Bug的分析阶段，此时Bug不能确定是否能被修复，所以会进入&lt;strong>处理中&lt;/strong>状态，经过分析后，可以对Bug进行修复操作，或发现并不是自己可以完成修复的问题，再将bug重新指派给实际应该修复bug的开发人员。&lt;/p>
&lt;p>这里如果存在Bug在开发人员间的移交，Bug状态会保持在 &lt;strong>In Progress&lt;/strong>, 仅仅当前处理人会发生变化。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">In Progress&lt;/td>
&lt;td style="text-align: center">Bug进入分析，通常针对较复杂Bug&lt;/td>
&lt;td style="text-align: center">被指派开发人员&lt;/td>
&lt;td style="text-align: center">实际Bug修复人&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="已解决resolved">已解决（Resolved）
&lt;/h3>&lt;p>Bug在经过开发人员的修复后，会标记为&lt;strong>已解决&lt;/strong>。该状态其实代表测试人员可以对Bug进行验证。&lt;/p>
&lt;p>这里需要注意，很多开发人员会有的一个误区，就是我把代码进行修改或者做过自测，就是&lt;strong>Resolved&lt;/strong>。其实并不是，&lt;strong>Resolved&lt;/strong> 状态的重点是被移交的处理人，也就是&lt;strong>测试人员是可以进行验证&lt;/strong>的。&lt;/p>
&lt;p>因为实际工作中，测试人员对产品进行测试，会有测试轮次的概念，并不是随时都可以测试。
所以只有当&lt;strong>修复的代码已经进入下一轮的提交测试&lt;/strong>，才应该将状态置为 &lt;strong>Resolved&lt;/strong>。否则当前测试环境中，被修复的代码尚未部署，当然实际并无法完成验证。&lt;/p>
&lt;p>（&lt;em>当然更完善的Bug管理系统，会再增加一个&lt;strong>待验证&lt;/strong>的状态，这时已解决就只代表开发完成了代码的修复，而待验证才是重新提测。本文重在说明常用必要状态，不再过多扩展&lt;/em>）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Resolved&lt;/td>
&lt;td style="text-align: center">Bug已经完成修复，标记为已解决，即待验证&lt;/td>
&lt;td style="text-align: center">Bug修复人&lt;/td>
&lt;td style="text-align: center">测试人员&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="已关闭closed">已关闭（Closed）
&lt;/h3>&lt;p>经过验证，确认Bug已被修复后，Bug可以置为 &lt;strong>已关闭&lt;/strong> 状态。该状态代表Bug所反映的质量问题在当前产品版本中已不复存在。&lt;/p>
&lt;p>关闭Bug应该是一个很严肃的事情，通常应该由Bug的提交人进行确认后才可关闭。当然特殊情况下，产品的决策团队（CCB）也可决定Bug是否可以进行关闭。&lt;/p>
&lt;p>另外，关闭的Bug需要重新激活的情况也时有发生，比如验证时场景考虑不够完整，环境问题导致误关或者是提测版本切换后，已修复的Bug又被重新改错，或是错误代码又被重新合入等等，这时就会牵涉Bug重开（ReOpen）操作&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Closed&lt;/td>
&lt;td style="text-align: center">Bug已确认修复，版本中已不存在Bug对应的质量问题&lt;/td>
&lt;td style="text-align: center">Bug提交人&lt;/td>
&lt;td style="text-align: center">无&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>除了上面几个最主要的Bug生命周期状态外，实际工作中，还会存在一些特殊情况，也会对应到不同的Bug状态&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-1.png"
width="4188"
height="1420"
srcset="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-1_hu_d98df15e1989db10.png 480w, https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-1_hu_ce46dd07ac9eed71.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="707px"
>&lt;/p>
&lt;h3 id="已拒绝rejected">已拒绝（Rejected）
&lt;/h3>&lt;p>测试过程中，测试人员出现误判，或者环境配置有误时，还是比较容易出现测试提交的Bug实际并不是质量问题的情况，开发人员在经过分析后，认为不是bug，此时就可以将Bug置为 &lt;strong>已拒绝&lt;/strong> 状态。这时Bug会回到测试人员手中，进行确认，若认可误报，可由提交人进行关闭操作。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Rejected&lt;/td>
&lt;td style="text-align: center">经分析Bug属于误报，不反映质量问题&lt;/td>
&lt;td style="text-align: center">Bug分析人&lt;/td>
&lt;td style="text-align: center">Bug提交者&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>但实际中，针对被拒绝Bug，很多时候是测试和开发人员对需求或是否质量问题的分歧导致，在分歧无法自行弥合的情况下，正常的操作应该是：
测试人员重新提交Bug，但Bug不在指派到开发人员，而是指派到产品决策团队CCB（其实主要是BA或PO），由CCB进行仲裁，根据仲裁结果来判断是否需要进行修复或关闭。&lt;/p>
&lt;h3 id="已验证verified">已验证（Verified）
&lt;/h3>&lt;p>测试人员验证Bug无误后，通常可以进行关闭操作将状态置为&lt;strong>Closed&lt;/strong>，但更完整的生命周期，其实还又一个&lt;strong>已验证&lt;/strong>的状态。这个状态的使用，通常出现在验证Bug的测试人员和提交Bug的提交人并不一致，验证人对Bug实施验证后，不能代表提交人，确认Bug可关闭。&lt;/p>
&lt;p>另外一种情况，就是更严谨的大型软件研发流程，测试环节可能也包括多个。子系统级别的测试团队测试完成后，还会有大系统级别的系统测试或全面验收，在子系统级别的测试进入后续测试后才会将状态置为&lt;strong>Closed&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Verified&lt;/td>
&lt;td style="text-align: center">Bug经过验证已被修复&lt;/td>
&lt;td style="text-align: center">Bug验证人&lt;/td>
&lt;td style="text-align: center">Bug提交者&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="待补充信息need-more-info">待补充信息（Need More Info）
&lt;/h3>&lt;p>这个状态是针对测试人员提交的Bug信息不完整或不足以对Bug完成分析，开发人员难以理解具体的Bug现象等情况。这时处理人将问题单置为 &lt;strong>Need More Info&lt;/strong> 状态，返回给Bug提交人补充相关信息。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Need More Info&lt;/td>
&lt;td style="text-align: center">Bug单信息不充分，需要补充更详细的信息&lt;/td>
&lt;td style="text-align: center">Bug分析人&lt;/td>
&lt;td style="text-align: center">Bug提交者&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="已延期deferred">已延期（Deferred）
&lt;/h3>&lt;p>延期一般针对下面几种情况：&lt;/p>
&lt;ol>
&lt;li>Bug难以复现，较难分析出产生原因&lt;/li>
&lt;li>Bug修改难度大，需要对产品进行较大改动，且存在规避方案&lt;/li>
&lt;li>Bug优先级较低，不影响主要功能，在版本发布前还有其他更重要问题需要解决&lt;/li>
&lt;/ol>
&lt;p>针对以上情况，经过产品CCB团队决策，可以将Bug延期处理。同时Bug的负责分析人，还是需要继续针对Bug做分析或后续进行修复。&lt;/p>
&lt;p>但这里需要注意，&lt;strong>Deferred&lt;/strong> 状态不代表Bug不是问题，在测试团队的质量分析时，还是应该将该状态的Bug视作有效Bug看待。也就是这类Bug还是会影响到版本最终的质量评估结论。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">状态&lt;/th>
&lt;th style="text-align: center">说明&lt;/th>
&lt;th style="text-align: center">当前负责人&lt;/th>
&lt;th style="text-align: center">移交处理人&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Deferred&lt;/td>
&lt;td style="text-align: center">Bug因特定原因无法在当前版本解决，经项目CCB团队决策认可后，可将Bug保留在版本中，留待后续解决&lt;/td>
&lt;td style="text-align: center">CCB决策团队&lt;/td>
&lt;td style="text-align: center">Bug分析人&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>以上就是我们针对Bug生命周期中会出现的主要的一些状态定义及相关处理原则的介绍。除了上面列出的这些Bug状态外，更完整的Bug生命周期还包括有：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>待验证：&lt;/strong> 已修复，等待版本提测&lt;/li>
&lt;li>&lt;strong>调研中：&lt;/strong> 针对比较复杂的Bug，牵涉技术选型、方案对照等较多研究工作时，可在处理Bug前定义该状态&lt;/li>
&lt;li>&lt;strong>已调研：&lt;/strong> 针对上面进行了方案研究的Bug，但尚未确定修复方案时，Bug处于该状态&lt;/li>
&lt;li>&lt;strong>验证中：&lt;/strong> 对于测试场景比较复杂的Bug，需要进行较长时间的验证，比如性能类的问题，在完成验证前，可将Bug置于该状态&lt;/li>
&lt;/ul>
&lt;p>当然，流程是死的，良好、高效的团队协作最重要的还是团队中不同角色的互信互助。&lt;/p>
&lt;p>不过我们理解正确流程中的不同环节和正确处理的原则，也有助于我们在出现问题或分歧时，减少互相争论、扯皮的内耗。&lt;/p>
&lt;h2 id="bug状态迁移">Bug状态迁移
&lt;/h2>&lt;p>基于上述不同状态的分析，一个比较完整Bug状态迁移图如下，供参考。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-2.png"
width="4484"
height="2292"
srcset="https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-2_hu_466b814562f95d6a.png 480w, https://chengxiaqiucao.github.io/post/091-bug%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/snap_20250513-2_hu_38648a12e36d7200.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;p>如需以上完整大图，可回复 &lt;code>Bug状态&lt;/code> 获取。&lt;/p>
&lt;p>另回复&lt;code>大纲&lt;/code> 可查看秋草测试技能全栈提升课详细目录。回复 &lt;code>进群&lt;/code>可进入测试交流群和小伙伴们分享测试技术、交换资讯。&lt;/p></description></item><item><title>转译：2025自动化测试八大趋势</title><link>https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/</link><pubDate>Wed, 09 Apr 2025 23:00:28 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/</guid><description>&lt;p>本文来自 &lt;strong>TestGuild&lt;/strong> 1 月份对今年测试发展趋势的分析，目前看判断还是客观准确的，现将译文分享给大家。&lt;/p>
&lt;hr>
&lt;p>随着我们进入2025年，我认为以下&lt;strong>自动化测试趋势&lt;/strong>将深刻影响软件测试的未来。&lt;/p>
&lt;h3 id="目录">目录
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="#trend1" >1. AI Agent：测试新浪潮&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend2" >2. AI右移：理解用户&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend3" >3. 全民皆QA：人机协同&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend4" >4. 测试者角色进化：适应未来&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend5" >5. DevOps与SRE整合：持续质量&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend6" >6. 端到端（E2E）自治质量平台&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend7" >7. Playwright：首选自动化工具&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#trend8" >8. 2025年测试者必备编程语言&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#summary" >总结：2025年自动化测试成功之道&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="ai-agent测试新浪潮">AI Agent：测试新浪潮 &lt;a id="trend1">&lt;/a>
&lt;/h2>&lt;p>我认为2025年将见证AI辅助测试的持续扩展。&lt;/p>
&lt;p>原因何在？&lt;/p>
&lt;p>AI在测试中的应用呈指数级增长：调查显示，截至2024年，72.3%的团队正在积极探索或采用AI驱动的测试工作流，而几年前这一技术尚处于早期采用阶段。这一趋势标志着我们TestGuild自动化测试调查历史上最快的技术采用曲线。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409.png"
width="1403"
height="533"
srcset="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409_hu_ea73bf39cd238a9b.png 480w, https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409_hu_9e5eb824ebd21647.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="263"
data-flex-basis="631px"
>&lt;/p>
&lt;p>在2024年多模态AI（通过专用算法处理多种数据类型）基础上，新兴趋势是代理型AI。&lt;/p>
&lt;p>首先，您可能会问：什么是代理型AI？&lt;/p>
&lt;p>这类系统能自主运作，处理以往需要人工干预的任务。它们能进行通信、维持长期状态，并根据交互独立决策，实质上是充当高能效测试助手团队。&lt;/p>
&lt;p>仍不清楚？让我们通过示例说明。&lt;/p>
&lt;h3 id="代理型ai自动化测试工作流示例">代理型AI自动化测试工作流示例
&lt;/h3>&lt;p>设想一个真实场景：代理型AI为大型电商平台自主管理全量回归测试套件。&lt;/p>
&lt;p>不同于依赖预设脚本和固定排期，该代理型AI系统将执行以下操作：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>优先级判定&lt;/strong>：分析近期代码变更和功能发布，根据修改风险等级排序回归测试&lt;/li>
&lt;li>&lt;strong>测试选择与适配&lt;/strong>：动态选取合适测试用例，基于风险评估从完整套件中筛选子集&lt;/li>
&lt;li>&lt;strong>测试执行与环境管理&lt;/strong>：跨多环境（浏览器/操作系统/设备）调度执行测试。若测试失败，自动触发诊断测试收集详细信息，甚至尝试自动修复简单问题&lt;/li>
&lt;li>&lt;strong>结果分析与报告&lt;/strong>：分类故障严重程度，识别模式，根据常见错误模式提出修复建议&lt;/li>
&lt;li>&lt;strong>反馈循环与持续改进&lt;/strong>：通过经验积累不断自我优化&lt;/li>
&lt;/ul>
&lt;p>此设想并非天方夜谭。调查数据显示，团队不仅追求任务自动化，更依赖AI自主决策——这正是代理型AI的核心：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>决策能力&lt;/strong>：AI工具日益被信任用于优化测试覆盖率和维护&lt;/li>
&lt;li>&lt;strong>自主性&lt;/strong>：对AI驱动流水线和框架的兴趣表明团队需要最小化人工干预的解决方案&lt;/li>
&lt;li>&lt;strong>性能表现&lt;/strong>：聚焦采用AI的工具框架，显示向动态学习适应系统的转变&lt;/li>
&lt;/ul>
&lt;p>转型速度超乎预期：网络研讨会投票显示56%团队处于AI采用&amp;quot;调研阶段&amp;quot;，38%企业将AI视为缓解测试人才短缺的解决方案。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-1.png"
width="864"
height="804"
srcset="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-1_hu_face25b8bc1d201d.png 480w, https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-1_hu_84c2239caf2705b5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="257px"
>&lt;/p>
&lt;p>行业巨头观点与此一致（笔者将其延伸至自动化测试领域）：&lt;/p>
&lt;p>微软CEO萨提亚·纳德拉近期提及&lt;a class="link" href="https://www.cxtoday.com/data-analytics/microsoft-ceo-ai-agents-will-transform-saas-as-we-know-it/" target="_blank" rel="noopener"
>AI&amp;quot;代理&amp;quot;将革新SaaS&lt;/a>，通过处理复杂任务、持续学习和跨系统无缝连接实现突破。斯坦福研究者关于&lt;a class="link" href="https://www.livescience.com/technology/artificial-intelligence/just-2-hours-is-all-it-takes-for-ai-agents-to-replicate-your-personality-with-85-percent-accuracy" target="_blank" rel="noopener"
>AI代理模拟人类行为&lt;/a>的实验，同样印证代理型AI改变测试方式的潜力。&lt;/p>
&lt;hr>
&lt;h2 id="ai右移理解用户">AI右移：理解用户 &lt;a id="trend2">&lt;/a>
&lt;/h2>&lt;p>理解真实用户行为已成为2025年质量策略的核心要素。通过分析生产环境用户交互，团队能发现模式、预测问题，确保软件满足用户期望。AI整合使团队探索出质量提升新路径。&lt;/p>
&lt;p>调查数据显示，对&lt;strong>预测模型和用户行为分析&lt;/strong>的关注度显著提升，团队聚焦利用AI发现长尾用例，优化用户旅程理解。&lt;a class="link" href="https://testguild.com/podcast/automation/a509-gojko/" target="_blank" rel="noopener"
>Gojko Adzic&lt;/a>设想工具直接集成至平台，提供体验分析和预测模型，主动预判问题。这在管理海量用户数据（含长尾用例）时价值凸显，AI在数据模式识别中发挥关键作用。&lt;/p>
&lt;p>这种右移方法通过强调部署后质量保障，与传统左移方法论形成互补。潜在收益包括：&lt;/p>
&lt;ul>
&lt;li>通过&lt;strong>主动监控&lt;/strong>减少用户报障&lt;/li>
&lt;li>通过&lt;strong>优化高价值用户流&lt;/strong>提升功能采用率&lt;/li>
&lt;li>基于真实使用模式的&lt;strong>数据驱动决策&lt;/strong>改善测试覆盖&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="全民皆qa人机协同">全民皆QA：人机协同 &lt;a id="trend3">&lt;/a>
&lt;/h2>&lt;p>随着代理型AI和端到端自治质量平台（后文详述）的采用，2025年软件测试将发生剧变。低代码/无代码工具结合AI，使测试突破传统壁垒，让业务分析师、开发者甚至非技术背景的利益相关方都能参与质量保障。网络研讨会投票显示**74%**参与者自认AI新手，凸显降低使用门槛的工具需求。&lt;/p>
&lt;p>直观的低代码解决方案通过自动化测试创建和缺陷检测等复杂任务，降低学习曲线，加速工具采用。调查显示**32.3%**团队积极尝试无代码测试方案。&lt;/p>
&lt;p>同时，人类监督仍不可或缺。正如&lt;a class="link" href="https://testguild.com/podcast/automation/a522-tobias/" target="_blank" rel="noopener"
>Tobias Müller&lt;/a>所言：&amp;ldquo;重点已非是否信任AI，而是设定边界并信任所设规范。&amp;ldquo;结合人类经验与AI的团队展现出更优缺陷检测和更快测试周期，证明人机协同的重要性。&lt;/p>
&lt;hr>
&lt;h2 id="测试者角色进化适应未来">测试者角色进化：适应未来 &lt;a id="trend4">&lt;/a>
&lt;/h2>&lt;p>测试者正转型为融合传统技能与AI、DevOps、自动化知识的复合型角色。调查数据印证这一转变：&lt;/p>
&lt;ul>
&lt;li>45%团队强调AI技能需求&lt;/li>
&lt;li>51.8%优先考虑DevOps知识&lt;/li>
&lt;li>72.3%聚焦自动化专长&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="devops与sre整合持续质量">DevOps与SRE整合：持续质量 &lt;a id="trend5">&lt;/a>
&lt;/h2>&lt;p>测试与DevOps及站点可靠性工程（SRE）实践的整合，是2025年最显著的自动化测试趋势。随着企业日益重视持续交付和运营韧性，测试正进化为主动的、贯穿软件生命周期的质量保障活动。&lt;/p>
&lt;p>调查数据显示显著转变：截至2024年，**51.8%**团队采用DevOps实践（2022年仅16.9%）。这种增长印证测试与DevOps/SRE工作流的深度整合，以保障高速交付下的软件质量。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-2.png"
width="1489"
height="568"
srcset="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-2_hu_a7209be5e9f85952.png 480w, https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-2_hu_89683b652da6dffb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/p>
&lt;p>这种整合超越传统QA，转变为提升全生命周期的持续活动，帮助企业：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>加速反馈循环&lt;/strong>：CI/CD管道嵌入测试，即时发现问题&lt;/li>
&lt;li>&lt;strong>实施主动质量保障&lt;/strong>：工作流整合性能测试与监控，提前识别风险&lt;/li>
&lt;li>&lt;strong>促进团队协作&lt;/strong>：质量共担机制改善QA、开发与运维团队协作&lt;/li>
&lt;/ul>
&lt;p>调查数据清晰支持此趋势。从流水线自动化到性能监控，团队正采用与卓越运营目标一致的持续质量实践。若您的组织尚未整合测试与DevOps/SRE，2025年正是转型良机。&lt;/p>
&lt;hr>
&lt;h2 id="端到端e2e自治质量平台">端到端（E2E）自治质量平台 &lt;a id="trend6">&lt;/a>
&lt;/h2>&lt;p>E2E平台正成为测试战略核心。这些平台整合测试、可用性、性能、无障碍访问和安全性于统一框架，应对更广泛的质量问题。通过AI自动化测试生命周期，团队反馈缺陷检测和测试覆盖显著提升。&lt;/p>
&lt;p>调查数据显示显著增长：&lt;/p>
&lt;ul>
&lt;li>安全测试从2021年8.2%增至2024年39.5%&lt;/li>
&lt;li>性能测试采用率达41%&lt;/li>
&lt;li>API测试从2021年13.1%增长至2024年46.2%&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409230826.png"
width="1365"
height="663"
srcset="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409230826_hu_4d6ba26bdca4808c.png 480w, https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409230826_hu_7e889e6d25a4b9c0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="494px"
>这些指标反映企业对综合质量平台管理全测试需求的依赖度提升。&lt;/p>
&lt;hr>
&lt;h2 id="playwright首选自动化工具">Playwright：首选自动化工具 &lt;a id="trend7">&lt;/a>
&lt;/h2>&lt;p>正如笔者去年预测，Playwright已成为众多测试者首选工具。根据&lt;a class="link" href="https://testguild.com/playwright-cypress-ai/" target="_blank" rel="noopener"
>Playwright超越Cypress（未来展望）&lt;/a>文中分析，这一预测已被验证。&lt;/p>
&lt;p>当前进展？凭借卓越的多功能性、可靠性和性能，Playwright在2025年持续巩固其领先地位。TestGuild 2024年调查及社区反馈显示其显著增长。&lt;/p>
&lt;p>测试工具偏好呈现重大转变（2018-2024数据分析）：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-3.png"
width="1467"
height="516"
srcset="https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-3_hu_c408c68fb9c92883.png 480w, https://chengxiaqiucao.github.io/post/074-%E6%9C%80%E6%96%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%B6%8B%E5%8A%BF2025/Pasted-20250409-3_hu_c3c6e4021fe20496.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="682px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Playwright&lt;/strong>：45.1%采用率使其成为增长最快工具，优势包括跨浏览器支持、API测试能力和高效工作流&lt;/li>
&lt;li>&lt;strong>Selenium&lt;/strong>：曾为市场领导者，现采用率下降至22.1%，因团队追求更高效稳定方案&lt;/li>
&lt;li>&lt;strong>Cypress&lt;/strong>：坚守前端测试领域，保持14.4%稳定用户群&lt;/li>
&lt;/ul>
&lt;p>Playwright用户普遍反馈：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>更快测试执行&lt;/strong>：加速反馈循环，改进开发生命周期&lt;/li>
&lt;li>&lt;strong>更低测试波动性&lt;/strong>：产出更稳定可靠的测试结果&lt;/li>
&lt;/ul>
&lt;p>除初始的UI浏览器自动化功能外，Playwright已进化支持&lt;strong>API测试&lt;/strong>等高级能力，成为现代测试需求的综合解决方案。&lt;/p>
&lt;hr>
&lt;h2 id="2025年测试者必备编程语言">2025年测试者必备编程语言 &lt;a id="trend8">&lt;/a>
&lt;/h2>&lt;p>根据&lt;a class="link" href="https://www.tiobe.com/tiobe-index/" target="_blank" rel="noopener"
>TIOBE编程社区指数&lt;/a>，Python连续两年蝉联榜首。这与我预期一致——Python凭借简洁性、强大库支持及在AI/机器学习领域的主导地位，仍是2025年测试者首选语言。无论您是初学自动化还是资深测试专家，Python都是衔接当下挑战与未来自动化测试可能性的桥梁。&lt;/p>
&lt;hr>
&lt;h2 id="总结2025年自动化测试成功之道">总结：2025年自动化测试成功之道 &lt;a id="summary">&lt;/a>
&lt;/h2>&lt;p>2025年将成为软件测试关键转折年，为拥抱变革者提供空前机遇。AI成熟度、团队协作与工具演进的融合，标志着质量保障新纪元的开启。&lt;/p>
&lt;p>成功不仅需要关注趋势，更需行动：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>拥抱代理型AI&lt;/strong>：探索自主AI代理如何优化工作流，降低人工干预&lt;/li>
&lt;li>&lt;strong>采用右移测试实践&lt;/strong>：平衡传统左移方法与部署后监控，确保软件符合真实用户期望&lt;/li>
&lt;li>&lt;strong>投资技能发展&lt;/strong>：为团队配备AI、自动化与DevOps知识以保持竞争力&lt;/li>
&lt;li>&lt;strong>测试与DevOps/SRE整合&lt;/strong>：打破孤岛，将质量保障融入交付各阶段&lt;/li>
&lt;li>&lt;strong>善用综合工具&lt;/strong>：从Playwright到Python，选择满足当前需求并面向未来的工具&lt;/li>
&lt;/ul>
&lt;p>这些趋势预示着质量保障方式的根本转变。随着测试、开发与运维界限的模糊，现代测试者角色正进化为战略要职。欲深度掌握变革趋势，欢迎参加年度&lt;strong>Automation Guild大会&lt;/strong>，与行业领袖共同塑造测试未来。&lt;/p>
&lt;p>2025创新之路已铺就，您是否已准备好引领变革？&lt;/p>
&lt;hr></description></item><item><title>测试人员伤害质量的十大误区</title><link>https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/</link><pubDate>Fri, 28 Mar 2025 15:59:08 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA.png"
width="900"
height="383"
srcset="https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA_hu_588289c4d5a18079.png 480w, https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA_hu_97ec78e79daba015.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="563px"
>&lt;/p>
&lt;p>很多企业会把承担测试的工程师称为QA（quality assurance），但QA和Tester其实是两个不同的岗位，但不可否认，测试工程师的主要职责也是面向质量的，是通过评估质量状态来帮助团队进行质量改进的。&lt;/p>
&lt;p>但即便这样，测试工程师的工作就一定是对质量改进有帮助的吗？在实际工作中，有些误区反而会让测试人员的工作对质量产生负面影响。&lt;/p>
&lt;p>这里秋草梳理总结了测试人员可能伤害质量的十大误区，以及对应的正确做法。&lt;/p>
&lt;h2 id="1-测试的职责是发现并汇报bug但不是确认">1. 测试的职责是发现并汇报Bug，但不是确认
&lt;/h2>&lt;p>&lt;strong>误区：经常有开发同学和测试同学就某个问题是否应该报Bug进行争论， “需求中没要求”， “这个问题不影响用户使用” 等等是经常出现的理由。很多测试同学也确实会因为这些原因不再报这些问题，甚至在报Bug前会去和开发确认能不能报。&lt;/strong>&lt;/p>
&lt;p>这是一个对质量伤害极大的误区。测试的价值在于评估质量状态，而评估的关键在于独立性。质量没有对错，只有好坏。需求中没定义的行为，不代表就是不需要的；不影响用户使用也不代表就是好的实现。测试是站在评估质量的视角，指出缺陷或者提出优化建议都是分内工作。开发则负责分析、认定并解决缺陷。如果开发和测试在认定上有分歧，还有PO或业务分析师、CCB成员可以进行仲裁。&lt;/p>
&lt;p>但对于测试人员来说，汇报&lt;strong>一切&lt;/strong>觉得有问题或者质量不好的产品行为则是工作义务。有意或无意去隐瞒或掩盖缺陷，才是对产品质量真正的伤害。&lt;/p>
&lt;h2 id="2-发现bug只是开始还应为修复bug提供尽可能多的上下文">2. 发现Bug只是开始，还应为修复Bug提供尽可能多的上下文
&lt;/h2>&lt;p>&lt;strong>误区：有的测试同学会认为我发现了问题，并且也进行了报告，那么工作就已经完成，后续修复过程与我无关，只需修复后进行验证即可&lt;/strong>&lt;/p>
&lt;p>测试是整个软件产品研发生命周期中的一个环节，最终是为产品整体质量服务的。而Bug本身其实对产品是无价值的，因为只有解决掉的Bug才会对产品质量有帮助。 从这个角度来说，虽然报告Bug是测试人员的主要工作，但对产品来说，最终解决Bug才是目的。所以测试作为产品研发的一环，即便解决Bug不是测试直接负责，但我们也应该为解决Bug提供必要的支撑。&lt;/p>
&lt;p>这部分在之前地文章 【】中有详细探讨，大家有兴趣可以参阅&lt;/p>
&lt;h2 id="3-测试不只是验证需求">3. 测试不只是验证需求
&lt;/h2>&lt;p>&lt;strong>误区：测试只要将需求中明确定义的部分进行验证无误即可，未定义的部分无需测试&lt;/strong>&lt;/p>
&lt;p>这里和第一个误区有些关联，是很多开发和测试争论bug的前提。在前文 【】中我们对测试目标的认识误区中，也说过这一点。就是测试除了验证需求之外，还有更多探索性工作应该覆盖。测试并不止是检查。&lt;/p>
&lt;p>而除此之外，这里我还想更要强调产品的整体性、系统性。特别是在敏捷研发模式下，这个误区很容易被扩大。&lt;/p>
&lt;p>在敏捷中，敏捷迭代的输出是Increment（产品增量），这个对开发工作是成立的。但测试工作是面向整个产品系统的，并不能只覆盖增量部分。需求也是增量的，所以当然不能仅覆盖增量部分的需求，这就是为什么回归测试是测试中必须包含的范畴，也是自动化测试越来越受重视的根本原因。（关于敏捷相关的分析介绍可以参看之前敏捷系列）&lt;/p>
&lt;h2 id="4-测试无止境好钢用在刀刃上">4. 测试无止境，好钢用在刀刃上
&lt;/h2>&lt;p>&lt;strong>误区：要想更多发现Bug，尽量探索、发散，并利用Bug的集群效应，尽可能多地发现Bug&lt;/strong>&lt;/p>
&lt;p>还是在 【】一文中，我们也澄清过，测试的目标也并不是为了发现更多Bug。而且测试其实无止境的，测试最终的目的是对整个产品或系统提供一个可靠、完整的质量状态评估。而这个质量状态是否客观准确，跟Bug的多少其实并不一定是一个正相关的关系。&lt;/p>
&lt;p>测试在尽可能发现Bug的同时，还是认识到，我们是要系统地对质量进行评估，但测试又是无法穷尽的，所以必须要把有限的时间进行科学地分配，优先关注高优先的部分，比如新功能、代码出现变更、高风险模块这些都是应该优先进行测试并重点保证的部分。&lt;/p>
&lt;p>&lt;code>精准测试&lt;/code>、&lt;code>基于风险的测试RBT&lt;/code>等都是这种思路下，把我们的测试资源、时间优先放到高价值部分的实践。&lt;/p>
&lt;h2 id="5-测试工作不是提测才开展从产品需求讨论就已经开始">5. 测试工作不是提测才开展，从产品需求讨论就已经开始
&lt;/h2>&lt;p>&lt;strong>误区：测试应该在产品提测以后才能正式展开，Bug也应该在提测以后才应该报告&lt;/strong>&lt;/p>
&lt;p>在当今，以上误区当然是不正确的，因为不管是&lt;code>测试左移&lt;/code>还是各种测试理论都强调了测试早期参与的重要性。&lt;/p>
&lt;p>但理论归理论，实际实践中，测试通常还是在提测以后才真正开展工作。&lt;/p>
&lt;p>一方面是产品前期，测试的存在感低，参与度低，容易被忽视；&lt;/p>
&lt;p>另一方面，很多测试团队的考核重Bug数量，这其实更加消磨了测试早期参与的积极性，导致测试并不太愿意在早期协助团队暴露产品的问题。&lt;/p>
&lt;p>但从产品交付角度，越是后期，问题修复的成本就越高。所以从产品管理来说，摒弃以Bug考核的导向，引导测试前期的积极参与，测试可以发挥其对问题的敏感度，从需求讨论开始就能识别、考虑到很多异常场景，并帮助团队提前规避。&lt;/p>
&lt;h2 id="6-设计和架构讨论测试不应是小透明">6. 设计和架构讨论，测试不应是小透明
&lt;/h2>&lt;p>&lt;strong>误区：架构和系统设计、详细设计是开发团队的任务，测试无需了解或参与讨论，等待产品开发完成后根据需求进行测试即可&lt;/strong>&lt;/p>
&lt;p>和上一条类似，&lt;code>测试左移&lt;/code>并不只是说测试更多了解需求，同样也要求测试参与到设计、甚至编码环节。&lt;/p>
&lt;p>还是要谈测试的目标：是要尽可能准确评估出产品的质量状态。而质量必然是和产品的具体实现紧密相关的，对产品的实现细节了解得越清晰，那么在测试时就越能够有的放矢，也包括可以在设计、编码阶段就提前帮助团队规避质量问题。&lt;/p>
&lt;p>相反，如果对设计、代码完全是黑盒，很可能遗漏掉一些关键的测试场景导致问题泄露。&lt;/p>
&lt;ul>
&lt;li>不了解云应用的负载均衡机制实现，只在单节点上验证，就无法验证负载均衡失效导致的问题&lt;/li>
&lt;li>不了解系统的缓存实现机制，就难以针对性地去构建缓存命中场景&lt;/li>
&lt;li>不了解界面的响应式适配实现，就难以高效地进行完成兼容性测试&lt;/li>
&lt;li>不了解接口的校验机制，就难以构造有效的接口测试数据&lt;/li>
&lt;/ul>
&lt;p>以上种种，都是测试不应该游离于设计环节之外，认为产品设计不属于测试范畴而忽略对这个环节的参与&lt;/p>
&lt;h2 id="7-独立的测试环境是充分测试的前提">7. 独立的测试环境是充分测试的前提
&lt;/h2>&lt;p>&lt;strong>误区：测试执行只需要关注产品本身，可以在集成环境甚至开发环境上进行测试，并不影响测试效果&lt;/strong>&lt;/p>
&lt;p>确实，测试的对象是产品本身。但测试环境其实是能否对产品进行全面、高效测试的一个关键制约。&lt;/p>
&lt;p>软件测试和探索过程中，对产品的使用，通常是很多不同的操作、交互的相互叠加。而在发现产品问题时，对问题的判断，一个重要的前提就是产品本身的相关前置条件、关联因素是清晰、明确的。而要保证这一点，一个独立、无干扰的测试环境就尤为必要。如果使用开发环境来进行测试，在测试同时，开发人员同时也在环境上进行调测、变更，不仅会增加大量无效问题的出现，也是对测试、问题定位等资源的极大浪费。&lt;/p>
&lt;p>除此之外，测试中，不可避免还有各种异常场景的营造，而一个独立的测试环境，更便于测试人员调整不同的测试场景，比如：&lt;/p>
&lt;ul>
&lt;li>修改网络配置，营造代理访问、内外部IP、弱网等场景&lt;/li>
&lt;li>修改系统时间、定时任务触发、模拟不同时段数据等场景&lt;/li>
&lt;li>模拟资源不足、空间占满、海量或巨大文件等场景&lt;/li>
&lt;li>产品中的部分限制因素，开启Debug模式、不同的鉴权设定、各种配置变更&lt;/li>
&lt;/ul>
&lt;p>这些测试都是建立在一个独立、可控的测试环境基础上的。&lt;/p>
&lt;h2 id="8-自动化测试代码也是程序像对待产品一样对待测试代码">8. 自动化测试代码也是程序，像对待产品一样对待测试代码
&lt;/h2>&lt;p>&lt;strong>误区：编写自动化测试，就是为了替代部分手工测试的执行，完成自动化代码部分的编写，让它能执行并覆盖相关用例即可&lt;/strong>&lt;/p>
&lt;p>自动化测试的目的确实是为了代替很多人工测试工作，达到效率提升的目的。但自动化测试的实施并非一锤子买卖，它也是一个长期的过程。而且自动化测试，本身也是通过程序代码来实现，是程序就会有bug，因此对自动化测试脚本、工具本身的质量保证和维护也是测试人员的重要工作。&lt;/p>
&lt;p>并不是我们编写出一个可跑的自动化脚本就是进行了自动化。对自动化脚本同样要像软件产品一样经过需求分析、设计、编码、测试以及后续的维护这样的生命周期。&lt;/p>
&lt;p>所以自动化测试本身也是一个较大投入，要让相关脚本长期发挥作用并真正起到提升执行效率的目的，那么对自动化测试代码的良好设计和持续维护就必不可少。&lt;/p>
&lt;h2 id="9--cicd管道同样也是测试的职责">9. CI/CD管道同样也是测试的职责
&lt;/h2>&lt;p>&lt;strong>误区：CI/CD作为现在很多研发团队的基础设施，通常会有专门的DevOps工程师负责搭建、维护，作为测试人员，负责其中自动化测试部分脚本的编写即可&lt;/strong>&lt;/p>
&lt;p>诚然，整个CI/CD管道中，和测试直接相关的部分主要就是自动化测试。但还是那句话：测试作为整个研发过程的一分子，是不可能独立于研发过程之外的。特别是敏捷研发中，更加强调团队的整体性，团队整体对研发过程负责。&lt;/p>
&lt;p>所以CI/CD管道建立、运作和保持畅通的过程，并不存在明显的测试只需要负责自动化测试环节的说法。&lt;/p>
&lt;p>作为质量视角的专业人员，在CI/CD管道建设中，我们也可以发挥更多的作用：&lt;/p>
&lt;ul>
&lt;li>定义管道中各个环节流转的质量门禁，将测试左移反映到CI/CD管道中&lt;/li>
&lt;li>代码变更的管控和识别，这部分对于测试阶段的精准测试，意义重大&lt;/li>
&lt;li>包括开发环境、集成环境、测试环境以至线上生产环境的监控，特别是很多质量相关指标的收集实现&lt;/li>
&lt;li>可视化，包括自动化测试报告、各种数据跟踪的状态呈现等&lt;/li>
&lt;/ul>
&lt;h2 id="10-珍惜所有了解终端用户使用场景的机会">10. 珍惜所有了解终端用户使用场景的机会
&lt;/h2>&lt;p>&lt;strong>误区：作为研发团队成员，测试无须主动接触终端用户。和用户对接更多是销售、售后、客服团队的工作&lt;/strong>&lt;/p>
&lt;p>测试工作面向质量，而质量的最终判断，其实是终端用户。所以很多团队都强调，测试是终端用户的代言人，是要站在用户视角来使用、体验产品并提前发现问题的角色。&lt;/p>
&lt;p>因此，从这个意义上，测试其实应该更多地去接触用户，了解用户使用产品的不同场景，诉求以至偏好。&lt;/p>
&lt;p>所以，在有机会接触用户的场景下，测试应该是主动而非抗拒。作为测试，这方面的机会还是比较多的，充分利用和用户接触的机会，丰富我们对于产品所属行业的理解并应用到我们的测试工作中来。&lt;/p>
&lt;ul>
&lt;li>用户问题支持。在一些反馈到研发团队的客户问题，需要提供技术支持时，作为测试，是经常会要直接面向客户的，这时也是我们直观了解用户对产品使用场景和面临问题的地方。&lt;/li>
&lt;li>对外测试。很多用户在选择产品前，都会有针对产品的验收测试。这些测试往往在客户方进行，但产品测试人员往往会作为产品方来提供支持或实施测试，也就是外场测试。这也是一个很好的深入了解用户场景的窗口&lt;/li>
&lt;li>客户拜访。有的企业在产品研发初期或过程中，会安排和终端客户的拜访、访谈，有时也会邀请研发团队参与，虽然大多情况下是系统分析师、架构等角色参与更多，但测试也会参与到此类拜访中，这是在初期就深入了解产品应用场景的一个绝佳机会。&lt;/li>
&lt;li>行业报告。除了直接和终端客户的沟通外，关注产品所属行业的行业报告、资讯和趋势分析等资料，同样也是一个深入理解产品所处行业和用户的上佳渠道。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>以上就是对测试人员伤害质量十大误区的梳理总结，欢迎大家讨论补充。
另外秋草关于测试技能体系化提升的课程，可以回复 &lt;strong>“大纲”&lt;/strong> 或在公众号菜单中查看课程目录。&lt;/p></description></item><item><title>AI时代的软件测试，助手还是对手？</title><link>https://chengxiaqiucao.github.io/post/070-ai%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%8B%E8%AF%95/</link><pubDate>Tue, 25 Mar 2025 21:38:36 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/070-ai%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>当下时代，AI浪潮呼啸而至，未来已来已不是一句空话。和AI相关的话题、讨论也成了科技圈的“流量密码”，从自动驾驶到智能客服，每个行业似乎都在蹭这波AI的热度。&lt;/p>
&lt;p>但作为测试从业者，我们在面对 AI 的快速发展时，大家更关心的可能是：&lt;strong>AI在软件测试里到底能干啥？真的能帮我们提高产出、效率吗？或者发展下去，AI会否彻底替代测试岗位？&lt;/strong>&lt;/p>
&lt;p>本篇我们就来探讨下这个话题&lt;/p>
&lt;h2 id="ai在软件测试不同阶段中的角色">AI在软件测试不同阶段中的角色
&lt;/h2>&lt;p>AI测试，归根到底，还是希望它承担部分或者辅助、提升原来的测试工作，也就是说，AI本身，并不会改变软件研发的测试生命周期规律。&lt;/p>
&lt;p>所以，我们可以从软件测试生命周期的不同阶段，测试工作职责范围的角度，来看AI可以发挥哪些作用。&lt;/p>
&lt;h3 id="需求分析阶段">需求分析阶段
&lt;/h3>&lt;p>这个阶段，我们可以基于AI的自然语言处理技术，对原始需求文档进行梳理，输出包括业务流程图、操作流图、数据流向等分析结果。&lt;/p>
&lt;p>同时也可以结合更多关联的本地数据，如历史Bug数据、测试日志、项目数据等，识别测试的优先级并构建风险模型，识别风险。并基于这些分析结果，帮助我们更合理地制定测试计划。&lt;/p>
&lt;h3 id="测测试用例设计阶段">测测试用例设计阶段
&lt;/h3>&lt;p>在软件设计和开发阶段，测试人员通常也会同步完成测试设计，这个阶段，我们可以利用 AI 帮助我们基于需求文档和需求分析阶段的成果，完成测试用例的生成，基于AI可以完成更多更充分的正向、反向用例以及各种边界条件以扩大覆盖范围。&lt;/p>
&lt;h3 id="测试准备阶段">测试准备阶段
&lt;/h3>&lt;p>这阶段，最主要的工作是测试环境的搭建部署，可以利用AI能力结合CI平台实现测试服务器、数据库的环境智能化管理和资源的动态调配等工作。&lt;/p>
&lt;h3 id="测试执行阶段">测试执行阶段
&lt;/h3>&lt;p>执行阶段，可以基于各种风险评估、依赖关系及业务影响等因素动态调整测试顺序，优先覆盖更高风险的模块，实现缺陷尽早暴露的目的。&lt;/p>
&lt;p>另外，也可以通过AI增强如日志分析、图像比对等能力，提升我们的测试执行效率和缺陷发现能力。&lt;/p>
&lt;h3 id="测试报告阶段">测试报告阶段
&lt;/h3>&lt;p>在测试的收尾部分，利用AI针对各种过程数据的综合分析，可以帮助我们出具多维度的测试报告，为项目决策者提供结构化的测试状态分析。&lt;/p>
&lt;h2 id="现阶段-ai-如何赋能软件测试">现阶段 AI 如何赋能软件测试
&lt;/h2>&lt;p>目前的AI的发展，已经可以在很多典型的测试场景下提供更多支持，以下梳理了可以通过AI赋能的一些典型场景&lt;/p>
&lt;ul>
&lt;li>&lt;strong>智能数据生成&lt;/strong>：创建多样化数据集，覆盖常规场景与边缘用例&lt;/li>
&lt;li>&lt;strong>自动化测试&lt;/strong>：自动适应UI变更，保证自动化测试脚本稳定性&lt;/li>
&lt;li>&lt;strong>精准回归测试&lt;/strong>：基于代码变更智能选取关联测试用例&lt;/li>
&lt;li>&lt;strong>流程克隆&lt;/strong>：学习测试工作流后自动执行相似流程&lt;/li>
&lt;li>&lt;strong>动态等待机制&lt;/strong>：智能判断页面加载状态后执行操作&lt;/li>
&lt;li>&lt;strong>日志智能分析&lt;/strong>：分析、识别错误日志中的潜在问题模式&lt;/li>
&lt;li>&lt;strong>负载/性能测试&lt;/strong>：模拟真实用户行为、诊断性能瓶颈&lt;/li>
&lt;li>&lt;strong>持续测试监控&lt;/strong>：实时监测应用状态并预警异常&lt;/li>
&lt;li>&lt;strong>探索性测试支持&lt;/strong>：在探索测试过程中提供智能化建议&lt;/li>
&lt;li>&lt;strong>预测性分析&lt;/strong>：基于历史数据预测版本发布风险&lt;/li>
&lt;/ul>
&lt;h2 id="引入ai的优势">引入AI的优势
&lt;/h2>&lt;p>AI 可以通过持续地学习、训练并不断提升，因此引入AI后，可以在以下诸多方面建立起优势：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>成本优化&lt;/strong>：可以降低人工成本，优化资源配置，加速产品上市&lt;/li>
&lt;li>&lt;strong>稳定可靠&lt;/strong>：确保测试的标准化执行与结果一致性&lt;/li>
&lt;li>&lt;strong>缺陷早筛&lt;/strong>：提前暴露问题，缩短修复周期&lt;/li>
&lt;li>&lt;strong>快速反馈&lt;/strong>：多环境并行测试，缩短反馈链路&lt;/li>
&lt;li>&lt;strong>高质量用例&lt;/strong>：自动生成单元测试、回归测试、API测试等多样化用例&lt;/li>
&lt;/ul>
&lt;h2 id="应用ai依然存在巨大的挑战">应用AI依然存在巨大的挑战
&lt;/h2>&lt;h3 id="人工智能还是人工智障">&lt;strong>人工智能还是“人工智障”&lt;/strong>
&lt;/h3>&lt;p>AI的训练数据如果有偏差，结果可能离谱到让你怀疑人生。如果AI的训练结果不理想，那么AI的应用可能不仅无法提升效率，反而还会浪费大量额外的资源去校正它的执行结果。&lt;/p>
&lt;h3 id="数据依赖症">&lt;strong>数据依赖症&lt;/strong>
&lt;/h3>&lt;p>AI 对于优质训练数据和各种参数调整的高要求，往往对具体行业的实际落地应用形成很大制约。&lt;/p>
&lt;h3 id="维护成本比想象中高">&lt;strong>维护成本比想象中高&lt;/strong>
&lt;/h3>&lt;p>不止是数据资源的投入，对本地数据集的模型训练也需要投入大量时间与资金，包括设备资源也是较大的开支。另外现阶段AI人才的缺口，也让AI应用的人力成本高出一大截&lt;/p>
&lt;h3 id="经验和直觉ai永远学不会">&lt;strong>经验和直觉，AI永远学不会&lt;/strong>
&lt;/h3>&lt;p>经验丰富的老测试人通过各种蛛丝马迹可以嗅出产品中一些隐性的缺陷，这种类似第六感的“玄学”，AI必然难以复制。&lt;/p>
&lt;h2 id="助手还是对手">助手还是对手？
&lt;/h2>&lt;p>“AI这么发展，测试工程师是不是要失业了？” &lt;strong>其实大可不必惊慌！&lt;/strong>&lt;/p>
&lt;p>AI的本质还是工具，就像通过自动化测试取代部分手工的校验一样，它只会改变部分工作方式，而非淘汰岗位。未来的测试人员更像是“AI训练师+策略指挥官”——我们需要做的其实就是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>教会AI理解业务逻辑&lt;/strong>（比如什么是“正确的订单状态流转”）；&lt;/li>
&lt;li>&lt;strong>设计更聪明的测试策略&lt;/strong>（比如如何平衡自动化与探索性测试）；&lt;/li>
&lt;li>&lt;strong>解读AI的结果并决策&lt;/strong>（比如某个异常到底是Bug还是误报）。&lt;/li>
&lt;/ul>
&lt;p>AI就像扫地机器人，能帮你清理地面，但遇到顽固污渍（复杂业务场景）、家具布局变化（需求变更），还是得你亲自出马。&lt;/p>
&lt;h2 id="结语ai不是终点而是新起点">结语：AI不是终点，而是新起点
&lt;/h2>&lt;p>AI在软件测试中的应用还处于起步期，我们可以看到它的巨大潜力，但还不到能完全信赖并放弃原有模式的时候。作为测试人员，与其焦虑“会不会被取代”，不如主动拥抱变化：学点机器学习基础知识，了解主流AI测试工具，甚至参与训练自己的模型。&lt;/p>
&lt;p>毕竟，&lt;strong>未来的软件测试江湖，最吃香的肯定不是“最会点鼠标的人”，而是“最会和AI打交道的人”&lt;/strong>。你说呢？&lt;/p>
&lt;hr>
&lt;p>部分前文也探讨过AI的发展，参考阅读&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/JkBcOzZpVEVJBtvZjE4vEQ?token=645759914&amp;amp;lang=zh_CN" target="_blank" rel="noopener"
>AI时代，程序员还有没有出路&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/k9Dj9eRBhehPtbMiIHnn9g" target="_blank" rel="noopener"
>测试职业和其发展前景&lt;/a>&lt;/p></description></item><item><title>软件测试中"可做但不应做"的一些陷阱</title><link>https://chengxiaqiucao.github.io/post/067-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%8F%AF%E5%81%9A%E4%BD%86%E4%B8%8D%E5%BA%94%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1/</link><pubDate>Tue, 18 Mar 2025 16:49:04 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/067-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%8F%AF%E5%81%9A%E4%BD%86%E4%B8%8D%E5%BA%94%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1/</guid><description>&lt;h2 id="软件测试中8-种-能做但不应该做-的工作">软件测试中，8 种 &lt;strong>”能做，但不应该做“&lt;/strong> 的工作
&lt;/h2>&lt;p>在软件测试中，我们常常会面临一个问题：很多工作确实是我们可以去做到的，似乎做这些事也理所当然，但很多时候，这些事情往往收效甚微。从过度自动化到频繁运行不必要的回归测试，不一而足。&lt;/p>
&lt;p>随着技术发展，测试人员手中拥有的工具让我们可以完成更多事情，但并不意味每个选择都是明智的。有些工作，盲目地去做，往往会影响真正重要的产出、效率、可维护性等要求。&lt;/p>
&lt;p>本文列举了在测试工作中八个“能做，但不应做”的工作。有时候，退一步可能是更聪明的选择。&lt;/p>
&lt;h3 id="1-自动化所有测试">1. 自动化所有测试
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 现代的测试自动化工具让我们几乎可以自动化任何测试用例，从用户界面的每一次点击到API的每一次调用，技术上来说，都可以通过自动化来进行驱动。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 仅仅因为可以实现自动化测试，却并不意味它是最佳选择。比如：&lt;/p>
&lt;blockquote>
&lt;p>某个产品的用户界面非常动态，设计师每周都会进行调整。如果你选择将所有测试都自动化，每次UI改动后，相关的自动化测试都可能面临失效的风险。&lt;/p>&lt;/blockquote>
&lt;p>这种情况下，&lt;strong>手动测试可能更有效&lt;/strong>。&lt;/p>
&lt;h3 id="2-自动化脚本中使用过于复杂的定位器">2. 自动化脚本中使用过于复杂的定位器
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> Selenium, Playwright 等自动化工具中，借助XPath和CSS选择器，我们能够精确定位到页面中最深层的元素。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 过于复杂的定位器往往会让测试变得脆弱。比如：&lt;/p>
&lt;blockquote>
&lt;p>使用复杂的XPath去定位一个菜单，但当开发团队重构HTML结构后，往往导致多个测试失败，团队不得不花费大量时间修复。&lt;/p>&lt;/blockquote>
&lt;p>这时，其他方法可能对自动化用例的稳定性更为有效，比如和开发团队&lt;strong>约定增加元素的 &lt;code>test-id&lt;/code> 属性&lt;/strong>。&lt;/p>
&lt;h3 id="3-每次提交都运行完整的回归测试">3. 每次提交都运行完整的回归测试
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 在现代CI/CD管道中，每次代码提交都可以轻松触发完整的回归测试。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 但实际上，这种做法往往是过度的。想象一下，一个小的代码修复导致整个回归测试运行，而这个过程可能需要几个小时，甚至更长时间。&lt;/p>
&lt;p>如果在没有将自动化覆盖率提升到一定程度的团队，这种提交后进行完整回归更是噩梦。更好的做法，其实还是及时掌握变更内容，并根据变更和影响实现&lt;strong>精准测试&lt;/strong>。&lt;/p>
&lt;h3 id="4-在api测试中过度模拟">4. 在API测试中过度模拟
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 模拟API响应可以大幅提高测试速度，消除对外部服务的依赖。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 然而，过度模拟会让我们失去与真实环境的连接。大量的Mock API 确实可以提升调试和验证效率，但却背离了真正的测试需要。&lt;strong>真实场景下的测试是不可或缺&lt;/strong>的，就像我们不能预知所有的异常一样&lt;/p>
&lt;h3 id="5-为琐碎问题撰写极其详细的缺陷报告">5. 为琐碎问题撰写极其详细的缺陷报告
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 借助辅助测试工具，我们可以捕捉到类似很多细小的UI层、提示信息等缺陷，也可以按照用例规范编写极为详尽的缺陷报告。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 并不是每个小问题都值得进行事无巨细地全面报告。发现Bug的目的最终是为了解决bug而不是bug本身，况且Bug的价值也有高下主次之分。我在 【】中其实对好的缺陷报告进行过分析，缺陷报告的价值是作为和开发沟通的渠道，报告八股文本身并无价值。&lt;/p>
&lt;h3 id="6-在没有人工监督的情况下使用ai生成测试用例">6. 在没有人工监督的情况下使用AI生成测试用例
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> AI的发展，其实已经可以做到，利用AI工具，基于需求文档快速生成大量测试用例，覆盖大量场景。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 然而，现阶段的AI，特别是针对特定的业务，缺乏人类的上下文理解以及各种内部沟通获取的综合信息，因而可能导致用例冗余或遗漏关键测试用例。&lt;/p>
&lt;h3 id="7-在测试中过多地使用断言">7. 在测试中过多地使用断言
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 结合自动化工具和AI，我们确实可以做到在一个测试中验证大量字段、属性和UI元素。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 然而，过多的断言只会让测试变得巨大且复杂，难以调试。当部分断言失败，往往需要耗费大量的精力去排查&lt;/p>
&lt;h3 id="8-在每个可能的设备和浏览器组合上执行测试">8. 在每个可能的设备和浏览器组合上执行测试
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 针对兼容性测试，现代的跨浏览器和跨设备测试工具让我们能够在许多操作系统和设备上运行测试。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 测试所有可能的组合既不必要也不切实际。重点是覆盖用户实际使用的关键场景。而且开发技术的发展如响应式编程等，也大大减少了兼容性问题的风险。&lt;/p>
&lt;h3 id="结语">结语
&lt;/h3>&lt;p>在软件测试中，“有能力做” 却并不总意味着是最佳选择。我们需要在技术能力和实际可行性之间找到平衡。通过避免这些“因为可以做到”的陷阱，去建立一个精简、高效且真正有价值的测试集，对产品的质量保障更有意义。&lt;/p>
&lt;p>欢迎关注秋草，持续带来更多软件质量相关技术干货！&lt;/p></description></item><item><title>Linux文本处理三剑客 Sed</title><link>https://chengxiaqiucao.github.io/post/061-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-sed/</link><pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/061-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-sed/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/061-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-sed/sed3.webp" alt="Featured image of post Linux文本处理三剑客 Sed" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>在本系列上一篇 【】，我们介绍了 Linux 三剑客中的 &lt;code>grep&lt;/code> 命令用法。而实际上，在三剑客中，&lt;code>grep&lt;/code> 只能算是小弟，它的作用更多只是通过正则表达式的加持，实现针对文本的模式查询。
而三剑客中，真正重量级的命令是 &lt;code>sed&lt;/code> 和 &lt;code>awk&lt;/code>, &lt;code>sed&lt;/code> 其实是 &lt;code>stream editor（流编辑器）&lt;/code> 的缩写，因此，sed 命令它其实是能够起到文本编辑器的作用。本篇我们就来介绍这个 &lt;strong>伪装成Linux命令的编辑器&lt;/strong> &lt;code>sed&lt;/code>&lt;/p>
&lt;h1 id="sed-命令概述">sed 命令概述
&lt;/h1>&lt;p>&lt;code>sed&lt;/code>命令的语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">sed -命令参数 &amp;#39;操作指令&amp;#39; 文本文件或管道输入
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>sed&lt;/code> 是一个行编辑器，这里的操作指令会按行来对文本进行处理&lt;/p>
&lt;h2 id="命令参数">命令参数
&lt;/h2>&lt;p>它的命令参数主要有如下一些：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>命令参数&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>含义&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>-n&lt;/strong>&lt;/td>
&lt;td style="text-align: center">关闭默认输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>-r&lt;/strong>&lt;/td>
&lt;td style="text-align: center">支持正则表达式扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>-i&lt;/strong>&lt;/td>
&lt;td style="text-align: center">直接对源文件进行操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>-e&lt;/strong>&lt;/td>
&lt;td style="text-align: center">指定操作指令（默认开启，可指定多个）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>-f&lt;/strong>&lt;/td>
&lt;td style="text-align: center">从文件读取操作指令&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="默认输出">默认输出
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;/root/p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 其实会显示passwd文件中所有行，其中包含root用户的行重复显示&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;/root/p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 加上-n参数，才会关闭sed本身的默认输出，这样才是通过p指令显示匹配的行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改原文件">修改原文件
&lt;/h3>&lt;p>实际工作中，&lt;code>-i&lt;/code> 参数是一个比较危险的参数，因为这个参数会直接修改原文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -i &lt;span class="s1">&amp;#39;/root/q&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这个操作会导致passwd文件中只包含有root用户这一行，因为指令q会在匹配到行后直接退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 而sed这时的输出内容会直接写入原文件&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较安全的做法，可以在使用&lt;code>-i&lt;/code>参数时指定一个备份文件, 也就是在 &lt;code>-i&lt;/code> 后指定一个备份文件的后缀名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -i.bak &lt;span class="s1">&amp;#39;/root/q&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这个操作虽然还是会修改passwd文件，但在修改前会备份一个.bak文件，便于恢复&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="多重指令">多重指令
&lt;/h3>&lt;p>&lt;code>sed&lt;/code> 命令的指令可以有多个，但又多个指令时，需要为每个指令指定一个&lt;code>-e&lt;/code>参数，如果只使用 1 个指令，则这个 &lt;code>-e&lt;/code> 可以忽略&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -e &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span> -e &lt;span class="s1">&amp;#39;/root/q&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># = 指令会输出当前处理行的行号&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我们想重复指定 &lt;code>-e&lt;/code> ，也可以通过 &lt;code>;&lt;/code> 组合指令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;/root/q&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 和通过 -e 多重指定效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="操作指令说明">操作指令说明
&lt;/h2>&lt;p>在上面的参数介绍中，我们其实已经使用了 如 &lt;code>p&lt;/code>, &lt;code>q&lt;/code> 等指令。&lt;/p>
&lt;p>而这个操作指令，其实是由两部分组成，也就是&lt;strong>寻址部分&lt;/strong>和&lt;strong>操作部分&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>寻址： &lt;code>sed&lt;/code>命令是行处理命令，寻址其实就是指定要处理的行&lt;/li>
&lt;li>操作： 针对匹配寻址规则的行要执行的操作&lt;/li>
&lt;/ul>
&lt;h3 id="寻址规则">寻址规则
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>寻址格式&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>含义&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>数字&lt;/strong>&lt;/td>
&lt;td style="text-align: center">指定行号匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>m~n&lt;/strong>&lt;/td>
&lt;td style="text-align: center">从m行开始，按步长n匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>$&lt;/strong>&lt;/td>
&lt;td style="text-align: center">匹配末行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>/regex/&lt;/strong>&lt;/td>
&lt;td style="text-align: center">按正则匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>m,n&lt;/strong>&lt;/td>
&lt;td style="text-align: center">从m行开始，匹配到n行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>m,+n&lt;/strong>&lt;/td>
&lt;td style="text-align: center">从m行开始，再匹配n行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;5p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示第 5 行内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;2~3p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示从第2行开始，步长3递进，即第 2,5,8,11,14.... 行内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;$p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示最后一行内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;/qiucao/p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示包含qiucao的行内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;5,8p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示第 5 行到第 8 行内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;5,+5p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示第 5,6,7,8,9,10行内容&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="操作指令">操作指令
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>操作指令&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>含义&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>p&lt;/strong>&lt;/td>
&lt;td style="text-align: center">&lt;strong>打印&lt;/strong>匹配行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>=&lt;/strong>&lt;/td>
&lt;td style="text-align: center">输出匹配行行号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>l&lt;/strong>&lt;/td>
&lt;td style="text-align: center">打印匹配行并显示&lt;strong>不可见字符&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>s&lt;/strong>&lt;/td>
&lt;td style="text-align: center">&lt;strong>正则表达式&lt;/strong>匹配和替换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>c&lt;/strong>&lt;/td>
&lt;td style="text-align: center">匹配行&lt;strong>整行&lt;/strong>替换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>a&lt;/strong>&lt;/td>
&lt;td style="text-align: center">在匹配行&lt;strong>后&lt;/strong>追加内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>i&lt;/strong>&lt;/td>
&lt;td style="text-align: center">在匹配行&lt;strong>前&lt;/strong>追加内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>d&lt;/strong>&lt;/td>
&lt;td style="text-align: center">&lt;strong>删除&lt;/strong>匹配行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>r&lt;/strong>&lt;/td>
&lt;td style="text-align: center">在匹配换行后追加内容（从文件中）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>w&lt;/strong>&lt;/td>
&lt;td style="text-align: center">将匹配行内容写入文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>q&lt;/strong>&lt;/td>
&lt;td style="text-align: center">匹配后退出，不再继续匹配&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;=;5p&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示所有行号并打印第 5 行内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;=;5l&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 和上条命令类似，但行末的结束符($)也会打印出来&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed -r &lt;span class="s1">&amp;#39;=;s/^m\w*/test/g&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 替换所有以m开头的用户名为test, 加/g的作用是在行内替换所有匹配字符，否则只替换第一个&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;5c\测试一下&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将第5行替换为 “测试一下”&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;5a\测试一下&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在第5行内容后追加一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;5i\测试一下&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在第5行内容前插入一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;5d&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除第5行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;5r test.txt&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 从test.txt中读取一行并添加到第5行后&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;5w test.txt&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将第5行内容写入到test.txt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="模式空间和保留空间">模式空间和保留空间
&lt;/h1>&lt;p>上面介绍的操作指令，主要是针对行内操作的一些指令。 我们既然说 &lt;code>sed&lt;/code> 其实是一个编辑器，那么对于多行的文本编辑操作，比如整行的复制、粘贴、剪切等，当然也是支持的。&lt;/p>
&lt;p>这就要说到 &lt;code>sed&lt;/code> 命令处理时，预留的两个内存空间了：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>模式空间&lt;/strong>： 存储当前处理行的内容，每完成一行的处理，处理完的内容放到这个空间中&lt;/li>
&lt;li>&lt;strong>保留空间&lt;/strong>： 用于临时存储数据，可以认为是像剪切板一样的一个缓存空间，用于不同行内容的交换。初始默认只有一个 &lt;code>\n&lt;/code> 回车符&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>操作指令&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>用法&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>h&lt;/strong>&lt;/td>
&lt;td style="text-align: center">将模式空间内容复制到保留空间，替换原内容(\n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>H&lt;/strong>&lt;/td>
&lt;td style="text-align: center">追加模式空间内容到保留空间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>g&lt;/strong>&lt;/td>
&lt;td style="text-align: center">保留空间内容复制到模式空间，覆盖原内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>G&lt;/strong>&lt;/td>
&lt;td style="text-align: center">保留空间内容追加到模式空间原内容后&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>x&lt;/strong>&lt;/td>
&lt;td style="text-align: center">交换模式空间和保留空间内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">n&lt;/td>
&lt;td style="text-align: center">立即读取下一行，并复制到模式空间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">N&lt;/td>
&lt;td style="text-align: center">立即读取下一行，并追加到当前模式空间（常用于行合并）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="示例">示例
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=;2h;3H;5x;8G&amp;#39;&lt;/span> /etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2h复制第2行到保留空间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 3H复制第3行并追加到现有保留空间后&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 5x将当前模式空间和保留空间进行交换，复制的内容替换了原第 5 行的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 8G将保留空间内容（原第5行模式空间内容）追加到当前模式空间即第8行内容后&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/061-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-sed/Pasted-20250313.png"
width="912"
height="750"
srcset="https://chengxiaqiucao.github.io/post/061-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-sed/Pasted-20250313_hu_78e15c06a8259f1b.png 480w, https://chengxiaqiucao.github.io/post/061-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-sed/Pasted-20250313_hu_ebdbabdd27bcb610.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="291px"
>&lt;/p>
&lt;h1 id="常用-sed-实操案例">常用 sed 实操案例
&lt;/h1>&lt;h2 id="1-删除空白行">1. 删除空白行
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -i &lt;span class="s1">&amp;#39;/^\s*$/d&amp;#39;&lt;/span> test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 正则匹配仅包含空白字符的行并删除&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-给文件添加行号">2. 给文件添加行号
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed &lt;span class="s1">&amp;#39;=&amp;#39;&lt;/span> test.txt &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;N;s/\n/\t/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 先用sed命令获取行号，或加到每行默认输出前一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过管道传递到后一个sed命令，通过 N 指令合并两行，并将 回车符替换为制表符&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-提取所有图片链接">3. 提取所有图片链接
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -nr &lt;span class="s1">&amp;#39;s/.*src=&amp;#34;(.*\.png).*/\1/p&amp;#39;&lt;/span> source.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 正则表达式匹配图片链接，利用正则表达式分组保存路径并替换原有整行内容&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-提取log中异常行">4. 提取log中异常行
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sed -n &lt;span class="s1">&amp;#39;/ERROR/{=;p}&amp;#39;&lt;/span> app.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 匹配日志中包含ERROR字样的行并打印输出行号&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="结语">结语
&lt;/h1>&lt;p>以上就是关于 linux 三剑客之 &lt;code>sed&lt;/code> 命令的系统梳理，后续还会继续带来 &lt;code>awk&lt;/code> 命令的总结！ 更多测试扩展技能，欢迎关注秋草的体系化提升课程，回复 &lt;code>大纲&lt;/code> 获取详细目录。&lt;/p></description></item><item><title>搞定正则表达式，告别新手村！</title><link>https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</link><pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250310.png" alt="Featured image of post 搞定正则表达式，告别新手村！" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>&lt;strong>正则表达式 （Regular Expression）&lt;/strong> 是一种强大的文本模式描述语言，可以通过简洁的符号组合描述复杂的字符串匹配规则。被广泛应用于数据验证、文本提取、日志分析等领域，在我们日常工作中发挥着重要的作用。&lt;/p>
&lt;p>软件行业从业，是否掌握正则表达式的使用，往往是区分菜鸟和老手的重要标识。 本文我们结合一些具体案例，详细梳理下正则表达式的应用，早日告别新手村！&lt;/p>
&lt;h1 id="正则表达式核心语法">正则表达式核心语法
&lt;/h1>&lt;p>学习正则表达式， 这里推荐一个非常直观的线上验证平台， &lt;a class="link" href="https://regex101.com" target="_blank" rel="noopener"
>https://regex101.com&lt;/a> , 对于我们练习和掌握正则语法非常有帮助。&lt;/p>
&lt;h2 id="普通字符和特殊字符">普通字符和特殊字符
&lt;/h2>&lt;p>正则表达式作为一个匹配规则。当然首先可以匹配各种普通字符。主要指各种中英文单词、字母、数字。此外正则表达式还会预留很多特殊字符，如 &lt;code>* ? + . () [] $ ^ \ |&lt;/code> 等，代表一些特别的匹配规则，而如果这些特殊字符我们需要看作普通字符进行匹配时，则需要使用 &lt;code>\&lt;/code> 符号进行转义，因此 &lt;code>\&lt;/code> 也称转义符。比如 &lt;code>\?&lt;/code> 就会匹配目标文本中的 &lt;code>?&lt;/code> 字符， &lt;code>\\&lt;/code> 则会匹配目标文本中的 &lt;code>\&lt;/code> 字符&lt;/p>
&lt;h2 id="量词符quantifiers">量词符（quantifiers）
&lt;/h2>&lt;p>量词符是用于控制匹配次数的符号：&lt;/p>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> 零次或多次（如 &lt;code>a*&lt;/code> 可匹配 &amp;ldquo;&amp;rdquo;, &amp;ldquo;a&amp;rdquo;, &amp;ldquo;aa&amp;rdquo;）&lt;/li>
&lt;li>&lt;code>+&lt;/code> 一次或多次（&lt;code>a+&lt;/code> 必须至少有一个a）&lt;/li>
&lt;li>&lt;code>?&lt;/code> 零次或一次（&lt;code>a?&lt;/code> 可匹配 &amp;quot;&amp;quot; 或 a）&lt;/li>
&lt;li>&lt;code>{n}&lt;/code> 精确匹配n次（&lt;code>{4}&lt;/code> 匹配4次）&lt;/li>
&lt;li>&lt;code>{m,n}&lt;/code> 匹配m到n次（含边界）&lt;/li>
&lt;li>&lt;code>{m,}&lt;/code> 匹配m到多次&lt;/li>
&lt;li>&lt;code>{,n}&lt;/code> 匹配零次到n次&lt;/li>
&lt;/ul>
&lt;p>另外，在正则表达式中，还有两种匹配模式&lt;/p>
&lt;ul>
&lt;li>&lt;strong>贪婪模式&lt;/strong>：这是默认模式，也就会在目标文本中，尽可能最长地去匹配符合规则的字符&lt;/li>
&lt;li>&lt;strong>惰性模式&lt;/strong>：而如果在量词后加&lt;code>?&lt;/code>则标记以惰性模式进行匹配，也就是尽可能少地去匹配符合规则的字符&lt;/li>
&lt;/ul>
&lt;p>举例来说：&lt;/p>
&lt;p>&lt;code>浮云长长长长长长长消&lt;/code>&lt;/p>
&lt;p>这个上联中有 7 个 &lt;code>长&lt;/code> 字，正则表达式 &lt;code>长{2,3}&lt;/code> 默认按贪婪模式匹配，会匹配到 2 次 &lt;code>长长长&lt;/code>， 而加上 &lt;code>长{2,3}?&lt;/code> 则会按尽量少的字符匹配，匹配到 3 次 &lt;code>长长&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-1.png"
width="1250"
height="531"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-1_hu_b95a4654bc51ae82.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-1_hu_6d84fb0f184894d2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;h2 id="元字符metacharacters">元字符（Metacharacters）
&lt;/h2>&lt;p>除量词符外，还有一类元字符，被预留构成正则表达式的基础特殊符号：&lt;/p>
&lt;ul>
&lt;li>&lt;code>\d&lt;/code> 匹配数字（等价于 &lt;code>[0-9]&lt;/code>）&lt;/li>
&lt;li>&lt;code>\D&lt;/code> 匹配非数字&lt;/li>
&lt;li>&lt;code>\w&lt;/code> 匹配单词，包括字母、数字和下划线（等价于 &lt;code>[A-Za-z0-9_]&lt;/code>）&lt;/li>
&lt;li>&lt;code>\W&lt;/code> 匹配非单词&lt;/li>
&lt;li>&lt;code>\s&lt;/code> 匹配空白符（空格/制表符/换行符）&lt;/li>
&lt;li>&lt;code>\S&lt;/code> 匹配非空白&lt;/li>
&lt;li>&lt;code>.&lt;/code> 匹配任意单个字符（默认不匹配换行符）&lt;/li>
&lt;li>&lt;code>|&lt;/code> 表示逻辑&amp;quot;或&amp;quot;&lt;/li>
&lt;/ul>
&lt;h2 id="位置限定符position-anchors">位置限定符（Position Anchors）
&lt;/h2>&lt;p>用于精准定位匹配位置：&lt;/p>
&lt;ul>
&lt;li>&lt;code>\b&lt;/code> 匹配单词边界（如 &lt;code>\bcat\b&lt;/code> 匹配完整单词）&lt;/li>
&lt;li>&lt;code>\B&lt;/code> 匹配非单词边界&lt;/li>
&lt;li>&lt;code>^&lt;/code> 匹配目标文本开头，多行模式下也匹配行首&lt;/li>
&lt;li>&lt;code>$&lt;/code> 匹配目标文本结尾，多行模式下也匹配行尾&lt;/li>
&lt;/ul>
&lt;p>举例来说:
在&lt;code>tester is good at testing&lt;/code> 中，用 &lt;code>^test&lt;/code> 就只会匹配到行首的 &lt;code>test&lt;/code>， 但&lt;code>testing&lt;/code> 中的&lt;code>test&lt;/code> 就不会匹配到， 而如果 &lt;code>test\b&lt;/code>，同样匹配不到任何结果，因为这段文本中 &lt;code>test&lt;/code>都不是单独的单词，&lt;code>test&lt;/code> 后不存在单词边界&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-2.png"
width="1273"
height="451"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-2_hu_47b16cd281a465bd.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-2_hu_2eecbf36b14f7a2e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-3.png"
width="1566"
height="414"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-3_hu_9765a6ec724de524.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-3_hu_efb327b0f19e9cd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="378"
data-flex-basis="907px"
>&lt;/p>
&lt;h2 id="字符类character-classes">字符类（Character Classes）
&lt;/h2>&lt;p>字符类用于批量匹配特定字符集合：&lt;/p>
&lt;ul>
&lt;li>&lt;code>[abc]&lt;/code> 匹配a/b/c中的任意字符&lt;/li>
&lt;li>&lt;code>[^abc]&lt;/code> 匹配不在集合中的字符&lt;/li>
&lt;li>范围表示法：&lt;code>[a-z]&lt;/code>（小写字母）、&lt;code>[A-Z]&lt;/code>（大写字母）、&lt;code>[0-9]&lt;/code>（数字）&lt;/li>
&lt;/ul>
&lt;p>下例中 &lt;code>[b-f]&lt;/code>， 就只匹配了目标字串中的 &lt;code>d,e&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-4.png"
width="1295"
height="668"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-4_hu_e9f0bbb6b826b273.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-4_hu_5a5c9b3afd591d18.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;h2 id="分组groups">分组（Groups）
&lt;/h2>&lt;p>分组是正则表达式中重要的技巧，用于对匹配规则进行分组，便于在后续的文本处理中提取匹配到的内容。 分组通过在表达式中将模式用 &lt;code>()&lt;/code> 框定来表示。&lt;/p>
&lt;p>比如指定一个字串&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">this is a &amp;#34;testtest&amp;#34; string to demo regex group!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="分组及其引用">分组及其引用
&lt;/h3>&lt;p>分组默认从 1 开始计数，也就是多个分组时，可以按顺序以 &lt;code>\1&lt;/code> &lt;code>\2&lt;/code> 来反向引用分组&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-5.png"
width="1542"
height="407"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-5_hu_aa6b934826982b04.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-5_hu_a33b88c01500c7fd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="378"
data-flex-basis="909px"
>&lt;/p>
&lt;p>这个例子，我们 通过 &lt;code>(is)(\s)\1\2&lt;/code> 指定了两个分组，组1 匹配 &amp;ldquo;is&amp;rdquo;， 组2匹配空白字符（这里是空格) ，然后用&lt;code>\1\2&lt;/code> 分别引用这两个组，最终其实就匹配了 &lt;code>&amp;quot;is&amp;quot;+空格&lt;/code> 连续出现了两次的情况&lt;/p>
&lt;h3 id="指定分组不进行引用">指定分组不进行引用
&lt;/h3>&lt;p>如果我们进行分组时，某个分组我们并不想在后续引用，那么可以使用 &lt;code>(?:pattern)&lt;/code> 来进行标记，指定当前分组在后续不会进行引用。 这时分组默认的提取序号中，就会忽略这一组不进行编号
。&lt;/p>
&lt;p>上例中，如果我们指定其中第二个分组不进行引用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(is)(?:\s)\1\2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时其实上例中的正则表达式就出现语法错误，无法完成匹配，因为这时第二个分组被忽略，而 &lt;code>\2&lt;/code> 进行引用，这时就会因为不存在出现模式错误&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-6.png"
width="1089"
height="285"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-6_hu_66b4953a99a239ba.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-6_hu_7dcf2714bff3884b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="382"
data-flex-basis="917px"
>&lt;/p>
&lt;h3 id="对分组进行注释">对分组进行注释
&lt;/h3>&lt;p>一些复杂的正则表达式，我们还可以在分组添加注释，起到对正则表达式进行说明的作用 &lt;code>(?#comment)(other group)&lt;/code>&lt;/p>
&lt;h3 id="分组命名">分组命名
&lt;/h3>&lt;p>除了默认用数字序号来引用分组，也可以通过给分组进行命名的方式： &lt;code>(?P&amp;lt;name&amp;gt;pattern)&lt;/code> 进行命名。
然后用&lt;code>(?P=&amp;lt;name&amp;gt;)&lt;/code>进行引用&lt;/p>
&lt;p>综合上面的说明，使用如下正则说明&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(?#这是一个嵌套分组示例)(?P&amp;lt;demo&amp;gt;t(?:\w*)t)(?P=demo)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-7.png"
width="1798"
height="376"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-7_hu_7318f26860fb9737.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-7_hu_46bb8d7a7036b047.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="478"
data-flex-basis="1147px"
>&lt;/p>
&lt;h2 id="断言assertions">断言（Assertions）
&lt;/h2>&lt;p>断言主要用于判断，用来匹配符合模式的字符所在位置。因为它主要用判断位置，不会消费字符，所以一般也叫 &lt;strong>零宽断言&lt;/strong>&lt;/p>
&lt;p>断言可分为4类，还是用上例中的文本举例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">this is a &amp;#34;testtest&amp;#34; string to demo regex group!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="正向肯定断言">正向肯定断言
&lt;/h3>&lt;p>判断匹配位置之后的字符符合模式， 通过&lt;code>(?=pattern)&lt;/code> 来进行断言&lt;/p>
&lt;p>示例：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-8.png"
width="1665"
height="301"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-8_hu_eaeae5c021a65cf9.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-8_hu_fbd343bdca89110b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="553"
data-flex-basis="1327px"
>&lt;/p>
&lt;h3 id="正向否定断言">正向否定断言
&lt;/h3>&lt;p>判断匹配位置之后的字符不符合给定模式， 通过&lt;code>(?!pattern)&lt;/code> 来进行断言&lt;/p>
&lt;p>示例：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-9.png"
width="1594"
height="722"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-9_hu_9702474baae8aa63.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-9_hu_5f7113905515b6ad.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="529px"
>&lt;/p>
&lt;h3 id="反向肯定断言和反向否定断言">反向肯定断言和反向否定断言
&lt;/h3>&lt;p>和正向相对，反向断言匹配的是预期位置之前的字符是否符合模式，也有肯定和否定之分。在 &lt;code>?&lt;/code>后再添加一个&lt;code>&amp;lt;&lt;/code>表示反向， 即&lt;code>(?&amp;lt;=pattern)&lt;/code> 和 &lt;code>(?&amp;lt;!pattern)&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-10.png"
width="1558"
height="357"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-10_hu_afc1bd2600ffa6b6.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309-10_hu_c15a8fd618e404f4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="436"
data-flex-basis="1047px"
>&lt;/p>
&lt;h1 id="匹配模式">匹配模式
&lt;/h1>&lt;p>除了上述正则表达式的主要匹配规则外，正则表达式还有一些匹配模式。是用 &lt;code>\&lt;/code> 加上一些特殊的字母代表不同的模式&lt;/p>
&lt;ul>
&lt;li>&lt;code>\g&lt;/code> 表示全局匹配，也就是会在给定的文本中匹配所有符合条件的字串，如果不指定，则仅匹配出现的第一个符合模式的字串&lt;/li>
&lt;li>&lt;code>\m&lt;/code> 多行模式，主要是指定 &lt;code>^ $&lt;/code>是否匹配行首行尾&lt;/li>
&lt;li>&lt;code>\i&lt;/code> 匹配时忽略大小写&lt;/li>
&lt;li>&lt;code>\x&lt;/code> 匹配时是否忽略我们模式文本中的空白，在编写比较复杂规则时较为有用&lt;/li>
&lt;li>&lt;code>\s&lt;/code> 指定 &lt;code>.&lt;/code> 匹配字符时包含换行符&lt;/li>
&lt;li>&lt;code>\u&lt;/code> 匹配unicode字符，如中文&lt;/li>
&lt;li>&lt;code>\a&lt;/code> 仅匹配ascii字符&lt;/li>
&lt;/ul>
&lt;h1 id="实用案例">实用案例
&lt;/h1>&lt;p>针对下面这段文本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">用户注册信息如下：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">联系电话：+86 138-0013-8000（北京） / 400-800-8888（全国客服）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">电子邮箱：support@example.com / service@sub.domain.org.cn / user.name+tag+sorting@example.co.uk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">网站链接：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">https://www.example.com/page1.html?query=123&amp;amp;sort=desc#section2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http://sub.example.co.jp:8080/admin/dashboard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ftp://ftp.example.org/upload.zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">产品序列号：SKU-20240309-001234（生产日期：2024-03-09）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INV-2023-Winter-Sale-0456（有效期至：2024-01-31）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">活动时间：2024年第一季度（2024-01-01 至 2024-03-31）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">特殊字符测试：!@#$%^&amp;amp;*()_+-=[]{}|;&amp;#39;:&amp;#34;,./&amp;lt;&amp;gt;?`~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">测试用密码：Password123!@#（正确） / password123（错误） / Passw0rd!（错误）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">日志条目：ERROR[2024-03-09T15:40:22+08:00] 用户登录失败
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IP地址记录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">192.168.1.1 / 203.0.113.255 / ::1 / IPv6-Test-Address::FFFFF:1234
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="匹配完整url含协议域名端口路径">匹配完整URL（含协议、域名、端口、路径）
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">^(https?:\/\/)([\w\-\.]+\.[a-z]{2,6})(:[0-9]{1,5})?(\/\S*)?$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>匹配结果：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309.png"
width="1569"
height="994"
srcset="https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309_hu_734382e546f0c7e2.png 480w, https://chengxiaqiucao.github.io/post/058-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/Pasted-20250309_hu_7095757f980ba1ee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;h2 id="提取电话号码">提取电话号码
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">\b(\+?\d{2,3})[-\s]+?(?:\d{3,4}[- ]?)+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>说明：首先&lt;code>\b&lt;/code>匹配单词边界，用分组提取国家码（2-3位，兼容有&lt;code>+&lt;/code>情况），跟&lt;code>-&lt;/code>或空格，惰性模式，再匹配3-4个数字和&lt;code>-&lt;/code>连续多次出现的情况&lt;/p>
&lt;p>&lt;strong>匹配结果&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>+86 138-0013-8000&lt;/code>&lt;/li>
&lt;li>&lt;code>400-800-8888&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="验证电子邮箱地址">验证电子邮箱地址
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[-.\w]+@[-.\w]+\.[-.\w]+\b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>匹配结果&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>support@example.com&lt;/code>&lt;/li>
&lt;li>&lt;code>service@sub.domain.org.cn&lt;/code>&lt;/li>
&lt;li>&lt;code>sorting@example.co.uk&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="捕获产品序列号包含日期和唯一编码">捕获产品序列号（包含日期和唯一编码）
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SKU-\d{8}-\d{6}|INV-\d{4}[-A-Za-z]+-\d{4}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>匹配结果&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>SKU-20240309-001234&lt;/code>&lt;/li>
&lt;li>&lt;code>INV-2023-Winter-Sale-0456&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="匹配中文">匹配中文
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[\u4e00-\u9fa5]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解析日志条目中的时间戳">解析日志条目中的时间戳
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ERROR\[(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}[+-]\d{2}:\d{2})\]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>分组提取结果&lt;/strong>：
&lt;code>2024-03-09T15:40:22+08:00&lt;/code>&lt;/p>
&lt;h2 id="提取ip地址">提取IP地址
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(?:\d{1,3}\.){3}\d{1,3}|(?:(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>匹配结果&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>192.168.1.1&lt;/li>
&lt;li>203.0.113.255&lt;/li>
&lt;/ul>
&lt;h1 id="结语">结语
&lt;/h1>&lt;p>以上就是针对正则表达式的相关总结和部分案例演示。更多关于测试技能系统提升的学习可关注我的课程，回复 &lt;code>大纲&lt;/code> 获取详细目录。&lt;/p></description></item><item><title>批处理脚本之For命令</title><link>https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/</link><pubDate>Sat, 01 Mar 2025 15:13:59 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/%E6%89%B9%E5%A4%84%E7%90%86For%E5%91%BD%E4%BB%A4_%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="Featured image of post 批处理脚本之For命令" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在我们工作中，如果使用Windows系统，善用批处理命令，特别是在批量的文件处理，文本处理时能帮助我们极大地提升工作效率，起到事半功倍的效果！&lt;/p>
&lt;p>但很多同学，对批处理的使用更多还停留在可以将多个command命令组合到一起执行，省去重复敲命令和等待的时间。这个其实只是批处理脚本最基本的使用方法&lt;/p>
&lt;p>但要充分发挥批处理的作用，批处理脚本中的 &lt;code>for&lt;/code> 命令其实才是核心，它作为一个兼顾循环处理，和文本列处理的命令工具，在提升批处理脚本效率方面，无出其右！&lt;/p>
&lt;p>但 for 命令的使用，相对比较复杂，很多同学可能并未很好掌握，所以本文，我们带来关于批处理中这个核心命令的系统介绍&lt;/p>
&lt;blockquote>
&lt;p>文中还有一个秋草发现的彩蛋，微软竟然有一个官方陈年Bug一直没有修 😂😂😂&lt;/p>&lt;/blockquote>
&lt;h2 id="for-命令介绍">For 命令介绍
&lt;/h2>&lt;p>下面我们就来详细介绍这个 windows 批处理中的重磅命令&lt;/p>
&lt;h3 id="基础语法">&lt;strong>基础语法&lt;/strong>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FOR&lt;/span> %variable &lt;span class="k">IN&lt;/span> &lt;span class="p">(&lt;/span>set&lt;span class="p">)&lt;/span> &lt;span class="k">DO&lt;/span> command [command-parameters]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>%variable&lt;/strong>: for循环变量，批处理脚本中需用 &lt;code>%%&lt;/code>，命令行直接执行用 &lt;code>%&lt;/code>&lt;/li>
&lt;li>(&lt;strong>set)&lt;/strong>： 可以是文件、目录、字符串或命令输出。。&lt;/li>
&lt;li>&lt;strong>command&lt;/strong>： 指定对每组循环执行的命令。&lt;/li>
&lt;li>&lt;strong>command-parameters&lt;/strong>： 控制循环行为（如 &lt;code>/R&lt;/code>, &lt;code>/D&lt;/code>, &lt;code>/L&lt;/code>, &lt;code>/F&lt;/code> 等）&lt;/li>
&lt;/ul>
&lt;p>如遍历集合:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>苹果 香蕉 &lt;span class="s2">&amp;#34;西瓜 芒果&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">echo&lt;/span> 水果：&lt;span class="se">%%&lt;/span>a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>输出&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">水果：苹果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">水果：香蕉
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">水果：&amp;#34;西瓜 芒果&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>说明&lt;/strong>：默认按空格分隔元素，带引号的字符串视为整体。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="-r参数递归遍历文件">** &lt;code>/R&lt;/code>参数：递归遍历文件**
&lt;/h3>&lt;p>这个参数，用于递归遍历目录及其子目录中的文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> /R &lt;span class="s2">&amp;#34;C:\Chengxiaqiucao&amp;#34;&lt;/span> &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>*.txt&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">echo&lt;/span> 找到文件：&lt;span class="se">%%&lt;/span>a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>功能&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>遍历 &lt;code>C:\Chengxiaqiucao&lt;/code> 及其子目录下的所有 &lt;code>.txt&lt;/code> 文件。&lt;/li>
&lt;li>&lt;code>%%a&lt;/code> 会包含完整文件路径（如 &lt;code>C:\Chengxiaqiucao\test\file.txt&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="d">&lt;strong>&lt;code>/D&lt;/code>：处理目录&lt;/strong>
&lt;/h3>&lt;p>这个参数会仅遍历目录（不处理文件）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> /D &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C:\*&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">echo&lt;/span> 目录：&lt;span class="se">%%&lt;/span>a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>功能&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>列出 &lt;code>C:\&lt;/code> 下的所有一级目录（如 &lt;code>Program Files&lt;/code>, &lt;code>Users&lt;/code> 等）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="4">&lt;strong>4. &lt;code>/L&lt;/code>：生成数字序列&lt;/strong>
&lt;/h4>&lt;p>这个参数和我们编程时控制循环次数比较类似。&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;code>for /L %%a in (起始, 步长, 结束)&lt;/code>&lt;/p>
&lt;p>如下例生成等差数列：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="k">/L&lt;/span> &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>, &lt;span class="mi">2&lt;/span>, &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">echo&lt;/span> 当前数字：&lt;span class="se">%%&lt;/span>a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>输出&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">当前数字：1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前数字：3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前数字：5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前数字：7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前数字：9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="f">&lt;strong>&lt;code>/F&lt;/code>：高级文本解析（核心参数）&lt;/strong>
&lt;/h3>&lt;p>这个参数可以说是 For 命令最核心的参数，For命令大展身手，大部分情况下都是这个参数的功劳。&lt;/p>
&lt;p>这个参数主要用于逐行解析文本、字符串或命令输出，并支持复杂规则。&lt;/p>
&lt;h5 id="语法">&lt;strong>语法&lt;/strong>：
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="k">/F&lt;/span> [&lt;span class="s2">&amp;#34;选项&amp;#34;&lt;/span>] &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>数据源&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> 命令
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>数据源&lt;/strong>：文件、字符串或命令输出（用反引号 &lt;code>`&lt;/code> 包裹）。&lt;/li>
&lt;li>&lt;strong>选项&lt;/strong>：&lt;code>delims&lt;/code>, &lt;code>tokens&lt;/code>, &lt;code>skip&lt;/code>, &lt;code>eol&lt;/code>, &lt;code>usebackq&lt;/code> 等。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="f-1">&lt;strong>&lt;code>/F&lt;/code> 的常用选项&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选项&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>delims=xyz&lt;/code>&lt;/td>
&lt;td>定义分隔符（默认空格/制表符）&lt;/td>
&lt;td>&lt;code>delims=,&lt;/code> 按逗号分割&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tokens=n&lt;/code>&lt;/td>
&lt;td>提取第n列（多列用逗号分隔，如 &lt;code>1,3&lt;/code>）&lt;/td>
&lt;td>&lt;code>tokens=2&lt;/code> 提取第二列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>skip=n&lt;/code>&lt;/td>
&lt;td>跳过前n行&lt;/td>
&lt;td>&lt;code>skip=2&lt;/code> 跳过前两行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>eol=;&lt;/code>&lt;/td>
&lt;td>定义行注释符（默认 &lt;code>;&lt;/code>）&lt;/td>
&lt;td>&lt;code>eol=#&lt;/code> 忽略以 &lt;code>#&lt;/code> 开头的行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>usebackq&lt;/code>&lt;/td>
&lt;td>改变数据源引用方式（见下文）&lt;/td>
&lt;td>处理带空格路径或命令输出&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h4 id="usebackq">&lt;strong>&lt;code>usebackq&lt;/code> 的作用&lt;/strong>
&lt;/h4>&lt;h5 id="此处有彩蛋官方文档中的bug">此处有彩蛋：官方文档中的Bug
&lt;/h5>&lt;p>在windows的中文官方帮助中，对 &lt;code>-F&lt;/code> 参数的说明，其实是错误的&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/Pasted-20250303.png"
width="1134"
height="927"
srcset="https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/Pasted-20250303_hu_69c28a787679498a.png 480w, https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/Pasted-20250303_hu_6b054e8443412a20.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;p>可以看到，这里对使用 &lt;code>usebackq&lt;/code> 的介绍和不使用该参数完全一样，而且，这里中文翻译的非常拗口，很难理解什么意思&lt;/p>
&lt;p>不过，我们通过 &lt;code>chcp 65001&lt;/code> 命令将命令行代码页切换至utf8，这时查看帮助会显示英文帮助&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/Pasted-20250303-1.png"
width="882"
height="1016"
srcset="https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/Pasted-20250303-1_hu_58dff411620f63af.png 480w, https://chengxiaqiucao.github.io/post/063-%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E4%B9%8Bfor%E5%91%BD%E4%BB%A4/Pasted-20250303-1_hu_70197c22987e192e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/p>
&lt;p>可以看到，理解起来就清晰多了， &lt;code>usebackq&lt;/code>解决以下场景的问题：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>处理带空格的文件路径&lt;/strong>：用双引号引用文件名。&lt;/li>
&lt;li>&lt;strong>执行命令并解析输出&lt;/strong>：用反引号 &lt;code>`&lt;/code> 引用系统命令。&lt;/li>
&lt;li>&lt;strong>直接解析字符串&lt;/strong>：用单引号 &lt;code>'&lt;/code> 引用字符串。&lt;/li>
&lt;/ol>
&lt;h5 id="案例一">&lt;strong>案例一&lt;/strong>：
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="k">/F&lt;/span> &lt;span class="s2">&amp;#34;usebackq delims=&amp;#34;&lt;/span> &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;C:\My Files\data.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">echo&lt;/span> &lt;span class="se">%%&lt;/span>a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>若不使用 &lt;code>usebackq&lt;/code>，路径中的空格会导致解析错误。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h5 id="-案例二">** 案例二**
&lt;/h5>&lt;p>解析 &lt;code>data.csv&lt;/code>（格式：&lt;code>姓名,年龄,城市&lt;/code>），跳过标题行，提取姓名和城市。&lt;/p>
&lt;p>&lt;strong>输入文件 &lt;code>data.csv&lt;/code>&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">姓名,年龄,城市
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">张三,25,北京
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">李四,30,上海
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>批处理：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="k">/F&lt;/span> &lt;span class="s2">&amp;#34;usebackq skip=1 delims=, tokens=1,3&amp;#34;&lt;/span> &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data.csv&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">echo&lt;/span> 姓名：&lt;span class="se">%%&lt;/span>a，城市：&lt;span class="se">%%&lt;/span>b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>输出&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">姓名：张三，城市：北京
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">姓名：李四，城市：上海
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="应用场景总结">&lt;strong>应用场景总结&lt;/strong>
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>适用场景&lt;/th>
&lt;th>典型命令示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>无参数&lt;/td>
&lt;td>遍历简单文件或字符串列表&lt;/td>
&lt;td>&lt;code>for %%a in (*.txt) do echo %%a&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/R&lt;/code>&lt;/td>
&lt;td>递归处理目录下的文件&lt;/td>
&lt;td>&lt;code>for /R %%a in (*.log) do del %%a&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/D&lt;/code>&lt;/td>
&lt;td>仅处理目录&lt;/td>
&lt;td>&lt;code>for /D %%a in (C:\*) do echo %%a&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/L&lt;/code>&lt;/td>
&lt;td>生成数字序列（如循环固定次数）&lt;/td>
&lt;td>&lt;code>for /L %%a in (1,1,5) do echo %%a&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/F&lt;/code>&lt;/td>
&lt;td>解析文本文件、命令输出或复杂字符串&lt;/td>
&lt;td>&lt;code>for /F &amp;quot;tokens=2&amp;quot; %%a in (data.txt)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>所以通过掌握For命令的这些参数和技巧，完全可以让它成为批处理脚本中处理文件、文本和系统任务的“瑞士军刀”。&lt;/p>
&lt;hr></description></item><item><title>测试工程师进阶必学 - Linux三剑客（grep）</title><link>https://chengxiaqiucao.github.io/post/060-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-grep/</link><pubDate>Thu, 20 Feb 2025 14:02:28 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/060-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-grep/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/060-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-grep/Pasted-20250310.png" alt="Featured image of post 测试工程师进阶必学 - Linux三剑客（grep）" />&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/060-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-grep/Pasted-20250310.png"
width="1379"
height="583"
srcset="https://chengxiaqiucao.github.io/post/060-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-grep/Pasted-20250310_hu_5f3d8e3ae753f3ae.png 480w, https://chengxiaqiucao.github.io/post/060-linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2-grep/Pasted-20250310_hu_a3750a6d12eb971d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;h1 id="前言">前言
&lt;/h1>&lt;p>&lt;code>grep&lt;/code> 是 Linux 三剑客（&lt;code>grep&lt;/code>, &lt;code>sed&lt;/code>, &lt;code>awk&lt;/code>）之一，用于在文件中搜索特定的文本模式。它不仅功能强大，而且非常灵活，能够处理各种文本搜索需求。下文我们梳理 &lt;code>grep&lt;/code> 命令的详细用法及进阶示例。&lt;/p>
&lt;h1 id="基本用法">基本用法
&lt;/h1>&lt;h2 id="基本搜索">基本搜索
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用于在 &lt;code>filename&lt;/code> 文件中搜索包含 &lt;code>pattern&lt;/code> 的行，并打印出来。&lt;/p>
&lt;h2 id="忽略大小写">忽略大小写
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -i &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-i&lt;/code> 选项忽略大小写。&lt;/p>
&lt;h2 id="递归搜索">递归搜索
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -r &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>directory&lt;/code> 目录及其子目录中递归搜索包含 &lt;code>pattern&lt;/code> 的文件内容。&lt;/p>
&lt;h2 id="显示行号">显示行号
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -n &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-n&lt;/code> 选项显示匹配行的行号。&lt;/p>
&lt;h2 id="反向搜索显示不匹配的行">反向搜索（显示不匹配的行）
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -v &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-v&lt;/code> 选项显示不包含 &lt;code>pattern&lt;/code> 的行。&lt;/p>
&lt;h2 id="显示文件名">显示文件名
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> file1 file2 file3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当搜索多个文件时，默认会显示匹配的文件名。使用 &lt;code>-H&lt;/code> 可以强制显示文件名，使用 &lt;code>-h&lt;/code> 可以隐藏文件名。&lt;/p>
&lt;h1 id="进阶用法">进阶用法
&lt;/h1>&lt;h2 id="使用正则表达式">使用正则表达式
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -E &lt;span class="s2">&amp;#34;pattern1|pattern2&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-E&lt;/code> 选项支持扩展正则表达式，例如 &lt;code>|&lt;/code> 表示或操作。&lt;/p>
&lt;h2 id="计数匹配的行数">计数匹配的行数
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -c &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-c&lt;/code> 选项统计匹配的行数。&lt;/p>
&lt;h2 id="只显示匹配的部分">只显示匹配的部分
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -o &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-o&lt;/code> 选项只显示匹配的部分，而不是整行内容。&lt;/p>
&lt;h2 id="前后行显示">前后行显示
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -A &lt;span class="m">3&lt;/span> &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename &lt;span class="c1"># 显示匹配行及其后3行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grep -B &lt;span class="m">3&lt;/span> &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename &lt;span class="c1"># 显示匹配行及其前3行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grep -C &lt;span class="m">3&lt;/span> &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> filename &lt;span class="c1"># 显示匹配行及其前后各3行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-A&lt;/code>, &lt;code>-B&lt;/code>, &lt;code>-C&lt;/code> 选项分别用于显示匹配行之后、之前或前后的指定行数。&lt;/p>
&lt;h2 id="从标准输入读取数据">从标准输入读取数据
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;some text&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>grep&lt;/code> 可以从标准输入读取数据，这在管道操作中非常有用。&lt;/p>
&lt;h2 id="使用固定字符串搜索提高性能">使用固定字符串搜索（提高性能）
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -F &lt;span class="s2">&amp;#34;fixed_string&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-F&lt;/code> 选项将 &lt;code>pattern&lt;/code> 视为固定字符串而非正则表达式，可以提高搜索性能。&lt;/p>
&lt;h2 id="排除文件">排除文件
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -r --exclude&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*.log&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;pattern&amp;#34;&lt;/span> directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>--exclude&lt;/code> 选项排除特定类型的文件。&lt;/p>
&lt;h2 id="使用-perl-兼容正则表达式">使用 Perl 兼容正则表达式
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -P &lt;span class="s2">&amp;#34;\d+&amp;#34;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>-P&lt;/code> 选项启用 Perl 兼容正则表达式，例如 &lt;code>\d+&lt;/code> 表示一个或多个数字。&lt;/p>
&lt;h2 id="零宽断言">零宽断言
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -P &lt;span class="s1">&amp;#39;(?&amp;lt;=foo)bar&amp;#39;&lt;/span> filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 Perl 兼容正则表达式支持零宽断言，例如 &lt;code>(?&amp;lt;=foo)bar&lt;/code> 匹配前面是 &lt;code>foo&lt;/code> 的 &lt;code>bar&lt;/code>。&lt;/p>
&lt;h1 id="组合使用示例">组合使用示例
&lt;/h1>&lt;h2 id="查找特定目录中的特定类型文件并搜索内容">查找特定目录中的特定类型文件并搜索内容
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -r --include&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*.py&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;import&amp;#34;&lt;/span> /path/to/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>/path/to/directory&lt;/code> 目录中递归搜索所有 &lt;code>.py&lt;/code> 文件，查找包含 &lt;code>import&lt;/code> 的行。&lt;/p>
&lt;h2 id="查找并显示匹配行及其前后两行">查找并显示匹配行及其前后两行
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -C &lt;span class="m">2&lt;/span> &lt;span class="s2">&amp;#34;error&amp;#34;&lt;/span> /var/log/syslog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>/var/log/syslog&lt;/code> 文件中查找包含 &lt;code>error&lt;/code> 的行，并显示其前后两行。&lt;/p>
&lt;h2 id="统计包含特定单词的文件数量">统计包含特定单词的文件数量
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep -rl &lt;span class="s2">&amp;#34;word&amp;#34;&lt;/span> /path/to/directory &lt;span class="p">|&lt;/span> wc -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>/path/to/directory&lt;/code> 目录中递归搜索包含 &lt;code>word&lt;/code> 的文件，并统计文件数量。&lt;/p>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>通过这些示例，可以体会到 &lt;code>grep&lt;/code> 的强大能力和灵活性，也让它成为Linux中最实用的文本处理工具之一。&lt;/p></description></item><item><title>还在用print大法调试代码？换个玩法</title><link>https://chengxiaqiucao.github.io/post/055-debug%E5%B7%A5%E5%85%B7pysnooper/</link><pubDate>Sat, 15 Feb 2025 19:13:42 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/055-debug%E5%B7%A5%E5%85%B7pysnooper/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/055-debug%E5%B7%A5%E5%85%B7pysnooper/Pasted-20250215.png" alt="Featured image of post 还在用print大法调试代码？换个玩法" />&lt;h2 id="为什么需要pysnooper">为什么需要PySnooper？
&lt;/h2>&lt;p>在Python开发过程中，print调试法和断点调试法是最常用的调试手段。但面对复杂逻辑时，传统方法存在明显不足：&lt;/p>
&lt;ul>
&lt;li>print语句需要手动添加/删除，破坏代码整洁性&lt;/li>
&lt;li>IDE断点调试在远程服务器场景难以使用&lt;/li>
&lt;li>多线程/异步场景调试困难&lt;/li>
&lt;/ul>
&lt;p>PySnooper通过智能日志记录机制，实现了&lt;strong>零侵入式调试&lt;/strong>，提供了另一种直观、便利地观测调试手段&lt;/p>
&lt;h2 id="核心功能详解">核心功能详解
&lt;/h2>&lt;h3 id="1-智能上下文追踪">1. 智能上下文追踪
&lt;/h3>&lt;p>比如我们编写一个递归函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pysnooper&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pysnooper.snoop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">venv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">Chengxiaqiucao&lt;/span>\&lt;span class="n">AI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">python&lt;/span> &lt;span class="n">ai_test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Source&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">Chengxiaqiucao&lt;/span>\&lt;span class="n">AI&lt;/span>\&lt;span class="n">ai_test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.353061&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357038&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357103&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357159&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357220&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357291&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357348&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357421&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357460&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">11&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357501&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">11&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.000248&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357716&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.000649&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">50.357843&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.005107&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>自动记录函数调用栈和代码执行路径，支持递归函数追踪&lt;/p>
&lt;h3 id="2-变量监控">2. 变量监控
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pysnooper.snoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">watch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;result&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;len(data)&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>监控特点：&lt;/p>
&lt;ul>
&lt;li>支持表达式监控（如&lt;code>len(data)&lt;/code>)&lt;/li>
&lt;li>实时显示变量类型&lt;/li>
&lt;li>数值变化提示&lt;/li>
&lt;/ul>
&lt;h3 id="3-上下文管理模式输出到文件">3. 上下文管理模式、输出到文件
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 上下文管理器模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">pysnooper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">snoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;/var/log/debug.log&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">critical_operation&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-多处跟踪时指定前缀">4. 多处跟踪时指定前缀
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pysnooper.snoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[add]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pysnooper.snoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[main]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Final result: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出时会显示指定的不同前缀&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.818895&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">17&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.819578&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">18&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">Source&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">Chengxiaqiucao&lt;/span>\&lt;span class="n">AI&lt;/span>\&lt;span class="n">ai_test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.819791&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.820558&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.820758&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.001314&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">New&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">.......&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.821253&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">29&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">01.821503&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.002834&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Final&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="5-设置跟踪深度">5. 设置跟踪深度
&lt;/h3>&lt;p>如果代码中牵涉多层函数调用，还可以通过指定记录深度，默认深度为 &lt;strong>1&lt;/strong>，灵活结合&lt;code>depth&lt;/code>参数，可以帮助我们重点查看关注部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pysnooper.snoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">outer_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">inner_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pysnooper.snoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">inner_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">outer_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Outer function result: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">49.360851&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">9&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">outer_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">49.361569&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">inner_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Source&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">Chengxiaqiucao&lt;/span>\&lt;span class="n">ai&lt;/span>\&lt;span class="n">ai_test&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Starting&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">49.361734&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="mi">13&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">inner_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">49.362077&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">49.362184&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">22&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.000589&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">37&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">49.362380&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">inner_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">..&lt;/span> &lt;span class="mi">22&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Elapsed&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">00&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">00.001683&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Outer&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">22&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结
&lt;/h2>&lt;p>有了这个工具， 我们在调试时，特别是在一些服务器上进行代码调测，就可以通过一行装饰代码实现运行变量和过程的监测了，远离print大法的繁杂啦！&lt;/p></description></item><item><title>搭建基于https的Docker私有仓库</title><link>https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/docker%E4%BB%93%E5%BA%93.png" alt="Featured image of post 搭建基于https的Docker私有仓库" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在我们日常工作中，基于Docker技术进行开发、测试环境的快速部署和管理已经非常普遍，而对于我们自己的产品研发来说，必然就离不开很多私有的docker镜像管理，更加上docker官方镜像仓库的访问困难，在我们的研发环境中的搭建私有docker镜像仓库就成为一个普遍需求。&lt;/p>
&lt;h2 id="搭建私有docker镜像仓库的基本方法---http">搭建私有docker镜像仓库的基本方法 - http
&lt;/h2>&lt;p>搭建docker私有镜像仓库的基础方法，其实非常简便，也是大家网上搜索最容易找到的方案。&lt;/p>
&lt;p>直接通过 docker 启动它的仓库镜像 registry 即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">docker&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="n">restart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">always&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="n">registry&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="mi">5100&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5000&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">registry&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">registry&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&amp;ndash;restart&lt;/strong> 设置在仓库异常时自动重启仓库，保证可用性
&lt;strong>&amp;ndash;name&lt;/strong> 设置仓库名称
&lt;strong>&amp;ndash;p&lt;/strong> 内部仓库服务端口5000映射到宿主机5100端口
&lt;strong>&amp;ndash;v&lt;/strong> 仓库存储持久化到数据卷&lt;/p>
&lt;p>镜像启动完成以后，通过浏览器访问一下这台宿主机5100端口的 &lt;code>v2&lt;/code> 接口，可以正常显示一个空的 json 字串，表示仓库已经可以正常提供服务&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212.png"
width="653"
height="186"
srcset="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212_hu_1c442ea7ed3a7900.png 480w, https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212_hu_3bfbbbdad98e8cca.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="351"
data-flex-basis="842px"
>&lt;/p>
&lt;p>但这时，如果我们通过 &lt;code>docker push&lt;/code> 命令向这个私有仓库上传镜像，会得到一个提示默认协议https不匹配的提示。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-1.png"
width="1513"
height="107"
srcset="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-1_hu_47792a33861a55bb.png 480w, https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-1_hu_c877914cc7e69b67.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1414"
data-flex-basis="3393px"
>&lt;/p>
&lt;p>这里我们还需要通过docker配置使其接受http协议，Linux 系统下通常在 &lt;code>/etc/docker/daemon.json&lt;/code> 这个docker守护进程配置文件中。&lt;/p>
&lt;p>在其中添加私有镜像服务器地址:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;insecure-registries&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;192.168.101.67:5100&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是在windows中使用docker desktop，在docker engine中进行配置&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-2.png"
width="1720"
height="799"
srcset="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-2_hu_693d6cf7528172d8.png 480w, https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-2_hu_a3fbb14c4f02522f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="516px"
>&lt;/p>
&lt;p>重启docker引擎后，就可以正常对刚搭建的私有参考进行push和pull操作了。&lt;/p>
&lt;p>但是，虽然基于http协议的基础镜像仓库能满足我们日常的基本使用要求，但如果我们的产品项目不是个小型项目，牵涉多个docker镜像联动和多个节点的话，一般会需要使用docker集群。&lt;/p>
&lt;p>docker官方的集群系统docker swarm使用也非常简便，但docker swarm中对于私有镜像仓库，出于安全考虑，是需要强制通过 &lt;code>https&lt;/code> 协议访问的，因此，我们本文的重点，还是介绍下如何搭建一个基于&lt;code>https&lt;/code> 协议的私有镜像仓库&lt;/p>
&lt;h2 id="https协议镜像仓库的要求">https协议镜像仓库的要求
&lt;/h2>&lt;p>&lt;code>https&lt;/code> 协议相对于 &lt;code>http&lt;/code> 协议，主要就是提供了传输安全性上的保护。关于 https协议原理的详细说明，可以参看我前面的文章&lt;/p>
&lt;p>&lt;a class="link" href="https://chengxiaqiucao.github.io/post/21-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener"
>大话HTTPS协议，理解SSL、TLS和HTTP的关系&lt;/a>&lt;/p>
&lt;p>因此，我们要搭建基于 https 协议的镜像仓库，复杂的地方主要是解决https协议要求的相关认证和鉴权上的要求。主要包括：&lt;/p>
&lt;ul>
&lt;li>生成证书和访问密钥，非生产环境一般使用自签名证书。&lt;/li>
&lt;li>配置镜像仓库启动时挂载证书&lt;/li>
&lt;li>配置访问节点对证书的信任&lt;/li>
&lt;li>加入集群，推送、拉取docker镜像&lt;/li>
&lt;/ul>
&lt;h2 id="集群中部署私有镜像仓库">集群中部署私有镜像仓库
&lt;/h2>&lt;p>下面，我们逐步详细说明部署过程&lt;/p>
&lt;h3 id="自签名证书生成">自签名证书生成
&lt;/h3>&lt;h4 id="生成根证书私钥和证书">生成根证书私钥和证书
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">openssl req -newkey rsa:4096 -nodes -sha256 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -keyout ca.key -x509 -days &lt;span class="m">3650&lt;/span> -out ca.crt &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -subj &lt;span class="s2">&amp;#34;/C=CN/ST=Beijing/L=Beijing/O=Qiucao Inc./CN=Qiucao Root CA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="生成服务器私钥和-csr">生成服务器私钥和 CSR
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">openssl req -newkey rsa:4096 -nodes -sha256 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -keyout registry.key -out registry.csr &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -subj &lt;span class="s2">&amp;#34;/C=CN/ST=Beijing/L=Beijing/O=Qiucao Inc./CN=qiucao.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用根证书签发服务器证书">使用根证书签发服务器证书
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">openssl x509 -req -days &lt;span class="m">3650&lt;/span> -in registry.csr -CA ca.crt -CAkey ca.key &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -CAcreateserial -out registry.crt -extfile &amp;lt;&lt;span class="o">(&lt;/span>&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;subjectAltName=DNS:qiucao.com&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过以上操作，会生成我们需要的证书清单&lt;/p>
&lt;ul>
&lt;li>&lt;code>ca.crt&lt;/code>：根证书&lt;/li>
&lt;li>&lt;code>registry.crt&lt;/code>：服务器证书&lt;/li>
&lt;li>&lt;code>registry.key&lt;/code>：服务器私钥&lt;/li>
&lt;/ul>
&lt;h3 id="配置镜像registry">配置镜像Registry
&lt;/h3>&lt;p>在swarm集群中启用Registry仓库，可以通过&lt;code>docker compose&lt;/code>， 先配置compose启动文件&lt;/p>
&lt;p>docker-compose.yml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">registry&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">registry:2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;5100:5000&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_HTTP_TLS_CERTIFICATE&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/certs/registry.crt&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_HTTP_TLS_KEY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/certs/registry.key&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/registry&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./certs:/certs&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/var/docker-registry:/var/lib/registry&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">registry-net&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">registry-net&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">overlay&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后通过 &lt;code>docker stack&lt;/code> 在集群中启用仓库&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建 overlay 网络&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker network create -d overlay registry-net
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 部署 Registry 服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stack deploy -c docker-compose.yml registry
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，我们就启用了支持认证的仓库&lt;/p>
&lt;h3 id="配置访问节点信任证书">配置访问节点信任证书
&lt;/h3>&lt;p>但仓库支持认证，要在访问时能正常对服务进行认证，在客户节点上，还有一个操作，也就是需要信任仓库的自签名证书&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir -p /etc/docker/certs.d/qiucao.com:5100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp ca.crt /etc/docker/certs.d/qiucao.com:5100/ca.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重启本地docker服务，以加载信任证书&lt;/p>
&lt;h3 id="验证仓库镜像拉取">验证仓库镜像拉取
&lt;/h3>&lt;p>然后，在客户机上，我们就可以通过私有仓库来完成镜像的拉取了&lt;/p>
&lt;p>这里还有一个步骤，就是我们配置的仓库地址是 &lt;code>qiucao.com&lt;/code>，并不是一个实际存在的公共网络域名，所以这里我们还应该在本地的 &lt;code>/etc/hosts&lt;/code>中添加对域名的解析&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">192.168.101.67 qiucao.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后执行命令&lt;code> docker pull&lt;/code> 拉取仓库中的镜像，可以成功完成镜像的拉取&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-3.png"
width="1366"
height="450"
srcset="https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-3_hu_acda33db5f33567e.png 480w, https://chengxiaqiucao.github.io/post/025-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ehttps%E7%9A%84docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Pasted-20250212-3_hu_48c07b002de8afd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="303"
data-flex-basis="728px"
>&lt;/p>
&lt;hr>
&lt;p>更多关于docker使用和体系化的测试技能提升，可了解我的测试课程，回复 &lt;code>大纲&lt;/code> 了解课程详细内容。&lt;/p></description></item><item><title>手机应用和电脑端应用测试的不同</title><link>https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/</link><pubDate>Fri, 13 Dec 2024 13:37:35 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213.png" alt="Featured image of post 手机应用和电脑端应用测试的不同" />&lt;p>这二者不同的地方还是挺多的。主要还是从测试对象的特点出发来看&lt;/p>
&lt;h2 id="设备处理性能上的区别">设备处理性能上的区别
&lt;/h2>&lt;p>虽然现在手机处理器、内存等硬件性能上已经有了非常大的提升，但一些低端手机和电脑端相比，处理性能上的差距还是比较明显的。因此在测试时，针对手机端的软件，加载效率、卡顿等就需要重点关注&lt;/p>
&lt;h2 id="屏幕分辨率和系统版本碎片化">屏幕分辨率和系统版本碎片化
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213-2.png"
width="476"
height="477"
srcset="https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213-2_hu_c3b0a63a589a0543.png 480w, https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213-2_hu_aa76a302ddfad7c9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>手机因为便携，屏幕分辨率有限，再加上厂商、型号众多，所以碎片化情况非常突出。因此针对手机应用测试，考虑不同分辨率和厂商定制的影响，对应用呈现效果的验证也是和电脑端比较明显的不同。&lt;/p>
&lt;h2 id="交互方式差异">交互方式差异
&lt;/h2>&lt;p>电脑端主要的交互方式是键盘鼠标，手机端则主要是触屏、多点触控，拖拽等等。文字输入和页面精准触控比电脑端困难，所以针对应用的测试上，这些也是区别所在&lt;/p>
&lt;h2 id="使用场景差异">使用场景差异
&lt;/h2>&lt;p>手机端应用，使用场景和电脑端的区别，还有一些典型的特殊场景：&lt;/p>
&lt;h3 id="网络稳定性">网络稳定性
&lt;/h3>&lt;p>手机因为是移动设备，移动过程中，出现网络切换、网络不稳定的情况是大概率事件，所以应用对网络持续稳定的兼容性要求比电脑端要高得多&lt;/p>
&lt;h3 id="耗电量">耗电量
&lt;/h3>&lt;p>手机依靠电池供电，移动场景下对电量的使用应更为节制，所以应用本身对耗电控制的要求更高&lt;/p>
&lt;h3 id="网络流量">网络流量
&lt;/h3>&lt;p>虽然现在手机流量资费已经大幅下调，但流量依然在手机费用中占据极大比重，所以应用在网络交互中对数据包大小、频率等影响流量的控制也是手机App的特点。&lt;/p>
&lt;h3 id="应用安全">应用安全
&lt;/h3>&lt;p>虽然电脑端和手机端都存在应用安全问题，但手机作为随身携带且日常使用频率很好的设备，包括定位、通话、摄像等功能也都和个人隐私紧密相关，信息安全上的挑战更大，所以手机应用本身的安全要求和隐私防护上，一般也比电脑端要求更严格。&lt;/p>
&lt;h2 id="测试工具上的不同">测试工具上的不同
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213-1.png"
width="544"
height="205"
srcset="https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213-1_hu_63b86e9a574e2494.png 480w, https://chengxiaqiucao.github.io/post/049-%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E7%94%B5%E8%84%91%E7%AB%AF%E5%BA%94%E7%94%A8%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%8D%E5%90%8C/Pasted-20241213-1_hu_dbad971bfe3e32ee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="636px"
>
手机端应用和电脑端应用，在操作系统、开发工具方面有明显差异，对应到测试工具上也有明显区别。&lt;/p>
&lt;p>以自动化工具为例，电脑端可能有selenium、robotframework、postman等，但对应到手机端，相应的工具则是以Appium、airtest这样的一些工具为代表。&lt;/p>
&lt;hr>
&lt;p>大致从以上这些方面来看，可以看到，区别还是非常明显的，不可一概而论。&lt;/p></description></item><item><title>安装部署测试怎么做</title><link>https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/</link><pubDate>Sat, 16 Nov 2024 16:28:04 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-3.png" alt="Featured image of post 安装部署测试怎么做" />&lt;p>知乎上看到的问题：&lt;/p>
&lt;blockquote>
&lt;p>各位专业的IT或是测试大牛能告诉我环境部署怎么做吗？每次我都是说根据测试文档安装相应软件，环境变量设置！准备相关材料！总觉得回答不够好！求解正确答案？&lt;/p>&lt;/blockquote>
&lt;p>作为一个专业的测试人员，这个回答不能说不好，而是基本等同于不会测试。&lt;/p>
&lt;p>这个问题虽然是直接问的如何做安装部署，但其实是问你对于安装部署需要怎么测试？ 不直接问是因为很多小白都意识不到安装部署其实是软件功能测试范围中极为重要的一块，比如题主。&lt;/p>
&lt;p>一个软件系统的安装，特别是直接交付给用户的系统，这部分可以说就是整个系统的门面，是使用这个软件的第一步，表现好坏直接影响用户对这个软件的评价。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116.png"
width="847"
height="312"
srcset="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116_hu_8fc6846772fae3ae.png 480w, https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116_hu_17c2359e0c37dcba.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="651px"
>&lt;/p>
&lt;p>那么软件的安装部署测试要做哪些测试方面的考虑呢？可以从以下几个方面来看：&lt;/p>
&lt;h2 id="全新安装全量安装">全新安装/全量安装
&lt;/h2>&lt;p>&lt;strong>全新安装，指一个软件首次部署或者是在不保留原先已安装信息的情况下重新部署。&lt;/strong>&lt;/p>
&lt;p>这部分其实是测试的主要部分，题主所说的安装文档其实也主要会针对这一部分说明。&lt;/p>
&lt;p>但测试时还是有很多需要注意的测试要点&lt;/p>
&lt;h3 id="1-安装的依赖">1. 安装的依赖
&lt;/h3>&lt;p>大部分的安装程序或脚本，它其实都是有一定的条件依赖的：&lt;/p>
&lt;ul>
&lt;li>需要的磁盘空间？&lt;/li>
&lt;li>网络的连接状态？&lt;/li>
&lt;li>CPU/内存有没有要求？&lt;/li>
&lt;li>操作系统的版本？&lt;/li>
&lt;li>系统用户的权限（是不是需要操作系统的管理员权限来安装？）&lt;/li>
&lt;li>&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;p>而且这些依赖也不单纯只是安装程序本身的依赖，也包括安装完成后，软件系统要正常运行需要的依赖条件，这些在我们程序安装的时候，都应该由安装程序提前进行验证。所有这些都是测试时需要考虑和进行设计的。&lt;/p>
&lt;h3 id="2-安装程序脚本的功能验证">2. 安装程序/脚本的功能验证
&lt;/h3>&lt;p>不管是有安装程序还是通过执行脚本，这部分是安装部署的主体，也是安装部署文档中重点描述的部分，大部分面向用户的安装程序其实都是有界面的。&lt;/p>
&lt;p>那这里的验证其实和普通软件的功能测试没太大区别。&lt;/p>
&lt;ul>
&lt;li>界面中描述性信息、文字是否清晰&lt;/li>
&lt;li>一些操作的提示信息是否明确&lt;/li>
&lt;li>有用户交互部分，用户不同选择的分支验证&lt;/li>
&lt;li>不同的屏幕分辨率下的兼容性&lt;/li>
&lt;li>是否提供步骤回溯？误操作时能否返回上一步&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;p>在设计这部分验证时，最好结合流程图，梳理出各种不同路径逐一确认。&lt;/p>
&lt;h3 id="3-安装异常处理">3. 安装异常处理
&lt;/h3>&lt;p>这个是考验测试人员经验的重要环节。&lt;/p>
&lt;ul>
&lt;li>磁盘空间不足？&lt;/li>
&lt;li>中途断网？&lt;/li>
&lt;li>本地服务端口冲突？&lt;/li>
&lt;li>中途断电？&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-1.png"
width="1158"
height="622"
srcset="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-1_hu_2d64b2df316a6805.png 480w, https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-1_hu_901d40c92bf0d7ce.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="446px"
>&lt;/p>
&lt;h3 id="4-易用性">4. 易用性
&lt;/h3>&lt;p>关于安装程序的易用性，主要考虑安装过程中有没有对用户体验优化的一些考虑。&lt;/p>
&lt;ul>
&lt;li>比如安装选择一个已经存在的目录，是否有提示？&lt;/li>
&lt;li>文件的覆盖会不会有二次确认？&lt;/li>
&lt;li>安装过程中，有没有进度条显示安装进度?&lt;/li>
&lt;li>在比较大的文件拷贝时，界面有没有一些信息变化提示，避免用户怀疑程序卡死？&lt;/li>
&lt;li>检测到冲突，有没有给用户提供解决方案建议？&amp;hellip;..&lt;/li>
&lt;/ul>
&lt;p>这些其实都是属于易用性的范畴&lt;/p>
&lt;h3 id="5-安装校验">5. 安装校验
&lt;/h3>&lt;p>在执行安装测试时，我们还应该了解并确认安装前后系统有哪些变化，这些变化是否是符合设计要求。&lt;/p>
&lt;ul>
&lt;li>安装后安装目录下会包含哪些程序文件？&lt;/li>
&lt;li>操作系统的系统文件夹或非安装目录下有没有生成什么文件？&lt;/li>
&lt;li>注册表有无增加和修改？&lt;/li>
&lt;li>系统服务有没有增加和修改？&lt;/li>
&lt;li>开始菜单中有没有添加程序组？&lt;/li>
&lt;li>桌面上有没有创建快捷方式？&amp;hellip;..&lt;/li>
&lt;/ul>
&lt;p>掌握这些不仅是功能的检查，也是我们理解安装程序本身做了哪些事情，有没有测试场景的遗漏。&lt;/p>
&lt;h2 id="升级安装更新">升级安装/更新
&lt;/h2>&lt;p>除了全新安装外，另一个重要的场景是系统的升级，更新。也就是系统已经存在了一个版本，需要在原有基础上升级到当前安装包的版本。&lt;/p>
&lt;p>而升级又可以分为全量升级和增量升级&lt;/p>
&lt;h3 id="全量升级">全量升级
&lt;/h3>&lt;p>全量的升级会完整替换原先的程序文件，但一般会保留原有的配置和数据，安装包通常会包含当前版本的所有文件，安装包通常比较大&lt;/p>
&lt;h3 id="增量升级">增量升级
&lt;/h3>&lt;p>增量升级则是根据用户的当前版本，安装包只包含增量的一些程序文件，包括一些升级操作的脚本文件。这种安装包一般比较小，安装过程也通常更加快速。但安装包要和用户的当前版本严格匹配。一般会在全量安装包非常庞大，分发给用户效率不高的时候采用&lt;/p>
&lt;h3 id="版本跨度">版本跨度
&lt;/h3>&lt;p>不管是全量还是增量，验证时和全新安装的要点基本类似。但有一个升级验证特定的场景需要重点考虑，就是版本的跨度问题&lt;/p>
&lt;p>如果软件迭代，版本变更次数非常多，那么从历史古早版本升级到新版本往往会带来很多问题，包括配置、数据结构的变化造成的影响，以及升级策略的选择，是一次到位还是逐个中间版本升级？对测试策略可能都有影响。&lt;/p>
&lt;h3 id="数据转换">数据转换
&lt;/h3>&lt;p>对于牵涉到数据库，数据结构变化的版本升级，业务数据可能会需要进行很多数据转换的操作，这里也是Bug的高发地带，需要结合升级后的业务测试重点关注。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-2.png"
width="553"
height="335"
srcset="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-2_hu_f9e6d1d117bfa0ee.png 480w, https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-2_hu_86256f77b398ed1b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;h2 id="回退">回退
&lt;/h2>&lt;p>回退通常属于安装出现问题时，是否可以恢复原先状态，以不影响原来的业务。&lt;/p>
&lt;p>这里主要从几个方面考虑：&lt;/p>
&lt;h3 id="正常取消安装部署">正常取消安装/部署
&lt;/h3>&lt;p>用户主动发起，属于正常回退，这时安装程序应该要能够清理掉已完成的安装文件，恢复原有的系统配置，将状态重置到安装前的状态&lt;/p>
&lt;h3 id="异常回退">异常回退
&lt;/h3>&lt;p>除了用户主动发起的正常回退外，如果安装过程中出现了一些未知的异常导致安装无法继续，这时需要提示用户安装失败，同时也应该触发回退流程，将系统恢复到安装前。&lt;/p>
&lt;p>这种属于我们安装程序本身的异常捕捉和处理的一部分。&lt;/p>
&lt;p>而即便不是安装程序本身捕捉的异常，比如安装过程中拔电源强制中断这样，我们的软件也应该提供一些清理脚本来将部署状态恢复到安装前。 这也是安装测试的重要场景之一。&lt;/p>
&lt;h3 id="回退有效性">回退有效性
&lt;/h3>&lt;p>除了回退的触发，就是我们还要对回退的效果进行确认。是否确实正确完成了清理和状态恢复。&lt;/p>
&lt;p>另外，在回退执行过程中，如果出现异常（和因为异常触发回退不同），是否有对应的解决方案？比如提供清理工具&lt;/p>
&lt;h2 id="卸载">卸载
&lt;/h2>&lt;p>当然，有安装就有卸载。除了安装程序的验证，我们还要验证卸载程序或脚本。类似安装程序的功能验证&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-3.png"
width="1228"
height="812"
srcset="https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-3_hu_630e6d0df0367ecb.png 480w, https://chengxiaqiucao.github.io/post/047-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95%E6%80%8E%E4%B9%88%E5%81%9A/Pasted-20241116-3_hu_94d130970a192fc9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="362px"
>&lt;/p>
&lt;h3 id="卸载入口">卸载入口
&lt;/h3>&lt;p>除了直接执行卸载程序，还有通过操作系统的卸载入口进行卸载，都是应该考虑的场景&lt;/p>
&lt;h3 id="卸载遗留">卸载遗留
&lt;/h3>&lt;p>软件卸载以后，有哪些文件、配置会遗留在操作系统中，是否符合设计要求？&lt;/p>
&lt;h3 id="破坏性卸载">破坏性卸载
&lt;/h3>&lt;p>制造一些特殊场景，比如一些关键文件物理删除，关键的配置被变更，确认卸载还是否能正常进行？&lt;/p>
&lt;h3 id="卸载中的异常">卸载中的异常
&lt;/h3>&lt;p>同样也要考虑卸载中的各种异常场景&lt;/p>
&lt;ul>
&lt;li>文件正在使用？&lt;/li>
&lt;li>断网？&lt;/li>
&lt;li>断电？&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>异常出现时，有没有对应的手段可以善后&lt;/p>
&lt;hr>
&lt;p>很多时候，看上去简单的问题，深究的话门道可并不小。 测试是一门关于探索和发现未知的艺术，自有奥妙​。&lt;/p></description></item><item><title>WebDriver将退出历史？BIDI登场</title><link>https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi.png"
width="1039"
height="325"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_34ef2d91df9bc5c2.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_190c71a116613266.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;h2 id="前言">前言
&lt;/h2>&lt;p>web自动化测试领域，最核心的其实是浏览器的驱动方法。现在最流行的是已经被W3C标准化的webDriver，而占据浏览器垄断地位的Chrome其实也有自己的一个标准协议，也就是CDP（chrome devTools protocol），它可以提供更比WebDriver更底层的对浏览器的控制。google 自己的自动化测试工具 puppeteer 其实就是基于 CDP 进行的自动化实现。&lt;/p>
&lt;h2 id="webdriver的发展历程">WebDriver的发展历程
&lt;/h2>&lt;p>跟随 Selenium 发展起来的 webDriver 协议是目前 Web 自动化测试领域的事实标准。而这一历程也是逐步发展而来的。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003.png"
width="1200"
height="353"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003_hu_3684508c9e245657.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003_hu_fba1de2c28e3762e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="339"
data-flex-basis="815px"
>&lt;/p>
&lt;ul>
&lt;li>2004 Selenium 诞生&lt;/li>
&lt;li>2006 WebDriver 作为一款工具诞生&lt;/li>
&lt;li>2009 google自动化测试大会，Seleium 和 WebDriver 合并为一个项目，发布Selenium 2.0&lt;/li>
&lt;li>2016 Selenium3 发布，彻底抛弃1.0中的Selenium RC&lt;/li>
&lt;li>2018 W3C标准组织吸纳了WebDriver为标准协议&lt;/li>
&lt;li>2021 Selnium 4.0发布，取消了WebDriver原先的Json Wire协议，全面采用W3C webDriver&lt;/li>
&lt;/ul>
&lt;h2 id="javascript和nodejs壮大-自动化测试百花齐放">JavaScript和Node.js壮大， 自动化测试百花齐放
&lt;/h2>&lt;p>而随着 Web 页面的前端开发越来越依赖 JavaScript，一批新的自动化测试工作也逐渐推出，包括WebdriverIO、Appium、Nightwatch、Protractor（已废弃）、Testcafe、Cypress、Puppeteer 和 Playwright 等新的自动化解决方案应运而生。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-1.png"
width="1200"
height="370"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-1_hu_40718d6e3355324.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-1_hu_19a0763a5a01d543.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="324"
data-flex-basis="778px"
>&lt;/p>
&lt;h2 id="自动化工具的两大流派">自动化工具的两大流派
&lt;/h2>&lt;p>以上这些自动化工具，根据它们运行的层级，可以分为下面两大流派&lt;/p>
&lt;ul>
&lt;li>&lt;strong>上层控制&lt;/strong>：&lt;strong>在浏览器中&lt;/strong>执行 JavaScript 的工具。例如，&lt;a class="link" href="https://bit.ly/cypress-architecture" target="_blank" rel="noopener"
>Cypress&lt;/a> 和 &lt;a class="link" href="https://bit.ly/testcafe-architecture" target="_blank" rel="noopener"
>TestCafe&lt;/a> 利用 Web API 和 Node.js 来直接在浏览器中运行测试。&lt;/li>
&lt;li>&lt;strong>底层控制&lt;/strong>：通过在&lt;strong>浏览器之外&lt;/strong>执行远程命令的工具。当工具需要更强的控制力时（例如打开多个标签页或模拟设备模式），此时它们需要执行远程命令，以通过协议控制浏览器。 两种主要的自动化协议为 &lt;strong>WebDriver（W3C）&lt;/strong> 和 &lt;strong>Chrome 开发者工具协议 (CDP)&lt;/strong>。分别以 &lt;code>Selenium&lt;/code> 和 &lt;code>puppeteer&lt;/code> 为代表&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-2.png"
width="1200"
height="682"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-2_hu_7a00d56fbd310c05.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-2_hu_8b44ea3387cf4ac8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>&lt;/p>
&lt;h2 id="webdriver-和-cdp-的对比">WebDriver 和 CDP 的对比
&lt;/h2>&lt;h3 id="webdriver-工作原理">webDriver 工作原理
&lt;/h3>&lt;p>基于 WebDriver 协议的自动化测试工具，需要一个专门的浏览器驱动，通过浏览器驱动来实现跨不同浏览器的标准协议。工具和驱动之间通过 http 协议交互。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-3.png"
width="1200"
height="516"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-3_hu_4474f70a6867d39c.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-3_hu_d71d07da545bacaa.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;p>也就是说，我们在web页面上完成的相关操作，实际上是自动化工具将其转换为了一个符合 webDriver 协议的 http 请求，再通过具体的driver驱动浏览器完成动作。&lt;/p>
&lt;p>比如一个页面点击操作，实际是向对应浏览器驱动发出如下请求：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># WebDriver: Click on a coffee element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">curl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">X&lt;/span> &lt;span class="n">POST&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4444&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">element_id&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">click&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">H&lt;/span> &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但对于一些底层的控制，如浏览器本身的一些事件如新开窗口等，因为 webDriver 协议基于 http 请求，就很难处理。&lt;/p>
&lt;h3 id="cdp工作原理">CDP工作原理
&lt;/h3>&lt;p>而 CDP，它原先并不是专门应用于自动化测试目的，是为 chrome 浏览器的开发者工具的调试功能设计，只是后来被 &lt;strong>puppeteer&lt;/strong> 用于了自动化测试。相比 Webdriver ，它是基于 WebSocket 直接和基于 chromium 的浏览器实现底层通信，可以双向传递，能提供更快速和更底层的控制。完成一些 webDriver协议 无法处理的动作。&lt;/p>
&lt;p>&lt;strong>底层控制：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>捕获控制台消息&lt;/li>
&lt;li>拦截网络请求&lt;/li>
&lt;li>模拟 Device Mode&lt;/li>
&lt;li>模拟地理定位&lt;/li>
&lt;li>&amp;hellip;..&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-4.png"
width="1200"
height="366"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-4_hu_67295a57aa91e8de.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-4_hu_513ba702af1adfd5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="786px"
>&lt;/p>
&lt;p>页面操作，实际上是转换为了一系列 CDP 命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">CDP&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Click&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">coffee&lt;/span> &lt;span class="n">element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">Mouse&lt;/span> &lt;span class="n">pressed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Input.dispatchMouseEvent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parameters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;mousePressed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">10.34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">27.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clickCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">Mouse&lt;/span> &lt;span class="n">released&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Input.dispatchMouseEvent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parameters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;mouseReleased&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">10.34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">27.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clickCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是，虽然提供了底层支持，但 CDP 协议最大的问题就是只能支持 Chromium 内核浏览器，并不是一个开放标准。 此外 CDP 协议也设计的比较复杂，不太适合直接从编码层面调用。&lt;/p>
&lt;h2 id="何为webdriver-bidi">何为WebDriver BiDi？
&lt;/h2>&lt;p>基于 WebDriver 协议和 CDP 协议各自的优缺点，自动化测试领域目前正在讨论推出全新的标准。也就是 WebDriver BiDi。&lt;/p>
&lt;p>这个协议的目标是兼顾 WebDriver 和 CDP 协议的优点，提供如下特性（愿景）：&lt;/p>
&lt;ul>
&lt;li>跨浏览器支持&lt;/li>
&lt;li>双向信息传递&lt;/li>
&lt;li>作为通用标准，纳入W3C&lt;/li>
&lt;li>提供底层控制&lt;/li>
&lt;li>以自动化测试为目的，更简洁方便地通过API调用&lt;/li>
&lt;li>支持各种工具和浏览器&lt;/li>
&lt;/ul>
&lt;p>目前这个协议还在协商、开发阶段。但已经引入了各大主流浏览器厂商、测试工具和服务提供商的参与，可以预见，将会是 Web 自动化测试领域下一个重大更新！&lt;/p>
&lt;p>参与厂商：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi.png"
width="1039"
height="325"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_34ef2d91df9bc5c2.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_190c71a116613266.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;p>目前的最新的进展是 2024-09-23 推出的草案版本。
&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-6.png"
width="1471"
height="208"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-6_hu_97219f094a70612.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-6_hu_487e7d80184905ac.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="707"
data-flex-basis="1697px"
>&lt;/p>
&lt;p>从草案内容来看，目前还处于相对早期阶段，短期内应该不会正式推出，所以相当长时间内， WebDriver 依然会是web自动化测试工具的事实标准，但相信BiDi将会是后续的主要发展方向。&lt;/p>
&lt;p>其实从 近期 Selenium 4的更新源码中，已经可以看到对BiDi协议的支持扩展方法了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-7.png"
width="1540"
height="819"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-7_hu_31dc3360f905dd9a.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-7_hu_61ac338f18915c83.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>我们将长期关注这一标准的发展趋势和对目前自动化测试技术的影响。&lt;/p></description></item><item><title>自动化测试奇技淫巧之保存网页为PDF</title><link>https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-3.png"
width="734"
height="369"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-3_hu_32bf543762afb175.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-3_hu_2258d9e590022671.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>我们浏览网站资料的时候，发现有价值的文档，经常需要把材料保存下来。直接复制其实比较麻烦，况且有的网站还做了限制，不方便直接保存。这时将页面直接保存为 PDF 格式的文件是一个很好的需求。&lt;/p>
&lt;p>通常的做法是需要借助一些浏览器插件或者打印扩展来实现，这里我们学习自动化的话，其实利用 puppeteer 就可以方便地实现这个目的。再加上工具的自动化加持，绝对是爬取并保存重要资料的利器。&lt;/p>
&lt;h2 id="puppeteer用法">Puppeteer用法
&lt;/h2>&lt;p>关于 Puppeteer 工具的基本用法，在我之前的博文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/28-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7puppeteer%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener"
>自动化测试工具Puppeteer简介&lt;/a> 中已有较全面介绍，大家可以参考。&lt;/p>
&lt;h2 id="pdf-的基本用法">pdf() 的基本用法
&lt;/h2>&lt;p>在 Puppeteer 中保存 pdf 文件其实非常简单，通过调用 puppeteer 内置的 pdf() 方法就可以将当前页面保存为一个pdf文件&lt;/p>
&lt;p>官方给的案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">browser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">puppeteer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">launch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newPage&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://news.ycombinator.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitUntil&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;networkidle2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pdf&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;hn.pdf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;letter&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用来访问一个技术新闻聚合网站，并将页面保存到 &lt;code>hn.pdf&lt;/code> 文件中&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003.png"
width="650"
height="848"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003_hu_17f7098ace28a6ed.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003_hu_33da3eb23c1a1c2e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="183px"
>&lt;/p>
&lt;h3 id="paperformat">PaperFormat
&lt;/h3>&lt;p>上面的例子中有个参数 &lt;code>format&lt;/code>， 这个参数其实是指定保存的页面大小，可以取值为一些默认的打印页面大小，取值清单和对应的大小如下(单位英寸)：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Letter&lt;/code>: 8.5in x 11in&lt;/li>
&lt;li>&lt;code>Legal&lt;/code>: 8.5in x 14in&lt;/li>
&lt;li>&lt;code>Tabloid&lt;/code>: 11in x 17in&lt;/li>
&lt;li>&lt;code>Ledger&lt;/code>: 17in x 11in&lt;/li>
&lt;li>&lt;code>A0&lt;/code>: 33.1102in x 46.811in&lt;/li>
&lt;li>&lt;code>A1&lt;/code>: 23.3858in x 33.1102in&lt;/li>
&lt;li>&lt;code>A2&lt;/code>: 16.5354in x 23.3858in&lt;/li>
&lt;li>&lt;code>A3&lt;/code>: 11.6929in x 16.5354in&lt;/li>
&lt;li>&lt;code>A4&lt;/code>: 8.2677in x 11.6929in&lt;/li>
&lt;li>&lt;code>A5&lt;/code>: 5.8268in x 8.2677in&lt;/li>
&lt;li>&lt;code>A6&lt;/code>: 4.1339in x 5.8268in&lt;/li>
&lt;/ul>
&lt;h3 id="pdfmargin">PDFMargin
&lt;/h3>&lt;p>除了 &lt;code>format&lt;/code>， 还可以像打印时设置页边距，设置 &lt;code>margin&lt;/code> 属性, 对应取值&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Modifiers&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bottom&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>left&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>right&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>top&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>上面的代码加上页边距设置：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">  &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pdf&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;hn.pdf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;A4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">margin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;left&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;top&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到页边距也进行了调整
&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-1.png"
width="657"
height="843"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-1_hu_12841432f85ae97b.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-1_hu_5baf4ee454c3e930.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="187px"
>&lt;/p>
&lt;h3 id="pdfoption">PDFOption
&lt;/h3>&lt;p>除了上面两个常用的调整参数外，这个方法其实也提供了其他更丰富的设置，基本可以实现我们保存 pdf 文档时的各种样式设置需要。&lt;/p>
&lt;p>比如 &lt;code>scale&lt;/code> 参数可以设置页面缩放，取值为0.1 ~ 2:&lt;/p>
&lt;p>&lt;code>scale: 0.5,&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-2.png"
width="1050"
height="817"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-2_hu_9c1850f78a230a8.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-2_hu_3798a25d5fbc7136.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>其更多的设置参数，这里不再验证，清单如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Modifiers&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>displayHeaderFooter&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Whether to show the header and footer.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>footerTemplate&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>HTML template for the print footer. Has the same constraints and support for special classes as &lt;a class="link" href="https://pptr.dev/api/puppeteer.pdfoptions#headertemplate" target="_blank" rel="noopener"
>PDFOptions.headerTemplate&lt;/a>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>format&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>&lt;a class="link" href="https://pptr.dev/api/puppeteer.paperformat" target="_blank" rel="noopener"
>PaperFormat&lt;/a>&lt;/td>
&lt;td>&lt;strong>Remarks:&lt;/strong>&lt;br>&lt;br>If set, this takes priority over the &lt;code>width&lt;/code> and &lt;code>height&lt;/code> options.&lt;/td>
&lt;td>&lt;code>letter&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>headerTemplate&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>HTML template for the print header. Should be valid HTML with the following classes used to inject values into them:&lt;br>&lt;br>- &lt;code>date&lt;/code> formatted print date&lt;br> &lt;br>- &lt;code>title&lt;/code> document title&lt;br> &lt;br>- &lt;code>url&lt;/code> document location&lt;br> &lt;br>- &lt;code>pageNumber&lt;/code> current page number&lt;br> &lt;br>- &lt;code>totalPages&lt;/code> total pages in the document&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>height&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;td>Sets the height of paper. You can pass in a number or a string with a unit.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>landscape&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Whether to print in landscape orientation.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>margin&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>&lt;a class="link" href="https://pptr.dev/api/puppeteer.pdfmargin" target="_blank" rel="noopener"
>PDFMargin&lt;/a>&lt;/td>
&lt;td>Set the PDF margins.&lt;/td>
&lt;td>&lt;code>undefined&lt;/code> no margins are set.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>omitBackground&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Hides default white background and allows generating pdfs with transparency.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>outline&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;strong>&lt;em>(Experimental)&lt;/em>&lt;/strong> Generate document outline.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pageRanges&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Paper ranges to print, e.g. &lt;code>1-5, 8, 11-13&lt;/code>.&lt;/td>
&lt;td>The empty string, which means all pages are printed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>path&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>The path to save the file to.&lt;br>&lt;br>&lt;strong>Remarks:&lt;/strong>&lt;br>&lt;br>If the path is relative, it&amp;rsquo;s resolved relative to the current working directory.&lt;/td>
&lt;td>&lt;code>undefined&lt;/code>, which means the PDF will not be written to disk.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>preferCSSPageSize&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Give any CSS &lt;code>@page&lt;/code> size declared in the page priority over what is declared in the &lt;code>width&lt;/code> or &lt;code>height&lt;/code> or &lt;code>format&lt;/code> option.&lt;/td>
&lt;td>&lt;code>false&lt;/code>, which will scale the content to fit the paper size.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>printBackground&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Set to &lt;code>true&lt;/code> to print background graphics.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scale&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>number&lt;/td>
&lt;td>Scales the rendering of the web page. Amount must be between &lt;code>0.1&lt;/code> and &lt;code>2&lt;/code>.&lt;/td>
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tagged&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;strong>&lt;em>(Experimental)&lt;/em>&lt;/strong> Generate tagged (accessible) PDF.&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>timeout&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>number&lt;/td>
&lt;td>Timeout in milliseconds. Pass &lt;code>0&lt;/code> to disable timeout.&lt;br>&lt;br>The default value can be changed by using &lt;a class="link" href="https://pptr.dev/api/puppeteer.page.setdefaulttimeout" target="_blank" rel="noopener"
>Page.setDefaultTimeout()&lt;/a>&lt;/td>
&lt;td>&lt;code>30_000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>waitForFonts&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>If true, waits for &lt;code>document.fonts.ready&lt;/code> to resolve. This might require activating the page using &lt;a class="link" href="https://pptr.dev/api/puppeteer.page.bringtofront" target="_blank" rel="noopener"
>Page.bringToFront()&lt;/a> if the page is in the background.&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>width&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;td>Sets the width of paper. You can pass in a number or a string with a unit.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>大话Https协议</title><link>https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/</link><pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1.png" alt="Featured image of post 大话Https协议" />&lt;p>大家现在访问网络，浏览网页，注意一下的话，网址前面基本上都是一个 &lt;code>https://&lt;/code> 的前缀，这里就是说明这个网址所采用的协议是 https 协议。那么具体应该怎么理解 https 呢？ 本文我们就力争能清楚地解释明白这个我们目前应该最广的协议。&lt;/p>
&lt;h2 id="理解http协议">理解HTTP协议
&lt;/h2>&lt;p>要解释 https 协议，当然首先应该知道 http 协议。http 协议可以说是现代互联网的基础。在现代网络的 OSI 七层模型中，http 是典型的第 7 层应用层协议。也就是它是基于网络通信的实际应用，比如浏览器呈现网页内容，这就是网络通信的具体应用。&lt;/p>
&lt;p>如下图分别是 http 协议的消息请求和响应报文的协议定义格式：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928.png"
width="466"
height="165"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928_hu_a08e1f59ab391875.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928_hu_d9059691b287935e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>&lt;/p>
&lt;p>访问百度的请求解析如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET https://www.baidu.com/ HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求方法 URL HTTP协议版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求服务器地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#以下是消息头内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: keep-alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#连接方式：长连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: max-age=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求缓存控制，需确认请求内容是否有修改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Upgrade-Insecure-Requests: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持https协议
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求客户端，浏览器版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持的响应内容类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Encoding: gzip, deflate, br
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持的编码类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持的语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cookie: BAIDUID=C0A2...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#携带的cookie信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#未携带请求消息体，body为空
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928103246.png"
width="484"
height="325"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928103246_hu_ae75e69c12be897f.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928103246_hu_c66146f7ab6dea62.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>响应解析：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">HTTP/1.1 200 OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#协议版本 消息状态码 状态描述
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdpagetype: 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdqid: 0x8707d7d80001f34e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#自定义消息头
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: private
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#缓存控制策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: Keep-Alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#长连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Type: text/html;charset=utf-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#响应内容类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Sat, 22 Dec 2018 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#响应时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expires: Sat, 22 Dec 2018 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#过期失效时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: BWS/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#服务器系统及版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: BDSVRTM=372; path=/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: BD_HOME=1; path=/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: path=/; domain=.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置客户端cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Strict-Transport-Security: max-age=172800
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#严格安全传输，有效时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">X-Ua-Compatible: IE=Edge,chrome=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#兼容浏览器版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Length: 191722
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#消息体长度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#以下消息体内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;!Doctype html&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;html xmlns=http://www.w3.org/1999/xhtml&amp;gt;&amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于 http 协议的详细说明，可以参照我之前的博文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/01-postman%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener"
>接口测试工具Postman-基础篇&lt;/a>中关于 http 协议基础的部分&lt;/p>
&lt;p>那这里其实请求的地址 Url 是 &lt;code>https://www.baidu.com&lt;/code>， 是https协议，为什么这里又说它是 http 协议呢？ 这两者到底是什么关系？&lt;/p>
&lt;h2 id="https协议和tlsssl">HTTPS协议和TLS、SSL
&lt;/h2>&lt;p>其实 https 协议是指 &lt;strong>HyperText Transfer Protocol over Secure Socket Layer&lt;/strong>，也就是基于SSL之上的HTTP协议。&lt;/p>
&lt;p>&lt;strong>SSL&lt;/strong>(Secure Socket Layer) 指安全套接字层，是互联网鼻祖公司网景（Netscape）提出的为网络通信提供安全性和隐私保护的标准协议。 发展到 SSL3.0版本后，标准组织 IETF 对 SSL 协议进行了标准化，并重新命名为 &lt;strong>TLS&lt;/strong>(Transport Layer Security，传输层安全)。目前更新到 TLS1.3 版本。&lt;/p>
&lt;p>所以说SSL和TLS其实是一脉相承的，可以认为二者其实是不同时期的同一个协议。而HTTPS协议其实就是：&lt;/p>
&lt;blockquote>
&lt;p>HTTPS = HTTP + SSL/TLS&lt;/p>&lt;/blockquote>
&lt;p>为什么需要 https 协议呢？ 因为http协议本身在传输过程中，传递的信息基本都是透明的，传输过程中的任何节点，其实都可以看到传输的消息体内容。&lt;/p>
&lt;p>因此为了安全起见，就有了对传输内容加密的需求，SSL/TLS 协议的作用，其实就是为了保护这个内容安全而推出的。&lt;/p>
&lt;p>从 TLS 协议的命名也可以看出，它其实是在 TCP 协议（传输控制协议）的基础上，增加了安全特性的一个协议。&lt;/p>
&lt;p>HTTPS 协议基于HTTP协议，所以它还是属于应用层协议，而TLS 是在第四层的TCP协议基础上，一般认为是属于第五层即会话层。&lt;/p>
&lt;p>通过TLS，可以实现网络通信传输过程中，通信数据的加密&lt;/p>
&lt;h2 id="关于加密">关于加密
&lt;/h2>&lt;p>那么理解 https 协议，这里也就是要搞清楚 TLS 是怎么对通信数据完成加密的。&lt;/p>
&lt;h3 id="对称加密">对称加密
&lt;/h3>&lt;p>我们正常理解加密，就是通过双方约定的一个规则，也就是通过加密算法，把原始字串变更为一个只有通信双方知道的密文，这样其他人即便知道通信内容，就并不能知道原始的信息。&lt;/p>
&lt;p>比如我们看谍战片，传递情报一般都有个重要的东西叫做 &lt;strong>密码本&lt;/strong>, 这里密码本其实就是加密算法，也就是&lt;strong>密钥&lt;/strong>。&lt;/p>
&lt;p>这种加密方式，双方是对等的，对通信内容加密和解密使用的是同一个密钥，因此叫 &lt;strong>对称加密&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1.png"
width="1054"
height="436"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1_hu_8e5135f3cf1994a9.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1_hu_42498ea2d03dccc0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>但这种加密方式，有一个最大的问题，就是这里的密码本。谍战片中，情报人员舍生忘死也要保护密码本，否则一旦泄露，情报就存在泄露风险。&lt;/p>
&lt;p>网络通信也是一样，这里最大的问题，就是这里的密钥如何避免泄露。但只要密钥本身也需要通过网络通信来传输，那么依然不安全。&lt;/p>
&lt;p>这个过程好比：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">A: 跟你说个秘密，我下面的话你不要直接听，我全部说第几页第几行第几列，你去《红楼梦》找到对应的字连起来读。你回话也告诉我对应字的位置就行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">B: 好嘞，《红楼梦》已摆好，你说吧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">。。。。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C：我偷听到啦，赶快买本《红楼梦》去...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="非对称加密">非对称加密
&lt;/h3>&lt;p>而除了对称加密之外，还有一种加密方式是 &lt;strong>非对称加密&lt;/strong>， 这种方式会采用一些特殊的加密算法，生成两份密钥，分为 &lt;strong>公钥&lt;/strong> 和 &lt;strong>私钥&lt;/strong>, 通过其中一把钥匙加密的内容，只能通过另一把要是才能解密。并且这个算法是很难通过暴力破解逆向还原推导仿冒出另一把钥匙。&lt;/p>
&lt;p>类似古代调遣军队的虎符，只有双方严丝合缝对得上才能验证为真。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-2.png"
width="991"
height="560"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-2_hu_e74263285cddfe8c.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-2_hu_7adcb1b2fbe49700.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>有了这个机制，就可以把私钥保存在自己这里，并且绝不外传，而公钥可以公告天下，通过网络正常传递，谁都有可能拿到。这样，对方要给我发送加密信息，只要使用公钥加密，而解密只能在我自己这里才能完成。&lt;/p>
&lt;p>所以，非对称加密大致的过程就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> A: 我有点秘密想跟你说, 不能被其他人听到....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B：稍等，我给你个公钥，你上个锁以后再说给我听。拿到公钥先念下公钥上的字给我看看对不对
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A: 收到公钥，上面写着“我是王大锤”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B: 对，你收到的就是我给你的公钥，用它上锁吧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A：公钥加密上锁，打包发给B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B：取出私钥，打开包裹，阅读内容...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相比 &lt;strong>对称加密&lt;/strong>，&lt;strong>非对称加密&lt;/strong>明显更加安全，但这种方式的缺点是计算量比较大，加解密过程效率不高，速度较慢，所以实际应用中，通常是两种方式结合使用。&lt;/p>
&lt;p>也就是 TLS 加密过程：&lt;/p>
&lt;blockquote>
&lt;p>双方会首先通过非对称加密过程，协商出一个用于通信的对称密钥；这个对称密钥的生成都在各自的本地完成，而完成密钥协商后，后方各自都有了一个相同的对称密钥，就可以基于这个相同的密钥进行后续对称加密通信。&lt;/p>&lt;/blockquote>
&lt;p>因为这个对称密钥是通过非对称加密的方式得到的，所以并不会在双方的通信过程中传递。这样就兼顾了安全和效率。&lt;/p>
&lt;h2 id="签名和证书">签名和证书
&lt;/h2>&lt;p>不过用非对称加密，还是存在一个漏洞。&lt;/p>
&lt;p>就是在服务器和客户端通信的过程中，通信过程其实会通过大量中间环节，如果存在一个恶意的劫持者，它在收到服务端信息后，想自己假冒服务端，篡改信息后再发给客户端。&lt;/p>
&lt;p>这时它其实可以伪装成服务端，自己给客户端发放公钥，拿到客户端的信息后，用自己的私钥解密，再用真正的服务端公钥重新加密，发给服务端。&lt;/p>
&lt;p>这个风险其实就是安全领域中的 &lt;strong>中间人攻击&lt;/strong> 漏洞。&lt;/p>
&lt;p>而为了规避这个问题，需要服务端应该证明自己的身份，然后客户端还可以验证这个身份。因此就有了签名和证书。&lt;/p>
&lt;p>签名就是服务端表明自己的身份，拿到公钥的客户端就可以通过签名判断这个发送端是正确的服务器。这里的签名和公钥其实都保存在一个文件中，也就是服务端的签名证书。&lt;/p>
&lt;p>而为了防止中间人伪造证书，这时就引入了&lt;strong>CA（Certificate Authority)&lt;/strong>，也就是权威的第三方证书颁发机构。这些权威的第三方颁发机构会用私钥对服务端的签名进行加密，这样客户端就可以通过机构的公钥来验证这个签名是否是对应的服务端。验证无误，就可以用证书中携带的公钥来完成和服务端后续的通信协商。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-4.png"
width="698"
height="864"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-4_hu_2950ee2ea2f04dc6.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-4_hu_5b6d08632ce2d28c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="193px"
>&lt;/p>
&lt;h2 id="https协议交互过程">HTTPS协议交互过程
&lt;/h2>&lt;p>有了上面的基础，我们来具体看一下访问一个 https 网站的具体通信过程。&lt;/p>
&lt;p>TLS因为有不同的版本，并且支持多种不同密钥交换和加密算法，所以在通信前，首先要完成使用何种加密算法、用什么密钥生成方式等过程。而 TLS 是基于TCP协议之上的，所以在 TCP 典型的 3次握手完成建链之后，会进行 TLS 的握手建链过程：&lt;/p>
&lt;ul>
&lt;li>比如客户端从浏览器访问网站， 这时浏览器会首先发送&lt;code>Client Hello&lt;/code> 消息到服务器，这个消息中主要包含了客户端支持的&lt;code>加密套件ciphersuites&lt;/code>， TLS 版本信息和&lt;strong>客户端随机数&lt;/strong>。（明文传输）&lt;/li>
&lt;li>服务器接收到消息后，返回自己支持的&lt;code>ciphersuites&lt;/code>， TLS 版本，自己的数字证书和服务器端生成的随机数等几项内容。（明文传输）&lt;/li>
&lt;li>客户端对收到的数字证书进行验证。验证无误之后生成一个新的密钥，也就是&lt;code>预主密钥pre-master key&lt;/code>，并使用证书中携带的公钥来对&lt;code>pre-master key&lt;/code>进行加密，发送给服务器。（此时是非对称加密传输）&lt;/li>
&lt;li>服务器接收到客户端的密文，使用私钥进行解密，获得了&lt;code>pre-master key&lt;/code>。（非对称加密传输）&lt;/li>
&lt;li>到这里为止，服务器和客户端都有了三组数字，分别是&lt;strong>客户端的随机数、服务端的随机数和pre-master key&lt;/strong>。前两个随机数虽然是明文传输，有泄露风险，但 &lt;code>pre-master key&lt;/code>并没有在通信中传递，是计算而得到的安全密钥。 所以再将这三者结合，使用之前协商好的特定的加密算法再生成一个密钥，这个密钥称为&lt;code>shared secert&lt;/code>。也就是之后的会话密钥，这个密钥是后续对称加密的密钥。&lt;/li>
&lt;li>客户端在计算出对称加密的密钥之后，使用该密钥对通信内容进行对称加密，告知服务器之后都使用该密钥进行对称加密。（对称加密传输）&lt;/li>
&lt;li>服务器接收到密文后，使用之前计算出的密钥来进行对称解密，解密成功之后，同样再使用该密钥进行对称加密通信。并告知客户端密钥确认无误，可以使用该密钥进行通信。（对称加密传输）&lt;/li>
&lt;/ul>
&lt;p>至此，整个TLS的握手过程完整，之后就可以开始对称加密的通信了。&lt;/p>
&lt;p>通过 WireShark 抓包的话，通常是这样的一个过程：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-5.png"
width="1317"
height="315"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-5_hu_49d182a58ea91b45.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-5_hu_8e5d0d431298012.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="418"
data-flex-basis="1003px"
>&lt;/p>
&lt;p>具体的交互过程，参考下图 (图片来自网络&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-6.png"
width="1308"
height="946"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-6_hu_f82923a9e2715688.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-6_hu_6089939db8ce688d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于 Https 协议通信过程的整体梳理，更多测试和技术相关文章，欢迎关注 &lt;a class="link" href="https://chengxiaqiucao.github.io/" target="_blank" rel="noopener"
>城下秋草的博客&lt;/a> 或公众号（秋草说测试）&lt;/p></description></item><item><title>软件分支策略和集成模式梳理</title><link>https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/branch.png" alt="Featured image of post 软件分支策略和集成模式梳理" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>软件代码是任何一个软件研发团队的核心资产。而软件的分支管理就是团队中多人合作时，如何协调处理不同人员的代码同步、集成并解决冲突的主要方式。&lt;/p>
&lt;p>本文根据软件大牛Martin Flower的分支模型阅读笔记整理&lt;/p>
&lt;h2 id="基础模式">基础模式
&lt;/h2>&lt;h3 id="源分支">源分支
&lt;/h3>&lt;p>所有修改都记录到同一分支&lt;/p>
&lt;p>分支的定义：
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927.png"
width="701"
height="259"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927_hu_d4d3068e3f2598bc.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927_hu_a8449443230e7ad4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="649px"
>
创建分支：
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-1.png"
width="916"
height="590"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-1_hu_6098059e69a69708.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-1_hu_76295e80e62f86e2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>不同的两个开发者基于主分支拉去各自的开发分支：
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-2.png"
width="872"
height="439"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-2_hu_f52032f3cbeccd64.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-2_hu_a4a8cfd6c8cb1d23.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>Jonny LeRoy 指出我们绘制分支线时，其实忽略了随着时间，导致的复杂度提升
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-3.png"
width="883"
height="521"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-3_hu_3f48b100679b4356.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-3_hu_b114d269317d2d1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;h4 id="主干的定义">主干的定义：
&lt;/h4>&lt;p>&lt;strong>Master、Trunk&lt;/strong>&lt;/p>
&lt;p>是反映产品当前实际状态的唯一公用分支&lt;/p>
&lt;p>可以随时获得当前产品版本状态，并基于此进行开发&lt;/p>
&lt;h4 id="健康分支">健康分支：
&lt;/h4>&lt;p>为每一次提交进行自动化构建、测试，确保没有在当前分支引入故障（可工作的无故障分支）&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ol>
&lt;li>健康的公用分支，可以避免从这个分支上拉取的新分支工作在错误的基础上&lt;/li>
&lt;li>健康分支更易入直接发布到产品&lt;/li>
&lt;li>随时保持一个健康分支能极大降低集成的工作量并减少潜在风险。&lt;/li>
&lt;li>便于进行差异调试。（可以将调试失败的commit去除，仅保留健康的commit）&lt;/li>
&lt;li>在集成到主干时如果出现问题，就可以非常明确地确认是冲突导致而非代码错误&lt;/li>
&lt;/ol>
&lt;p>可能是公用分支、也可以是自己的分支。
自测代码是健康分支的核心，自测应可以快速得到结果（分钟级）&lt;/p>
&lt;h2 id="集成模式">集成模式
&lt;/h2>&lt;h3 id="主线集成">主线集成
&lt;/h3>&lt;p>开发从主干拉取代码进行开发，集成，并将健康的更改推送回主干
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-4.png"
width="1086"
height="253"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-4_hu_13469664a5d85941.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-4_hu_e78cbd5209ceaec2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1030px"
>
从主干拉取分支到本地，并在本地分支上进行开发&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-5.png"
width="1058"
height="302"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-5_hu_2e852c5d48edaa74.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-5_hu_95b356c339ee0ff5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="840px"
>
开发过程中，其他开发已经提交了变更到主干分支
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-6.png"
width="1021"
height="313"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-6_hu_1c0b4402c038b960.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-6_hu_9c1d222d40356939.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="326"
data-flex-basis="782px"
>
此时如需向主干提交，则首先需要合入其他的变更
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-7.png"
width="1067"
height="334"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-7_hu_71458497204245e0.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-7_hu_73d9f4f1fb973746.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="766px"
>
有时，本地的修改和已经提交的变更会有冲突，此时需要先解决冲突
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-8.png"
width="1055"
height="322"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-8_hu_4e9aad39450c55f7.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-8_hu_aafa4ba988541945.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="786px"
>
再重新将修改并自测后的健康代码提交到主干分支&lt;/p>
&lt;p>使用主干时，意味着我们会实行&lt;strong>主干集成模式&lt;/strong>&lt;/p>
&lt;h3 id="特性分支">特性分支
&lt;/h3>&lt;p>为每一个功能特性拉取它独立的分支，并在feture完成后集成回主干&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-9.png"
width="933"
height="366"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-9_hu_74b95c7ee6bcc59d.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-9_hu_32c0ddbd05ee967a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>
从主干拉取不同的特性分支并分别进行开发
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927175324.png"
width="952"
height="350"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927175324_hu_12d1719d35d77f7d.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927175324_hu_afcf5cdf5e2a68df.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="652px"
>
开发过程中会持续从主干拉取最新代码，如果有其他功能变更，要及时进行集成解决冲突（本地）。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-10.png"
width="885"
height="360"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-10_hu_20dd7f755d09ae7a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-10_hu_f29cffe845a9b55e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="590px"
>
特性完成开发后，集成回主干。（受影响的冲突已在本地解决，所有其他特性分支上直接拉取变更，不会存在冲突需要解决）&lt;/p>
&lt;h3 id="低频集成">低频集成
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-11.png"
width="1063"
height="335"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-11_hu_a05c68bed305ab44.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-11_hu_9daf312ea04c227f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="317"
data-flex-basis="761px"
>&lt;/p>
&lt;p>两条独立的开发分支上分别进行了几次本地提交，但没有向主干推送
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-12.png"
width="1015"
height="333"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-12_hu_26b3824f0bf7a0e8.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-12_hu_13f0a04d517dcf1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="304"
data-flex-basis="731px"
>
主干上合入了变更&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-13.png"
width="1064"
height="338"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-13_hu_78ae884a57bcb222.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-13_hu_ed2fa66bb5a8fc68.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="314"
data-flex-basis="755px"
>
开发分支需要拉取变更并合入到本地分支（解决冲突）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-14.png"
width="1067"
height="342"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-14_hu_d54a092c550a112e.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-14_hu_819f06a28caca5af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="311"
data-flex-basis="748px"
>
分支A上继续完成了4，5两个提交，然后推送大主干
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-15.png"
width="1052"
height="321"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-15_hu_450e64d3035717ed.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-15_hu_11fe33b1a4c666ee.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="786px"
>
分支B上完成了4，5，6几个提交后，需要在本地合入主干上A的提交，集成后推送到主干。（本地合入的大小代表工作量）&lt;/p>
&lt;h3 id="高频集成">高频集成
&lt;/h3>&lt;p>每次提交都向主干进行集成和推送呢？
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-16.png"
width="1057"
height="312"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-16_hu_af2461a8a4eeb452.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-16_hu_c2915e7288889683.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="338"
data-flex-basis="813px"
>
V完成第1次提交后就推送回主干&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-17.png"
width="1025"
height="324"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-17_hu_3bd84e894d966406.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-17_hu_5e73f50ccccec7f2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="759px"
>
S在完成第1次提交后就进行本地合入，并推送回主干
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-18.png"
width="1036"
height="327"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-18_hu_81fb63d9bcbd438c.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-18_hu_a427bc1c01c61ba7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="760px"
>
S的第2次推送，主干没有变更，没有本地合入工作
V完成第2次提交和本地合入，推送
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-19.png"
width="1074"
height="323"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-19_hu_3b84f8f85861beda.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-19_hu_711e4f940a79bb3e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="332"
data-flex-basis="798px"
>
S的第3次提交，需要本地合入，推送
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-20.png"
width="1078"
height="345"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-20_hu_92be6eb77101a99a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-20_hu_3e1c6ae613104a6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="312"
data-flex-basis="749px"
>
如此，每次本地的提交，都会向主干进行推送&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-21.png"
width="1021"
height="401"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-21_hu_d27d5d59cebb2a27.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-21_hu_e4a65e5ebd0a4c1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-22.png"
width="1053"
height="429"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-22_hu_f963bcda7ec114e5.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-22_hu_9b20a62829346550.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="589px"
>&lt;/p>
&lt;p>比较二者，高频集成会有更多的本地集成工作，但这些集成的工作量比低频集成低得多。
同时，比工作量减少更重要的是，这样做减少了风险。（虽然大多情况下，进行大的合入也能顺利完成，但有时却会有严重的冲突问题难以解决。这种情况，偶发的巨大问题比常规的小问题更糟糕）
如果每次常规集成10分钟，但50次集成合在一起要6小时，看起来6小时比500分钟还是要少，但是这会导致&lt;em>集成恐惧&lt;/em>（if it hurt，do it more often）&lt;/p>
&lt;p>而且高频集成模式下，可以更早发现代码间的冲突情况，并避免在冲突代码在后期才发现而导致中间持续产生了很多本不应该存在的更多冲突代码。&lt;/p>
&lt;p>源码控制系统其实更多是一个沟通平台，可以意识到其他团队成员的工作&lt;/p>
&lt;h3 id="持续集成">持续集成
&lt;/h3>&lt;p>开发者一旦完成一个健康的提交，就会尽快完成主干集成，一般不超过1天。&lt;/p>
&lt;p>（如果高频集成更有效率且可实施，但使用特性分支，意味着限制了变更不能比一个特性更小，那么集成频次就成了问题？）&lt;/p>
&lt;p>持续集成-只要特性上的开发是有进展并且是健康的，就可以向主干集成。唯一的原则就是每天都要进行集成（甚至更短）&lt;/p>
&lt;p>开发团队需要习惯在主干上存在未完成特性的情况并考虑如何在产品中不暴露这些特性。（通过隐藏入口、配置控制），有时我们还可以实现灰度发布。&lt;/p>
&lt;p>在持续集成模式下，开发着往往不需要创建自己的特性分支，只要在本地的主干分支上工作即可。&lt;/p>
&lt;p>特性分支和持续集成的区别不在于是否有特性分支存在，而在于何时向主干集成。&lt;/p>
&lt;p>两者的比较：&lt;/p>
&lt;p>两种模式的差异更多取决于特性的大小，如果特性足够小（一天以内可以完成），就可以同时实行特性分支和持续集成。&lt;/p>
&lt;p>特性分支最明显的问题在于合并的工作量和不确定性，然而更大的问题是它可能阻止重构。重构是软件优化最有效的途径，但是重构会产生冲突，当解决冲突工作量太大时，重构往往需要极大的勇气。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能分支&lt;/th>
&lt;th>持续集成&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>- 可以将某个功能中的所有代码作为一个单元进行质量评估&lt;br>- 功能完成后才将功能代码添加到产品中&lt;br>- 合并频率较低&lt;/td>
&lt;td>- 支持比特征长度更高的频率集成&lt;br>- 减少发现冲突的时间&lt;br>- 规模较小的合并&lt;br>- 鼓励重构&lt;br>- 需要致力于健康的分支（从而实现自我测试代码）&lt;br>- 科学证据表明它有助于提高软件交付性能&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="特性分支和开源软件">特性分支和开源软件
&lt;/h4>&lt;p>github的特性分支？pull request模式
上下文不同：分散、不定时、团队成员不了解 vs 全职、熟悉的团队成员、可靠&lt;/p>
&lt;p>提交的审核review&lt;/p>
&lt;ul>
&lt;li>代码审核·&lt;/li>
&lt;li>集成受阻&lt;/li>
&lt;li>模块化的重要性&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="发布模式">发布模式
&lt;/h2>&lt;p>主干分支是活动分支，代码持续在其上开发。如果能保持主干的健康状态，任何人都可以从一个稳定的基础开始自己的工作。
而且足够健康的话，也可以直接从主干分支进行产品的发布&lt;/p>
&lt;p>&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/b1dee5579befaf2a2e007af2dbb2c29f.png#pic_center"
loading="lazy"
alt="在这里插入图片描述"
>
对于实施CI/CD的团队，一个常用的实践是通过打Tag标记来跟踪每一个发布的版本。但不实践CD的团队，则需要其他的发布模式&lt;/p>
&lt;h3 id="release-branch-发布分支">Release Branch 发布分支
&lt;/h3>&lt;p>预备发布的分支，只接受以版本稳定和交付为目标的提交 （一般系统测试阶段）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-23.png"
width="716"
height="287"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-23_hu_81382339d9d451f8.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-23_hu_7bf94c3181911e26.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;p>Release分支从主干分支中拉取，不再接受任何新feature的合入。工作在release分支上的开发工作主要是修复发现的bug或影响交付的功能。所有的修改最终还需要合并回主干。
&lt;img src="https://i-blog.csdnimg.cn/blog_migrate/4e7655a86c338d8ce135fc704ded3f97.png#pic_center"
loading="lazy"
alt="cherry-pick 到release分支"
>
尽管release分支上的工作往往比新feature的开发工作量更小，但是如果在其上的开发时间过长依然会导致合并回主干非常困难（主干上的提交越多，合入就越困难）&lt;/p>
&lt;p>实际工作中，因为release分支的存在，合并回主干的操作往往容易被忽视，特别是有困难的冲突需要解决并且存在发布压力的情况下。&lt;/p>
&lt;p>所以有的开发会采用另一种方式，继续在主干上开发，然后通过cherry-pick将只和发布相关的提交合入到release分支。这种方式的缺点是很多时候chrry-pick有时也很困难（对之前的commit有依赖的情况），在实际发布之前对release分支往往有一些重做工作。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-24.png"
width="1000"
height="430"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-24_hu_2d6097156d59f34e.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-24_hu_4afd22e582bedc82.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>
对于只有一个产品版本的团队来说，使用单一的release分支就好。但很多情况下，会存在需要支持多个产品版本的情况，比如客户本地部署的软件，可能会长时间运行在一个历史版本上，但是又需要继续做一些bug fix或者一些特别的需求，此时就需要维护多个不同的release 分支，并定期保持和主干同步&lt;/p>
&lt;p>对开发团队这明显是大大增加了维护难度和工作量，但这更多是产品策略带来的成本。唯一可以做的就是鼓励客户更及时地升级到最近版本（保持产品稳定非常关键，一旦产品不稳定导致问题，会使客户更倾向不再升级）&lt;/p>
&lt;p>Release分支对于难以保持主干分支持续在健康状态的团队非常有必要，团队可以关注在产品发布的功能验证上。但对于单一产品的团队，release分支并不必要，使用主干分支并保持健康状态即可（发布的版本进行Tag标记）
另外，对于发布流程存在很多阻塞的团队，relase分支也是必要的（比如有比较缓慢的审核流程，在应用商店上线的时间窗、安全、法务、合规等的审核等）&lt;/p>
&lt;h3 id="成熟分支">成熟分支
&lt;/h3>&lt;p>分支的head总是标记为最近版本的成熟代码基线&lt;/p>
&lt;p>根据团队对产品成熟度的不同定义，拉取出的对应的成熟分支。比如QA分支（提测）、Staging分支（预发）、production分支（上线）&lt;/p>
&lt;p>但很多情况下，使用清晰定义的Tag机制就可以代替成熟分支的作用。比如“成熟级别-内部版本号”，“qa-233”，“prod-445”
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-25.png"
width="808"
height="418"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-25_hu_384ca6b5a8e6e3fb.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-25_hu_5bc1629d3f4c0e2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="463px"
>&lt;/p>
&lt;h3 id="长期发布分支">长期发布分支
&lt;/h3>&lt;p>release分支一般在产品发布后就可以删除，但我们也可以维持一个长期的发布分支。它的作用可以看作是发布分支和成熟分支的集合。这个分支上进行release前的fix工作并合并回主线，并在实际发布时打上发布Tag，然后进入下一个版本的发布准备。
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-26.png"
width="940"
height="304"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-26_hu_9c8e0e55cb8f7a79.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-26_hu_53dfcd4c2a28453e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="742px"
>&lt;/p>
&lt;h3 id="环境分支">环境分支
&lt;/h3>&lt;p>通过不同的提交来配置代码的运行环境
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-27.png"
width="825"
height="467"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-27_hu_fecd763b06fd168d.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-27_hu_ddb2fac8f5b9c999.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>不同的产品运行环境往往会有不同的配置代码（测试环境、开发环境、性能验证、安全验证环境、预发环境、产品环境等），环境分支会包含这些配置的变更提交并触发对应的构建、部署。&lt;/p>
&lt;p>环境分支一般也用作成熟分支，比如QA的成熟分支，会包含QA环境的配置变更。&lt;/p>
&lt;p>但是环境分支并不是好的实践，不同的环境需要不同的编译代码会引入风险。如果产品程序在不同的环境上有不同的行为表现会使问题的修复、定位变得极其困难。所以最好保证不同环境下运行的可执行代码都是相同的，环境的配置都通过显式的配置文件或变量来控制。环境变更导致的任何更改都不应包含在源码控制系统中&lt;/p>
&lt;p>环境分支只应是缺乏这种环境切换控制机制团队的应急机制存在。&lt;/p>
&lt;h3 id="hotfix">Hotfix
&lt;/h3>&lt;p>用于进行紧急产品故障修复的分支&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-28.png"
width="908"
height="310"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-28_hu_acc30d14bafe8983.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-28_hu_d0d781cb2c1c3797.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="702px"
>
从主线分支对应的release版本拉取hotfix分支，并在完成后合入回主线（如果release时间比较久，合并工作可能会比较大）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-29.png"
width="819"
height="289"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-29_hu_de9c76df8a7edc9a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-29_hu_5c98c8fddd3a9342.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="680px"
>
对使用release 分支的团队，也可以直接在release分支上进行hotfix，此时相当于将原release分支转变为hotfix分支
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-30.png"
width="785"
height="293"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-30_hu_855c768ad01d0c1f.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-30_hu_f596bdaa59685590.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="643px"
>
对于实践CD的团队，甚至可以直接在主干上完成hotfix（还是会拉取hotfix分支，但会从最新的提交拉取），因为一般团队已经具备了不公开未发布特性的能力。而且在hotfix过程中，不允许向主线进行任何新的提交。（hotfix优先）&lt;/p>
&lt;p>如何定义hotfix？对于可以发布频率较高的团队，一般可以将问题纳入日常发布节奏而不需要进行hotfix。取决于团队发布频率和对业务的实际影响&lt;/p>
&lt;h3 id="release-train">release train
&lt;/h3>&lt;p>象火车发车一样有定期的发布间隔，特性完成后选择放入哪一次发布（和SAFe的Agile release train不是一个概念，那更多是组织层面的实践）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-31.png"
width="789"
height="361"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-31_hu_1167bd31713427f4.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-31_hu_8fd7313e73bea9d4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="524px"
>
团队定义定期的发布计划，并确定每列发布列车上的功能，据此承诺、安排各自的工作任务。一旦火车发车，当前分支就转化为release分支，只会接受bug fix。发布列车一般会和feature分支一起使用。对于发布流程中存在较多阻塞的团队来说，release train是非常有用的，不会因为这些阻塞而影响后续功能的研发。
但比较明显的缺点是，如果一个功能很早就完成，也需要等到发车时间才能上线。&lt;/p>
&lt;p>release train可以看作是团队release流程的一个提升手段，对与很难进行稳定发布的团队，实施CD往往不够现实 ，此时release train会是一个好选择。&lt;/p>
&lt;h4 id="loading-future-trains">loading future trains
&lt;/h4>&lt;p>和旧列车发车后再向新的列车上装载需求不同，可以使用这种模式的变种。如果一些功能不能确定是否能在预定发车前完成，可以同时开启两列train（预期发车时间不同），在三月列车上完成的开发工作同时向4月列车上提交并在三月列车发车后继续在4月列车上完成剩余工作。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-32.png"
width="895"
height="304"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-32_hu_d04c6c121bd084fa.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-32_hu_aeb573cbb9964815.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="706px"
>
这种模式可以让4月列车上的工作不影响三月列车，但缺点是如果4月列车上的变更影响到3月的功能，会是后续的合并工作更加复杂。&lt;/p>
&lt;h4 id="和主线发布比较">和主线发布比较
&lt;/h4>&lt;p>release train的主要好处是可以有一个定期的产品发布日历，但是多个分支依然会引入复杂性。
其实使用主线模式也可以如此工作，在主线上开发，到发布日期后增加一个对应的发布分支即可。
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-33.png"
width="820"
height="445"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-33_hu_e9c39230173121cc.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-33_hu_8505908c388c8ec1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;h3 id="预发布主线">预发布主线
&lt;/h3>&lt;p>确保主线是绝对健康状态，并且主线的head永远能被直接发布到产品环境。（每个提交都具备直接发布的健康状态，但是只有实际发布的提交才需要加上tag）
&lt;img src="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-34.png"
width="796"
height="265"
srcset="https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-34_hu_58a256d1b3e13f3a.png 480w, https://chengxiaqiucao.github.io/post/020-%E7%90%86%E8%A7%A3%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/Pasted-20240927-34_hu_51c51264bf398328.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="300"
data-flex-basis="720px"
>&lt;/p>
&lt;h2 id="其他发布模式">其他发布模式
&lt;/h2>&lt;h3 id="实验分支">实验分支
&lt;/h3>&lt;p>在代码基线上收集用于实验的工作，这些功能不会被直接合入产品环境&lt;/p>
&lt;p>实验性的点子
功能的不同实现方式&lt;/p>
&lt;h3 id="未来分支">未来分支
&lt;/h3>&lt;p>一个用于对其他分支侵入性太大的变更分支&lt;/p>
&lt;p>较少使用的模式，只会从主线pull而不会merge回其他分支。一旦使用，意味着团队中存在一个独立的代码特区。应尽可能缩短这个分支存在的时间。&lt;/p>
&lt;h3 id="合作分支">合作分支
&lt;/h3>&lt;p>用于开发者之间协同工作，但不需要进行正式的集成的情况。&lt;/p>
&lt;h3 id="团队集成分支">团队集成分支
&lt;/h3>&lt;p>在向主线集成前，允许子团队间先进行互相集成。（大型项目）&lt;/p>
&lt;hr>
&lt;p>原文参考Martin的博客 &lt;a class="link" href="https://martinfowler.com/articles/branching-patterns.html" target="_blank" rel="noopener"
>Branch Patterns&lt;/a>&lt;/p></description></item><item><title>Git工作原理和常用指令</title><link>https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/git.png" alt="Featured image of post Git工作原理和常用指令" />&lt;h2 id="序言">序言
&lt;/h2>&lt;p>作为一个有追求的测试工程师，现如今敏捷起来，需要和开发人员紧密配合，像配合单元测试、集成测试，都是需要直接面对开发代码的。而且自己做的自动化测试，本身也是代码，因此代码管理其实也是现在做测试绕不过的一个技能。&lt;/p>
&lt;p>而在和开发人员相爱相杀的过程中，直接冲进代码库，看看都写了什么见不得测试的勾当，也是咱们深度测试的高阶招数。&lt;/p>
&lt;p>不过这里首要一关，就是跟代码库打交道。所以本文我们来了解下现在最主流的 &lt;code>Git&lt;/code> 代码分支管理工具， 如何用正确的姿势操作代码库。&lt;/p>
&lt;h2 id="git是什么">Git是什么？
&lt;/h2>&lt;p>Git的作者是大名鼎鼎的Linus Torvalds, 众所周知，著名的 Linux 之父。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/Pasted-20240926-1.png"
width="1338"
height="747"
srcset="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/Pasted-20240926-1_hu_34c10f21f7c649f.png 480w, https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/Pasted-20240926-1_hu_924e7168506e8e94.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="429px"
>&lt;/p>
&lt;p>Linux虽然获得了极大的成功，吸引了众多的开发者参与项目，但在早期，作为Linux项目的管理者，Linus主要还是通过手工方式来合并大家的代码。并没有借助任何代码管理工具。&lt;/p>
&lt;p>倒不是说 Linus 喜欢这种方式，而是因为他对代码版本管理工具非常挑剔，商用的 clearcase，开源的 CVS、SVN等等都不符合他对代码分支管理的预期。&lt;/p>
&lt;p>直到 2002 年，Linus 才相中了一款商用的分布式版本控制系统 BitKeeper，而基于Linux极大的号召力，BitKeeper也愿意让 Linux 社区免费使用。但到2005年，一位社区开发者在未经允许的情况下逆向了BitKeeper并利用了它未公开的接口，导致 BitKeeper 收回了社区的免费使用权。&lt;/p>
&lt;p>回到原点的Linus这时就决定自己开发一个代码的版本控制系统，对这个系统的基本诉求是：&lt;/p>
&lt;ul>
&lt;li>速度&lt;/li>
&lt;li>设计简单&lt;/li>
&lt;li>允许大量并行开发的分支&lt;/li>
&lt;li>完全分布式&lt;/li>
&lt;li>有能力高效管理类似 Linux 内核一样的超大规模项目&lt;/li>
&lt;/ul>
&lt;p>然后，大神的效率，Linus 只用了 10 天时间就推出了 Git 的第一个版本。并且给这个版本起了一个略带嘲讽意味的名字——Git（英语俚语中表示“不愉快的人”）。&lt;/p>
&lt;blockquote>
&lt;p>The name &amp;ldquo;git&amp;rdquo; was given by Linus Torvalds when he wrote the very first version. He described the tool as &amp;ldquo;the stupid content tracker&amp;rdquo; and the name as (depending on your way)&lt;/p>&lt;/blockquote>
&lt;p>当然，在 Linus 推出 Git 的第一个版本后，社区中开始有其他感兴趣的成员(Junio Hamano)开始参与并逐渐接手了 Git 的日常维护，Linus 则继续将主要精力放回到了 Linux 内核的维护上。&lt;/p>
&lt;h2 id="git-vs-svn">Git vs SVN
&lt;/h2>&lt;p>在 Git 之前，最流行的代码版本管理用工具应该是 SVN。&lt;/p>
&lt;p>不能说 SVN 有很大缺点，但 Git 和 SVN 的应用场景确实有较大区别，这里列表做个比较&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">特性&lt;/th>
&lt;th style="text-align: center">Git&lt;/th>
&lt;th style="text-align: center">SVN&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>分支&lt;/strong>&lt;/td>
&lt;td style="text-align: center">轻量级分支，创建快速&lt;/td>
&lt;td style="text-align: center">分支是代码库的完整拷贝&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>分支合并&lt;/strong>&lt;/td>
&lt;td style="text-align: center">快进式合并，合并快速&lt;/td>
&lt;td style="text-align: center">需要手动合并修改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>分布式&lt;/strong>&lt;/td>
&lt;td style="text-align: center">是，设计为分布式&lt;/td>
&lt;td style="text-align: center">不是，不支持完全分布式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>快照&lt;/strong>&lt;/td>
&lt;td style="text-align: center">保存更改的快照&lt;/td>
&lt;td style="text-align: center">保存文件的差异&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>速度&lt;/strong>&lt;/td>
&lt;td style="text-align: center">快，分布式设计&lt;/td>
&lt;td style="text-align: center">慢，中心化设计&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>权限控制&lt;/strong>&lt;/td>
&lt;td style="text-align: center">通过Git Hooks和Gitolite控制&lt;/td>
&lt;td style="text-align: center">通过钩子脚本控制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>学习曲线&lt;/strong>&lt;/td>
&lt;td style="text-align: center">较高，需要理解命令和概念&lt;/td>
&lt;td style="text-align: center">较低，容易上手&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>标签&lt;/strong>&lt;/td>
&lt;td style="text-align: center">轻量级标签，可以后续修改&lt;/td>
&lt;td style="text-align: center">不可变的静态标签&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>历史记录&lt;/strong>&lt;/td>
&lt;td style="text-align: center">保留所有历史记录&lt;/td>
&lt;td style="text-align: center">只保留最近的历史记录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>合并冲突&lt;/strong>&lt;/td>
&lt;td style="text-align: center">需要手动解决&lt;/td>
&lt;td style="text-align: center">自动尝试解决，有冲突时需手动介入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">&lt;strong>命令行工具&lt;/strong>&lt;/td>
&lt;td style="text-align: center">是，Git命令行强大灵活&lt;/td>
&lt;td style="text-align: center">较为简单，主要用于管理和操作仓库&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>总体来说，现在 Git 更为流行，围绕 Git 的生态更加健全，因此逐渐成为了目前最主流的版本控制工具&lt;/p>
&lt;h2 id="git的工作原理">Git的工作原理
&lt;/h2>&lt;p>那 Git 到底是如何进行工作的呢？&lt;/p>
&lt;p>git 在架构上其实是一个三层架构，&lt;/p>
&lt;ol>
&lt;li>&lt;strong>工作目录（working directory）&lt;/strong>： 这是项目文件所在的实际目录。对工作目录中的文件所做的修改被认为是“未跟踪”状态，直到显式地进行 commit 操作。&lt;/li>
&lt;li>&lt;strong>暂存区（staging area）&lt;/strong>：暂存区充当工作目录和 &lt;code>.git&lt;/code> 目录之间的缓冲地带。暂存区域中的文件处于“暂存”状态，以便在下一次 commit 时包含。是允许选择和控制更改的手段。&lt;/li>
&lt;li>&lt;strong>本地库（local repository）&lt;/strong>：也就是 &lt;code>.git&lt;/code> 目录， 它是Git版本控制系统的核心容器，包含各种元数据、对象数据库和配置信息。&lt;code>.git&lt;/code> 目录存储 commit 的快照，并管理项目的历史记录，接受git的各种操作指令。&lt;/li>
&lt;/ol>
&lt;p>而除了本地代码管理的这三层，还存在一个&lt;code>远程库&lt;/code>的概念，用于不同成员间对同一个项目代码进行协作。&lt;/p>
&lt;ol start="4">
&lt;li>&lt;strong>远程仓库（remote repository）：&lt;/strong> 远程仓库是一个中心仓库，用于团队成员协作，通过push、pull、merge等方式确保代码的同步和协同。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/git-architechture.gif"
width="1600"
height="900"
srcset="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/git-architechture_hu_481a628f3cb08d92.gif 480w, https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/git-architechture_hu_7330cee6f686572a.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>结合上面这个架构和主要的Git操作命令，我们理解一下 git 的运作过程：&lt;/p>
&lt;ol>
&lt;li>首先我们通过 &lt;code>git init&lt;/code> 或者 &lt;code>git clone&lt;/code> 建立起本地的git仓库，也就是会包含 &lt;code>.git&lt;/code> 这个本地库目录。&lt;/li>
&lt;li>本地新增或修改的代码，这时其实是处于 &lt;code>未跟踪(untracked)&lt;/code> 状态&lt;/li>
&lt;li>执行 &lt;code>git add .&lt;/code>指令，这时相关变更会进入 &lt;code>暂存区&lt;/code>， 对应的状态是 &lt;code>已缓存(staged)&lt;/code> 或者 &lt;code>已修改(modified)&lt;/code>&lt;/li>
&lt;li>这时再执行 &lt;code>git commit&lt;/code>指令， 作用是从暂存区将变更提交到本地库中，对应状态是&lt;code>已提交(committed)&lt;/code>&lt;/li>
&lt;li>&lt;code>git diff&lt;/code> 是查看变更的命令，可以看到，它其实比较的是工作目录和暂存区的区别，而 &lt;code>git diff HEAD&lt;/code> 则比较本地库和工作目录&lt;/li>
&lt;li>&lt;code>git push&lt;/code> 会将本地库中的内容，提交到远程库&lt;/li>
&lt;li>&lt;code>git fetch&lt;/code> 用于将远程库同步到本地库&lt;/li>
&lt;li>我们常用的&lt;code>git pull&lt;/code>则是将远程库直接拉取到本地的工作目录下&lt;/li>
&lt;/ol>
&lt;h2 id="常用-git-命令">常用 Git 命令
&lt;/h2>&lt;p>借用一个中文的Git cheatsheet，便于速查。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/Pasted-20240926-2.png"
width="990"
height="699"
srcset="https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/Pasted-20240926-2_hu_3de360ecc490869f.png 480w, https://chengxiaqiucao.github.io/post/024-git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/Pasted-20240926-2_hu_dd872a6b0c9a6353.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>详细的命令用法这里就不再罗列了，核心命令主要也就是上面原理图中提及到的几个。&lt;/p>
&lt;p>进一步学习的话，也可以利用在线的学习工具，这里推荐一个：&lt;/p>
&lt;p>&lt;a class="link" href="https://learngitbranching.js.org/" target="_blank" rel="noopener"
>https://learngitbranching.js.org/&lt;/a>&lt;/p></description></item><item><title>软件测试的目的到底是什么？</title><link>https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/</link><pubDate>Fri, 30 Aug 2024 20:35:21 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/testing.png" alt="Featured image of post 软件测试的目的到底是什么？" />&lt;h2 id="对测试工作目的的认识误区">对测试工作目的的认识误区
&lt;/h2>&lt;p>在IT行业，其实一直对软件测试，测试这个工作的目的，一直有着不太准确的认识。&lt;/p>
&lt;p>各种说法都有，比较流行，被很多IT工作甚至测试从业者认可的有下面两种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>测试是为了发现Bug&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>大家一般概念中通常都会把做测试和找Bug等同起来，也就是说软件测试的目的是为了发现产品中的问题。&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>测试是为了验证产品满足需求&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>也有从测试执行的角度来说，测试工作是为了证明软件产品是符合产品需求定义，是为了验证需求是否实现的。&lt;/p>&lt;/blockquote>
&lt;p>那这些说法对不对呢？ 可以说对，也可以说不对&lt;/p>
&lt;p>确实，测试工作的主要产出就是我们发现的各种产品bug，而要验证需求则是我们测试工作的主要输入和评估标准。&lt;/p>
&lt;p>但这些就是我们要进行测试工作的目的吗？&lt;/p>
&lt;p>单纯把测试工作的目的从上面几点来看就狭隘了。&lt;/p>
&lt;h3 id="测试是为了找bug吗">测试是为了找Bug吗？
&lt;/h3>&lt;p>我们做测试工作是为了发现bug吗？&lt;/p>
&lt;p>bug对于产品来说，意味着成本，bug本身对产品来说是不会产生价值的。被解决掉的Bug才会带来产品质量的提升，进而体现到产品的价值中去。bug的减少，对产品才有价值。&lt;/p>
&lt;p>所以，单纯地把发现更多bug作为测试工作目的是一个误区，这也是很多团队错误地把发现bug的数量作为测试工作成效依据的主要原因。如果bug发现得越多代表测试工作越好，测试人员是不是就不应该再早期阶段去参与？因为在前期就规避掉的问题其实会导致到测试阶段bug变少，如果测试工作是希望发现更多bug，是不是就应该希望产品提测的时候包含更多bug呢？ 这个导向显然是不符合产品利益的。&lt;/p>
&lt;p>因此把发现bug作为测试工作的目的是一个常见的，明显的对测试工作的认识误区&lt;/p>
&lt;h3 id="测试就是为了验证需求吗">测试就是为了验证需求吗？
&lt;/h3>&lt;p>第二个对测试工作目的的认识误区，就是认为测试工作就是为了验证产品的需求。这其实是另一个被广泛接受的错误认识。甚至我们当今流传广泛的很多软件工程实践，都是建立在这个错误认识之上的。&lt;/p>
&lt;p>测试大牛James Bach有篇著名的论文，探讨了Testing跟Checking的区别。&lt;/p>
&lt;p>也就是测试工作远远不止是checking。而验证需求，这样的checking只是测试工作的一部分。测试要深入产品、发现潜在的深层问题，还需要除了checking之外的更多其他能力支撑，包括探索、试验、设问、推理等等&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/Pasted-20240830.png"
width="833"
height="582"
srcset="https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/Pasted-20240830_hu_25cc6891f9026da1.png 480w, https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/Pasted-20240830_hu_70c44345306bceff.png 1024w"
loading="lazy"
alt="Testing vs Checking"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>所以，把验证需求，当作测试工作的目的，是不够的。像工厂质检那样依据严格的规程来确定产品是否合格，和软件产品这种偏创造性的行业也并不匹配。这也是我们说自动化测试更多是为了提升执行效率和快速得到已覆盖场景的验证结果反馈，但自动化测试本身并不能达到完成产品测试的目的。&lt;/p>
&lt;p>测试除了验证需求中明确的功能外，还需要针对交付产品进行更深度的探索，才更可能充分发现产品中的质量问题。这也是近年探索式测试被更多提及的主要缘由。&lt;/p>
&lt;h2 id="软件测试工作的真正目的">软件测试工作的真正目的
&lt;/h2>&lt;p>好，那既然测试工作的目的既不是为了找Bug，也不是为了验证需求，那目的究竟是什么呢？&lt;/p>
&lt;blockquote>
&lt;p>软件测试的真正目的： &lt;strong>准确&lt;/strong>、&lt;strong>及时&lt;/strong>地&lt;strong>评估&lt;/strong>出被测对象的&lt;strong>质量状态&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>这里的核心是&lt;strong>评估质量状态&lt;/strong>。质量是产品属性，只能通过产品本身的变更来调整，所以测试工作无法提高质量，也无法保证质量。但通过测试工作，我们可以通过暴露产品中的问题，反映出产品的质量状态。我们的主要作用是对当前产品的质量进行评估。再由产品或项目针对这个状态来对质量进行改进。&lt;/p>
&lt;p>所以测试工作对于质量的贡献更多体现在这个评估出的质量状态是否及时和准确两方面。&lt;/p>
&lt;h3 id="准确评估">准确评估
&lt;/h3>&lt;p>测试无法穷尽，在有限的时间内发现产品的所有问题也是不可能的。但测试的职责是需要在有限的时间内，尽可能多地将影响产品质量的问题暴露出来。这里除了数量外，我们还要看问题的影响，综合这两点，才是更准确地反映质量。&lt;/p>
&lt;h3 id="及时评估">及时评估
&lt;/h3>&lt;p>产品是无法进行无限测试的，而且测试工作其实本身是成本支出。所以通过测试工作得出产品质量状态的时效对于产品的质量改进和成本控制也尤为关键。问题发现得越早，修复成本就越低；得出质量状态评估的时间越短，产品进行针对性改进的空间就越大。所以测试工作的目的，还包括提高测试效率，通过自动化、测试左移等手段来尽可能及时地完成产品质量评估。&lt;/p>
&lt;p>所以这才是我们进行软件测试工作的真正目的，不是为了发现更多的bug，也不是仅仅是对需求实现的检查，而是通过我们的专业能力，在有限的时间内，及时、充分地反映出当前产品实际的质量状态。&lt;/p>
&lt;p>以上就是关于软件测试工作目的 的分享，我是城下秋草。 &lt;strong>秋草观测台，观察测试业&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>推广下我的测试课程，感兴趣的小伙伴可以通过以下链接了解下哦&lt;/p>
&lt;p>❤️❤️❤️❤️ &lt;a class="link" href="https://coding.imooc.com/class/chapter/885.html#Anchor" target="_blank" rel="noopener"
>城下秋草的测试职业进阶提升课&lt;/a> ❤️❤️❤️❤️&lt;/p></description></item><item><title>提 Bug 的艺术</title><link>https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/</guid><description>&lt;h3 id="前言">前言
&lt;/h3>&lt;p>作为测试工程师最重要的工作产出，Bug Report（或者故障单、问题单）是测试工程师工作成果的直接体现，也是最能呈现测试工程师价值和能力的输出物。但项目干系人甚至测试工程师本身对Bug Report的重要性往往认识不足，Bug 单的内容及其提交方式、处理流程对项目推进、运作效率甚至团队士气都有重要影响。&lt;/p>
&lt;p>行业针对 Bug Report 的讨论和总结还比较少，本篇我们希望以笔者多年的从业观察出发，对 Bug report 的要素及专业测试工程师的处理方式给出一些总结和建议，意在抛砖引玉，错漏之处还请多多指正。&lt;/p>
&lt;p>主要包含以下内容：&lt;/p>
&lt;ul>
&lt;li>Bug 是什么，Bug 报告单是什么&lt;/li>
&lt;li>开发或项目团队看到 Bug 实际希望获取的信息是什么&lt;/li>
&lt;li>测试小白在提 Bug 时的常见错误做法&lt;/li>
&lt;li>提 Bug 与说故事&lt;/li>
&lt;li>专业测试工程师如何高质量地提交 Bug&lt;/li>
&lt;/ul>
&lt;h3 id="何为bug-bug的历史">何为Bug？ Bug的历史
&lt;/h3>&lt;p>Bug 一词在英文中本是虫子，臭虫之意，现在 IT 行业用它来代指软件中存在的缺陷，其实这个历史还比较有意思：&lt;/p>
&lt;p>早在 1878 年，大发明家爱迪生就在给朋友的信中就用 bug 一词代指过电子电路中的故障（或可能导致故障的原因），但是真正在计算机行业载入史册还要到 1947 年 9 月 9 日。&lt;/p>
&lt;p>这时第一批写程序的程序员们正在哈佛大学研发 markII 计算机，其中 [Grace Murray Hopper][1] 在查找一个问题时，在中继器触点旁发现了一个飞蛾，用日志本拍死了它，并标记它为“第一个找到 bug 的真实案例”。由此 bug 一词便被用来代指计算机中的缺陷或故障。相应地 debug 则被用来指代去除故障的调测行为。&lt;/p>
&lt;p>下图即保存在美国管家博物馆的史上第一个 bug 实物：
&lt;img src="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134227.png"
width="743"
height="599"
srcset="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134227_hu_e82606b7db3ba596.png 480w, https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134227_hu_b4619dde3aa4f924.png 1024w"
loading="lazy"
alt="first bug"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="297px"
>&lt;/p>
&lt;p>史上第一批程序员，其中唯一的女性就是“虫”母：
&lt;img src="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134247.png"
width="888"
height="588"
srcset="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134247_hu_92d04c99af73787e.png 480w, https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134247_hu_cb11bc7065bce58e.png 1024w"
loading="lazy"
alt="bug mother"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="362px"
>&lt;/p>
&lt;p>总之，现在 Bug 一词可以代指软件或程序中存在的缺陷或者故障。但对于项目团队来说，建议不要简单地将 Bug 定义成&lt;code>故障&lt;/code>，因为&lt;code>故障&lt;/code>一词定性上有否定的意味，而将 Bug 视作&lt;code>缺陷&lt;/code>、或者&lt;code>问题&lt;/code>，强调&lt;strong>可改进空间&lt;/strong>对项目团队更加有积极的引导作用。&lt;/p>
&lt;h3 id="bug-report-问题单是什么">Bug Report （问题单）是什么?
&lt;/h3>&lt;p>report 这个词在英文中既可作动词也可作名词。所以 &lt;code>Bug report&lt;/code> 既可表示发现问题并报告的这个动作，也可以指问题发现后提交的报告内容。 这里我们一般还是将它看作是问题报告(名词)，即 &lt;code>问题单&lt;/code>，那么&lt;code>问题单&lt;/code>到底是什么呢？&lt;/p>
&lt;p>测试大神 Cem Kaner 曾指出:&lt;/p>
&lt;blockquote>
&lt;p>The purpose of testing is not to find bugs. The purpose is to get bugs fixed.&lt;/p>
&lt;p>测试的目的不是发现 Bug, 而是使 Bug 被修复。&lt;/p>&lt;/blockquote>
&lt;p>这个观点其实指出了很多测试人员认识上的一个误区，就是觉得测试工作就是尽可能多地发现 Bug。 其实对团队来说，发现的 Bug 再多，最终还是要解决掉才能体现这些 Bug 被发现的价值。&lt;/p>
&lt;p>而从发现到被解决， &lt;code>问题单&lt;/code> 是其中的主要媒介，既是测试人员测试工作的输出，又是开发人员解决问题的输入，重要性不言而喻。&lt;/p>
&lt;p>另外，虽然将发现的问题知会给开发人员有各种形式：口头告知、实际演示、电子邮件、IM聊天等等都可以起到知会的作用。但在现代软件研发过程中，一般还会有专门的系统来进行缺陷追踪，如 JIRA、禅道、bugfree、QC（HP quality center） 等软件都能进行缺陷的提交和跟踪。通过这些专门的系统，不仅能够起到记录和反馈的作用，还能够通过统计和分析更好地反映出项目整体的质量状况和研发进展。&lt;/p>
&lt;p>因此：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>问题单&lt;/code> 是测试人员测试活动中发现缺陷后的输出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>问题单&lt;/code> 是开发人员解决缺陷的输入&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>问题单&lt;/code> 是测试人员和开发人员之间针对 Bug 的沟通媒介&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>问题单&lt;/code> 还是项目团队评估当前研发状态和产品成熟度的指示器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="问题单的作用和重要性">问题单的作用和重要性
&lt;/h3>&lt;p>相信很多测试工程师在提交问题单后，都有得到如下一些反馈或抱怨的经历：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>你这个问题单到底想说明啥？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在我这里运行没有这个问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为什么你提交的这个算是缺陷？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般人不会像问题单那样使用软件，脑子有问题的人才会那样用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这个确实是问题，但是修复成本太大，而且也可以换种操作方式来规避&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你虽然认为这是个问题，但是实际用户不会觉得不好&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你提交的虽然确实是问题，但是影响用户很小。那些影响用户更大的部分为什么看不到多少问题单？&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>测试人员当然不希望得到这样的反馈。但这些问题也从侧面反映出在对待 Bug 这件事上，开发人员或项目团队更加注重的其实是 Bug 如何解决（包括是否&lt;strong>需要&lt;/strong>解决的判断），他们更希望从&lt;code>问题单&lt;/code>中获知的是如下的一些信息：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>所发现的什么问题？&lt;/p>
&lt;ul>
&lt;li>问题现象是什么？&lt;/li>
&lt;li>总是会出现吗？&lt;/li>
&lt;li>发现这个问题时的背景、上下文是什么？&lt;/li>
&lt;li>除了看到的现象，系统同时还发生了什么？&lt;/li>
&lt;li>有没有截图、日志、录屏？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>为什么它是个问题？&lt;/p>
&lt;ul>
&lt;li>这个问题有什么影响？&lt;/li>
&lt;li>不解决它会怎么样？&lt;/li>
&lt;li>发生概率怎么样？&lt;/li>
&lt;li>有没有和其他问题重复？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>是做了什么操作，暴露出的这个问题？&lt;/p>
&lt;ul>
&lt;li>输入是什么？&lt;/li>
&lt;li>用了什么测试路径？测试数据？&lt;/li>
&lt;li>所在测试环境、软件版本如何？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>所以，作为测试，不应把&lt;code>问题单&lt;/code>看作是一个简单的问题记录，它是测试和开发之间的重要沟通媒介，好的问题单可以极大减少双方的沟通成本，既极大减轻开发人员解决问题的工作量，同时也减少测试人员澄清、重复验证等的工作量。对项目来说，&lt;code>问题单&lt;/code>的提交质量，影响的就是团队的生产力以及交付速度，不容小觑。&lt;/p>
&lt;h3 id="问题单的要素">问题单的要素
&lt;/h3>&lt;p>了解了&lt;code>问题单&lt;/code>的作用，那么&lt;code>问题单&lt;/code>中应该包含的要素也就比较清楚了，一般有以下方面：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>方便初步判断的标题&lt;/strong>&lt;/p>
&lt;p>标题应该能够比较清楚地概要说明问题，以及这个问题所处的模块。便于开发人员作一个初步的判断&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上下文及必要的关联信息&lt;/strong>&lt;/p>
&lt;p>发生问题时的上下文背景，关联的信息如软件版本、测试环境、配置情况、资源状态等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>准确合理的详细描述信息&lt;/strong>&lt;/p>
&lt;p>详细描述问题发现的步骤，操作预期，实际发生的状况。问题发生频率，所使用的测试输入、数据、文件等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>帮助问题解决的补充信息&lt;/strong>&lt;/p>
&lt;p>能够帮助开发人员加快解决问题进度的补充信息，比如截图、录屏、操作日志、系统日志等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>帮助项目决策的辅助信息&lt;/strong>&lt;/p>
&lt;p>测试人员作为 Bug 的第一判断者，应给出问题的严重程度、解决优先级建议。初步指派解决问题的开发人员，以及便于统计、追踪的关联信息标识。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="测试小白的错误做法">测试小白的错误做法
&lt;/h3>&lt;p>那么结合&lt;code>问题单&lt;/code>的要素，我们可以初步总结一些测试小白或者不专业测试在提交 Bug 时常见的一些错误做法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标题不够明确&lt;/p>
&lt;p>标题非常简单，不便于初步判断问题。比如简单地写 “系统 crash”，太过笼统，而且过于简单的标题很容易产生雷同，对问题的集中回顾、评审都带来很多不便。&lt;/p>
&lt;p>或者过于复杂。太长的标题，容易导致阅读疲劳，没有重点。比如标题中详细描写操作步骤就没什么必要&lt;/p>
&lt;/li>
&lt;li>
&lt;p>脱离实际，偏离需求场景。&lt;/p>
&lt;p>有时候测试小白会从个人偏好角度出发，想当然地提出一些问题。“我觉得”、“感觉上不好” 是这类小白问题中出现的高频词汇。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不是问题&lt;/p>
&lt;p>测试小白，往往因为对系统实现原理理解上的错误或技能水平上的不足，提交出不是 bug 的问题单。&lt;/p>
&lt;p>还有因为测试小白的测试方法或者环境配置本身就是不正确的，由此导致的问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>描述信息不足&lt;/p>
&lt;p>典型的，通过问题单的描述信息，开发人员不足以确认问题现象或自行复现。测试小白往往觉得发现问题就完成工作，没有把充分的信息提供给开发人员，比如截图、日志等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无关信息过多、格式杂乱&lt;/p>
&lt;p>有时小白的问题单中会包含太多冗余的嘈杂信息，很难看到重点。比如不分青红皂白把几万行的 log 贴到问题单中&lt;/p>
&lt;p>或者完全不进行排版，一大堆信息杂乱地混杂在一起，阅读难度极高&lt;/p>
&lt;/li>
&lt;li>
&lt;p>问题过多&lt;/p>
&lt;p>问题单应该聚焦，有时测试小白会在同一个问题单中包含很多个不同的问题。这对于问题追踪和聚焦都非常不利&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只看现象不考虑本质&lt;/p>
&lt;p>有时候简单的问题现象，往往是一些严重问题的体现或线索。小白往往会忽视重要的风险，对一些看似蛛丝马迹的问题视而不见，将潜藏在现象之下的 Bug 轻易漏过。比如有些预期外的提示信息，往往是后台计算、统计准确性等 Bug 的体现。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="提-bug-与说故事">提 Bug 与说故事
&lt;/h3>&lt;p>再回到 &lt;code>提交 Bug&lt;/code> 这件事，本质上，这其实是一个沟通的过程，&lt;code>问题单&lt;/code> 承载了这个沟通媒介的作用，通过&lt;code>问题单&lt;/code>，测试人员将自己在测试过程中看到的、发现到的问题描述出来，开发人员通过阅读&lt;code>问题单&lt;/code>，掌握到对应信息并相应地去解决问题。&lt;/p>
&lt;p>所以&lt;code>提 Bug&lt;/code> 其实和写一个小短文，说一个小故事一样，测试人员是作者，而开发人员是读者。&lt;/p>
&lt;p>我们在提&lt;code>问题单&lt;/code>时，其实也是写作的一种。写作的 &lt;strong>5W&lt;/strong> 要求也一样适用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What 内容&amp;ndash;具体的问题是什么？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Why 目的&amp;ndash;为什么要提出这个问题？为什么它是个问题？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Who 主体-问题主体是谁？关联方有谁？？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Where 地点&amp;ndash;问题发生在哪？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When 时间&amp;ndash;在什么时间和频率下发生？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>提 Bug 时思考这 &lt;strong>5W&lt;/strong>，再结合上文提到问题单要素，一般就不会犯很多测试新手在提问题单时常犯的错误了。&lt;/p>
&lt;h3 id="提-bug-的艺术">提 Bug 的艺术
&lt;/h3>&lt;p>上文阐述问题单的要素以及 提Bug 时应注意的一些细节，但是为什么我们还要说提 Bug 其实是一件艺术性的工作？&lt;/p>
&lt;p>我们来举几个问题单的例子：&lt;/p>
&lt;p>假设有一个商品管理系统，用户在某个特定商品分类下（水果）新增商品时会发生crash&lt;/p>
&lt;p>&lt;strong>问题单 例一：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">用户新增商品，发生Crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如图所示（crash界面截图）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个问题单通过提供截图其实基本描述了问题现象。但是对开发人员来说，信息量太少，而且很有可能并不能第一时间复现问题（水果分类）。问题单中包含的信息太过于简单，可以说是非常糟糕的问题单案例。&lt;/p>
&lt;p>&lt;strong>问题单 例二：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">用户在新增商品时，会发生Crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作步骤：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 打开App
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 用户登录系统，输入正确的用户名、密码并登录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 进入商品管理页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 选择分类：水果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 点击新建商品按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 输入商品信息：*********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 点击提交按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">预期结果：商品创建成功App
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">实际结果：发生 crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">使用的设备机型：xiaomi 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作系统版本：android 8.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">软件版本 V1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">附件：crash截图
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个问题单，是很多测试小白常见的提单形式，包含了非常详细的操作步骤和相关辅助信息。但是这也是一个非常糟糕的问题单。
首先，这样的步骤描述毫无必要，开发人员不会连打开app、登录、提交这样的操作也不了解需要在问题单中交代
其次，辅助信息虽多，但是基本和问题原因无关，并不利于开发人员定位，反而引入了一些干扰信息。
这样的问题单，无法体现测试人员的专业价值，对问题的快速解决也没有好处&lt;/p>
&lt;p>&lt;strong>问题单 例三：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">用户在水果分类下进行新增商品操作时，会发生Crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作步骤：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 选择水果分类，创建商品，发生crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 选择非水果分类，创建商品，商品创建成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已验证机型：xiaomi 8，huawei mate 7 等现象一致，应和机型、操作系统、版本无关
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">附件：错误截图、系统 crash 时的 logcat 日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">影响：用户无法新增水果分类商品，直接影戏用户使用。需高优先级解决
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此问题单已经可以算比较合格的问题单了，比较明确地指明了问题发生的场景，并将一些无关信息进行了初步排除。开发人员可以聚焦在水果这个类别下的商品创建进行问题分析。
同时指出了问题对软件的影响和解决优先级建议，使项目团队明确知道这个问题的影响所在&lt;/p>
&lt;p>&lt;strong>问题单 例四：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">用户在水果分类下进行新增商品操作时，会发生空指针Crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作步骤：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 选择水果分类，创建商品，发生crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 选择非水果分类，创建商品，商品创建成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 对已有水果分类下的商品进行编辑操作，可以编辑成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">后台数据库对水果分类因字段缺失insert操作出错，update操作正常。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已验证机型：xiaomi 8，huawei mate 7 等现象一致，应和机型、操作系统、版本无关
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">附件：错误截图、系统 crash 时的 logcat 日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">影响：用户无法新增水果分类商品，直接影戏用户使用。需高优先级解决
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个问题单，则在上一个问题单基础上更进一步，初步分析出了问题原因，新增操作时，有一个关键字段信息未包含，所以导致的crash。开发人员已经可以很明确地对问题进行修复了&lt;/p>
&lt;p>&lt;strong>问题单 例五：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">用户在水果分类下进行新增商品操作时，会发生空指针Crash。导入商品操作旧模板也同样存在问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作步骤：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 选择水果分类，创建商品，发生crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 选择非水果分类，创建商品，商品创建成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 对已有水果分类下的商品进行编辑操作，可以编辑成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">后台数据库对水果分类因字段缺失insert操作出错，update操作正常。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在商品管理导入商品功能中，新模板水果商品导入成功，使用旧模板（未包含新增字段）导入水果数据，也会发生失败。需一并修复。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已验证机型：xiaomi 8，huawei mate 7 等现象一致，应和机型、操作系统、版本无关
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">附件：错误截图、系统 crash 时的 logcat 日志、新旧模板导入日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">影响：用户无法新增水果分类商品，直接影戏用户使用。需高优先级解决
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个问题单，则在上一个例子的基础上，根据测试人员的经验，推理出有类似逻辑的导入功能，可能存在同样问题并进行了验证。很好体现了测试人员专业能力。&lt;/p>
&lt;p>通过以上这个简单的案例，我们可以看到，不同的问题单提法，对问题解决效果却有很大差距。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>包含的信息太少，开发人员难以确定产生 Bug 的根本原因，Debug 的工作量成倍上升。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包含的信息过多，开发人员又会耗费额外的精力去分析那些冗余的信息，甚至干扰调试、解决的方向，同样造成很大的工作量浪费&lt;/p>
&lt;/li>
&lt;li>
&lt;p>越是能清晰、明确地反映问题的根本原因，开发人员解决问题就越是高效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>测试人员的经验和判断推理能力，通过问题单能够很好地得到体现&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以为什么说提 Bug 是个艺术性的工作？问题单既不能太过简单，也不应太过冗杂，还要能够将信息尽可能准确、全面地传递给开发，这真的是一件非常艺术性的事情。&lt;/p>
&lt;h3 id="结语">结语
&lt;/h3>&lt;p>总而言之，提 Bug 在软件研发过程中，是一件相当重要的活动，&lt;code>问题单&lt;/code>的质量直接影响团队的效率和产出。作为专业的测试人员，掌握提 Bug 的艺术，&lt;code>问题单&lt;/code>不在是个简单的问题记录，更是测试和开发间的沟通桥梁，是帮助开发高效修复 Bug 的支撑。&lt;/p>
&lt;p>欢迎大家关注评论，也可关注公众号： &lt;strong>秋草说测试&lt;/strong>&lt;/p></description></item></channel></rss>
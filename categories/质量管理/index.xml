<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>质量管理 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/categories/%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/</link><description>Recent content in 质量管理 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Tue, 15 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/categories/%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>高效会议5P法，别让会议偷走你的时间</title><link>https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515.png" alt="Featured image of post 高效会议5P法，别让会议偷走你的时间" />&lt;h2 id="引言">引言
&lt;/h2>&lt;blockquote>
&lt;p>&amp;ldquo;每天都是开不完的会！一多半时间就是在听个别人争吵！&amp;rdquo;
“什么事都喜欢拉一大票人开会，真正发言的倒没几个！”
“一个需求改动，计划10分钟的会能聊上两小时！”&lt;/p>&lt;/blockquote>
&lt;p>在快节奏的软件研发工作中，会议是信息同步、决策制定、问题解决不可或缺的一环。但我们很多时候，感受到的却是会议的低效！据统计，一名软件工程师平均每周要花 &lt;strong>12小时&lt;/strong> 在各种会议上，但其中&lt;strong>60%的会议被证明低效甚至无效&lt;/strong> 。&lt;/p>
&lt;p>要如何让会议真正成为协作工具而非时间黑洞？本文，我们将通过介绍高效会议的5P法，拆解会议提效的核心逻辑，摆脱“会海”！&lt;/p>
&lt;h2 id="何为5p法">何为5P法？
&lt;/h2>&lt;p>会议5P法，其实就是我们在召开会议中，需要关注的5个主要方面。把这5方面处理好，那么会议就不会陷入漫无目的、冗长低效的泥潭中。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515.png"
width="969"
height="604"
srcset="https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515_hu_570525dede6fdf1c.png 480w, https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515_hu_c65ebbfe95f0e919.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;h2 id="people谁该来参会">People：谁该来参会？
&lt;/h2>&lt;blockquote>
&lt;p>案例： 需求澄清会上，只有产品经理和几个核心开发参与了，但测试人员和UI/UX设计师缺席。结果，开发过程中发现需求理解与测试预期不一致，UI/UX设计也与功能实现有偏差，导致后期大量返工。&lt;/p>&lt;/blockquote>
&lt;p>低效会议的常见问题之一就是 “该来的人没来，不该来的人坐一堆”。所以确保邀请了所有关键且必要的干系人，同时避免无关人员的参与，是会议成功的第一步。&lt;/p>
&lt;p>重点考虑如下几点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>必要性：&lt;/strong> 只邀请那些能提供关键信息、参与决策或受会议结果直接影响的人。&lt;/li>
&lt;li>&lt;strong>代表性：&lt;/strong> 如果团队较大，可以邀请各职能的代表参加。&lt;/li>
&lt;li>&lt;strong>角色清晰：&lt;/strong> 明确每个人的发言重点和责任。&lt;/li>
&lt;/ul>
&lt;p>比如上例需求澄清会中，我们可以确定以下People角色参会：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>产品负责人 (Product Owner):&lt;/strong> 阐述需求背景、用户故事、业务价值。&lt;/li>
&lt;li>&lt;strong>开发团队代表 (Development Team Lead/Members):&lt;/strong> 从技术实现角度提问，评估可行性。&lt;/li>
&lt;li>&lt;strong>测试团队代表 (Test Lead/QA Engineer):&lt;/strong> 从可测试性角度提问，思考测试场景。&lt;/li>
&lt;li>&lt;strong>UI/UX设计师 (UI/UX Designer):&lt;/strong> 明确用户交互和界面设计细节。&lt;/li>
&lt;li>&lt;strong>(可选) 架构师 (Architect):&lt;/strong> 若需求涉及复杂系统架构调整。&lt;/li>
&lt;/ul>
&lt;h2 id="purpose为什么开这个会">Purpose：为什么开这个会？
&lt;/h2>&lt;blockquote>
&lt;p>案例： 敏捷回顾会变成了“吐槽大会”或“表扬大会”，大家七嘴八舌，但没有聚焦于如何改进下一个迭代的工作流程和协作方式。会议是召开了，但到下一个迭代，存在的问题依旧没有改观。&lt;/p>&lt;/blockquote>
&lt;p>没有目标的会议，就像失去导航的海上孤舟，很容易迷失航向，难以保证最后驶向何方，最后不了了之。&lt;/p>
&lt;p>只有所有参会者都了解会议的目的，才能统一大家的认知，确保讨论不偏离主旨。&lt;/p>
&lt;p>而这里目标的设定，也应该注意：&lt;/p>
&lt;ul>
&lt;li>目标应具体、可衡量、可达成、相关性强且有时间限制 (&lt;strong>SMART原则&lt;/strong>)。&lt;/li>
&lt;li>一次会议尽量聚焦于1-2个核心目标，避免议题过多导致失焦。&lt;/li>
&lt;li>确保所有参会者对会议目标有共同的理解。&lt;/li>
&lt;/ul>
&lt;p>比如上面迭代的回顾会，我们就可以将目标进行明确：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>主要目标：&lt;/strong> 检视上一个迭代中哪些做得好，哪些方面存在问题，并为下一个迭代制定具体的改进措施。&lt;/li>
&lt;li>&lt;strong>具体子目标：&lt;/strong>
&lt;ul>
&lt;li>识别出影响团队效率最高的1-2个障碍点，并制定解决方案；&lt;/li>
&lt;li>确定一项需要继续保持的优秀实践。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="process会议应该怎么开">Process：会议应该怎么开？
&lt;/h2>&lt;blockquote>
&lt;p>案例：测试用例评审会。在会议开始后，大家才拿到厚厚一沓打印好的测试用例，逐条阅读，临时提问。主讲人讲解也缺乏重点，评审人员思路发散，导致会议超时严重，评审效果极差。&lt;/p>&lt;/blockquote>
&lt;p>如果Purpose是确保航向，那么Process就是会议这艘船的海图。一个清晰的流程能够引导会议有序进行，确保每个议题都得到充分讨论，并能在预定时间内达成目标。&lt;/p>
&lt;p>包括会议的议程、时间分配、讨论规则、决策方式等约定。&lt;/p>
&lt;p>还是以上面案例来说明，在会前我们就可以约定Process：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>结构化议程：&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>会前准备 (5-10分钟，或会前完成)：&lt;/strong> 主持人简述评审范围、目标和用例背景。强调测试用例已提前共享，默认参会者已预先阅读。&lt;/li>
&lt;li>&lt;strong>重点/疑点用例讨论 (30-40分钟)：&lt;/strong> 针对预先收集的疑问或标记的重点用例进行集中讨论。限定每个复杂用例的讨论时间。&lt;/li>
&lt;li>&lt;strong>总结与确认 (10-15分钟)：&lt;/strong> 汇总评审意见，明确修改负责人和截止日期。确认用例覆盖度是否达成共识。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>明确讨论规则：&lt;/strong> 例如，鼓励建设性意见，避免打断发言，意见不一时如何决策（如少数服从多数，或特定角色最终决定）。&lt;/li>
&lt;li>&lt;strong>时间控制：&lt;/strong> 为每个议程环节设定预估时间，并严格执行。&lt;/li>
&lt;/ul>
&lt;h2 id="product会议的成果是什么">Product：会议的成果是什么？
&lt;/h2>&lt;blockquote>
&lt;p>案例：版本发布计划会。在会议中，大家讨论了许多关于新版本的功能设想和潜在风险，但没有形成明确的发布范围、优先级和责任人。会后大家对“新版本到底要做哪些功能”依然模糊不清。&lt;/p>&lt;/blockquote>
&lt;p>首先澄清一个误区，并不是会议开完，产生了会议纪要就叫做会议有了输出。
一个会议真正的成果应该是可转化为下一步行动的共识，并且是可追溯的。它可以是决策、行动计划、解决方案、共识记录、更新的文档等。没有明确的产出，会议就等于白开。&lt;/p>
&lt;p>以上面案例来说，明确的交付物可以是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>确定的发布范围：&lt;/strong> 一份清晰的功能列表 (Features List) 或用户故事 (User Stories)，并且有优先级的区分。&lt;/li>
&lt;li>&lt;strong>初步的时间表：&lt;/strong> 关键里程碑和预计的发布日期。&lt;/li>
&lt;li>&lt;strong>明确的责任分工：&lt;/strong> 每个主要模块或任务的负责人。&lt;/li>
&lt;li>&lt;strong>已识别的风险及应对措施：&lt;/strong> 记录潜在风险和初步的缓解计划。&lt;/li>
&lt;li>&lt;strong>会议纪要：&lt;/strong> 包含以上所有内容，并明确后续的跟踪事项。 是会议成果的书面记录&lt;/li>
&lt;/ul>
&lt;h2 id="pitfall预计的风险是什么">Pitfall：预计的风险是什么？
&lt;/h2>&lt;p>&lt;strong>Pitfall&lt;/strong>指的是“在会议过程中，可能会遇到哪些潜在的问题或障碍？我们如何预防或应对？”&lt;/p>
&lt;h3 id="一些常见的会议风险点及应对思路">一些常见的会议风险点及应对思路
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>议题过于发散，讨论跑题：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 参会者可能对某个细节过度深究，或引入不相关的议题。&lt;/li>
&lt;li>&lt;strong>应对 (结合Purpose &amp;amp; Process):&lt;/strong> 主持人需时刻谨记会议核心目标，温和地将讨论拉回正轨。可以设置“停车场”（Parking Lot）机制，记录临时想到的但与当前议题无关的点，会后再讨论。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键人物缺席或迟到：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 核心决策者或信息提供者未能按时参与，导致会议无法有效推进。&lt;/li>
&lt;li>&lt;strong>应对 (结合People):&lt;/strong> 提前与关键人物确认时间，发送会议提醒。若临时缺席，评估是否可以继续，或调整议程，或重新安排会议。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>少数人主导发言，其他人沉默：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 可能导致信息不全面，决策有偏。&lt;/li>
&lt;li>&lt;strong>应对 (结合Process):&lt;/strong> 主持人应有意识地邀请沉默的参会者发言，或采用轮流发言、匿名收集意见等方式，确保每个人都有贡献的机会。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>准备不足，信息不对称：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 参会者未提前阅读材料，导致会上花费大量时间同步基础信息。&lt;/li>
&lt;li>&lt;strong>应对 (结合Purpose &amp;amp; Product):&lt;/strong> 提前将会议材料（如需求文档、设计稿、待评审用例）清晰地发送给参会者，并明确要求他们会前阅读和准备。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>没有明确的行动计划和跟进：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 会议讨论热烈，但没有落实到具体行动，最终不了了之。&lt;/li>
&lt;li>&lt;strong>应对 (结合Product):&lt;/strong> 会议结束前，务必总结行动项、责任人和截止日期，并明确后续如何跟踪进展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总之，提前思考潜在的风险，并准备好应对策略，可以有效避免会议被意外情况打断或偏离轨道，确保会议顺利进行并达成预期目标。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>通过以上结合案例的5P法介绍，要高效地完成一个会议，通过5P法，可以有效避免会议失控。它的核心逻辑其实就是：&lt;/p>
&lt;p>&lt;strong>“用结构化的方法去对抗人性的随意”&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>People (合适的与会人)：&lt;/strong> 确保正确的人在场。&lt;/li>
&lt;li>&lt;strong>Purpose (明确的目标)：&lt;/strong> 清楚为何而来，去往何方。&lt;/li>
&lt;li>&lt;strong>Process (清晰的流程)：&lt;/strong> 规划好路径，有序前行。&lt;/li>
&lt;li>&lt;strong>Product (期望的产出)：&lt;/strong> 带着成果离开。&lt;/li>
&lt;li>&lt;strong>Pitfall (预估的风险点)：&lt;/strong> 规避障碍，顺利抵达。&lt;/li>
&lt;/ul>
&lt;p>我之前介绍敏捷四会的相关文章中，相关的实践也反映了5P法的核心逻辑，推荐大家可以参照阅读~&lt;/p></description></item><item><title>马斯克新政“what did you do last week”和发周报</title><link>https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/</link><pubDate>Fri, 28 Feb 2025 17:20:23 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1.png" alt="Featured image of post 马斯克新政“what did you do last week”和发周报" />&lt;h2 id="引子">引子
&lt;/h2>&lt;p>这两天外网极其热门的一个话题应该是马斯克DOGE新政，要求所有联邦雇员发周报，并列出自己上周做的5项工作，并抄送主管！连续两次不发视同辞职！&lt;/p>
&lt;p>然后目前已经有超100万美国公务员发送了这个周报！ 😂😂😂&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1.png"
width="764"
height="332"
srcset="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1_hu_8ba06be4da6dc8c7.png 480w, https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1_hu_e2365549fa5cf1cc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>而作为公司牛马，我们对这档事实在再熟悉不过了，但话说回来，&lt;strong>为什么会有周报这个事呢&lt;/strong>？&lt;/p>
&lt;h2 id="周报日报的本质是什么">周报（日报）的本质是什么？
&lt;/h2>&lt;p>对于美国的这些公务员大爷们，写周报可能还比较新鲜，但碰上马斯克这个企业出身的大佬，对周报可是情有独钟，早在特斯拉和推特都执行过类似政策。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228.png"
width="861"
height="690"
srcset="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228_hu_fc7aa7b647b34346.png 480w, https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228_hu_f55d9114ecc9bac7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>那么对企业或Boss来说，为什么期望看到员工的周报？&lt;/p>
&lt;p>拿软件测试部门举例，周报的作用主要体现再以下几方面：&lt;/p>
&lt;ol>
&lt;li>风险掌控&lt;/li>
&lt;/ol>
&lt;p>这应该是所有 Leader 关心周报中最核心的部分。通过周报，可以知道整个项目总体的进度，便于掌握整体的质量风险，比如测试延期、质量暴露不足等等风险，通过周报可以有一个毕竟清晰的掌握。而周报这个维度，也不会像日报这样过于细节，是一个掌控总体状态的较好输入。&lt;/p>
&lt;ol start="2">
&lt;li>资源优化&lt;/li>
&lt;/ol>
&lt;p>通过周报数据的汇总分析，也便于Leader能掌握所有成员的工作投入情况，便于测试资源的动态调配。&lt;/p>
&lt;p>而这也是这次马斯克新政广受关注的焦点，因为周报的结果指向就是工作不饱和的联邦雇员可能会遭到解雇🤪🤪&lt;/p>
&lt;ol start="3">
&lt;li>决策依据&lt;/li>
&lt;/ol>
&lt;p>周报中，通常会还会包含一些量化的指标，比如测试进展、故障数据、覆盖率、逃逸率、外部支持等等包含可抓取或主动上报的一些质量数据，这些数据是量化当前质量状态并可视化呈现，作为决策依据的重要支撑&lt;/p>
&lt;h2 id="测试人员周报怎么发">测试人员周报怎么发？
&lt;/h2>&lt;p>那么作为一个测试工程师，如果我们要发周报的话，通常应该包含什么内容呢？&lt;/p>
&lt;p>下面给出一个物联网软件（智能手环）员工的周报案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">一、本周工作概述
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 测试执行情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 完成心率监测模块V2.3迭代测试，覆盖10种运动场景，发现2个关键缺陷（数据延迟超阈值、低电量下监测失效）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 针对iOS/Android端APP同步功能进行兼容性测试，3款机型（含旧型号）出现数据丢失问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 回归测试通过率95%，剩余5%为低优先级UI显示问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 缺陷管理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 新增缺陷15个（紧急2个、高优先级5个），关闭缺陷8个，遗留缺陷中3个需硬件团队协同修复。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 专项测试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 完成OTA升级流程压力测试，模拟5次连续升级后出现1次固件校验失败。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 功耗测试中，睡眠监测功能待机功耗超标20%。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">二、核心问题与风险
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 阻塞性问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 心率监测数据延迟缺陷导致版本发布延期风险，需开发团队48小时内修复验证。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 资源依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 硬件团队对传感器问题的响应延迟，可能影响下周功耗测试计划。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">三、下周计划
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 执行V2.4版本功能测试（血氧监测、紧急呼叫）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 针对遗留缺陷进行复测，推动硬件团队联合调试。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 启动用户场景压力测试（模拟1000台设备并发数据上传）。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上这个周报，我们从对项目和对测试部门两方面来总结的，体现出的价值可以总结为下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>要素&lt;/th>
&lt;th>对项目的价值&lt;/th>
&lt;th>对测试部门的价值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>测试执行进展&lt;/strong>&lt;/td>
&lt;td>明确版本质量状态，帮助PM评估是否达到发布标准。&lt;/td>
&lt;td>量化团队产出，便于资源调配与效率优化（如调整测试用例优先级）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>缺陷分布与趋势&lt;/strong>&lt;/td>
&lt;td>暴露模块风险，推动开发聚焦核心问题（如心率模块缺陷率高需重构）。&lt;/td>
&lt;td>分析缺陷根源（代码/设计/环境），推动测试用例库补充和流程改进（如增加低电量场景）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>风险与依赖项&lt;/strong>&lt;/td>
&lt;td>预警延期风险，促进跨部门协作（如协调硬件团队介入）。&lt;/td>
&lt;td>向上级争取支持（如申请延长测试周期或增加设备资源）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>专项测试结果&lt;/strong>&lt;/td>
&lt;td>验证非功能需求（如功耗、稳定性），避免用户体验硬伤。&lt;/td>
&lt;td>积累性能基线数据，为后续版本对比提供依据（如功耗指标库）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>下周计划与目标&lt;/strong>&lt;/td>
&lt;td>对齐项目里程碑，确保测试与开发节奏同步（如血氧功能测试计划匹配迭代排期）。&lt;/td>
&lt;td>明确团队分工，避免任务重叠或遗漏。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>所以，作为一个企业员工，其实对于周报，没什么值得抗拒的，它是一个再正常不过的管理行为罢了。
对测试人来说，周报既是测试工作的“仪表盘”（实时反映质量状态），也是跨部门协作的“桥梁”（推动问题解决与资源协调），同时也可以为长期测试策略优化提供数据支撑。&lt;/p>
&lt;p>说到底，目的还是为了 &lt;strong>状态同步&lt;/strong>&lt;/p>
&lt;p>和敏捷站会、传统项目可能还有日报，他们的目的其实都是一样的，相关内容在我之前的文章中也有专门阐述，可参考。&lt;/p>
&lt;hr></description></item><item><title>怎么处理团队中开发和测试经常发生的矛盾冲突？</title><link>https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/</link><pubDate>Wed, 19 Feb 2025 12:28:00 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-2.png" alt="Featured image of post 怎么处理团队中开发和测试经常发生的矛盾冲突？" />&lt;blockquote>
&lt;p>有同学提问，在团队中，开发和测试经常会发生一些矛盾，产生冲突，怎么在团队中避免这样的冲突？&lt;/p>&lt;/blockquote>
&lt;h1 id="冲突的产生">冲突的产生
&lt;/h1>&lt;p>一个团队中，成员之间产生冲突其实是非常正常的，也很难完全杜绝。冲突的原因各种各样，只是糟糕的团队中冲突的情况更容易出现：双方不一致的目标和期望、缺乏信任、缺少沟通等都是常见的产生甚至升级冲突的原因。&lt;/p>
&lt;h1 id="冲突就一定需要避免吗">冲突就一定需要避免吗？
&lt;/h1>&lt;p>站在项目和产品维度来说，开发和测试之间得矛盾冲突也并不全然是坏事。我们也不应该想当然地认为冲突就一定应该是要避免的。&lt;/p>
&lt;p>很多研发项目管理中，会把开发和测试之间的冲突称之为建设性冲突，也就是这种冲突对促进产品质量是具有建设性的，在双方的针对具体问题的冲突讨论中，完成对产品质量的提升。&lt;/p>
&lt;p>这个思路其实和冲突管理中对冲突类型划分是吻合的&lt;/p>
&lt;p>在冲突管理理论中，从产生冲突的事务重要程度和人际关系两个维度，冲突的类型可以分为以下四类：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-1.png"
width="637"
height="489"
srcset="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-1_hu_d7f10d5d129731a4.png 480w, https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-1_hu_935040e99fcc0b86.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>建设性冲突&lt;/strong>：冲突产生是事务性的，通常是为了解决问题，对双方的人际关系影响较小。这种冲突其实是良性的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>破坏性冲突&lt;/strong>：冲突也是为了解决问题，但烈度较高，对双方的关系有破坏性，会影响后续的友好合作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>失调性冲突&lt;/strong>：这种更糟糕，纯粹是双方的关系隔阂导致的冲突，跟事务本身的分歧反而关系不大，可以认为是为了冲突而冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>功能性冲突&lt;/strong>：这种是最容易发生的冲突，针对的是一些无关紧要的事务，通常表现为发发牢骚、开玩笑式的埋怨等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>针对不同的冲突类型，团队中，通常应该是鼓励建设性冲突，及时中断破坏性冲突，隔离失调性冲突，包容功能性冲突但避免累积。&lt;/p>
&lt;h1 id="thomas-kilmann冲突模型">Thomas-Kilmann冲突模型
&lt;/h1>&lt;p>对于个体来说，面对冲突时的处理方式，其实也有一个理论模型，就是Thomas-Kilmann冲突管理模型：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220.png"
width="1158"
height="651"
srcset="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220_hu_71c3688233036cfa.png 480w, https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220_hu_eb5c205b639629e9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>从面对冲突时，自己对问题解决的个人自信程度和管控和对方的合作关系两方面，形成下面五种冲突处理策略：&lt;/p>
&lt;p>&lt;strong>竞争&lt;/strong>：个人强势，可以采取竞争策略。会造成非赢即输的局面，强势的一方强迫另一方接受自己的诉求。&lt;strong>Win-Lose&lt;/strong>&lt;/p>
&lt;p>&lt;strong>合作&lt;/strong>：这是最佳策略，通过双方团结协作，找到一个双赢的途径，1+1&amp;gt;2, &lt;strong>Win-Win&lt;/strong>&lt;/p>
&lt;p>&lt;strong>回避&lt;/strong>： 不能解决问题，冷处理，搁置问题。&lt;strong>Lose-Lose&lt;/strong>&lt;/p>
&lt;p>&lt;strong>让步&lt;/strong>：一方主动退让，以维系双方的关系。&lt;strong>Lose-Win&lt;/strong>&lt;/p>
&lt;p>&lt;strong>妥协&lt;/strong>：折中，双方各退一步，互有让步达成一个中间方案，形成妥协。 &lt;strong>Half-Half&lt;/strong>&lt;/p>
&lt;p>不同的个体，其实面对冲突时，都会有意无意地去用不同的策略来面对。理解这个模型以后，可以让我们更理智地对冲突进行评估并选择合适的应对方式。&lt;/p>
&lt;h1 id="团队怎么管控冲突">团队怎么管控冲突？
&lt;/h1>&lt;p>对于一个研发团队来说，做好冲突管理，根本还是要在健全的流程制度前提下，打造好团队文化，营造透明、信任的合作关系和环境。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>健全的制度，举例来说，对bug的争议，应该有仲裁机制，而不是让开发和测试一直在那自行争个面红耳赤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>团队文化，不应该把测试和开发的工作对立起来，而是大家共同面向质量目标的合作。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>不可不知的5Why根因分析法</title><link>https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/5why.png" alt="Featured image of post 不可不知的5Why根因分析法" />&lt;p>在质量管理领域，对质量进行改进的一个重要过程就是发现问题并解决问题。这其中，解决问题实践中，一个关键的步骤是根因分析RCA（Root Cause Analysis）。RCA 的方法有很多，常用的有鱼骨图（Fishbone Diagram），亲和图（Affinity Diagram），FMEA（Failure mode and effects analysis）等。&lt;/p>
&lt;p>不过最易于应用，应用最广泛的可能还是 5Why 根因分析法&lt;/p>
&lt;h2 id="5why-的提出">5Why 的提出
&lt;/h2>&lt;p>&lt;strong>5Why&lt;/strong> 方法最早起源于丰田汽车，是丰田之父&lt;strong>丰田章男&lt;/strong>提出的。但被引入主流是丰田生产系统负责人&lt;strong>大野耐一&lt;/strong>的功劳。&lt;/p>
&lt;p>丰田的网站有这样一段说明，描述了大野耐一对这个方法的推崇：&lt;/p>
&lt;blockquote>
&lt;p>Whenever a problem cropped up, Taiichi Ohno encouraged his staff to explore problems first-hand until the root causes were found. “Observe the production floor without preconceptions,” he would advise. “Ask ‘why’ five times about every matter.”&lt;/p>&lt;/blockquote>
&lt;p>5Why 方法的是基于这样一个基本认识：&lt;/p>
&lt;blockquote>
&lt;p>“每个问题背后都有原因，但肤浅的分析只能描述症状。” 为了找到问题背后的根本原因，需要持续的调查，只有得到根本原因，这样才能针对性采取持久的解决方案，使问题不再重现。&lt;/p>&lt;/blockquote>
&lt;p>所以 5Why，其实就是我们遇到遇到一个问题，不应该仅仅只从表面上看待导致这个问题的浅层原因，而是要抱着 “打破砂锅问到底” 的精神，探究出它的根本原因。只有解决了导致问题出现的根本原因，才有可能避免问题的不断重复出现。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007.png"
width="906"
height="490"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007_hu_3700f4b37d3e8fdd.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007_hu_312d1f8c6f0dd22.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>举一个软件行业的案例来说， 客户验收发现一个比较严重的功能bug，影响产品的最终交付。这时通过 5Why 方法来分析根本原因：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>客户为什么会遇到这个问题？&lt;/strong> 据技术负责人透露，测试团队尚未向开发团队报告任何此类问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么测试团队无法发现问题？&lt;/strong> 测试团队只进行了冒烟测试，并没有对功能做完整的回归验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么测试团队只进行冒烟测试&lt;/strong>？ 因为他们没有足够的时间对整个应用程序进行彻底的回归验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么没有足够的时间进行彻底的回归&lt;/strong>？ 因为开发提测版本只比最后交给客户验收提前了一天，而彻底的功能测试至少需要 3 天。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么开发在交付前一天才提测&lt;/strong>？因为其中一个关键功能的实现比预期的复杂，花了更多的时间。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>分析到这里，其实发现了两个根本原因：&lt;/p>
&lt;ul>
&lt;li>团队成员对工作量的预估出现严重偏差，开发时间估算不足&lt;/li>
&lt;li>项目管理上的问题，提测时间比测试预估时间晚太多，牺牲质量，不进行回归就交付给客户。版本准出控制不足。&lt;/li>
&lt;/ul>
&lt;p>所以针对分析出来的原因，需要从两方面改进，才能避免类似的情况持续出现。&lt;/p>
&lt;ol>
&lt;li>提高开发团队对功能实现的估算准确度，包括培训，需求拆分，尽早理解需求等。&lt;/li>
&lt;li>项目管理改进，需要加强测试的准入准出控制和风险预防。延期提测需要顺延交付时间；产品未完成回归就进行发布，至少需要完成异常发布的审核流程。&lt;/li>
&lt;/ol>
&lt;h2 id="5why的实施步骤">5Why的实施步骤
&lt;/h2>&lt;p>5Why 方法虽然很简单，但它的实施还是需要遵循一定的步骤流程：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-3.png"
width="904"
height="161"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-3_hu_370aa8478e43c7ee.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-3_hu_ba47ffa88983facd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="561"
data-flex-basis="1347px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，当然是需要跟问题相关的关键成员要共同来对问题进行分析，这一步应该是需要团队中跟问题相关的关联角色都能够参加。否则可能因为关键人员的缺席导致分析不能继续进行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而在确定参与的团队人员之后，还要保证所有人对问题都比较明确，需要分析什么？有哪些背景信息，大家对问题的理解应该达成共识，而不是以不同的理解进入 Why 的讨论环节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而在具体的分析会议期间中，主持人应该通过合适的提问，来逐步地帮助团队挖掘出真正的原因&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当然，分析问题最终是为了解决问题，所以，我们还要针对得到的根因讨论出对应的纠正措施，以避免同类问题再次发生。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，纠正措施的实施成效怎么样，也需要有对应的举措、时间节点来进行跟踪，对根因分析的效果进行检验确认。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这样一个过程，才是一个完整的、基于 5Why 方法的根因分析实施过程。&lt;/p>
&lt;h2 id="实施-5why-的注意事项">实施 5Why 的注意事项
&lt;/h2>&lt;p>5Why 方法虽然简单，但在实践中，其实并不容易做好，这里有一些需要注意的关键点：&lt;/p>
&lt;h3 id="团队活动">团队活动
&lt;/h3>&lt;p>5Why 分析是一个团队活动，需要跟问题相关的人员积极参与，只有跟问题分析路径上的关键角色能给出有效的答案才能保证分析链路的有效&lt;/p>
&lt;h3 id="并非高效方法">并非高效方法
&lt;/h3>&lt;p>这个方法虽然理解上很简单，但因为是团队活动，且跟问题的各种背景信息是否充分紧密相关。所以包括信息收集、人员召集以及会议上的头脑风暴，都是需要时间投入的，并不是一个高效、快速得到结论的活动，有时甚至要进行多次会议讨论。&lt;/p>
&lt;h3 id="主持人的经验">主持人的经验
&lt;/h3>&lt;p>5Why 方法是否能成功，很关键的一个角色是会议的主持者，这个角色应该对 5Why 方法有充分理解并且对问题相关领域比较熟悉，能够引导团队在正确的方向上去挖掘根本原因。避免过度发散&lt;/p>
&lt;h3 id="对事不对人避免责任推卸">对事不对人，避免责任推卸
&lt;/h3>&lt;p>根因分析不是定责，也就是会议的重点是为了发现将来改进的要点，而不是界定当前问题的责任，避免把分析会变成责任推协会和甩锅会&lt;/p>
&lt;h3 id="关注可控因素">关注可控因素
&lt;/h3>&lt;p>根因分析，得到的根因应该是可以采取措施的一些可控的因素。而不是找到一些根本无法完成修正的不可抗因素。比如说人手不足了，根本原因是公司效益不好，而公司效益不好是经济下行.. 结论会变成不了了之&lt;/p>
&lt;p>总而言之，5Why 分析法是一个简单实用的根因分析方法，但并不是高效方法，并且它的有效性跟团队成员的齐心合力和实施方式关系紧密。只有理解它的内部逻辑，根据团队的实际情况，有选择地实施才能真正起到应有的效用。&lt;/p>
&lt;h2 id="分析模板">分析模板
&lt;/h2>&lt;p>附上两个常见的分析模板，供大家参考&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-1.png"
width="1535"
height="942"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-1_hu_9ca5effb15927f19.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-1_hu_18350f0bb32a2b99.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="391px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-2.png"
width="959"
height="594"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-2_hu_17b489783c746c6d.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-2_hu_ba35b65a9ef6a80c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;hr></description></item></channel></rss>
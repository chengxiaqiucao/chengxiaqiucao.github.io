<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing Technology on Testing Observation</title><link>https://chengxiaqiucao.github.io/en/categories/testing-technology/</link><description>Recent content in Testing Technology on Testing Observation</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>|by Daniel Wei</copyright><lastBuildDate>Fri, 30 Aug 2024 20:35:21 +0800</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/en/categories/testing-technology/index.xml" rel="self" type="application/rss+xml"/><item><title>What is the Real Purpose of Software Testing?</title><link>https://chengxiaqiucao.github.io/en/post/007-what-is-testing-goal/</link><pubDate>Fri, 30 Aug 2024 20:35:21 +0800</pubDate><guid>https://chengxiaqiucao.github.io/en/post/007-what-is-testing-goal/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/testing.png" alt="Featured image of post What is the Real Purpose of Software Testing?" />&lt;h2 id="misconceptions-about-the-purpose-of-testing-work">Misconceptions About the Purpose of Testing Work
&lt;/h2>&lt;p>In the IT industry, there has always been a somewhat inaccurate understanding of software testing and the purpose of testing work.&lt;/p>
&lt;p>There are various explanations, with the following two being quite popular and accepted by many IT professionals, even testing practitioners:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Testing is for finding bugs&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>In the general concept, people often equate testing with finding bugs, meaning the purpose of software testing is to discover problems in the product.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Testing is for verifying that the product meets requirements&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Some also say from the test execution perspective that testing work is to prove the software product conforms to product requirement definitions, to verify whether requirements have been implemented.&lt;/p>&lt;/blockquote>
&lt;p>Are these statements correct? We can say both yes and no.&lt;/p>
&lt;p>Indeed, the main output of testing work is the various product bugs we discover, and verifying requirements is the main input and evaluation criteria for our testing work.&lt;/p>
&lt;p>But are these the purposes of conducting testing work?&lt;/p>
&lt;p>Looking at the purpose of testing work solely from the above perspectives is narrow.&lt;/p>
&lt;h3 id="is-testing-for-finding-bugs">Is Testing for Finding Bugs?
&lt;/h3>&lt;p>Is our testing work aimed at discovering bugs?&lt;/p>
&lt;p>For a product, bugs represent cost, and bugs themselves do not generate value for the product. Only resolved bugs bring improvement in product quality, which then translates into product value. The reduction of bugs is what adds value to the product.&lt;/p>
&lt;p>Therefore, simply making the discovery of more bugs the purpose of testing work is a misconception. This is also the main reason why many teams incorrectly use the number of bugs found as a measure of testing effectiveness. If finding more bugs means better testing work, shouldn&amp;rsquo;t testers avoid participating in early stages? Because issues prevented in the early stages would actually result in fewer bugs during the testing phase. If testing work aims to find more bugs, shouldn&amp;rsquo;t we hope that the product contains more bugs when it&amp;rsquo;s submitted for testing? This orientation clearly doesn&amp;rsquo;t align with the product&amp;rsquo;s interests.&lt;/p>
&lt;p>Therefore, considering bug discovery as the purpose of testing work is a common and obvious misconception about testing work.&lt;/p>
&lt;h3 id="is-testing-just-for-verifying-requirements">Is Testing Just for Verifying Requirements?
&lt;/h3>&lt;p>The second misconception about the purpose of testing work is the belief that testing is just for verifying product requirements. This is actually another widely accepted misunderstanding. Even many of today&amp;rsquo;s widespread software engineering practices are built upon this misconception.&lt;/p>
&lt;p>Testing guru James Bach has a famous paper discussing the difference between Testing and Checking.&lt;/p>
&lt;p>Testing work is far more than just checking. Verifying requirements, this kind of checking, is only part of testing work. To delve into the product and discover potential deep-seated issues, testing needs more capabilities beyond checking, including exploration, experimentation, questioning, reasoning, and more.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/Pasted-20240830.png"
width="833"
height="582"
srcset="https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/Pasted-20240830_hu_25cc6891f9026da1.png 480w, https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/Pasted-20240830_hu_70c44345306bceff.png 1024w"
loading="lazy"
alt="Testing vs Checking"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>So, treating requirement verification as the purpose of testing work is insufficient. The approach of determining whether a product meets specifications according to strict procedures, like factory quality inspection, doesn&amp;rsquo;t match well with the creative nature of the software product industry. This is also why we say automated testing is more about improving execution efficiency and quickly getting feedback on verification results for covered scenarios, but automated testing itself cannot achieve the purpose of completing product testing.&lt;/p>
&lt;p>Besides verifying explicitly stated functions in requirements, testing also needs to conduct deeper exploration of the delivered product to more fully discover quality issues in the product. This is also the main reason why exploratory testing has been increasingly mentioned in recent years.&lt;/p>
&lt;h2 id="the-true-purpose-of-software-testing-work">The True Purpose of Software Testing Work
&lt;/h2>&lt;p>Well, if the purpose of testing work is neither to find bugs nor to verify requirements, then what is the purpose?&lt;/p>
&lt;blockquote>
&lt;p>The true purpose of software testing: to &lt;strong>accurately&lt;/strong> and &lt;strong>timely&lt;/strong> &lt;strong>assess&lt;/strong> the &lt;strong>quality status&lt;/strong> of the test object.&lt;/p>&lt;/blockquote>
&lt;p>The core here is &lt;strong>assessing quality status&lt;/strong>. Quality is a product attribute that can only be adjusted through changes to the product itself, so testing work cannot improve quality or guarantee quality. But through testing work, we can reflect the quality status of the product by exposing problems in the product. Our main role is to assess the current quality of the product. Then the product or project can improve quality based on this status.&lt;/p>
&lt;p>So the contribution of testing work to quality is more reflected in whether the assessed quality status is timely and accurate.&lt;/p>
&lt;h3 id="accurate-assessment">Accurate Assessment
&lt;/h3>&lt;p>Testing cannot be exhaustive, and it&amp;rsquo;s impossible to discover all problems in a product within a limited time. But the responsibility of testing is to expose as many quality-affecting issues as possible within a limited time. Besides quantity, we also need to consider the impact of the problems. Combining these two points provides a more accurate reflection of quality.&lt;/p>
&lt;h3 id="timely-assessment">Timely Assessment
&lt;/h3>&lt;p>Products cannot undergo unlimited testing, and testing work itself is a cost expenditure. Therefore, the timeliness of obtaining the product quality status through testing work is also crucial for product quality improvement and cost control. The earlier problems are discovered, the lower the cost of fixing them; the shorter the time to obtain quality status assessment, the greater the space for targeted improvement of the product. So the purpose of testing work also includes improving testing efficiency, using automation, shift-left testing, and other means to complete product quality assessment as timely as possible.&lt;/p>
&lt;p>So this is the true purpose of our software testing work - not to discover more bugs, nor merely to check requirement implementation, but through our professional capabilities, to timely and fully reflect the actual quality status of the current product within a limited time.&lt;/p>
&lt;p>Above is the sharing about the purpose of software testing work. I am Chengxia Qiucao. &lt;strong>Qiucao Observatory, observing the testing industry&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>Promoting my testing course, interested friends can learn more through the following link&lt;/p>
&lt;p>❤️❤️❤️❤️ &lt;a class="link" href="https://coding.imooc.com/class/chapter/885.html#Anchor" target="_blank" rel="noopener"
>Chengxia Qiucao&amp;rsquo;s Testing Career Advancement Course&lt;/a> ❤️❤️❤️❤️&lt;/p></description></item><item><title>The Art of Bug Reporting</title><link>https://chengxiaqiucao.github.io/en/post/005-the-bugs-report-art/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/en/post/005-the-bugs-report-art/</guid><description>&lt;h3 id="introduction">Introduction
&lt;/h3>&lt;p>As the most important work output of a test engineer, Bug Reports (or defect reports, issue tickets) are the direct manifestation of a test engineer&amp;rsquo;s work results and the output that best demonstrates their value and capabilities. However, project stakeholders and even test engineers themselves often underestimate the importance of Bug Reports. The content of bug reports, their submission methods, and handling processes significantly impact project progress, operational efficiency, and even team morale.&lt;/p>
&lt;p>There has been relatively little industry discussion and summary regarding Bug Reports. In this article, based on the author&amp;rsquo;s years of professional observations, we hope to provide some summaries and suggestions on the elements of Bug reports and how professional test engineers should handle them. We aim to spark discussion, and welcome corrections for any oversights.&lt;/p>
&lt;p>Main contents include:&lt;/p>
&lt;ul>
&lt;li>What is a Bug, and what is a Bug Report&lt;/li>
&lt;li>What information do development or project teams actually want to get from Bug reports&lt;/li>
&lt;li>Common mistakes made by testing novices when submitting bugs&lt;/li>
&lt;li>Bug reporting and storytelling&lt;/li>
&lt;li>How professional test engineers submit high-quality bugs&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-a-bug-the-history-of-bugs">What is a Bug? The History of Bugs
&lt;/h3>&lt;p>The word &amp;ldquo;Bug&amp;rdquo; in English originally meant insect or beetle, and is now used in the IT industry to refer to defects in software. This history is quite interesting:&lt;/p>
&lt;p>As early as 1878, the great inventor Edison used the word &amp;ldquo;bug&amp;rdquo; in a letter to a friend to refer to faults (or potential causes of faults) in electronic circuits. However, its true entry into computer industry history came on September 9, 1947.&lt;/p>
&lt;p>At that time, the first programmers were developing the Mark II computer at Harvard University. [Grace Murray Hopper][1] found a moth near a relay contact while investigating a problem, killed it with her logbook, and marked it as &amp;ldquo;the first actual case of finding a bug.&amp;rdquo; Since then, the word &amp;ldquo;bug&amp;rdquo; has been used to refer to defects or faults in computers. Correspondingly, &amp;ldquo;debug&amp;rdquo; is used to refer to the act of removing faults.&lt;/p>
&lt;p>The image below is the first actual bug preserved in the Smithsonian Museum:
&lt;img src="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134227.png"
width="743"
height="599"
srcset="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134227_hu_e82606b7db3ba596.png 480w, https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134227_hu_b4619dde3aa4f924.png 1024w"
loading="lazy"
alt="first bug"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="297px"
>&lt;/p>
&lt;p>Among the first programmers in history, the only woman was the &amp;ldquo;mother of the bug&amp;rdquo;:
&lt;img src="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134247.png"
width="888"
height="588"
srcset="https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134247_hu_92d04c99af73787e.png 480w, https://chengxiaqiucao.github.io/post/005-the-bugs-report-art/20240820134247_hu_cb11bc7065bce58e.png 1024w"
loading="lazy"
alt="bug mother"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="362px"
>&lt;/p>
&lt;p>In any case, the word &amp;ldquo;Bug&amp;rdquo; now refers to defects or faults in software or programs. However, for project teams, it&amp;rsquo;s recommended not to simply define Bug as a &lt;code>fault&lt;/code>, as the word &lt;code>fault&lt;/code> has a negative connotation. Viewing Bugs as &lt;code>defects&lt;/code> or &lt;code>issues&lt;/code>, emphasizing &lt;strong>room for improvement&lt;/strong> has a more positive guiding effect on project teams.&lt;/p>
&lt;h3 id="what-is-a-bug-report">What is a Bug Report?
&lt;/h3>&lt;p>The word &amp;ldquo;report&amp;rdquo; in English can be both a verb and a noun. So &lt;code>Bug report&lt;/code> can refer to both the action of finding and reporting a problem, and the report content submitted after finding a problem. Here we generally view it as a problem report (noun), i.e., an &lt;code>issue ticket&lt;/code>, so what exactly is an &lt;code>issue ticket&lt;/code>?&lt;/p>
&lt;p>Testing guru Cem Kaner once pointed out:&lt;/p>
&lt;blockquote>
&lt;p>The purpose of testing is not to find bugs. The purpose is to get bugs fixed.&lt;/p>&lt;/blockquote>
&lt;p>This view actually points out a misconception many testers have - thinking that testing work is just about finding as many bugs as possible. In fact, for the team, no matter how many bugs are found, they ultimately need to be resolved to demonstrate the value of finding these bugs.&lt;/p>
&lt;p>From discovery to resolution, the &lt;code>issue ticket&lt;/code> is the main medium, being both the output of testers&amp;rsquo; work and the input for developers to solve problems, its importance is self-evident.&lt;/p>
&lt;p>Additionally, while there are various ways to inform developers of discovered problems - verbal notification, actual demonstration, email, IM chat, etc., can all serve the purpose of notification. However, in modern software development processes, there are usually dedicated systems for defect tracking, such as JIRA, Zentao, Bugfree, QC (HP Quality Center), etc., which can handle defect submission and tracking. Through these specialized systems, not only can they serve the purpose of recording and feedback, but they can also better reflect the overall quality status and development progress of the project through statistics and analysis.&lt;/p>
&lt;p>Therefore:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An &lt;code>issue ticket&lt;/code> is the output after testers discover defects during testing activities&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An &lt;code>issue ticket&lt;/code> is the input for developers to resolve defects&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An &lt;code>issue ticket&lt;/code> is the communication medium between testers and developers regarding bugs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An &lt;code>issue ticket&lt;/code> is also an indicator for project teams to evaluate current development status and product maturity.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-role-and-importance-of-issue-tickets">The Role and Importance of Issue Tickets
&lt;/h3>&lt;p>Many test engineers have probably experienced the following feedback or complaints after submitting issue tickets:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What exactly are you trying to say with this issue ticket?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I can&amp;rsquo;t reproduce this problem on my end&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Why do you consider this a defect?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal people don&amp;rsquo;t use software the way described in the issue ticket, only someone with mental issues would use it that way&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is indeed a problem, but the cost of fixing it is too high, and there are alternative ways to work around it&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You might think this is a problem, but actual users won&amp;rsquo;t find it problematic&lt;/p>
&lt;/li>
&lt;li>
&lt;p>While what you submitted is indeed an issue, it has minimal impact on users. Why don&amp;rsquo;t we see many issue tickets for those parts that have a greater impact on users?&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Testers certainly don&amp;rsquo;t want to receive such feedback. But these issues also indirectly reflect that when it comes to bugs, developers or project teams actually focus more on how to resolve bugs (including judging whether they &lt;strong>need&lt;/strong> to be resolved), and they hope to get the following information from &lt;code>issue tickets&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What problem was discovered?&lt;/p>
&lt;ul>
&lt;li>What is the problem phenomenon?&lt;/li>
&lt;li>Does it always occur?&lt;/li>
&lt;li>What was the background and context when discovering this problem?&lt;/li>
&lt;li>Besides the visible phenomenon, what else happened in the system?&lt;/li>
&lt;li>Are there screenshots, logs, screen recordings?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Why is it a problem?&lt;/p>
&lt;ul>
&lt;li>What impact does this problem have?&lt;/li>
&lt;li>What happens if it&amp;rsquo;s not resolved?&lt;/li>
&lt;li>What&amp;rsquo;s the probability of occurrence?&lt;/li>
&lt;li>Is it duplicated with other issues?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>What operations were performed that exposed this problem?&lt;/p>
&lt;ul>
&lt;li>What was the input?&lt;/li>
&lt;li>What test path and test data were used?&lt;/li>
&lt;li>What about the test environment and software version?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Therefore, as testers, we shouldn&amp;rsquo;t view &lt;code>issue tickets&lt;/code> as simple problem records. They are important communication media between testing and development. Good issue tickets can greatly reduce communication costs between both parties, both greatly reducing developers&amp;rsquo; workload in solving problems and reducing testers&amp;rsquo; workload in clarifying and re-verifying. For the project, the quality of &lt;code>issue ticket&lt;/code> submission affects the team&amp;rsquo;s productivity and delivery speed, which cannot be underestimated.&lt;/p>
&lt;h3 id="elements-of-issue-tickets">Elements of Issue Tickets
&lt;/h3>&lt;p>Understanding the role of &lt;code>issue tickets&lt;/code>, the elements that should be included in them become quite clear, generally including the following aspects:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Title for preliminary judgment&lt;/strong>&lt;/p>
&lt;p>The title should clearly summarize the problem and the module where it occurs, making it convenient for developers to make an initial judgment&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Context and necessary related information&lt;/strong>&lt;/p>
&lt;p>The contextual background when the problem occurs, related information such as software version, test environment, configuration status, resource status, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Accurate and reasonable detailed description&lt;/strong>&lt;/p>
&lt;p>Detailed description of the steps to discover the problem, operation expectations, actual conditions that occurred. Problem occurrence frequency, test inputs, data, files used, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Supplementary information to help resolve the problem&lt;/strong>&lt;/p>
&lt;p>Supplementary information that can help developers speed up problem resolution, such as screenshots, screen recordings, operation logs, system logs, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Auxiliary information for project decision-making&lt;/strong>&lt;/p>
&lt;p>As the first judge of bugs, testers should provide suggestions on the severity of the problem and resolution priority. Initially assign developers to resolve the problem, and provide related information identifiers for statistics and tracking.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="common-mistakes-by-testing-novices">Common Mistakes by Testing Novices
&lt;/h3>&lt;p>Combining the elements of &lt;code>issue tickets&lt;/code>, we can initially summarize some common mistakes made by testing novices or non-professional testers when submitting bugs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Unclear titles&lt;/p>
&lt;p>Titles that are too simple make it difficult to make preliminary judgments about the problem. For example, simply writing &amp;ldquo;system crash&amp;rdquo; is too vague, and overly simple titles can easily become similar, causing inconvenience for focused review and evaluation of issues.&lt;/p>
&lt;p>Or titles that are too complex. Long titles can lead to reading fatigue and lack focus. For example, there&amp;rsquo;s no need to write detailed operation steps in the title.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unrealistic, deviating from requirement scenarios&lt;/p>
&lt;p>Sometimes testing novices make assumptions based on personal preferences and raise issues. &amp;ldquo;I think&amp;rdquo; and &amp;ldquo;it feels not good&amp;rdquo; are high-frequency words in such novice issues.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Not actually problems&lt;/p>
&lt;p>Testing novices often submit issue tickets that aren&amp;rsquo;t actually bugs due to misunderstandings of system implementation principles or lack of skill level.&lt;/p>
&lt;p>Also, problems caused by incorrect testing methods or environment configuration by testing novices themselves.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Insufficient description information&lt;/p>
&lt;p>Typically, through the description information in the issue ticket, developers cannot confirm the problem phenomenon or reproduce it themselves. Testing novices often think their job is done once they find a problem, without providing sufficient information to developers, such as screenshots and logs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Too much irrelevant information, messy formatting&lt;/p>
&lt;p>Sometimes novice issue tickets contain too much redundant noisy information, making it difficult to see the key points. For example, pasting tens of thousands of lines of logs into the issue ticket indiscriminately.&lt;/p>
&lt;p>Or completely lacking formatting, with a lot of information mixed together messily, making it extremely difficult to read.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Too many issues&lt;/p>
&lt;p>Issue tickets should be focused, but sometimes testing novices include many different issues in the same ticket. This is very unfavorable for issue tracking and focusing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Only looking at phenomena without considering essence&lt;/p>
&lt;p>Sometimes simple problem phenomena are often manifestations or clues of serious problems. Novices often overlook important risks, ignoring problems hidden beneath seemingly minor traces, easily missing bugs lurking beneath phenomena. For example, some unexpected prompt messages are often manifestations of backend calculation and statistical accuracy bugs.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="bug-reporting-and-storytelling">Bug Reporting and Storytelling
&lt;/h3>&lt;p>Coming back to the act of &lt;code>submitting bugs&lt;/code>, essentially, this is a communication process. The &lt;code>issue ticket&lt;/code> carries the role of this communication medium. Through the &lt;code>issue ticket&lt;/code>, testers describe the problems they see and discover during testing, and developers understand the corresponding information by reading the &lt;code>issue ticket&lt;/code> and resolve the problems accordingly.&lt;/p>
&lt;p>So &lt;code>submitting bugs&lt;/code> is actually like writing a short article or telling a story, where testers are the authors and developers are the readers.&lt;/p>
&lt;p>When we submit &lt;code>issue tickets&lt;/code>, it&amp;rsquo;s actually a form of writing. The &lt;strong>5W&lt;/strong> requirements for writing also apply:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What - What exactly is the problem?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Why - Why raise this issue? Why is it a problem?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Who - Who is the subject of the problem? Who are the related parties?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Where - Where did the problem occur?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When - When and at what frequency does it occur?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>When submitting bugs, thinking about these &lt;strong>5W&lt;/strong>s, combined with the issue ticket elements mentioned above, generally helps avoid many mistakes that testing novices commonly make when submitting issue tickets.&lt;/p>
&lt;h3 id="the-art-of-bug-reporting">The Art of Bug Reporting
&lt;/h3>&lt;p>Above we discussed the elements of issue tickets and some details to note when submitting bugs, but why do we say that submitting bugs is actually an artistic work?&lt;/p>
&lt;p>Let&amp;rsquo;s look at some examples of issue tickets:&lt;/p>
&lt;p>Suppose there&amp;rsquo;s a product management system where users experience a crash when adding new products under a specific product category (fruits)&lt;/p>
&lt;p>&lt;strong>Issue Ticket Example 1:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">User adds product, crash occurs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">As shown in the image (crash screen screenshot)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This issue ticket basically describes the problem phenomenon through the provided screenshot. However, for developers, there&amp;rsquo;s too little information, and they likely won&amp;rsquo;t be able to reproduce the problem immediately (fruits category). The information contained in the issue ticket is too simple, making it an extremely poor issue ticket example.&lt;/p>
&lt;p>&lt;strong>Issue Ticket Example 2:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">User experiences crash when adding product
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. Open App
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. User logs into system, enters correct username and password and logs in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. Enter product management page
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. Select category: fruits
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. Click new product button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. Enter product information: *********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. Click submit button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expected result: Product created successfully
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Actual result: Crash occurs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Device model used: Xiaomi 8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operating system version: Android 8.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Software version V1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Attachment: Crash screenshot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This issue ticket is a common submission format by many testing novices, containing very detailed operation steps and related auxiliary information. But this is also a very poor issue ticket.
First, such step descriptions are unnecessary - developers don&amp;rsquo;t need to be told about basic operations like opening the app, logging in, and submitting in the issue ticket.
Second, while there&amp;rsquo;s a lot of auxiliary information, it&amp;rsquo;s mostly irrelevant to the problem cause and doesn&amp;rsquo;t help developers locate the issue, instead introducing some distracting information.
Such issue tickets fail to demonstrate the professional value of testers and don&amp;rsquo;t help with quick problem resolution.&lt;/p>
&lt;p>&lt;strong>Issue Ticket Example 3:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">User experiences crash when adding product under fruits category
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. Select fruits category, create product, crash occurs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. Select non-fruit category, create product, product created successfully
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Verified on models: Xiaomi 8, Huawei Mate 7 etc. show consistent phenomenon, should be unrelated to model, operating system, version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Attachments: Error screenshot, system crash logcat logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Impact: Users cannot add products in fruits category, directly affects user experience. Needs high priority resolution
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This issue ticket can be considered a relatively qualified one. It clearly indicates the scenario where the problem occurs and has preliminarily eliminated some irrelevant information. Developers can focus on product creation under the fruits category for problem analysis.
It also points out the problem&amp;rsquo;s impact on the software and resolution priority suggestions, making the project team clearly aware of the problem&amp;rsquo;s impact.&lt;/p>
&lt;p>&lt;strong>Issue Ticket Example 4:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">User experiences null pointer crash when adding product under fruits category
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. Select fruits category, create product, crash occurs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. Select non-fruit category, create product, product created successfully
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. Edit existing products under fruits category, edit successful
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Backend database insert operation fails due to missing field for fruits category, update operation normal.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Verified on models: Xiaomi 8, Huawei Mate 7 etc. show consistent phenomenon, should be unrelated to model, operating system, version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Attachments: Error screenshot, system crash logcat logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Impact: Users cannot add products in fruits category, directly affects user experience. Needs high priority resolution
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This issue ticket goes further than the previous one, preliminarily analyzing the problem cause - during new operations, a key field information is missing, causing the crash. Developers can now very clearly proceed with fixing the problem.&lt;/p>
&lt;p>&lt;strong>Issue Ticket Example 5:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">User experiences null pointer crash when adding product under fruits category. Product import operation with old template has the same issue.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Operation steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. Select fruits category, create product, crash occurs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. Select non-fruit category, create product, product created successfully
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. Edit existing products under fruits category, edit successful
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Backend database insert operation fails due to missing field for fruits category, update operation normal.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">In the product management import function, new template fruit product import successful, using old template (missing new field) to import fruit data also fails. Needs to be fixed together.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Verified on models: Xiaomi 8, Huawei Mate 7 etc. show consistent phenomenon, should be unrelated to model, operating system, version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Attachments: Error screenshot, system crash logcat logs, new and old template import logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Impact: Users cannot add products in fruits category, directly affects user experience. Needs high priority resolution
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This issue ticket, building on the previous example, demonstrates the tester&amp;rsquo;s professional capability by reasoning and verifying that the import function with similar logic might have the same issue based on their experience.&lt;/p>
&lt;p>Through this simple case above, we can see that different ways of submitting issue tickets can have very different effects on problem resolution.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Too little information makes it difficult for developers to determine the root cause of the bug, multiplying the debugging workload.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Too much information causes developers to spend extra effort analyzing redundant information, even interfering with debugging and resolution direction, similarly causing significant waste of work effort.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The more clearly and accurately the root cause of the problem is reflected, the more efficiently developers can solve the problem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The tester&amp;rsquo;s experience and judgment reasoning ability can be well demonstrated through issue tickets.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So why do we say submitting bugs is an artistic work? Issue tickets should neither be too simple nor too complex, and should be able to convey information as accurately and comprehensively as possible to developers - this is truly an artistic endeavor.&lt;/p>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>In summary, submitting bugs is a very important activity in the software development process, and the quality of &lt;code>issue tickets&lt;/code> directly affects team efficiency and output. As professional testers, mastering the art of submitting bugs means that &lt;code>issue tickets&lt;/code> are not simple problem records, but rather communication bridges between testing and development, supporting developers in efficiently fixing bugs.&lt;/p>
&lt;p>Welcome to follow and comment, you can also follow the WeChat public account: &lt;strong>秋草说测试&lt;/strong>&lt;/p></description></item></channel></rss>
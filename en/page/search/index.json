[{"content":"Agile is now a widely adopted development philosophy and mindset. The famous Agile Manifesto has been widely circulated and translated into more than 60 languages.\nThis manifesto primarily presents certain values in software development that these pioneers considered more important, conveying a new philosophy different from traditional development approaches.\nBut what is the logic behind these proposed principles?\nWe should understand why such a manifesto exists; otherwise, while everyone claims to be practicing Agile, there\u0026rsquo;s some ambiguity, and sometimes people even create many processes, ceremonies, and various Agile tools in the name of Agile, ultimately coming full circle back to where they started.\nHere, I attempt to understand the underlying logic and true purpose of the Agile Manifesto. By grasping this core concept, we can understand the essence of Agile.\nCulture is the Core of Agile The values promoted in the Agile Manifesto - individuals and interactions, working software, customer collaboration, responding to change - are not specific practices but rather values.\nAnd values are essential elements in establishing culture.\nAny organization, when it reaches a certain stage, will begin to emphasize the importance of culture.\nBecause mature organizations, after standardized development and establishing mature systems, find that there are still many things that cannot be well resolved through systems alone. At this point, the hoped-for solution lies in the power of culture.\nAgile emerged as a response to traditional development processes that heavily relied on procedures and systems. Based on numerous experiences and lessons where software development couldn\u0026rsquo;t succeed through processes and standards alone, Agile proposes to guide people in establishing the right software development culture at a cultural level, actively improving rather than denying the role of existing processes and standards.\nSo, the conclusion of this reflection is:\nAgile is actually a mindset shift, a set of values for establishing correct behaviors in software development. While implementation methods may vary greatly, the essence is emphasizing that establishing correct development values is more important than specific processes and standards.\nCulture is the Evolution of Systems Understanding Agile as an effort to establish culture helps us understand the logic behind various Agile practices and advocated approaches.\nCulture and systems are the pillars supporting an organization\u0026rsquo;s development. They both aim to guide organization members to do things correctly:\nSystems guide members through various written rules and processes. Following systems to do things is passively doing things correctly Culture works through gradual influence, with organization members sharing common missions, visions, and values, reflected in their behavior patterns. It\u0026rsquo;s actively doing things correctly. What is Culture? Culture is actually the behavioral patterns of organization members in practice.\nUnderstanding corporate culture also includes elements like mission, values, vision, and strategy.\nTheir relationship can be summarized in the following diagram:\nComing back to Agile:\nThe Agile Manifesto represents values The 12 Agile Principles are implementation strategies The Agile vision, like all products, is to deliver value to users\nUltimately, what Agile hopes to achieve is establishing a new culture oriented towards software development.\nLike water has no constant form and warfare has no constant conditions, Agile has no so-called standard practices. A team that aligns with Agile values, reaches consensus, and puts them into practice is an Agile team.\nPromoting my testing course, interested friends can learn more through the following link\n❤️❤️❤️❤️ Chengxia Qiucao\u0026rsquo;s Testing Career Advancement Course ❤️❤️❤️❤️\n","date":"2024-09-01T14:32:39+08:00","image":"https://chengxiaqiucao.github.io/post/008-understand-the-real-logic-behind-agile-manifesto/agile_mani_hu_bf195b0471a0dc51.png","permalink":"https://chengxiaqiucao.github.io/en/post/008-understand-the-real-logic-behind-agile-manifesto/","title":"Understanding the Cultural Logic Behind the Agile Manifesto"},{"content":"Misconceptions About the Purpose of Testing Work In the IT industry, there has always been a somewhat inaccurate understanding of software testing and the purpose of testing work.\nThere are various explanations, with the following two being quite popular and accepted by many IT professionals, even testing practitioners:\nTesting is for finding bugs In the general concept, people often equate testing with finding bugs, meaning the purpose of software testing is to discover problems in the product.\nTesting is for verifying that the product meets requirements Some also say from the test execution perspective that testing work is to prove the software product conforms to product requirement definitions, to verify whether requirements have been implemented.\nAre these statements correct? We can say both yes and no.\nIndeed, the main output of testing work is the various product bugs we discover, and verifying requirements is the main input and evaluation criteria for our testing work.\nBut are these the purposes of conducting testing work?\nLooking at the purpose of testing work solely from the above perspectives is narrow.\nIs Testing for Finding Bugs? Is our testing work aimed at discovering bugs?\nFor a product, bugs represent cost, and bugs themselves do not generate value for the product. Only resolved bugs bring improvement in product quality, which then translates into product value. The reduction of bugs is what adds value to the product.\nTherefore, simply making the discovery of more bugs the purpose of testing work is a misconception. This is also the main reason why many teams incorrectly use the number of bugs found as a measure of testing effectiveness. If finding more bugs means better testing work, shouldn\u0026rsquo;t testers avoid participating in early stages? Because issues prevented in the early stages would actually result in fewer bugs during the testing phase. If testing work aims to find more bugs, shouldn\u0026rsquo;t we hope that the product contains more bugs when it\u0026rsquo;s submitted for testing? This orientation clearly doesn\u0026rsquo;t align with the product\u0026rsquo;s interests.\nTherefore, considering bug discovery as the purpose of testing work is a common and obvious misconception about testing work.\nIs Testing Just for Verifying Requirements? The second misconception about the purpose of testing work is the belief that testing is just for verifying product requirements. This is actually another widely accepted misunderstanding. Even many of today\u0026rsquo;s widespread software engineering practices are built upon this misconception.\nTesting guru James Bach has a famous paper discussing the difference between Testing and Checking.\nTesting work is far more than just checking. Verifying requirements, this kind of checking, is only part of testing work. To delve into the product and discover potential deep-seated issues, testing needs more capabilities beyond checking, including exploration, experimentation, questioning, reasoning, and more.\nSo, treating requirement verification as the purpose of testing work is insufficient. The approach of determining whether a product meets specifications according to strict procedures, like factory quality inspection, doesn\u0026rsquo;t match well with the creative nature of the software product industry. This is also why we say automated testing is more about improving execution efficiency and quickly getting feedback on verification results for covered scenarios, but automated testing itself cannot achieve the purpose of completing product testing.\nBesides verifying explicitly stated functions in requirements, testing also needs to conduct deeper exploration of the delivered product to more fully discover quality issues in the product. This is also the main reason why exploratory testing has been increasingly mentioned in recent years.\nThe True Purpose of Software Testing Work Well, if the purpose of testing work is neither to find bugs nor to verify requirements, then what is the purpose?\nThe true purpose of software testing: to accurately and timely assess the quality status of the test object.\nThe core here is assessing quality status. Quality is a product attribute that can only be adjusted through changes to the product itself, so testing work cannot improve quality or guarantee quality. But through testing work, we can reflect the quality status of the product by exposing problems in the product. Our main role is to assess the current quality of the product. Then the product or project can improve quality based on this status.\nSo the contribution of testing work to quality is more reflected in whether the assessed quality status is timely and accurate.\nAccurate Assessment Testing cannot be exhaustive, and it\u0026rsquo;s impossible to discover all problems in a product within a limited time. But the responsibility of testing is to expose as many quality-affecting issues as possible within a limited time. Besides quantity, we also need to consider the impact of the problems. Combining these two points provides a more accurate reflection of quality.\nTimely Assessment Products cannot undergo unlimited testing, and testing work itself is a cost expenditure. Therefore, the timeliness of obtaining the product quality status through testing work is also crucial for product quality improvement and cost control. The earlier problems are discovered, the lower the cost of fixing them; the shorter the time to obtain quality status assessment, the greater the space for targeted improvement of the product. So the purpose of testing work also includes improving testing efficiency, using automation, shift-left testing, and other means to complete product quality assessment as timely as possible.\nSo this is the true purpose of our software testing work - not to discover more bugs, nor merely to check requirement implementation, but through our professional capabilities, to timely and fully reflect the actual quality status of the current product within a limited time.\nAbove is the sharing about the purpose of software testing work. I am Chengxia Qiucao. Qiucao Observatory, observing the testing industry\nPromoting my testing course, interested friends can learn more through the following link\n❤️❤️❤️❤️ Chengxia Qiucao\u0026rsquo;s Testing Career Advancement Course ❤️❤️❤️❤️\n","date":"2024-08-30T20:35:21+08:00","image":"https://chengxiaqiucao.github.io/post/007-what-is-testing-goal/testing_hu_aabdee14167ac95.png","permalink":"https://chengxiaqiucao.github.io/en/post/007-what-is-testing-goal/","title":"What is the Real Purpose of Software Testing?"},{"content":"Restore Classic Right-Click Menu in Windows 11 Windows 11 has introduced many interface optimizations compared to previous versions. However, one optimization has caused some inconvenience - the right-click menu now folds non-system menu items by default, requiring an extra click on \u0026ldquo;Show more options\u0026rdquo; to reveal the full menu.\nThere are actually two methods to restore the classic menu style:\nHold the Shift key while clicking the menu - this will directly show the full menu (Recommended) Alternatively, you can permanently restore the classic menu by adding a registry entry: 1 \u0026gt; reg.exe add \u0026#34;HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\u0026#34; /f /ve After executing this command, you\u0026rsquo;ll need to restart File Explorer:\n1 taskkill /f /im explorer.exe \u0026amp; start explorer.exe This will completely restore the right-click menu to its classic style. To revert back, simply delete the registry entry.\nClipboard History Tool Windows 11 includes a very useful built-in tool that keeps a history of your clipboard items. You can access it by pressing Win+V.\nIn addition to conveniently storing multiple clipboard entries, this tool also provides:\nEasy insertion of emoji Kaomoji (Japanese emoticons) Commonly used special characters GIF search functionality ❤️👍😎🏠🕍❄️ (●ˇ∀ˇ●)(❤️´艸｀❤️)◀▶◯◻\nTo disable clipboard history, go to System Settings \u0026gt; System \u0026gt; Clipboard and turn it off.\n","date":"2024-08-22T15:40:10+08:00","permalink":"https://chengxiaqiucao.github.io/en/post/010-windows-system-tips/","title":"Two Useful Windows 11 Operation Tips"},{"content":" Although I\u0026rsquo;ve always had the habit of writing and recording, my articles have been quite scattered. So I decided to create my own static blog. I\u0026rsquo;ve known for a while that Github allows publishing static pages with a github.io domain through Github Pages. Currently, my preferred writing tool is Obsidian, so my requirement was to be able to conveniently publish to Github after writing articles in Obsidian.\nSo I got to work, and after more than two days of exploration, I finally set up this blog to my satisfaction. Here I\u0026rsquo;m recording the implementation process for future reference.\nResult: Hugo Static Page Framework What is Hugo? Hugo is a static website generation framework written in Go language. It features good performance, is fast and easy to use, and highly configurable. It can quickly generate a completely HTML-based website based on Markdown format documents. It\u0026rsquo;s a powerful tool for generating blog sites.\nInstallation Hugo supports multiple installation methods. I installed it on a Windows system using the winget package manager:\n1 \u0026gt; winget install Hugo.Hugo.Extended After installation, check the version information: After completing the installation, you can use the hugo command to generate our blog site:\n1 \u0026gt; hugo new site BlogSite This will automatically generate a structure for our website:\n-archetypes\n-assets\n-content\n-data\n-i18n\n-layouts\n-static\n-themes\n-hugo.toml\nThe content directory is where we store our current articles. The theme directory contains themes that can be applied to the website. The assets directory can include resources that need to be referenced. The layout directory contains the structure for rendering the website.\nThe archetypes directory defines some default metadata information (frontMatter) for pages, usually placed in default.md. Hugo will automatically add this metadata when generating new pages and generate pages based on the configuration during rendering.\nMy configuration is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- title: \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date: {{ .Date }} imageNameKey: Pasted draft: true Categories: tags: --- When a markdown document is formally generated, such as this article, it appears in Obsidian as document property information: Stack Theme After generating the website, we can choose a theme we like from the rich templates on the Hugo official website. Here I\u0026rsquo;m using the Stack theme. Clone the theme from GitHub to the Theme directory of the generated website:\ngit clone https://github.com/CaiJimmy/hugo-theme-stack themes/stack Then, following its official example, include page, post directories, and the homepage index.md file in the content directory.\nFor specific configuration information, refer to the hugo.yaml in the Stack example site, which mainly contains configuration information for various site style organizations. I won\u0026rsquo;t go into detail here.\nCreating Articles Because we often need to reference images when creating articles, to facilitate direct referencing by relative paths in the document, we can use the following method to create articles. Instead of generating pages directly, we generate article directories and create them using index.md within the directory:\n1 \u0026gt; hugo new post/hugo+github搭建博客小记/index.md Complete the writing of article content in index.md.\nGenerating Example Site After completing site configuration and necessary materials and article writing, you can execute the following command for local preview:\n1 \u0026gt; Hugo Server --theme=stack --buildDrafts buildDrafts will render articles marked with draft=true as well.\nAfter execution, the following information is displayed: Now you can preview the current page status from http://localhost:1313:\nIf there are no issues, you can use the command to formally generate the site:\n1 \u0026gt; hugo --theme=stack --baseURL=\u0026#34;https://chengxiaqiucao.github.io/\u0026#34; This will generate the static site content we need in the public directory of the site: Publishing to Github Page Github Repository After completing local debugging, we want to publish our website to Github. First, of course, you need to have your own Github account. Then create a page repo for your account, such as chengxiaqiucao.github.io:\n1 2 3 4 5 6 \u0026gt; cd public \u0026gt; git init \u0026gt; git remote add origin \u0026#34;https://github.com/chengxiaqiucao/chengxiaqiucao.github.io.git\u0026#34; \u0026gt; git add -A \u0026gt; git commit -m \u0026#34;first commit\u0026#34; \u0026gt; git push -u origin main Through the above commands, the site content in public is pushed to the Github page repository.\nRepository Configuration To publish this page, configure the following on Github: This way, each time new content is pushed to the repository, it will trigger a build.\nNow let\u0026rsquo;s visit https://chengxiaqiucao.github.io/ to see the results.\nObsidian Settings Then, when writing articles with Obsidian, to facilitate image pasting, we need to configure the storage location for image attachments: There\u0026rsquo;s also a pitfall here: when Obsidian pastes images, it automatically generates a filename like pasted image XXXXXX.png.\nBut there\u0026rsquo;s a problem: this filename contains spaces, which causes the Stack theme to fail to parse it, resulting in images not displaying. Here I recommend using an Obsidian plugin, paste image rename, which allows you to set your own pasted image file format: Well, now we\u0026rsquo;ve built a blog space of our own, and we can happily start writing~~~\n","date":"2024-08-21T00:00:00Z","permalink":"https://chengxiaqiucao.github.io/en/post/009-hugo+github-setup-blog/","title":"Setting Up a Blog with Hugo and Github"},{"content":"The hottest technology today is undoubtedly OpenAI\u0026rsquo;s ChatGPT, and AI technology has been widely applied in many areas. Today we\u0026rsquo;ll discuss TestGPT, a popular application in the software testing field.\nWhat is TestGPT? TestGPT is an artificial intelligence model (AI model) for the testing domain, released by CodiumAI Ltd., a startup company headquartered in Tel Aviv, Israel. It is powered by OpenAI\u0026rsquo;s GPT-4 large language model.\nOfficial website: www.codium.ai\nFrom the website\u0026rsquo;s introduction, it\u0026rsquo;s clear that TestGPT is an AI tool designed to assist developers in testing their code, providing automatically generated software test suite suggestions to accelerate coding and error scanning.\nHow to Use It? Currently, TestGPT offers plugin support for VsCode and JetBrains Taking VsCode as an example, you can install it by searching for CodiumAI in the VsCode extension marketplace\nAfter installation, you can log in directly with your Github account.\nLet\u0026rsquo;s see how it works with a problematic Python sorting algorithm code.\n1 2 3 4 5 6 7 8 9 10 11 12 def insert_sort(lists): # Insertion sort count = len(lists) for i in range(0, count): #range interval is incorrect, this is a bug, should be (1, count) key = lists[i] j = i - 1 while j \u0026gt;= 0: if lists[j] \u0026gt; key: lists[j + 1] = lists[j] lists[j] = key j -= 1 return lists Switch to the CodiumAI plugin, and after connecting, you can see that the code section already has an entry point for generating tests\nTry generating tests and see the effect. After a moment, you can see the AI\u0026rsquo;s results\nThe AI assistant interface has three parts:\nTest Suite Code Analysis Code Suggestions In the test configuration section, you can make basic test configurations\nThe Coverage section shows the coverage of the AI-generated cases\nThe Test section contains the specific test cases. In this example, 6 test cases were generated\nAfter execution, you can see the test results, but all the generated test code executed successfully, seemingly not detecting the bug through the test code :(\nCode Analysis provides an analytical explanation of the code\nThe Code Suggestions section provides modification suggestions, which accurately points out the problem in the code.\nApplying the suggestion directly, you can see that the code has been modified and comments have been added\nConclusion So we can see that TestGPT is indeed excellent, accurately analyzing the purpose of the code and identifying problematic areas. It also helps design test case coverage and related unit test scripts. Making good use of this tool can undoubtedly provide great assistance to development engineers. However, from initial use, the self-generated test cases still have deficiencies in covering problematic code, and in the short term, it\u0026rsquo;s probably not sufficient to replace test design.\n","date":"2023-10-21T00:00:00Z","image":"https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_203935_hu_71c167ed5a897e85.png","permalink":"https://chengxiaqiucao.github.io/en/post/006-ai-testing-by-testgpt/","title":"AI Testing with TestGPT"},{"content":"Introduction As the most important work output of a test engineer, Bug Reports (or defect reports, issue tickets) are the direct manifestation of a test engineer\u0026rsquo;s work results and the output that best demonstrates their value and capabilities. However, project stakeholders and even test engineers themselves often underestimate the importance of Bug Reports. The content of bug reports, their submission methods, and handling processes significantly impact project progress, operational efficiency, and even team morale.\nThere has been relatively little industry discussion and summary regarding Bug Reports. In this article, based on the author\u0026rsquo;s years of professional observations, we hope to provide some summaries and suggestions on the elements of Bug reports and how professional test engineers should handle them. We aim to spark discussion, and welcome corrections for any oversights.\nMain contents include:\nWhat is a Bug, and what is a Bug Report What information do development or project teams actually want to get from Bug reports Common mistakes made by testing novices when submitting bugs Bug reporting and storytelling How professional test engineers submit high-quality bugs What is a Bug? The History of Bugs The word \u0026ldquo;Bug\u0026rdquo; in English originally meant insect or beetle, and is now used in the IT industry to refer to defects in software. This history is quite interesting:\nAs early as 1878, the great inventor Edison used the word \u0026ldquo;bug\u0026rdquo; in a letter to a friend to refer to faults (or potential causes of faults) in electronic circuits. However, its true entry into computer industry history came on September 9, 1947.\nAt that time, the first programmers were developing the Mark II computer at Harvard University. [Grace Murray Hopper][1] found a moth near a relay contact while investigating a problem, killed it with her logbook, and marked it as \u0026ldquo;the first actual case of finding a bug.\u0026rdquo; Since then, the word \u0026ldquo;bug\u0026rdquo; has been used to refer to defects or faults in computers. Correspondingly, \u0026ldquo;debug\u0026rdquo; is used to refer to the act of removing faults.\nThe image below is the first actual bug preserved in the Smithsonian Museum: Among the first programmers in history, the only woman was the \u0026ldquo;mother of the bug\u0026rdquo;: In any case, the word \u0026ldquo;Bug\u0026rdquo; now refers to defects or faults in software or programs. However, for project teams, it\u0026rsquo;s recommended not to simply define Bug as a fault, as the word fault has a negative connotation. Viewing Bugs as defects or issues, emphasizing room for improvement has a more positive guiding effect on project teams.\nWhat is a Bug Report? The word \u0026ldquo;report\u0026rdquo; in English can be both a verb and a noun. So Bug report can refer to both the action of finding and reporting a problem, and the report content submitted after finding a problem. Here we generally view it as a problem report (noun), i.e., an issue ticket, so what exactly is an issue ticket?\nTesting guru Cem Kaner once pointed out:\nThe purpose of testing is not to find bugs. The purpose is to get bugs fixed.\nThis view actually points out a misconception many testers have - thinking that testing work is just about finding as many bugs as possible. In fact, for the team, no matter how many bugs are found, they ultimately need to be resolved to demonstrate the value of finding these bugs.\nFrom discovery to resolution, the issue ticket is the main medium, being both the output of testers\u0026rsquo; work and the input for developers to solve problems, its importance is self-evident.\nAdditionally, while there are various ways to inform developers of discovered problems - verbal notification, actual demonstration, email, IM chat, etc., can all serve the purpose of notification. However, in modern software development processes, there are usually dedicated systems for defect tracking, such as JIRA, Zentao, Bugfree, QC (HP Quality Center), etc., which can handle defect submission and tracking. Through these specialized systems, not only can they serve the purpose of recording and feedback, but they can also better reflect the overall quality status and development progress of the project through statistics and analysis.\nTherefore:\nAn issue ticket is the output after testers discover defects during testing activities\nAn issue ticket is the input for developers to resolve defects\nAn issue ticket is the communication medium between testers and developers regarding bugs\nAn issue ticket is also an indicator for project teams to evaluate current development status and product maturity.\nThe Role and Importance of Issue Tickets Many test engineers have probably experienced the following feedback or complaints after submitting issue tickets:\nWhat exactly are you trying to say with this issue ticket?\nI can\u0026rsquo;t reproduce this problem on my end\nWhy do you consider this a defect?\nNormal people don\u0026rsquo;t use software the way described in the issue ticket, only someone with mental issues would use it that way\nThis is indeed a problem, but the cost of fixing it is too high, and there are alternative ways to work around it\nYou might think this is a problem, but actual users won\u0026rsquo;t find it problematic\nWhile what you submitted is indeed an issue, it has minimal impact on users. Why don\u0026rsquo;t we see many issue tickets for those parts that have a greater impact on users?\n\u0026hellip;\u0026hellip;\nTesters certainly don\u0026rsquo;t want to receive such feedback. But these issues also indirectly reflect that when it comes to bugs, developers or project teams actually focus more on how to resolve bugs (including judging whether they need to be resolved), and they hope to get the following information from issue tickets:\nWhat problem was discovered?\nWhat is the problem phenomenon? Does it always occur? What was the background and context when discovering this problem? Besides the visible phenomenon, what else happened in the system? Are there screenshots, logs, screen recordings? Why is it a problem?\nWhat impact does this problem have? What happens if it\u0026rsquo;s not resolved? What\u0026rsquo;s the probability of occurrence? Is it duplicated with other issues? What operations were performed that exposed this problem?\nWhat was the input? What test path and test data were used? What about the test environment and software version? Therefore, as testers, we shouldn\u0026rsquo;t view issue tickets as simple problem records. They are important communication media between testing and development. Good issue tickets can greatly reduce communication costs between both parties, both greatly reducing developers\u0026rsquo; workload in solving problems and reducing testers\u0026rsquo; workload in clarifying and re-verifying. For the project, the quality of issue ticket submission affects the team\u0026rsquo;s productivity and delivery speed, which cannot be underestimated.\nElements of Issue Tickets Understanding the role of issue tickets, the elements that should be included in them become quite clear, generally including the following aspects:\nTitle for preliminary judgment\nThe title should clearly summarize the problem and the module where it occurs, making it convenient for developers to make an initial judgment\nContext and necessary related information\nThe contextual background when the problem occurs, related information such as software version, test environment, configuration status, resource status, etc.\nAccurate and reasonable detailed description\nDetailed description of the steps to discover the problem, operation expectations, actual conditions that occurred. Problem occurrence frequency, test inputs, data, files used, etc.\nSupplementary information to help resolve the problem\nSupplementary information that can help developers speed up problem resolution, such as screenshots, screen recordings, operation logs, system logs, etc.\nAuxiliary information for project decision-making\nAs the first judge of bugs, testers should provide suggestions on the severity of the problem and resolution priority. Initially assign developers to resolve the problem, and provide related information identifiers for statistics and tracking.\nCommon Mistakes by Testing Novices Combining the elements of issue tickets, we can initially summarize some common mistakes made by testing novices or non-professional testers when submitting bugs:\nUnclear titles\nTitles that are too simple make it difficult to make preliminary judgments about the problem. For example, simply writing \u0026ldquo;system crash\u0026rdquo; is too vague, and overly simple titles can easily become similar, causing inconvenience for focused review and evaluation of issues.\nOr titles that are too complex. Long titles can lead to reading fatigue and lack focus. For example, there\u0026rsquo;s no need to write detailed operation steps in the title.\nUnrealistic, deviating from requirement scenarios\nSometimes testing novices make assumptions based on personal preferences and raise issues. \u0026ldquo;I think\u0026rdquo; and \u0026ldquo;it feels not good\u0026rdquo; are high-frequency words in such novice issues.\nNot actually problems\nTesting novices often submit issue tickets that aren\u0026rsquo;t actually bugs due to misunderstandings of system implementation principles or lack of skill level.\nAlso, problems caused by incorrect testing methods or environment configuration by testing novices themselves.\nInsufficient description information\nTypically, through the description information in the issue ticket, developers cannot confirm the problem phenomenon or reproduce it themselves. Testing novices often think their job is done once they find a problem, without providing sufficient information to developers, such as screenshots and logs.\nToo much irrelevant information, messy formatting\nSometimes novice issue tickets contain too much redundant noisy information, making it difficult to see the key points. For example, pasting tens of thousands of lines of logs into the issue ticket indiscriminately.\nOr completely lacking formatting, with a lot of information mixed together messily, making it extremely difficult to read.\nToo many issues\nIssue tickets should be focused, but sometimes testing novices include many different issues in the same ticket. This is very unfavorable for issue tracking and focusing.\nOnly looking at phenomena without considering essence\nSometimes simple problem phenomena are often manifestations or clues of serious problems. Novices often overlook important risks, ignoring problems hidden beneath seemingly minor traces, easily missing bugs lurking beneath phenomena. For example, some unexpected prompt messages are often manifestations of backend calculation and statistical accuracy bugs.\nBug Reporting and Storytelling Coming back to the act of submitting bugs, essentially, this is a communication process. The issue ticket carries the role of this communication medium. Through the issue ticket, testers describe the problems they see and discover during testing, and developers understand the corresponding information by reading the issue ticket and resolve the problems accordingly.\nSo submitting bugs is actually like writing a short article or telling a story, where testers are the authors and developers are the readers.\nWhen we submit issue tickets, it\u0026rsquo;s actually a form of writing. The 5W requirements for writing also apply:\nWhat - What exactly is the problem?\nWhy - Why raise this issue? Why is it a problem?\nWho - Who is the subject of the problem? Who are the related parties?\nWhere - Where did the problem occur?\nWhen - When and at what frequency does it occur?\nWhen submitting bugs, thinking about these 5Ws, combined with the issue ticket elements mentioned above, generally helps avoid many mistakes that testing novices commonly make when submitting issue tickets.\nThe Art of Bug Reporting Above we discussed the elements of issue tickets and some details to note when submitting bugs, but why do we say that submitting bugs is actually an artistic work?\nLet\u0026rsquo;s look at some examples of issue tickets:\nSuppose there\u0026rsquo;s a product management system where users experience a crash when adding new products under a specific product category (fruits)\nIssue Ticket Example 1:\n1 2 3 User adds product, crash occurs As shown in the image (crash screen screenshot) This issue ticket basically describes the problem phenomenon through the provided screenshot. However, for developers, there\u0026rsquo;s too little information, and they likely won\u0026rsquo;t be able to reproduce the problem immediately (fruits category). The information contained in the issue ticket is too simple, making it an extremely poor issue ticket example.\nIssue Ticket Example 2:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 User experiences crash when adding product Operation steps: 1. Open App 2. User logs into system, enters correct username and password and logs in 3. Enter product management page 4. Select category: fruits 5. Click new product button 6. Enter product information: ********* 7. Click submit button Expected result: Product created successfully Actual result: Crash occurs Device model used: Xiaomi 8 Operating system version: Android 8.0 Software version V1.1 Attachment: Crash screenshot This issue ticket is a common submission format by many testing novices, containing very detailed operation steps and related auxiliary information. But this is also a very poor issue ticket. First, such step descriptions are unnecessary - developers don\u0026rsquo;t need to be told about basic operations like opening the app, logging in, and submitting in the issue ticket. Second, while there\u0026rsquo;s a lot of auxiliary information, it\u0026rsquo;s mostly irrelevant to the problem cause and doesn\u0026rsquo;t help developers locate the issue, instead introducing some distracting information. Such issue tickets fail to demonstrate the professional value of testers and don\u0026rsquo;t help with quick problem resolution.\nIssue Ticket Example 3:\n1 2 3 4 5 6 7 8 9 User experiences crash when adding product under fruits category Operation steps: 1. Select fruits category, create product, crash occurs 2. Select non-fruit category, create product, product created successfully Verified on models: Xiaomi 8, Huawei Mate 7 etc. show consistent phenomenon, should be unrelated to model, operating system, version Attachments: Error screenshot, system crash logcat logs Impact: Users cannot add products in fruits category, directly affects user experience. Needs high priority resolution This issue ticket can be considered a relatively qualified one. It clearly indicates the scenario where the problem occurs and has preliminarily eliminated some irrelevant information. Developers can focus on product creation under the fruits category for problem analysis. It also points out the problem\u0026rsquo;s impact on the software and resolution priority suggestions, making the project team clearly aware of the problem\u0026rsquo;s impact.\nIssue Ticket Example 4:\n1 2 3 4 5 6 7 8 9 10 11 12 User experiences null pointer crash when adding product under fruits category Operation steps: 1. Select fruits category, create product, crash occurs 2. Select non-fruit category, create product, product created successfully 3. Edit existing products under fruits category, edit successful Backend database insert operation fails due to missing field for fruits category, update operation normal. Verified on models: Xiaomi 8, Huawei Mate 7 etc. show consistent phenomenon, should be unrelated to model, operating system, version Attachments: Error screenshot, system crash logcat logs Impact: Users cannot add products in fruits category, directly affects user experience. Needs high priority resolution This issue ticket goes further than the previous one, preliminarily analyzing the problem cause - during new operations, a key field information is missing, causing the crash. Developers can now very clearly proceed with fixing the problem.\nIssue Ticket Example 5:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 User experiences null pointer crash when adding product under fruits category. Product import operation with old template has the same issue. Operation steps: 1. Select fruits category, create product, crash occurs 2. Select non-fruit category, create product, product created successfully 3. Edit existing products under fruits category, edit successful Backend database insert operation fails due to missing field for fruits category, update operation normal. In the product management import function, new template fruit product import successful, using old template (missing new field) to import fruit data also fails. Needs to be fixed together. Verified on models: Xiaomi 8, Huawei Mate 7 etc. show consistent phenomenon, should be unrelated to model, operating system, version Attachments: Error screenshot, system crash logcat logs, new and old template import logs Impact: Users cannot add products in fruits category, directly affects user experience. Needs high priority resolution This issue ticket, building on the previous example, demonstrates the tester\u0026rsquo;s professional capability by reasoning and verifying that the import function with similar logic might have the same issue based on their experience.\nThrough this simple case above, we can see that different ways of submitting issue tickets can have very different effects on problem resolution.\nToo little information makes it difficult for developers to determine the root cause of the bug, multiplying the debugging workload.\nToo much information causes developers to spend extra effort analyzing redundant information, even interfering with debugging and resolution direction, similarly causing significant waste of work effort.\nThe more clearly and accurately the root cause of the problem is reflected, the more efficiently developers can solve the problem.\nThe tester\u0026rsquo;s experience and judgment reasoning ability can be well demonstrated through issue tickets.\nSo why do we say submitting bugs is an artistic work? Issue tickets should neither be too simple nor too complex, and should be able to convey information as accurately and comprehensively as possible to developers - this is truly an artistic endeavor.\nConclusion In summary, submitting bugs is a very important activity in the software development process, and the quality of issue tickets directly affects team efficiency and output. As professional testers, mastering the art of submitting bugs means that issue tickets are not simple problem records, but rather communication bridges between testing and development, supporting developers in efficiently fixing bugs.\nWelcome to follow and comment, you can also follow the WeChat public account: 秋草说测试\n","date":"2023-08-19T00:00:00Z","permalink":"https://chengxiaqiucao.github.io/en/post/005-the-bugs-report-art/","title":"The Art of Bug Reporting"},{"content":"Introduction In our previous series, we detailed how to use Postman for API testing, covering basic functions, advanced scripting, and automation implementation. In our work, besides these local testing implementations, we often need to manage API test cases through the cloud and leverage cloud-based capabilities for enhanced testing due to different office locations or team collaboration requirements. In this article, we\u0026rsquo;ll explore the advanced Cloud services provided by Postman.\nIntroduction to Postman Cloud Services To use Postman Cloud services, we first need to register an official account\nAfter registration and login, you can access the Cloud management page by clicking the dashboard button in the upper right corner of the official homepage. This will display your workspaces, including your personal workspace and any team workspaces you\u0026rsquo;ve created for sharing.\nWorkspace and Cloud Feature Overview A workspace is a management unit in Postman Cloud. Through cloud workspace synchronization, we can achieve several advantages that aren\u0026rsquo;t possible with the local application:\nConvenient organization and management of personal work across different locations and devices. For example, you can continue unfinished work at home that you started at the office.\nFacilitates team collaboration by sharing relevant metadata and team workspaces, allowing team members to jointly maintain the same set of interfaces and share work results.\nA unified workspace enables teams to work in the same dimension, avoiding inconsistencies in work progress and data that could lead to misunderstandings and communication gaps.\nThe workspace history function helps record and trace interface operation records, making it convenient to save work processes and results.\nThe image below shows the interface after entering a workspace in the Cloud. You can see the functions provided by Postman Cloud. By default, it displays the Collection information in the current space. The other tabs are interface operation history, environment variables, monitoring tasks, Mock services, API integration capabilities, and workspace operation records.\nBelow are the History interface operation records and Activity workspace operation records:\nAccount System and Pricing After registering on the Postman website, you have a free account by default, which can be upgraded to Professional or Enterprise versions. The current monthly fees are as follows:\nThe free version includes the following features. As you can see, most functions are supported, with the main difference being usage limits. Free accounts are limited to 1,000 online document views, Mock requests, API calls, and monitoring calls per month, which can generally meet individual learning and basic testing needs. For larger teams, it\u0026rsquo;s better to upgrade to a premium version or choose alternative solutions.\nLocal Application Login In the Postman application, we can also log in with our registered account. After logging in, the banner at the top will display the default workspace and account avatar.\nAfter logging in, the local app will automatically synchronize with the information saved in the cloud to maintain data consistency. Let\u0026rsquo;s now look at the services provided by Postman Cloud.\nPostman Cloud\u0026rsquo;s Online API Documentation Powerful and beautifully formatted online documentation is an important service of Postman Cloud. It has the following main advantages:\nSupport for Private and Public Documentation When you register a Postman account, the online documentation feature is enabled by default. After logging into the web workspace and entering a Collection, you can see that the online documentation for the current Collection has been automatically generated, as shown:\nThe image above shows private documentation that only the current account can view in the workspace. Using the Share button in the upper right corner, you can share the current documentation with other workspaces or team workspaces. The Publish button allows you to publish the current documentation as public documentation for open access.\nIn the Postman app, you can also use the Publish Docs button in the Collection menu to publish public documentation. After publishing, a public access URL will be generated, through which the documentation can be accessed.\nAutomatic Documentation Generation As mentioned above, Postman online documentation is automatically generated, eliminating the previously cumbersome document editing and formatting work. It can automatically generate the following content:\nRequest examples, including request method, URI, message content, headers, parameters, etc. Interface response information saved as Examples Descriptions written for Collections, Folders, and Requests Automatically generated code snippets in various mainstream languages The image below shows the Collection description editing interface: Support for Markdown Syntax When writing Descriptions, we can use Markdown syntax, which further enhances the reading experience of the documentation. The image above includes Markdown list and bold syntax.\nSupport for ID-Based Internal Links We can also use the unique IDs generated by Postman for each request and folder for cross-referencing within the documentation. When we click on the corresponding element in the right navigation bar of the document, the unique ID of that element is displayed in the URL, as shown:\nNote: ID information can also be obtained through the Postman API interface.\nSupport for Automatic Generation of Code Snippets in Mainstream Languages Another excellent feature of Postman online documentation is its support for code snippets in multiple mainstream languages, which is convenient for debugging code in the respective language. As shown: Support for Comments In private documentation such as team spaces, we can also use the comment feature to communicate with team members and confirm information by annotating interfaces.\nPostman Online Documentation Usage Limits Postman Cloud limits the number of views for both private and public documentation. Free accounts have a monthly limit of 1,000 free views for each. This is barely sufficient for individual use and learning. For team collaboration, it\u0026rsquo;s definitely inadequate, so it\u0026rsquo;s recommended to choose a paid account or an open-source free alternative like Swagger.\nCurrent usage can be viewed on the Resource Usage page of your personal account:\nIntroduction to Postman\u0026rsquo;s Mock Server Another advanced feature of Postman Cloud is its support for Mock Servers.\nIn interface development and testing work, especially for software products developed in parallel by multiple teams such as frontend, backend, and app teams, a common situation is that progress often depends on other teams. For example, an app might depend on backend interfaces for debugging, or on interfaces provided by third-party teams. If the interfaces are not yet ready for joint debugging, to ensure development progress, mocking interfaces according to certain conventions becomes a necessary choice.\nA Mock Server is a functional module that provides this service. In Postman, we can save responses as Examples, and then conveniently create Mock services based on these examples to simulate message responses independent of the original interface.\nThe image below shows a response Example saved in the Postman app. For the same interface request, we can save different response results as multiple different examples.\nCreating a Mock Server There are several ways to create a Mock Server in Postman:\nThrough the New button in the Postman app In the launch window that automatically pops up when opening the Postman app In the Collection menu Through the Postman API Here, we\u0026rsquo;ll use the Collection menu as an example. Select Mock Collection:\nSet up the Mock Server based on the Collection information: Upon successful creation, an online Mock Server access URL will be generated, in this example: https://b0fadee4-7560-4b14-a201-599985ce4f0f.mock.pstmn.io\nThis completes the creation of the Mock service for the current Collection. Postman will default to creating an Environment with the same name as the current Collection, and in this environment, it will add a url variable with the value being the Mock service address just created.\nUsing the Mock Server After creating the Mock service, we can simulate interface responses through the previously generated Mock service address. The image shows accessing an interface saved in the Mock service, which returns the content of the previously saved response Example.\nMock Server Matching Algorithm At this point, you might wonder how the Mock Server determines which content to respond with based on the request, especially when we have saved multiple Examples for the same request. Let\u0026rsquo;s introduce the response matching algorithm used by the Mock Server.\nThe image below shows the algorithm sequence used by the Mock Server for response matching:\nFirst, it filters responses based on the format of the content to be responded with, such as JSON or XML format (based on the request format definition).\nIt matches based on the HTTP method of the request, eliminating responses that don\u0026rsquo;t match the request\u0026rsquo;s HTTP method.\nIt matches based on the URL path of the request. It prioritizes strictly matching paths, then multi-level paths with /, then paths ignoring case and ID information. If no match is found, it returns that no corresponding response was found.\nYou can specify the response message by carrying a specified header value in the request message header. Postman supports carrying x-mock-response-name, x-mock-response-id, and x-mock-response-code in the message header, which can specify the response name (saved example name), the ID of the response Example (unique ID, which can be queried through the API), and the response status code, respectively.\nAmong the remaining responses, they are sorted in reverse order of saving, and the one with the highest threshold is selected for response.\nThe image shows a Mock service for creating a Repo, with multiple response Examples. Here, it matches the request method and request path: The image below shows a request that includes a specified Header, x-mock-response-code, specifying to return a response with a status code of 422. As we can see, through Postman\u0026rsquo;s Mock Server service, we can simulate interface responses without relying on the original interface environment, to meet our business testing needs. Currently, free accounts have a monthly limit of 1,000 calls through the Mock Server.\nPostman\u0026rsquo;s Monitoring Feature Next, let\u0026rsquo;s introduce the monitoring service provided by Postman Cloud.\nFor internet applications, how do we ensure our business can correctly provide services? How do we prevent business interruptions due to service anomalies or network issues?\nIn the process of collaborating with external teams, if the other party\u0026rsquo;s interface changes, how can we be informed promptly to avoid a lot of wasted effort?\nDue to these issues, the importance of monitoring interfaces is self-evident. Postman\u0026rsquo;s interface monitoring function is essentially a feature provided by the Cloud that schedules the execution of interface test tasks, records results, and sends notifications. You might say that this can also be achieved through CI integration tools like Jenkins.\nIndeed, this effect can be achieved through CI scheduling, but Cloud monitoring can also provide the selection of different access regions and value-added capabilities such as trend visualization and analysis of monitoring results.\nThe image below shows selecting a new monitor from the Collection menu in the Postman app:\nThe image below shows creating a monitor in the Postman web workspace:\nThe images below show the created monitor and the monitoring results interface:\nIn addition to creating monitors through the App and the Cloud web interface, we can also create monitors through the Postman API.\nAdditionally, there are several limitations to Postman\u0026rsquo;s monitoring function that you should be aware of:\nSince monitoring is executed in the cloud, the monitored interface needs to be accessible via the internet. For interfaces developed on an intranet, a public access interface needs to be exposed.\nPostman currently doesn\u0026rsquo;t have a file storage function, so it doesn\u0026rsquo;t support attaching files in interface requests.\nSimilarly, it doesn\u0026rsquo;t support using data files to provide data variables.\nThe interface execution record doesn\u0026rsquo;t record the request and response message bodies.\nCurrently, free accounts have a monitor interface execution limit of 1,000 times per month.\nPostman\u0026rsquo;s Open API Besides creating and managing Collections, Environments, Mock Servers, Monitors, etc. through the Postman App and the cloud web interface, Postman Cloud also provides its own API interfaces, making it convenient for users to call from their own tools or scripts, and more easily schedule and manage the related services provided by Postman.\nPostman\u0026rsquo;s API is provided through cloud-based Integration. (For professional and higher accounts, other integrated third-party tools are also available.)\nObtaining Authentication Code To use the Postman API, you first need to generate an authentication code. Enter from the interface shown above, select Get API Key:\nAfter generation, you can view the current Key value in Existing API Keys:\nThere are two ways to use the authentication code for the Postman API:\nBy adding an X-Api-Key header in the request message to carry this key value for authentication.\nBy carrying the query parameter apikey in the request URL, such as:\n1 https://api.getpostman.com/collections?apikey={{postman_api_key}} If you don\u0026rsquo;t carry the authentication code, the interface will return the following error:\n1 2 3 4 5 6 { \u0026#34;error\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;AuthenticationError\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Invalid API Key. Every request requires a valid API Key to be sent.\u0026#34; } } Access Frequency Limits Similar to most RESTful API services, to prevent DDOS attacks, Postman API also limits the frequency of interface access to no more than 60 times per minute. In the response message, you can learn about this limit, remaining count, and reset time through custom headers such as X-RateLimit-Limit, X-RateLimit-Remaining, and X-RateLimit-Reset. As shown in the interface below for getting all Collections:\nUsage Examples Let\u0026rsquo;s look at several examples of Postman API calls:\nGetting Collection Information In the previous rate limit image, we accessed the interface to get all Collections under the current account, with a response like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \u0026#34;collections\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;7ea4592c-848a-4a76-a4e4-5b1b0d0594f7\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;PostmanAPI\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;4793508\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;4793508-7ea4592c-848a-4a76-a4e4-5b1b0d0594f7\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d6c64129-8c6c-48ec-968c-7f01a70a601b\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Postman Echo\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;4793508\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;4793508-d6c64129-8c6c-48ec-968c-7f01a70a601b\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;f2777cee-5d92-4a0d-896e-e00ad27ef5bd\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;GitHub\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;4793508\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;4793508-f2777cee-5d92-4a0d-896e-e00ad27ef5bd\u0026#34; } ] } By providing the ID of the relevant interface, we can get detailed information about a single Collection using the interface:\n1 https://api.getpostman.com/collections/{{collectionID}} For example, here we can use Postman\u0026rsquo;s Pre-Script to first get the ID of a Collection with a specific name like PostmanAPI, then assign the ID to the environment variable {{collectionID}}. The code is as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 pm.sendRequest(\u0026#39;https://api.getpostman.com/collections?apikey=\u0026#39;+pm.environment.get(\u0026#34;postman_api_key\u0026#34;), function (err, res) { if (err) { console.log(err); } else { var collections = res.json().collections for(let i=0;i\u0026lt;collections.length;i++){ if(collections[i].name == \u0026#34;PostmanAPI\u0026#34;){ pm.environment.set(\u0026#34;collectionID\u0026#34;, collections[i].id); } } } }); As shown: Getting Environment Information Similarly, we can get information about a single environment:\nPre-Script code as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 pm.sendRequest(\u0026#39;https://api.getpostman.com/environments?apikey=\u0026#39;+pm.environment.get(\u0026#34;postman_api_key\u0026#34;), function (err, res) { if (err) { console.log(err); } else { var environments = res.json().environments for(let i=0;i\u0026lt;environments.length;i++){ if(environments[i].name == \u0026#34;PostAPI\u0026#34;){ pm.environment.set(\u0026#34;envID\u0026#34;, environments[i].id); } } } }); Screenshot of the call:\nRunning a Specified Monitor We can also immediately execute a specified Monitor through the interface. The interface returns execution results as shown:\nBesides the examples above, detailed interface documentation for the Postman API can be found in the official API documentation. Similarly, the current interface call limit for free accounts is also 1,000 times.\nConclusion Above is the introduction to the advanced features provided by Postman Cloud. As we can see, through Postman Cloud, we can leverage cloud service resources to accomplish some value-added functions that are not easily implemented by the local app, making it more convenient for team sharing and collaboration, enhancing convenience while accelerating our interface development or testing progress. Postman\u0026rsquo;s free version fully supports these value-added services but has certain usage limits. These value-added services can actually also be implemented through some open-source tools, which we can share with you in the future.\nThis concludes the systematic introduction to the Postman tool series. Welcome to continue discussing testing technology and sharing industry dynamics in the readers\u0026rsquo; circle or by joining the WeChat group to grow together!\n","date":"2022-08-27T00:00:00Z","image":"https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png","permalink":"https://chengxiaqiucao.github.io/en/post/004-postman-advanced/","title":"Postman Advanced Guide"},{"content":"Introduction In the previous two articles \u0026ldquo;Postman: Basic Guide\u0026rdquo; and \u0026ldquo;Postman: Advanced Guide\u0026rdquo;, we introduced how Postman, as a professional API testing tool, is primarily used in API testing and its powerful variable and scripting capabilities, which greatly facilitate manual testing work for testers. In fact, Postman also provides excellent support for automated testing. In this article, we\u0026rsquo;ll explore how to use Postman for API automation testing.\nAutomation Testing Overview Before continuing with this article, let\u0026rsquo;s first review some basic concepts related to automation testing. According to Baidu Encyclopedia\u0026rsquo;s definition:\nAutomated testing is a process of converting manually driven testing behaviors into machine-executed operations.\nManually driven testing behaviors, in a broad sense, can include the entire process from test requirement analysis to test design, test execution, and test summary, while in a narrow sense, it generally refers to embodying test design through test code and automatically completing test execution and outputting results through code execution. When we talk about automated testing now, it\u0026rsquo;s more often at the narrow level, using automated testing to improve test execution efficiency and quickly obtain the status of the tested product through rapid test case execution results, more as a quality indicator.\nIn \u0026ldquo;Postman: Basic Guide\u0026rdquo;, we introduced the classic automation testing pyramid:\nHere, software testing is layered according to different test types:\nThe bottom layer is unit testing aimed at the code level. The middle layer is service testing. Modern software applications basically manifest their services in the form of API interfaces, so service testing can also be understood as API testing. The top layer is user interface testing. This model reflects in automated testing that the lower the layer, the greater the proportion of automated testing should be, which leads to a better return on investment. The middle layer of Service testing is neither as maintenance-intensive as the UI layer, making it difficult to keep up with rapid iteration requirements, nor is it as focused on quality verification of business logic as unit testing. Therefore, API testing is now generally considered the priority choice for automated testing implementation.\nWith the help of some automated testing tools or automated testing frameworks, we can more conveniently implement automated testing in terms of test case organization, execution strategy, test data management, result reporting, and other aspects. Let\u0026rsquo;s look at the support Postman provides for automated testing.\nPostman\u0026rsquo;s Batch Execution Tool: Runner Runner is a module in Postman used for batch execution of API test cases. We can use the Runner module to complete automated test execution of written API test cases.\nRunner Feature Introduction In the upper left corner of the Postman main interface, click the Runner button to open the Runner module interface. As shown below:\nThe functions of the related settings are marked in the image above. After selecting the Collection or Folder to be executed, click the run button to start the running page shown below, which displays the execution results. The meanings of the related interface elements are marked in the image:\nAPI Test Data Driven Postman supports test data loading and data-driven execution during Runner operation by introducing data variables. In the previous article \u0026ldquo;Postman: Advanced Guide\u0026rdquo;, we briefly introduced how to use data variables. Here, let\u0026rsquo;s review with a GitHub API example:\nThe data file provides a set of Repositories information (test data), and we run a series of APIs related to this set of data: get repo, get repo contributors, get repo tags, get repo topics, and perform relevant validations for each\nPostman supports two types of external data formats: JSON format or TXT/CSV format. Here, let\u0026rsquo;s assume we save the repositories data in JSON format in a data file, providing some mainstream open-source automation testing frameworks:\n1 2 3 4 5 6 7 8 9 10 11 12 13 [{ \u0026#34;owner\u0026#34;: \u0026#34;junit-team\u0026#34;, \u0026#34;repo\u0026#34;: \u0026#34;junit5\u0026#34; }, { \u0026#34;owner\u0026#34;: \u0026#34;robotframework\u0026#34;, \u0026#34;repo\u0026#34;: \u0026#34;robotframework\u0026#34; },{ \u0026#34;owner\u0026#34;: \u0026#34;appium\u0026#34;, \u0026#34;repo\u0026#34;: \u0026#34;appium\u0026#34; },{ \u0026#34;owner\u0026#34;: \u0026#34;SeleniumHQ\u0026#34;, \u0026#34;repo\u0026#34;: \u0026#34;selenium\u0026#34; }] Write validations in the Test script. In the previous lesson, we mentioned a technique: for scripts that are used repeatedly, we can save them to global variables and execute the content of this variable when needed. In this example, all the APIs we need to execute will use the validation of whether a successful response is correctly returned. So we can set a global variable checkOK. The variable value is the validation script to be executed:\nDifferent APIs all contain the corresponding repo information as path parameters, and then we add the corresponding validations:\nGet repo API /repos/:owner/:repo\n1 2 3 4 5 6 7 8 9 10 11 eval(pm.globals.get(\u0026#34;checkOK\u0026#34;)); //Check if the stargazers_count field exists pm.test(\u0026#34;Star data exists\u0026#34;,function(){ pm.response.to.have.jsonBody(\u0026#34;stargazers_count\u0026#34;) //Get the number of stars let star = pm.response.json().stargazers_count // Display the number of stars in the Test Result and check if it exceeds 1000 Stars pm.test(\u0026#34;Current repo【\u0026#34;+ pm.variables.get(\u0026#34;repo\u0026#34;) +\u0026#34;】star count【\u0026#34;+ star +\u0026#34;】exceeds 1000\u0026#34;,function(){ pm.expect(star).to.gt(1000) }) }) Get Contributor API (since the API returns 30 by default, here we use the per_page parameter to specify 100 items per page) /repos/:owner/:repo/contributors?per_page=100\n1 2 3 4 5 6 7 8 9 10 11 eval(pm.globals.get(\u0026#34;checkOK\u0026#34;)); //Iterate through the current returned array length var contributor=0; for(var c in pm.response.json()){ contributor++; } //Check if the number of contributors exceeds 5 pm.test(\u0026#34;Number of contributors【\u0026#34; + contributor + \u0026#34;】exceeds 5\u0026#34;,function(){ pm.expect(contributor).to.gt(5) }) Get Tag API (since the API returns 30 by default, here we use the per_page parameter to specify 100 items per page) /repos/:owner/:repo/tags?per_page=100\n1 2 3 4 5 6 7 8 9 10 11 eval(pm.globals.get(\u0026#34;checkOK\u0026#34;)); //Iterate through the current returned array length var tag=0; for(var c in pm.response.json()){ tag++; } //Check if the number of tags exceeds 5 pm.test(\u0026#34;Number of tags【\u0026#34; + tag + \u0026#34;】exceeds 5\u0026#34;,function(){ pm.expect(tag).to.gt(5) }) Get Topic API /repos/:owner/:repo/topics\n1 2 3 4 5 6 eval(pm.globals.get(\u0026#34;checkOK\u0026#34;)); //Check for returned Topic names and display in Test Result pm.test(\u0026#34;Current repo【\u0026#34;+ pm.variables.get(\u0026#34;repo\u0026#34;) +\u0026#34;】Topic：\u0026#34; + pm.response.json().names,function(){ pm.response.to.have.jsonBody(\u0026#34;names\u0026#34;) }) Set up Runner configuration in Postman and run:\nThe result is shown below:\nFrom the results, we can see that all the Repo information defined in the GithubRepos.json file has been correctly executed according to the above process.\nNewman Command Line Tool Postman\u0026rsquo;s Runner module provides a good way to execute API test cases in batches, but it still requires manual operation through the Postman interface. For automated testing, we need to be able to execute test cases through command-line tools, which can be integrated into CI/CD pipelines. Postman provides the Newman command-line tool for this purpose.\nNewman Installation Newman is a command-line tool based on Node.js. To install it, you need to have Node.js installed first. Then you can install Newman globally using npm:\n1 npm install -g newman After installation, you can check if the installation was successful by running:\n1 newman -v If the installation is successful, it will display the version number of Newman.\nNewman Usage To use Newman, you first need to export your Postman Collection and Environment files. In Postman, click on the Collection you want to export, then click the \u0026ldquo;\u0026hellip;\u0026rdquo; button and select \u0026ldquo;Export\u0026rdquo; to save the Collection as a JSON file. Similarly, you can export the Environment file.\nThen you can use Newman to run the Collection:\n1 newman run YourCollection.json -e YourEnvironment.json If you need to use data files for data-driven testing, you can use the -d parameter:\n1 newman run YourCollection.json -e YourEnvironment.json -d YourData.json Newman also supports many other parameters to customize the execution process. For example, you can use -n to specify the number of iterations, use -g to specify a global environment file, etc. For more details, you can refer to the Newman documentation.\nNewman Report Generation Newman can generate various formats of test reports, which is very useful for CI/CD integration. By default, Newman outputs the test results to the console, but you can also generate HTML, XML, or JSON reports.\nTo generate an HTML report, you first need to install the HTML reporter:\n1 npm install -g newman-reporter-html Then you can use the -r parameter to specify the report format:\n1 newman run YourCollection.json -e YourEnvironment.json -r html This will generate an HTML report in the current directory. You can also specify the report output directory using the --reporter-html-export parameter:\n1 newman run YourCollection.json -e YourEnvironment.json -r html --reporter-html-export ./reports/report.html Similarly, you can generate XML reports (useful for integration with Jenkins) or JSON reports.\nNewman Integration with CI/CD Newman can be easily integrated with various CI/CD tools such as Jenkins, Travis CI, GitLab CI, etc. Here\u0026rsquo;s a simple example of integrating Newman with Jenkins:\nInstall the \u0026ldquo;NodeJS Plugin\u0026rdquo; in Jenkins Configure a NodeJS installation in Jenkins In your Jenkins job, add a build step to execute a shell command: 1 2 npm install -g newman newman-reporter-html newman run YourCollection.json -e YourEnvironment.json -r html,cli --reporter-html-export ./reports/report.html Add a post-build action to publish the HTML report This way, every time your Jenkins job runs, it will execute your Postman Collection and generate an HTML report.\nPostman API Automation Testing Best Practices Based on the above introduction to Postman\u0026rsquo;s automation testing capabilities, here are some best practices for API automation testing using Postman:\nOrganize your Collections properly: Group related APIs into folders, and use meaningful names for your Collections, folders, and requests.\nUse Environment variables: Store environment-specific values (like base URLs, authentication tokens) in Environment variables, so you can easily switch between different environments.\nUse Pre-request scripts for setup: Use Pre-request scripts to set up the necessary conditions for your tests, such as generating random data, setting variables, etc.\nWrite comprehensive Test scripts: Don\u0026rsquo;t just test for status codes; also validate response bodies, headers, response times, etc.\nUse data files for data-driven testing: When you need to test the same API with different inputs, use data files instead of duplicating requests.\nImplement proper error handling: Make sure your scripts handle errors gracefully and provide meaningful error messages.\nUse Newman for CI/CD integration: Integrate your Postman tests into your CI/CD pipeline using Newman.\nGenerate and review reports: Regularly review test reports to identify trends and potential issues.\nKeep your Collections and Environments in version control: Export your Collections and Environments and store them in a version control system like Git.\nCollaborate with your team: Share your Collections with your team members and collaborate on API testing.\nConclusion In this article, we\u0026rsquo;ve explored how to use Postman for API automation testing. We\u0026rsquo;ve covered Postman\u0026rsquo;s Runner module for batch execution, the Newman command-line tool for CI/CD integration, and some best practices for API automation testing.\nPostman provides powerful capabilities for API automation testing, making it a valuable tool for testers and developers. By leveraging these capabilities, you can improve the efficiency and effectiveness of your API testing process.\nIn the next article, we\u0026rsquo;ll delve deeper into advanced topics in Postman, such as working with GraphQL APIs, WebSocket testing, and more. Stay tuned!\n","date":"2022-07-18T00:00:00Z","image":"https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png","permalink":"https://chengxiaqiucao.github.io/en/post/003-postman-automation/","title":"Postman Automation Guide"},{"content":"Introduction In the previous article \u0026ldquo;Mastering Postman: Basic Guide\u0026rdquo;, we introduced the main features and basic usage of the Postman tool. As the most widely used API testing tool currently, besides providing a user-friendly UI interface and basic functions such as authentication, header, body settings, request submission and response parsing for HTTP protocol, Postman also provides very rich testing assistance capabilities. In this article, we will introduce Postman\u0026rsquo;s advanced scripting features in detail.\nPostman Variables In API testing tools, variables are of great significance for the reuse and flexible matching of API messages. As a professional API testing tool, support for variables is essential.\nPostman provides rich variable support, defining 5 different types of variables with different scopes, making the use and management of variables more flexible and targeted. The following figure shows the official scope of different types of variables:\nFrom outside to inside, the scope gradually becomes smaller, and at the same time, the priority becomes higher. That is, when there are variables with the same name, the variables of the inner layer type will take precedence. Let\u0026rsquo;s explain these variable types in detail with examples:\nGlobal Variables Global variables have the largest scope among all variable types. Once set, global variables can take effect in all places where variables can be used in the Postman tool.\nLet\u0026rsquo;s look at how to set global variables in Postman: Open the environment management interface in the upper right corner of the tool: Select global variable management: Add Global variable: In this example, we set a global variable name with a value of 1. In Postman, variables are represented using double curly braces, like {{ variable }}. Taking the Github API as an example, let\u0026rsquo;s get the user information where the username is the value of the variable name.\nhttps://api.github.com/users/{{name}}\nAfter entering double curly braces in the URL, it will automatically suggest the variable types we need.\nAfter sending the request, check the Postman response area, and you can see that we got the user information for username 1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { \u0026#34;login\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;id\u0026#34;: 1825798, \u0026#34;node_id\u0026#34;: \u0026#34;MDQ6VXNlcjE4MjU3OTg=\u0026#34;, \u0026#34;avatar_url\u0026#34;: \u0026#34;https://avatars2.githubusercontent.com/u/1825798?v=4\u0026#34;, \u0026#34;gravatar_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://api.github.com/users/1\u0026#34;, \u0026#34;html_url\u0026#34;: \u0026#34;https://github.com/1\u0026#34;, \u0026#34;followers_url\u0026#34;: \u0026#34;https://api.github.com/users/1/followers\u0026#34;, \u0026#34;following_url\u0026#34;: \u0026#34;https://api.github.com/users/1/following{/other_user}\u0026#34;, \u0026#34;gists_url\u0026#34;: \u0026#34;https://api.github.com/users/1/gists{/gist_id}\u0026#34;, \u0026#34;starred_url\u0026#34;: \u0026#34;https://api.github.com/users/1/starred{/owner}{/repo}\u0026#34;, \u0026#34;subscriptions_url\u0026#34;: \u0026#34;https://api.github.com/users/1/subscriptions\u0026#34;, \u0026#34;organizations_url\u0026#34;: \u0026#34;https://api.github.com/users/1/orgs\u0026#34;, \u0026#34;repos_url\u0026#34;: \u0026#34;https://api.github.com/users/1/repos\u0026#34;, \u0026#34;events_url\u0026#34;: \u0026#34;https://api.github.com/users/1/events{/privacy}\u0026#34;, \u0026#34;received_events_url\u0026#34;: \u0026#34;https://api.github.com/users/1/received_events\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;User\u0026#34;, \u0026#34;site_admin\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Michael\u0026#34;, \u0026#34;company\u0026#34;: null, \u0026#34;blog\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;San Francisco, CA\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;mbalaban1989@gmail.com\u0026#34;, \u0026#34;hireable\u0026#34;: null, \u0026#34;bio\u0026#34;: null, \u0026#34;public_repos\u0026#34;: 3, \u0026#34;public_gists\u0026#34;: 0, \u0026#34;followers\u0026#34;: 15, \u0026#34;following\u0026#34;: 0, \u0026#34;created_at\u0026#34;: \u0026#34;2012-06-07T06:10:07Z\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2019-01-17T08:29:21Z\u0026#34; } Collection and Collection Variables Let\u0026rsquo;s look at another variable type: Collection variables. First, let\u0026rsquo;s understand the concept of Collection. Collection is a grouping unit for organizing APIs in Postman, and Postman mainly uses Collection as a basic unit for configuration storage. We can think of Collection as the concept of a test suite in software testing.\nCollection variables are variables with a scope on the Collection. These variables will only take effect on the Collection where the variable is set. Setting method: Select Edit Collection Add Collection variables in the variable page. In this example, we add a variable also named \u0026ldquo;name\u0026rdquo; to the Github Collection Save the user retrieval API from the previous example to the Github Collection (we can create a sub-directory under the Collection, note that directories do not support setting directory-level variables, Collection variables will still take effect for APIs in sub-directories), and let\u0026rsquo;s submit this API again At this point, we can see that the Collection variable we set has taken effect, and we get the user information for name 2. Note that we still have a global variable name with a value of 1, and we can see that Collection variables have a higher priority than global variables.\nEnvironment and Environment Variables Environment is a very useful concept in Postman. Those who have done software testing understand that we encounter different software environments in our actual work, corresponding to different operating scenarios of our system under test. For example, a typical internet company may have the following different environments during development:\nDevelopment environment Integration environment (joint debugging environment) System testing environment Pre-production environment Production environment Performance testing environment Security testing environment Different environments often have significant differences in access methods, network topology, access permissions, and hardware configurations. Postman introduces the concept of Environment and manages a set of environment configurations through Environment variables, making it convenient for us to switch between different environments.\nIn the environment management interface, you can add environments and related variables for that environment. In this example, we add a GitChat environment and set an environment variable name = 3. After setting up the environment, on the user retrieval API interface, select the corresponding GitChat environment, and submit the request again. We can see that the environment variable has taken effect, retrieving user information for name 3, and similarly, we can see that the environment variable has a higher priority than the Collection variable. Local Variables Local variables are variables with the smallest scope, which only take effect in the current request. Local variables can be set in the pre-request script or test script of the request. Let\u0026rsquo;s look at an example:\nIn the pre-request script of the user retrieval API, we add the following code:\n1 pm.variables.set(\u0026#34;name\u0026#34;, \u0026#34;4\u0026#34;); This sets a local variable name = 4. After submitting the request, we can see that the local variable has taken effect, retrieving user information for name 4, and we can see that the local variable has the highest priority among all variable types.\nData Variables Data variables are a special type of variable in Postman. They are not set directly like other variables but are used in conjunction with data files. This is very useful when we need to test the same API with different data.\nLet\u0026rsquo;s look at how to use data variables: First, prepare a data file, which can be in CSV or JSON format. Here we use a CSV file as an example:\n1 2 3 4 name,age 5,20 6,21 7,22 Then in Postman, select Runner: Select the Collection and API to run, and import the data file: After clicking Run, Postman will automatically read the data from the data file and execute the API multiple times. Each time it will use a different row of data from the data file, and we can use these data through variables like {{name}} and {{age}}.\nDynamic Variables In addition to the five types of variables mentioned above, Postman also provides some built-in dynamic variables that can be used directly without setting. These variables are mainly used to generate some random data or get the current time and other information. Here are some commonly used dynamic variables:\n{{$guid}}: Generate a GUID {{$timestamp}}: Get the current timestamp (in seconds) {{$randomInt}}: Generate a random integer {{$randomEmail}}: Generate a random email address {{$randomUserName}}: Generate a random username {{$randomAlphaNumeric}}: Generate a random alphanumeric string {{$randomColor}}: Generate a random color name {{$randomHexColor}}: Generate a random hexadecimal color code For example, if we want to test an API that creates a user, we can use these dynamic variables to generate test data:\n1 2 3 4 5 6 7 POST https://api.example.com/users { \u0026#34;id\u0026#34;: \u0026#34;{{$guid}}\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;{{$randomUserName}}\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;{{$randomEmail}}\u0026#34;, \u0026#34;created_at\u0026#34;: {{$timestamp}} } Variable Scope and Priority After understanding these different types of variables, let\u0026rsquo;s summarize their scope and priority:\nScope:\nGlobal variables: Effective throughout Postman Collection variables: Effective within the Collection Environment variables: Effective within the selected environment Local variables: Only effective in the current request Data variables: Effective during Collection Runner execution Priority (from highest to lowest):\nLocal variables Data variables Environment variables Collection variables Global variables When variables with the same name exist in different scopes, the one with higher priority will take effect.\nPostman Scripts Postman provides powerful scripting capabilities, allowing us to perform various operations before and after requests. Postman scripts are written in JavaScript and can be used to set variables, perform tests, process response data, and more.\nPre-request Scripts Pre-request scripts are executed before a request is sent. They can be used to set variables, perform authentication, or prepare data for the request. Let\u0026rsquo;s look at some examples:\nSetting variables: 1 2 3 4 5 6 7 8 // Set a local variable pm.variables.set(\u0026#34;name\u0026#34;, \u0026#34;postman\u0026#34;); // Set an environment variable pm.environment.set(\u0026#34;token\u0026#34;, \u0026#34;abc123\u0026#34;); // Set a global variable pm.globals.set(\u0026#34;api_key\u0026#34;, \u0026#34;xyz789\u0026#34;); Generating random data: 1 2 3 // Generate a random user ID const userId = Math.floor(Math.random() * 1000); pm.variables.set(\u0026#34;userId\u0026#34;, userId); Performing authentication: 1 2 3 4 5 6 7 8 // Generate a timestamp for authentication const timestamp = Math.floor(Date.now() / 1000); pm.variables.set(\u0026#34;timestamp\u0026#34;, timestamp); // Generate a signature const data = pm.variables.get(\u0026#34;api_key\u0026#34;) + timestamp; const signature = CryptoJS.MD5(data).toString(); pm.variables.set(\u0026#34;signature\u0026#34;, signature); Test Scripts Test scripts are executed after a response is received. They can be used to verify the response, extract data from the response, or set variables for subsequent requests. Let\u0026rsquo;s look at some examples:\nVerifying response status: 1 2 3 4 // Check if the response status is 200 OK pm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); Verifying response body: 1 2 3 4 5 6 7 8 9 10 // Check if the response contains specific text pm.test(\u0026#34;Response contains user data\u0026#34;, function () { pm.expect(pm.response.text()).to.include(\u0026#34;username\u0026#34;); }); // Check if a specific field has the expected value const responseData = pm.response.json(); pm.test(\u0026#34;User ID is correct\u0026#34;, function () { pm.expect(responseData.id).to.equal(123); }); Extracting data from the response: 1 2 3 // Extract the token from the response and save it as an environment variable const responseData = pm.response.json(); pm.environment.set(\u0026#34;token\u0026#34;, responseData.token); Performing complex validations: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Check if the response time is less than 200ms pm.test(\u0026#34;Response time is less than 200ms\u0026#34;, function () { pm.expect(pm.response.responseTime).to.be.below(200); }); // Check if the response headers contain specific values pm.test(\u0026#34;Content-Type header is present\u0026#34;, function () { pm.response.to.have.header(\u0026#34;Content-Type\u0026#34;); }); // Check if the response body is valid JSON pm.test(\u0026#34;Response is valid JSON\u0026#34;, function () { pm.response.to.be.json; }); Postman Console Postman provides a console that can be used to view logs and debug scripts. You can open the console by clicking on the \u0026ldquo;Console\u0026rdquo; button in the bottom left corner of the Postman window, or by pressing the Alt+Ctrl+C (Windows/Linux) or Option+Command+C (Mac) keyboard shortcut.\nIn your scripts, you can use console.log() to output information to the console:\n1 2 console.log(\u0026#34;This is a debug message\u0026#34;); console.log(\u0026#34;Variable value:\u0026#34;, pm.variables.get(\u0026#34;name\u0026#34;)); This is very useful for debugging your scripts and understanding what\u0026rsquo;s happening during execution.\nPostman Collection Runner The Collection Runner is a powerful feature in Postman that allows you to run a collection of requests in a specific order. This is particularly useful for testing API workflows or running the same request with different data.\nTo use the Collection Runner:\nClick on the \u0026ldquo;Runner\u0026rdquo; button in the top left corner of the Postman window Select the collection or folder you want to run Configure the run settings (iterations, delay, data file, etc.) Click on the \u0026ldquo;Run\u0026rdquo; button The Collection Runner will execute the requests in the specified order and display the results, including any test results.\nPostman Newman Newman is the command-line companion for Postman. It allows you to run and test a Postman collection directly from the command line. This is particularly useful for integrating Postman tests into your CI/CD pipeline.\nTo use Newman, you first need to install it via npm:\n1 npm install -g newman Then you can run a collection using:\n1 newman run collection.json -e environment.json Where collection.json is your exported Postman collection and environment.json is your exported Postman environment.\nNewman also supports various options for customizing the run and generating reports:\n1 newman run collection.json -e environment.json --reporters cli,html --reporter-html-export report.html This command will run the collection and generate both CLI and HTML reports, with the HTML report saved to report.html.\nConclusion In this article, we\u0026rsquo;ve explored the advanced features of Postman, including variables, scripts, the console, Collection Runner, and Newman. These features make Postman a powerful tool for API testing and development.\nBy mastering these features, you can:\nCreate more flexible and reusable API tests Automate complex testing scenarios Validate API responses with detailed assertions Generate comprehensive test reports Integrate API testing into your CI/CD pipeline In the next article, we\u0026rsquo;ll dive deeper into Postman\u0026rsquo;s automation capabilities and explore how to use Postman for API monitoring and documentation.\n","date":"2022-06-22T00:00:00Z","image":"https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png","permalink":"https://chengxiaqiucao.github.io/en/post/002-postman-middle/","title":"Postman Advanced Guide"},{"content":"Introduction This tutorial will combine the widely acclaimed and used RestAPI design exemplar, the Github API, to provide a detailed introduction to the usage methods and practical techniques of the Postman API testing tool.\nBefore starting this tutorial, let\u0026rsquo;s discuss why API testing is so important in the current software industry. Why should we learn Postman?\nThe modern software industry has evolved from the traditional World Wide Web to mobile internet, cloud computing, and now into the era of the Internet of Everything. Software and networks connect every aspect of our lives, with different devices and software systems interconnected in various ways. APIs serve as the bridge between different devices and systems, making them increasingly important in both current and future hardware and software industries.\nWhat is an API? The IT industry has evolved from the C/S and B/S architectures of the World Wide Web era, to the big frontend era of the mobile internet era, to the cloud architecture represented by IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service) in the cloud computing era, and now into the Internet of Things era where networks connect every aspect of our lives. The connection points that carry these connections are network interfaces. APIs are the entry points and bridges for connection, interaction, and mutual effect between different network applications.\nAs shown in the figure below, this is a diagram of the position of interfaces in a software system Here, UI interfaces and API interfaces represent user interaction interfaces and application programming interfaces respectively\nAPI Testing Now that we understand the concept of APIs, let\u0026rsquo;s look at what API testing is.\nHere is the definition given by Baidu Encyclopedia:\nAPI testing is a type of testing for interfaces between system components. API testing is mainly used to detect interaction points between external systems and the system, as well as between internal subsystems. The focus of testing is to check data exchange, transmission and control management processes, as well as the logical interdependencies between systems.\nAs we can see, after explaining the definition of interfaces, it clarifies that the focus of API testing includes the data interaction, processes, and the business logic behind them.\nLooking further at the more commonly used definition of API testing, which Baidu has not included, we can look at the definition from Wiki:\nAPI testing is a type of software testing that involves testing application programming interfaces (APIs) directly and as part of integration testing to determine if they meet expectations for functionality, reliability, performance, and security.[1] Since APIs lack a GUI, API testing is performed at the message layer.[2] API testing is now considered critical for automating testing because APIs now serve as the primary interface to application logic and because GUI tests are difficult to maintain with the short release cycles and frequent changes commonly used with Agile software development and DevOps.[3][4]\nIt is a type of integration testing that directly tests APIs, and Wiki categorizes API testing in the integration testing phase. This means it is more often implemented during system integration. It also clarifies that API testing is not purely functional testing, but also needs to consider reliability, security, performance, etc. API testing differs from GUI testing in that it is more reflected in the message layer, and due to the inherent disadvantages of GUI layer in automated testing, API automation is currently a key practice in the field of automated testing as well as in development models such as Agile and DevOps.\nThe figure below is the famous test pyramid, which layers software testing according to different test types. The bottom layer is unit testing aimed at the code level, the middle is service testing, and in today\u0026rsquo;s application services, services are more often manifested in API form, so service testing can also be understood as API testing. The top layer is GUI testing aimed at the user interface.\nThis model shows that in automated testing, the lower the layer of automated testing, the greater the proportion it should occupy for a better return on investment. The middle layer of API testing is neither as costly to maintain as the UI layer, making it difficult to keep up with rapid iterations, nor is it as capable of quality verification in business logic as unit testing. Therefore, API testing is now generally considered the priority choice for automated testing implementation.\nHTTP Protocol Basics Before formally introducing Postman\u0026rsquo;s functionality, we first need to introduce the testing object of Postman. Postman is primarily a testing tool for HTTP protocol interfaces, so this chapter will first introduce the basic knowledge of the HTTP protocol.\nHTTP, or Hypertext Transfer Protocol, is one of the most widely used network protocols on the Internet. Currently, version 1.1 is mainly used, based on the TCP/IP communication protocol to transfer data (HTML, files, data, API interface messages, etc.)\nThe HTTP protocol works on a client-server or C/S architecture HTTP Message Composition The client sends an HTTP request to the server, and the request message includes the following format:\nRequest line, request header, blank line, and request data are the four parts. As shown in the figure\nBelow is an example of a request to the Baidu homepage:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 GET https://www.baidu.com/ HTTP/1.1 #Request method URL HTTP protocol version Host: www.baidu.com #Request server address #The following is the message header content Connection: keep-alive #Connection method: keep-alive Cache-Control: max-age=0 #Request cache control, need to confirm whether the request content has been modified Upgrade-Insecure-Requests: 1 #Support HTTPS protocol User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36 #Request client, browser version Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 #Supported response content types Accept-Encoding: gzip, deflate, br #Supported encoding types Accept-Language: zh-CN,zh;q=0.9,en;q=0.8 #Supported languages Cookie: BAIDUID=C0A2... #Carried cookie information #No request message body carried, body is empty The server receives and processes the request sent by the client and returns an HTTP response message. It also consists of four parts:\nResponse status line, message header, blank line, and response body. As shown in the figure\nBelow is an example of the Baidu homepage response\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 HTTP/1.1 200 OK #Protocol version Message status code Status description Bdpagetype: 2 Bdqid: 0x8707d7d80001f34e #Custom message header Cache-Control: private #Cache control strategy Connection: Keep-Alive #Keep-alive connection Content-Type: text/html;charset=utf-8 #Response content type Date: Sat, 22 Dec 2018 08:54:51 GMT #Response time Expires: Sat, 22 Dec 2018 08:54:51 GMT #Expiration time Server: BWS/1.1 #Server system and version Set-Cookie: BDSVRTM=372; path=/ Set-Cookie: BD_HOME=1; path=/ Set-Cookie: path=/; domain=.baidu.com #Set client cookie Strict-Transport-Security: max-age=172800 #Strict security transport, valid time X-Ua-Compatible: IE=Edge,chrome=1 #Compatible browser version Content-Length: 191722 #Message body length #The following is the message body content \u0026lt;!Doctype html\u0026gt; \u0026lt;html xmlns=http://www.w3.org/1999/xhtml\u0026gt;\u0026lt;head\u0026gt; ... HTTP Methods HTTP methods are key information carried in request messages, informing the server of the type of operation the request hopes to perform. Currently, in HTTP 1.1 version, the following methods are common\nNo. Method Description 1 GET Requests the specified page information and returns the entity body. 2 HEAD Similar to a GET request, but the response does not contain specific content, used to obtain headers 3 POST Submits data to the specified resource for processing (e.g., submitting a form or uploading a file). The data is included in the request body. POST requests may result in the creation of new resources and/or modification of existing resources. 4 PUT Transfers data from the client to the server to replace the content of the specified document. 5 DELETE Requests the server to delete the specified page. 6 CONNECT Reserved in the HTTP/1.1 protocol for proxy servers that can change the connection to a tunnel method. 7 TRACE Echoes back the received request, mainly used for testing or diagnosis. 8 PATCH Transfers data from the client to the server to replace part of the content of the specified document. HTTP Status Codes HTTP status codes define the result information of the server processing HTTP requests, mainly including the following five categories:\nStatus Code Description 1XX Received, pending processing 2XX Request processed successfully 3XX Redirect, resource location has changed 4XX Client request information error 5XX Server processing error 1xx Informational This type of status code represents that the request has been accepted and needs to be further processed. These responses are temporary, containing only the status line and some optional response header information, and ending with a blank line. Since no 1xx status codes are defined in the HTTP/1.0 protocol, servers are prohibited from sending 1xx responses to such clients except under certain experimental conditions.[4] These status codes represent informational responses, indicating other actions that the client should take.\n2xx Success This type of status code represents that the request has been successfully received, understood, and accepted by the server.\n3xx Redirection This class of status code indicates that further action needs to be taken by the client to complete the request. Typically, these status codes are used for redirection, with the subsequent request address (redirection target) specified in the Location field of this response.\n4xx Client Error This class of status code represents that the client appears to have made an error that prevents the server from processing. Unless the response is to a HEAD request, the server should return an entity describing the current error condition and whether it is a temporary or permanent condition. These status codes are applicable to any request method. Browsers should display any entity content contained in such error responses to the user.\n5xx Server Error Indicates that the server cannot complete a clearly valid request. This class of status codes represents that an error or exception has occurred in the server\u0026rsquo;s processing of the request, or that the server is aware that it cannot complete the processing of the request with the current software and hardware resources. Unless this is a HEAD request, the server should include an entity explaining the current error status and whether this condition is temporary or permanent. Browsers should display any entity included in the current response to the user. These status codes are applicable to any response method.\nFor a detailed list of status codes, please refer to the appendix\nGitHub API This tutorial will mainly use the Github API for practical introduction to APIs. This chapter will briefly introduce the Github website and Github API.\nGitHub is a hosting platform for open source and private software projects. It is named GitHub because it only supports Git as the only version control format for hosting. It is also currently the world\u0026rsquo;s largest code hosting platform, which can be said to be the holy land of programmers, known as the world\u0026rsquo;s largest same-sex social platform :joy: (Github is sometimes intermittently inaccessible in China, you may need to use a VPN)\nMain concepts in github Commit: Commit changes to the repository (local Git repository and GitHub repository are two different things). Commit message: Every time you commit, you need to provide a message describing what was done in this commit. Branch: Like a tree diagram, each independent branch is a version of the project, and branches can be merged with the master. Master branch: All Git projects create a default branch when initially created, which is the master branch. In development, when writing a new feature, a branch is first created, the feature is completed and tested on that branch, and after passing, the project leader merges that branch into the master. Feature branch: Not used much Release branch: If there is a manual QA (quality management) process, or if old versions of the software must be supported, a release branch is needed to store necessary patches and update records. There is no technical difference between feature branches and release branches, but they help distinguish categories when discussing within the team. Merge: Merge can combine all the content on one branch into another branch, generally merging a branch into the main branch. Tag: Commonly used to record release versions. When a version is released, a tag is given, so that the code of that version can be recorded when it was generated. Check out: Generally refers to viewing the operation records on a certain branch. Pull request: Generally used to pull code from a branch in a remote repository to the local, or to pull branch code from the local repository into the current project. Issue: GitHub\u0026rsquo;s feature for raising issues. Generally, when encountering problems, the problematic situation can be recorded through issues. Wiki: A lightweight way to create Web pages, where created Web pages can be linked to each other. Projects in GitHub typically use WIKIs for documentation. Clone: Download a copy from GitHub to the local, which can be pulled up after operation. Fork: A copies B\u0026rsquo;s project to their own account, modifies it and then submits it. B can see the content modified by A, but B\u0026rsquo;s original project will not have any changes. Github main interface functions Image from george_zyf\u0026rsquo;s blog\nGithub API Currently, the latest V4 version of the Github API is based on GraphQL, but the commonly used one is still the V3 Restful API\nMain resources and corresponding operations in github API User resource\nRepo operations\nIssue operations\nImages from the web\nTime format in github The time format in github is as follows:\nYYYY-MM-DDTHH:MM:SSZ\nGithub rate limiting rules To include server-side load pressure, github restricts request traffic. Each github response header carries github\u0026rsquo;s rate limiting settings.\nHeader Parameter Meaning X-RateLimit-Limit Current maximum request limit per hour, generally 60 times for unauthenticated requests, 5000 times for authenticated requests X-RateLimit-Remaining Current remaining number of requests X-RateLimit-Reset Remaining limit reset time, in milliseconds Request Parameters and Pagination Parameters can be carried in requests, generally including two types of parameters: path parameters and query parameters The github API supports two default pagination parameters:\npage: Current page number to display per_page: Number of results to display per page Postman Basics There are many testing tools that can be used for Rest API testing, common ones include soapUI, Jmeter, fiddler, etc., which are often used for API testing. However, currently the most popular and common tool among API testers is Postman, which we will introduce in this chapter.\nInstalling Postman The earliest version of Postman, and for a long time, existed as a Chrome plugin. Many people even thought that postman was Google\u0026rsquo;s official tool plugin, and a large amount of the resources we can see now are based on the chrome plugin form for introduction.\nBut currently Postman has actually launched a standalone local App program, and the official has announced that it no longer supports the chrome plugin form. Although the plugin version can still be used now, compared to the Native version, it is limited by the functionality of the chrome browser, and many features are lacking in the plugin version, such as built-in support for cookies, proxy functionality, console functionality, etc. So the installation of the plugin version will not be introduced here.\nThe installation of the local version is actually very simple. Just download the appropriate version from the official website according to your operating system type. There is one more thing to note here, on the postman\u0026rsquo;s official website, we should register an account, as many advanced features will require this account to log in before they can be used.\nInstallation is complete when the Postman icon with the cool pose appears on the desktop.\nPostman Main Interface Open Postman and enter, you will be prompted to select the type of task you want to create for the first time.\nThere are six types of tasks here, we will explain them in detail in the practical section below, but here is a brief explanation:\nRequest is the foundation and core of Postman software, which is used to create request requests to complete the core work of API testing. Collection is actually a collection, which we can think of as a collection of a batch of Request requests, or a test set. It is also the basic unit of some advanced features of Postman Environment, literally understood as environment, can actually be considered as a collection of some configuration variables, which can have the effect of distinguishing different test environments through different configurations in practical applications The following three are advanced features of Postman API documention, is to automatically generate API documentation through the requests that we have debugged, which is convenient for team sharing and API delivery. Mock server When we are testing or developing APIs, we often need to simulate the interface server on the other end, and Mock server plays the role of simulating the server side. Monitor This is a monitoring function, through which we can monitor whether our interface is normal. In simple terms, this is actually a timed interface execution function. Having a general understanding of the different types of tasks, let\u0026rsquo;s close this interface and look at the functional areas of the main interface Banner Area First is the menu bar above, corresponding to the various functions in the function area, all of which can be found in the corresponding menu on the menu bar. Then there is the banner area below. Introducing from left to right:\nwill open the creation window at startup, used to create six types of tasks.\nbutton, can be used to import external files, external files can be postman\u0026rsquo;s Collection format files, data files, and other API definition files\nwill start the Collection runner, which is a runner used to run established test tasks. We will have a detailed introduction later\nThe fourth button, can create a new tab, or open multiple postman programs, or runner programs.\nIn the middle is to select the workspace to use, but this requires account login, which will synchronize the workspace settings in the cloud. Each account will have a default workspace, which is a workspace that can be understood as similar to a project or engineering.\nThere are also several buttons on the right side of the banner bar The first is synchronization, which is also in the case of having an account, can synchronize the relevant interface test design in the workspace between multiple computers. The second proxy, is similar to the fiddler introduced earlier, providing proxy capture API functionality. Of course, this function is not as rich as Fiddler The third button includes settings and documentation guides. The settings are the local configuration of the software The fourth button is message notification, which is easy to understand, it will display some reminder information Then there is postman\u0026rsquo;s twitter, don\u0026rsquo;t look at it if you\u0026rsquo;re behind the wall Finally, there is login, which can be used to log in with a postman account Setting The usage properties and application settings of the Postman tool can be set in the Setting. The following are explained separately:\nGeneral Themes Shortcuts Tool shortcuts Data Tool data import and export add-ons Newman plugin download method Sync Synchronization settings certificates Local certificate settings Proxy Local network proxy settings update Upgrade settings about Tool About\u0026hellip; and other version information Left Sidebar filter bar, filter to display different messages history is a list of operation message records collection as introduced earlier, displays request collections Bottom Status Bar Leftmost, show and hide the left sidebar Then there is the search function, which is easy to understand The third is the console, where you can see detailed information about messages User guide Adjust the display style of the function area Shortcut list reference Help related links Main Function Area Mainly includes two parts, the upper part is the request area, and the lower part is the response area. It can also be displayed in left and right.\nRequest Area The request part has a tab open by default, and multiple tabs can be opened for simultaneous editing.\nThe GET method is used by default, which is also the most used HTTP method. You can select other methods from the dropdown, what are the commonly used ones? POST, PUT, Delete, etc.\nEnter the request address in the URL section. For example, we enter the root address of the GithubAPI.\nparam is the parameter management interface, where we can add parameters (with key-value, block editing mode).\nSend to send the request, the small arrow below send and download, will export the response message as json after sending. The save button next to it is to save this request as a case to the collection.\nAuthentication part, although the request editor is powerful enough to handle authentication messages, authentication is often a frequently used function, so Postman separately extracts the authentication part and encapsulates most of the current authentication methods\nInherit, default authentication method No Auth bearer token authentication, also called Json web token, which is actually sending a token in json format, and the server will decrypt and verify the token Basic Auth basic verification, providing username and password verification, postman will automatically generate authorization, common authentication method digest auth, digest authentication Extends security on basic authentication, the server generates a unique random number for each connection, the client uses this random number to MD5 encrypt the password, then returns it to the server, the server also encrypts the password with this random number, and then compares with the encrypted data transmitted by the client, if consistent, returns the result. It is a two-step verification process, there will be two authentication interaction messages Client requests resource -\u0026gt; Server returns authentication mark -\u0026gt; Client sends authentication information -\u0026gt; Server verifies authentication Oauth, generally used for third-party authentication, with versions 1 and 2, requiring different information. Also a common authentication method Hawk authentication, is another authentication scheme, using a message code authentication algorithm, similar to Digest authentication, it also requires two interactions AWS signature authentication, is an authentication method for Amazon AWS public cloud user signatures NTLM is Microsoft\u0026rsquo;s LAN management authentication protocol Just have a basic understanding, generally the more commonly used are basic and OAuth2.\nheader is message header management, where you can define header information.\nBody, request message body. Generally, requests that will update content such as Post, put, patch, etc. will carry a message body.\nNext to it is pre-script, which means that some preprocessing work can be done before the request is sent, similar to the setup method in unit testing frameworks such as junit, supporting js script syntax\nTest is to verify or otherwise process the response after the response, similar to the teardown method in the junit framework, also supporting js script syntax\ncookie management postman local cookie information\ncode is a convenient function for programmers, which can automatically convert interface requests into related language coding, you can see that the supported languages are very rich, basically covering various mainstream programming languages.\nResponse Area In the upper right corner of the response message is the status code, hover to see a detailed explanation. Also, there is the response time (from the time the request is sent to the time the client receives it), and the message size (including message header and message body).\nResponse body part, i.e., message body. Includes the following buttons\npretty, can format the display according to the presentation type, default json, if it is other format types, you can select the corresponding form for formatting. Raw is the unformatted form preview is the preview, which is how it looks when rendered in the browser, for example, if the return is html, it is very intuitive. Next to it is the auto-wrap button. On the right are copy to clipboard and search buttons (regex, case sensitive, whole word match)\nOther tabs:\ncookie: cookie information of the response message header: header information of the response message Test Results: After adding a test Script to the request, the verification results of the test script will be displayed here Summary This article introduces the basic concepts of REST API and the basic usage of Postman. In the next article, we will introduce how to use Postman to test REST API in detail.\nThe main points covered in this article include:\nUnderstanding of REST API and its basic concepts Installation and basic interface of Postman Basic usage of Postman\u0026rsquo;s request and response areas Understanding of various settings in Postman In the next article, we will focus on:\nHow to use Postman to test REST API How to use Postman\u0026rsquo;s various advanced features How to use Postman for automated testing ","date":"2022-06-12T00:00:00Z","image":"https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png","permalink":"https://chengxiaqiucao.github.io/en/post/001-postman-basic/","title":"Postman Basics"}]
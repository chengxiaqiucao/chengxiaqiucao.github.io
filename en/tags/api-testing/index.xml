<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Testing on Testing Observation</title><link>https://chengxiaqiucao.github.io/en/tags/api-testing/</link><description>Recent content in API Testing on Testing Observation</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>|by Daniel Wei</copyright><lastBuildDate>Sat, 27 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/en/tags/api-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Postman Advanced Guide</title><link>https://chengxiaqiucao.github.io/en/post/004-postman-advanced/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/en/post/004-postman-advanced/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman Advanced Guide" />&lt;h3 id="introduction">Introduction
&lt;/h3>&lt;p>In our previous series, we detailed how to use Postman for API testing, covering basic functions, advanced scripting, and automation implementation. In our work, besides these local testing implementations, we often need to manage API test cases through the cloud and leverage cloud-based capabilities for enhanced testing due to different office locations or team collaboration requirements. In this article, we&amp;rsquo;ll explore the advanced Cloud services provided by Postman.&lt;/p>
&lt;h3 id="introduction-to-postman-cloud-services">Introduction to Postman Cloud Services
&lt;/h3>&lt;p>To use Postman Cloud services, we first need to register an official account&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_084809.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>After registration and login, you can access the Cloud management page by clicking the dashboard button in the upper right corner of the official homepage. This will display your workspaces, including your personal workspace and any team workspaces you&amp;rsquo;ve created for sharing.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_085631.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="workspace-and-cloud-feature-overview">Workspace and Cloud Feature Overview
&lt;/h4>&lt;p>A workspace is a management unit in Postman Cloud. Through cloud workspace synchronization, we can achieve several advantages that aren&amp;rsquo;t possible with the local application:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Convenient organization and management of personal work across different locations and devices. For example, you can continue unfinished work at home that you started at the office.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Facilitates team collaboration by sharing relevant metadata and team workspaces, allowing team members to jointly maintain the same set of interfaces and share work results.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A unified workspace enables teams to work in the same dimension, avoiding inconsistencies in work progress and data that could lead to misunderstandings and communication gaps.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The workspace history function helps record and trace interface operation records, making it convenient to save work processes and results.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The image below shows the interface after entering a workspace in the Cloud. You can see the functions provided by Postman Cloud. By default, it displays the Collection information in the current space. The other tabs are interface operation history, environment variables, monitoring tasks, Mock services, API integration capabilities, and workspace operation records.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214612.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Below are the History interface operation records and Activity workspace operation records:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214700.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_215018.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="account-system-and-pricing">Account System and Pricing
&lt;/h4>&lt;p>After registering on the Postman website, you have a free account by default, which can be upgraded to Professional or Enterprise versions. The current monthly fees are as follows:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_091127.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The free version includes the following features. As you can see, most functions are supported, with the main difference being usage limits. Free accounts are limited to 1,000 online document views, Mock requests, API calls, and monitoring calls per month, which can generally meet individual learning and basic testing needs. For larger teams, it&amp;rsquo;s better to upgrade to a premium version or choose alternative solutions.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_091536.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="local-application-login">Local Application Login
&lt;/h4>&lt;p>In the Postman application, we can also log in with our registered account. After logging in, the banner at the top will display the default workspace and account avatar.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190226_211434.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>After logging in, the local app will automatically synchronize with the information saved in the cloud to maintain data consistency. Let&amp;rsquo;s now look at the services provided by Postman Cloud.&lt;/p>
&lt;h3 id="postman-clouds-online-api-documentation">Postman Cloud&amp;rsquo;s Online API Documentation
&lt;/h3>&lt;p>Powerful and beautifully formatted online documentation is an important service of Postman Cloud. It has the following main advantages:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Support for Private and Public Documentation&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>When you register a Postman account, the online documentation feature is enabled by default. After logging into the web workspace and entering a Collection, you can see that the online documentation for the current Collection has been automatically generated, as shown:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_205118.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The image above shows private documentation that only the current account can view in the workspace. Using the Share button in the upper right corner, you can share the current documentation with other workspaces or team workspaces. The Publish button allows you to publish the current documentation as public documentation for open access.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_205655.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>In the Postman app, you can also use the &lt;code>Publish Docs&lt;/code> button in the Collection menu to publish public documentation. After publishing, a public access URL will be generated, through which the documentation can be accessed.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_205746.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Automatic Documentation Generation&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>As mentioned above, Postman online documentation is automatically generated, eliminating the previously cumbersome document editing and formatting work. It can automatically generate the following content:&lt;/p>
&lt;ul>
&lt;li>Request examples, including request method, URI, message content, headers, parameters, etc.&lt;/li>
&lt;li>Interface response information saved as Examples&lt;/li>
&lt;li>Descriptions written for Collections, Folders, and Requests&lt;/li>
&lt;li>Automatically generated code snippets in various mainstream languages&lt;/li>
&lt;/ul>
&lt;p>The image below shows the Collection description editing interface:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_213343.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Support for Markdown Syntax&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>When writing Descriptions, we can use Markdown syntax, which further enhances the reading experience of the documentation. The image above includes Markdown list and bold syntax.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Support for ID-Based Internal Links&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>We can also use the unique IDs generated by Postman for each request and folder for cross-referencing within the documentation. When we click on the corresponding element in the right navigation bar of the document, the unique ID of that element is displayed in the URL, as shown:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_211627.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;em>Note: ID information can also be obtained through the Postman API interface.&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Support for Automatic Generation of Code Snippets in Mainstream Languages&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Another excellent feature of Postman online documentation is its support for code snippets in multiple mainstream languages, which is convenient for debugging code in the respective language. As shown:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_212622.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Support for Comments&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>In private documentation such as team spaces, we can also use the comment feature to communicate with team members and confirm information by annotating interfaces.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_212944.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="postman-online-documentation-usage-limits">Postman Online Documentation Usage Limits
&lt;/h4>&lt;p>Postman Cloud limits the number of views for both private and public documentation. Free accounts have a monthly limit of 1,000 free views for each. This is barely sufficient for individual use and learning. For team collaboration, it&amp;rsquo;s definitely inadequate, so it&amp;rsquo;s recommended to choose a paid account or an open-source free alternative like Swagger.&lt;/p>
&lt;p>Current usage can be viewed on the &lt;code>Resource Usage&lt;/code> page of your personal account:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_214420.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="introduction-to-postmans-mock-server">Introduction to Postman&amp;rsquo;s Mock Server
&lt;/h3>&lt;p>Another advanced feature of Postman Cloud is its support for Mock Servers.&lt;/p>
&lt;p>In interface development and testing work, especially for software products developed in parallel by multiple teams such as frontend, backend, and app teams, a common situation is that progress often depends on other teams. For example, an app might depend on backend interfaces for debugging, or on interfaces provided by third-party teams. If the interfaces are not yet ready for joint debugging, to ensure development progress, mocking interfaces according to certain conventions becomes a necessary choice.&lt;/p>
&lt;p>A Mock Server is a functional module that provides this service. In Postman, we can save responses as Examples, and then conveniently create Mock services based on these examples to simulate message responses independent of the original interface.&lt;/p>
&lt;p>The image below shows a response Example saved in the Postman app. For the same interface request, we can save different response results as multiple different examples.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_215753.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="creating-a-mock-server">Creating a Mock Server
&lt;/h4>&lt;p>There are several ways to create a Mock Server in Postman:&lt;/p>
&lt;ul>
&lt;li>Through the New button in the Postman app&lt;/li>
&lt;li>In the launch window that automatically pops up when opening the Postman app&lt;/li>
&lt;li>In the Collection menu&lt;/li>
&lt;li>Through the Postman API&lt;/li>
&lt;/ul>
&lt;p>Here, we&amp;rsquo;ll use the Collection menu as an example. Select &lt;code>Mock Collection&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_220408.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Set up the Mock Server based on the Collection information:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_220340.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Upon successful creation, an online Mock Server access URL will be generated, in this example: &lt;a class="link" href="https://b0fadee4-7560-4b14-a201-599985ce4f0f.mock.pstmn.io" target="_blank" rel="noopener"
>https://b0fadee4-7560-4b14-a201-599985ce4f0f.mock.pstmn.io&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_220205.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>This completes the creation of the Mock service for the current Collection. Postman will default to creating an Environment with the same name as the current Collection, and in this environment, it will add a url variable with the value being the Mock service address just created.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_220654.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="using-the-mock-server">Using the Mock Server
&lt;/h4>&lt;p>After creating the Mock service, we can simulate interface responses through the previously generated Mock service address. The image shows accessing an interface saved in the Mock service, which returns the content of the previously saved response Example.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_221022.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="mock-server-matching-algorithm">Mock Server Matching Algorithm
&lt;/h4>&lt;p>At this point, you might wonder how the Mock Server determines which content to respond with based on the request, especially when we have saved multiple Examples for the same request. Let&amp;rsquo;s introduce the response matching algorithm used by the Mock Server.&lt;/p>
&lt;p>The image below shows the algorithm sequence used by the Mock Server for response matching:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_211113.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>First, it filters responses based on the format of the content to be responded with, such as JSON or XML format (based on the request format definition).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It matches based on the HTTP method of the request, eliminating responses that don&amp;rsquo;t match the request&amp;rsquo;s HTTP method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It matches based on the URL path of the request. It prioritizes strictly matching paths, then multi-level paths with &lt;code>/&lt;/code>, then paths ignoring case and ID information. If no match is found, it returns that no corresponding response was found.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can specify the response message by carrying a specified header value in the request message header. Postman supports carrying &lt;code>x-mock-response-name&lt;/code>, &lt;code>x-mock-response-id&lt;/code>, and &lt;code>x-mock-response-code&lt;/code> in the message header, which can specify the response name (saved example name), the ID of the response Example (unique ID, which can be queried through the API), and the response status code, respectively.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Among the remaining responses, they are sorted in reverse order of saving, and the one with the highest threshold is selected for response.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The image shows a Mock service for creating a Repo, with multiple response Examples. Here, it matches the request method and request path:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_213021.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The image below shows a request that includes a specified Header, &lt;code>x-mock-response-code&lt;/code>, specifying to return a response with a status code of 422.
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_213345.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>As we can see, through Postman&amp;rsquo;s Mock Server service, we can simulate interface responses without relying on the original interface environment, to meet our business testing needs. Currently, free accounts have a monthly limit of 1,000 calls through the Mock Server.&lt;/p>
&lt;h3 id="postmans-monitoring-feature">Postman&amp;rsquo;s Monitoring Feature
&lt;/h3>&lt;p>Next, let&amp;rsquo;s introduce the monitoring service provided by Postman Cloud.&lt;/p>
&lt;p>For internet applications, how do we ensure our business can correctly provide services? How do we prevent business interruptions due to service anomalies or network issues?&lt;/p>
&lt;p>In the process of collaborating with external teams, if the other party&amp;rsquo;s interface changes, how can we be informed promptly to avoid a lot of wasted effort?&lt;/p>
&lt;p>Due to these issues, the importance of monitoring interfaces is self-evident. Postman&amp;rsquo;s interface monitoring function is essentially a feature provided by the Cloud that schedules the execution of interface test tasks, records results, and sends notifications. You might say that this can also be achieved through CI integration tools like Jenkins.&lt;/p>
&lt;p>Indeed, this effect can be achieved through CI scheduling, but Cloud monitoring can also provide the selection of different access regions and value-added capabilities such as trend visualization and analysis of monitoring results.&lt;/p>
&lt;p>The image below shows selecting a new monitor from the Collection menu in the Postman app:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_225554.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The image below shows creating a monitor in the Postman web workspace:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_225910.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The images below show the created monitor and the monitoring results interface:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190226_214421.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/monitor.gif"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>In addition to creating monitors through the App and the Cloud web interface, we can also create monitors through the Postman API.&lt;/p>
&lt;p>Additionally, there are several limitations to Postman&amp;rsquo;s monitoring function that you should be aware of:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Since monitoring is executed in the cloud, the monitored interface needs to be accessible via the internet. For interfaces developed on an intranet, a public access interface needs to be exposed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Postman currently doesn&amp;rsquo;t have a file storage function, so it doesn&amp;rsquo;t support attaching files in interface requests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Similarly, it doesn&amp;rsquo;t support using data files to provide data variables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The interface execution record doesn&amp;rsquo;t record the request and response message bodies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Currently, free accounts have a monitor interface execution limit of 1,000 times per month.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="postmans-open-api">Postman&amp;rsquo;s Open API
&lt;/h3>&lt;p>Besides creating and managing Collections, Environments, Mock Servers, Monitors, etc. through the Postman App and the cloud web interface, Postman Cloud also provides its own API interfaces, making it convenient for users to call from their own tools or scripts, and more easily schedule and manage the related services provided by Postman.&lt;/p>
&lt;p>Postman&amp;rsquo;s API is provided through cloud-based Integration. (For professional and higher accounts, other integrated third-party tools are also available.)&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214835.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="obtaining-authentication-code">Obtaining Authentication Code
&lt;/h4>&lt;p>To use the Postman API, you first need to generate an authentication code. Enter from the interface shown above, select &lt;code>Get API Key&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214910.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>After generation, you can view the current Key value in &lt;code>Existing API Keys&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214944.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>There are two ways to use the authentication code for the Postman API:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>By adding an &lt;code>X-Api-Key&lt;/code> header in the request message to carry this key value for authentication.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>By carrying the query parameter &lt;code>apikey&lt;/code> in the request URL, such as:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://api.getpostman.com/collections?apikey={{postman_api_key}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you don&amp;rsquo;t carry the authentication code, the interface will return the following error:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;AuthenticationError&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Invalid API Key. Every request requires a valid API Key to be sent.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="access-frequency-limits">Access Frequency Limits
&lt;/h4>&lt;p>Similar to most RESTful API services, to prevent DDOS attacks, Postman API also limits the frequency of interface access to no more than 60 times per minute. In the response message, you can learn about this limit, remaining count, and reset time through custom headers such as &lt;code>X-RateLimit-Limit&lt;/code>, &lt;code>X-RateLimit-Remaining&lt;/code>, and &lt;code>X-RateLimit-Reset&lt;/code>. As shown in the interface below for getting all Collections:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_215758.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="usage-examples">Usage Examples
&lt;/h4>&lt;p>Let&amp;rsquo;s look at several examples of Postman API calls:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Getting Collection Information&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>In the previous rate limit image, we accessed the interface to get all Collections under the current account, with a response like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;collections&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;7ea4592c-848a-4a76-a4e4-5b1b0d0594f7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;PostmanAPI&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508-7ea4592c-848a-4a76-a4e4-5b1b0d0594f7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;d6c64129-8c6c-48ec-968c-7f01a70a601b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Postman Echo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508-d6c64129-8c6c-48ec-968c-7f01a70a601b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;f2777cee-5d92-4a0d-896e-e00ad27ef5bd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;GitHub&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508-f2777cee-5d92-4a0d-896e-e00ad27ef5bd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>By providing the ID of the relevant interface, we can get detailed information about a single Collection using the interface:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://api.getpostman.com/collections/{{collectionID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For example, here we can use Postman&amp;rsquo;s Pre-Script to first get the ID of a Collection with a specific name like PostmanAPI, then assign the ID to the environment variable {{collectionID}}. The code is as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.getpostman.com/collections?apikey=&amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;postman_api_key&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">collections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">collections&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">collections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;PostmanAPI&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;collectionID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">collections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As shown:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_222437.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Getting Environment Information&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Similarly, we can get information about a single environment:&lt;/p>
&lt;p>Pre-Script code as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.getpostman.com/environments?apikey=&amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;postman_api_key&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">environments&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">environments&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">environments&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">environments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;PostAPI&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;envID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">environments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Screenshot of the call:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_223118.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Running a Specified Monitor&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>We can also immediately execute a specified Monitor through the interface. The interface returns execution results as shown:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_223742.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Besides the examples above, detailed interface documentation for the Postman API can be found in the &lt;a class="link" href="https://docs.api.getpostman.com" target="_blank" rel="noopener"
>official API documentation&lt;/a>. Similarly, the current interface call limit for free accounts is also 1,000 times.&lt;/p>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>Above is the introduction to the advanced features provided by Postman Cloud. As we can see, through Postman Cloud, we can leverage cloud service resources to accomplish some value-added functions that are not easily implemented by the local app, making it more convenient for team sharing and collaboration, enhancing convenience while accelerating our interface development or testing progress. Postman&amp;rsquo;s free version fully supports these value-added services but has certain usage limits. These value-added services can actually also be implemented through some open-source tools, which we can share with you in the future.&lt;/p>
&lt;p>This concludes the systematic introduction to the Postman tool series. Welcome to continue discussing testing technology and sharing industry dynamics in the readers&amp;rsquo; circle or by joining the WeChat group to grow together!&lt;/p>
&lt;hr></description></item><item><title>Postman Automation Guide</title><link>https://chengxiaqiucao.github.io/en/post/003-postman-automation/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/en/post/003-postman-automation/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman Automation Guide" />&lt;h3 id="introduction">Introduction
&lt;/h3>&lt;p>In the previous two articles &amp;ldquo;Postman: Basic Guide&amp;rdquo; and &amp;ldquo;Postman: Advanced Guide&amp;rdquo;, we introduced how Postman, as a professional API testing tool, is primarily used in API testing and its powerful variable and scripting capabilities, which greatly facilitate manual testing work for testers. In fact, Postman also provides excellent support for automated testing. In this article, we&amp;rsquo;ll explore how to use Postman for API automation testing.&lt;/p>
&lt;h3 id="automation-testing-overview">Automation Testing Overview
&lt;/h3>&lt;p>Before continuing with this article, let&amp;rsquo;s first review some basic concepts related to automation testing.
According to Baidu Encyclopedia&amp;rsquo;s definition:&lt;/p>
&lt;blockquote>
&lt;p>Automated testing is a process of converting manually driven testing behaviors into machine-executed operations.&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>Manually driven testing behaviors&lt;/code>, in a &lt;code>broad&lt;/code> sense, can include the entire process from test requirement analysis to test design, test execution, and test summary, while in a &lt;code>narrow&lt;/code> sense, it generally refers to embodying test design through test code and automatically completing test execution and outputting results through code execution.
When we talk about automated testing now, it&amp;rsquo;s more often at the narrow level, using automated testing to improve test execution efficiency and quickly obtain the status of the tested product through rapid test case execution results, more as a &lt;code>quality indicator&lt;/code>.&lt;/p>
&lt;p>In &lt;a class="link" href="https://gitbook.cn/gitchat/activity/5c373c316cf27775f39ee310" target="_blank" rel="noopener"
>&amp;ldquo;Postman: Basic Guide&amp;rdquo;&lt;/a>, we introduced the classic automation testing pyramid:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_161451.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Here, software testing is layered according to different test types:&lt;/p>
&lt;ul>
&lt;li>The bottom layer is unit testing aimed at the code level.&lt;/li>
&lt;li>The middle layer is service testing. Modern software applications basically manifest their services in the form of API interfaces, so service testing can also be understood as API testing.&lt;/li>
&lt;li>The top layer is user interface testing.&lt;/li>
&lt;/ul>
&lt;p>This model reflects in automated testing that the lower the layer, the greater the proportion of automated testing should be, which leads to a better return on investment. The middle layer of Service testing is neither as maintenance-intensive as the UI layer, making it difficult to keep up with rapid iteration requirements, nor is it as focused on quality verification of business logic as unit testing. Therefore, API testing is now generally considered the priority choice for automated testing implementation.&lt;/p>
&lt;p>With the help of some automated testing tools or automated testing frameworks, we can more conveniently implement automated testing in terms of test case organization, execution strategy, test data management, result reporting, and other aspects. Let&amp;rsquo;s look at the support Postman provides for automated testing.&lt;/p>
&lt;h3 id="postmans-batch-execution-tool-runner">Postman&amp;rsquo;s Batch Execution Tool: Runner
&lt;/h3>&lt;p>Runner is a module in Postman used for batch execution of API test cases. We can use the Runner module to complete automated test execution of written API test cases.&lt;/p>
&lt;h4 id="runner-feature-introduction">Runner Feature Introduction
&lt;/h4>&lt;p>In the upper left corner of the Postman main interface, click the Runner button to open the Runner module interface. As shown below:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190210_213122.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The functions of the related settings are marked in the image above. After selecting the Collection or Folder to be executed, click the run button to start the running page shown below, which displays the execution results. The meanings of the related interface elements are marked in the image:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190210_213740.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="api-test-data-driven">API Test Data Driven
&lt;/h4>&lt;p>Postman supports test data loading and data-driven execution during Runner operation by introducing data variables. In the previous article &lt;a class="link" href="https://gitbook.cn/gitchat/activity/5c52a4f17ee79c049a27a6d7" target="_blank" rel="noopener"
>&amp;ldquo;Postman: Advanced Guide&amp;rdquo;&lt;/a>, we briefly introduced how to use data variables. Here, let&amp;rsquo;s review with a GitHub API example:&lt;/p>
&lt;p>&lt;em>The data file provides a set of Repositories information (test data), and we run a series of APIs related to this set of data: get repo, get repo contributors, get repo tags, get repo topics, and perform relevant validations for each&lt;/em>&lt;/p>
&lt;p>Postman supports two types of external data formats: JSON format or TXT/CSV format. Here, let&amp;rsquo;s assume we save the repositories data in JSON format in a data file, providing some mainstream open-source automation testing frameworks:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;junit-team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;junit5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;robotframework&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;robotframework&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;appium&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;appium&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SeleniumHQ&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;selenium&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Write validations in the Test script. In the previous lesson, we mentioned a technique: for scripts that are used repeatedly, we can save them to global variables and execute the content of this variable when needed. In this example, all the APIs we need to execute will use the validation of whether a successful response is correctly returned.
So we can set a global variable checkOK. The variable value is the validation script to be executed:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_203908.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Different APIs all contain the corresponding repo information as path parameters, and then we add the corresponding validations:&lt;/p>
&lt;ul>
&lt;li>Get repo API&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Check if the stargazers_count field exists
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Star data exists&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jsonBody&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;stargazers_count&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//Get the number of stars
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">stargazers_count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Display the number of stars in the Test Result and check if it exceeds 1000 Stars
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Current repo【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;】star count【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;】exceeds 1000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Get Contributor API (since the API returns 30 by default, here we use the &lt;code>per_page&lt;/code> parameter to specify 100 items per page)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo/contributors?per_page=100&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Iterate through the current returned array length
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">contributor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">contributor&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Check if the number of contributors exceeds 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Number of contributors【&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">contributor&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;】exceeds 5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">contributor&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Get Tag API (since the API returns 30 by default, here we use the &lt;code>per_page&lt;/code> parameter to specify 100 items per page)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo/tags?per_page=100&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Iterate through the current returned array length
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tag&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Check if the number of tags exceeds 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Number of tags【&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">tag&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;】exceeds 5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tag&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Get Topic API&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo/topics&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Check for returned Topic names and display in Test Result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Current repo【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;】Topic：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">names&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jsonBody&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;names&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Set up Runner configuration in Postman and run:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_213001.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The result is shown below:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_212907.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>From the results, we can see that all the Repo information defined in the GithubRepos.json file has been correctly executed according to the above process.&lt;/p>
&lt;h3 id="newman-command-line-tool">Newman Command Line Tool
&lt;/h3>&lt;p>Postman&amp;rsquo;s Runner module provides a good way to execute API test cases in batches, but it still requires manual operation through the Postman interface. For automated testing, we need to be able to execute test cases through command-line tools, which can be integrated into CI/CD pipelines. Postman provides the Newman command-line tool for this purpose.&lt;/p>
&lt;h4 id="newman-installation">Newman Installation
&lt;/h4>&lt;p>Newman is a command-line tool based on Node.js. To install it, you need to have Node.js installed first. Then you can install Newman globally using npm:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install -g newman
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After installation, you can check if the installation was successful by running:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If the installation is successful, it will display the version number of Newman.&lt;/p>
&lt;h4 id="newman-usage">Newman Usage
&lt;/h4>&lt;p>To use Newman, you first need to export your Postman Collection and Environment files. In Postman, click on the Collection you want to export, then click the &amp;ldquo;&amp;hellip;&amp;rdquo; button and select &amp;ldquo;Export&amp;rdquo; to save the Collection as a JSON file. Similarly, you can export the Environment file.&lt;/p>
&lt;p>Then you can use Newman to run the Collection:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman run YourCollection.json -e YourEnvironment.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you need to use data files for data-driven testing, you can use the &lt;code>-d&lt;/code> parameter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman run YourCollection.json -e YourEnvironment.json -d YourData.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Newman also supports many other parameters to customize the execution process. For example, you can use &lt;code>-n&lt;/code> to specify the number of iterations, use &lt;code>-g&lt;/code> to specify a global environment file, etc. For more details, you can refer to the &lt;a class="link" href="https://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/" target="_blank" rel="noopener"
>Newman documentation&lt;/a>.&lt;/p>
&lt;h4 id="newman-report-generation">Newman Report Generation
&lt;/h4>&lt;p>Newman can generate various formats of test reports, which is very useful for CI/CD integration. By default, Newman outputs the test results to the console, but you can also generate HTML, XML, or JSON reports.&lt;/p>
&lt;p>To generate an HTML report, you first need to install the HTML reporter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install -g newman-reporter-html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then you can use the &lt;code>-r&lt;/code> parameter to specify the report format:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman run YourCollection.json -e YourEnvironment.json -r html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will generate an HTML report in the current directory. You can also specify the report output directory using the &lt;code>--reporter-html-export&lt;/code> parameter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman run YourCollection.json -e YourEnvironment.json -r html --reporter-html-export ./reports/report.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Similarly, you can generate XML reports (useful for integration with Jenkins) or JSON reports.&lt;/p>
&lt;h4 id="newman-integration-with-cicd">Newman Integration with CI/CD
&lt;/h4>&lt;p>Newman can be easily integrated with various CI/CD tools such as Jenkins, Travis CI, GitLab CI, etc. Here&amp;rsquo;s a simple example of integrating Newman with Jenkins:&lt;/p>
&lt;ol>
&lt;li>Install the &amp;ldquo;NodeJS Plugin&amp;rdquo; in Jenkins&lt;/li>
&lt;li>Configure a NodeJS installation in Jenkins&lt;/li>
&lt;li>In your Jenkins job, add a build step to execute a shell command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install -g newman newman-reporter-html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">newman run YourCollection.json -e YourEnvironment.json -r html,cli --reporter-html-export ./reports/report.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>Add a post-build action to publish the HTML report&lt;/li>
&lt;/ol>
&lt;p>This way, every time your Jenkins job runs, it will execute your Postman Collection and generate an HTML report.&lt;/p>
&lt;h3 id="postman-api-automation-testing-best-practices">Postman API Automation Testing Best Practices
&lt;/h3>&lt;p>Based on the above introduction to Postman&amp;rsquo;s automation testing capabilities, here are some best practices for API automation testing using Postman:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Organize your Collections properly&lt;/strong>: Group related APIs into folders, and use meaningful names for your Collections, folders, and requests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use Environment variables&lt;/strong>: Store environment-specific values (like base URLs, authentication tokens) in Environment variables, so you can easily switch between different environments.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use Pre-request scripts for setup&lt;/strong>: Use Pre-request scripts to set up the necessary conditions for your tests, such as generating random data, setting variables, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Write comprehensive Test scripts&lt;/strong>: Don&amp;rsquo;t just test for status codes; also validate response bodies, headers, response times, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use data files for data-driven testing&lt;/strong>: When you need to test the same API with different inputs, use data files instead of duplicating requests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Implement proper error handling&lt;/strong>: Make sure your scripts handle errors gracefully and provide meaningful error messages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use Newman for CI/CD integration&lt;/strong>: Integrate your Postman tests into your CI/CD pipeline using Newman.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Generate and review reports&lt;/strong>: Regularly review test reports to identify trends and potential issues.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Keep your Collections and Environments in version control&lt;/strong>: Export your Collections and Environments and store them in a version control system like Git.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Collaborate with your team&lt;/strong>: Share your Collections with your team members and collaborate on API testing.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>In this article, we&amp;rsquo;ve explored how to use Postman for API automation testing. We&amp;rsquo;ve covered Postman&amp;rsquo;s Runner module for batch execution, the Newman command-line tool for CI/CD integration, and some best practices for API automation testing.&lt;/p>
&lt;p>Postman provides powerful capabilities for API automation testing, making it a valuable tool for testers and developers. By leveraging these capabilities, you can improve the efficiency and effectiveness of your API testing process.&lt;/p>
&lt;p>In the next article, we&amp;rsquo;ll delve deeper into advanced topics in Postman, such as working with GraphQL APIs, WebSocket testing, and more. Stay tuned!&lt;/p></description></item><item><title>Postman Advanced Guide</title><link>https://chengxiaqiucao.github.io/en/post/002-postman-middle/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/en/post/002-postman-middle/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman Advanced Guide" />&lt;h3 id="introduction">Introduction
&lt;/h3>&lt;p>In the previous article &amp;ldquo;Mastering Postman: Basic Guide&amp;rdquo;, we introduced the main features and basic usage of the Postman tool. As the most widely used API testing tool currently, besides providing a user-friendly UI interface and basic functions such as authentication, header, body settings, request submission and response parsing for HTTP protocol, Postman also provides very rich testing assistance capabilities. In this article, we will introduce Postman&amp;rsquo;s advanced scripting features in detail.&lt;/p>
&lt;h3 id="postman-variables">Postman Variables
&lt;/h3>&lt;p>In API testing tools, variables are of great significance for the reuse and flexible matching of API messages. As a professional API testing tool, support for variables is essential.&lt;/p>
&lt;p>Postman provides rich variable support, defining 5 different types of variables with different scopes, making the use and management of variables more flexible and targeted. The following figure shows the official scope of different types of variables:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190113_142618.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>From outside to inside, the scope gradually becomes smaller, and at the same time, the priority becomes higher. That is, when there are variables with the same name, the variables of the inner layer type will take precedence. Let&amp;rsquo;s explain these variable types in detail with examples:&lt;/p>
&lt;h4 id="global-variables">Global Variables
&lt;/h4>&lt;p>Global variables have the largest scope among all variable types. Once set, global variables can take effect in all places where variables can be used in the Postman tool.&lt;/p>
&lt;p>Let&amp;rsquo;s look at how to set global variables in Postman:
Open the environment management interface in the upper right corner of the tool:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_223500.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Select global variable management:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_223538.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Add Global variable:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_102808.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>In this example, we set a global variable name with a value of 1.
In Postman, variables are represented using double curly braces, like &lt;strong>{{ variable }}&lt;/strong>. Taking the Github API as an example, let&amp;rsquo;s get the user information where the username is the value of the variable name.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://api.github.com/users/%7b%7bname%7d%7d" target="_blank" rel="noopener"
>https://api.github.com/users/{{name}}&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>After entering double curly braces in the URL, it will automatically suggest the variable types we need.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_102954.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>After sending the request, check the Postman response area, and you can see that we got the user information for username 1.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;login&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1825798&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;node_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MDQ6VXNlcjE4MjU3OTg=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;avatar_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://avatars2.githubusercontent.com/u/1825798?v=4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gravatar_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;html_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://github.com/1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;followers_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/followers&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;following_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/following{/other_user}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gists_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/gists{/gist_id}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;starred_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/starred{/owner}{/repo}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;subscriptions_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/subscriptions&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;organizations_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/orgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repos_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/repos&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;events_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/events{/privacy}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;received_events_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/received_events&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;User&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;site_admin&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Michael&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;company&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;blog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;location&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;San Francisco, CA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mbalaban1989@gmail.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;hireable&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;bio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;public_repos&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;public_gists&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;followers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;following&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;created_at&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2012-06-07T06:10:07Z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;updated_at&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2019-01-17T08:29:21Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="collection-and-collection-variables">Collection and Collection Variables
&lt;/h4>&lt;p>Let&amp;rsquo;s look at another variable type: Collection variables. First, let&amp;rsquo;s understand the concept of Collection. Collection is a grouping unit for organizing APIs in Postman, and Postman mainly uses Collection as a basic unit for configuration storage. We can think of Collection as the concept of a test suite in software testing.&lt;/p>
&lt;p>Collection variables are variables with a scope on the Collection. These variables will only take effect on the Collection where the variable is set.
Setting method: Select Edit Collection
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_223837.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Add Collection variables in the variable page. In this example, we add a variable also named &amp;ldquo;name&amp;rdquo; to the Github Collection
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_104130.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Save the user retrieval API from the previous example to the Github Collection (we can create a sub-directory under the Collection, note that directories do not support setting directory-level variables, Collection variables will still take effect for APIs in sub-directories), and let&amp;rsquo;s submit this API again
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_104718.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>At this point, we can see that the Collection variable we set has taken effect, and we get the user information for name 2. Note that we still have a global variable name with a value of 1, and we can see that Collection variables have a higher priority than global variables.&lt;/p>
&lt;h4 id="environment-and-environment-variables">Environment and Environment Variables
&lt;/h4>&lt;p>Environment is a very useful concept in Postman. Those who have done software testing understand that we encounter different software environments in our actual work, corresponding to different operating scenarios of our system under test. For example, a typical internet company may have the following different environments during development:&lt;/p>
&lt;ul>
&lt;li>Development environment&lt;/li>
&lt;li>Integration environment (joint debugging environment)&lt;/li>
&lt;li>System testing environment&lt;/li>
&lt;li>Pre-production environment&lt;/li>
&lt;li>Production environment&lt;/li>
&lt;li>Performance testing environment&lt;/li>
&lt;li>Security testing environment&lt;/li>
&lt;/ul>
&lt;p>Different environments often have significant differences in access methods, network topology, access permissions, and hardware configurations. Postman introduces the concept of Environment and manages a set of environment configurations through Environment variables, making it convenient for us to switch between different environments.&lt;/p>
&lt;p>In the environment management interface, you can add environments and related variables for that environment. In this example, we add a GitChat environment and set an environment variable name = 3.
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_110446.png"
loading="lazy"
alt="image"
>
After setting up the environment, on the user retrieval API interface, select the corresponding GitChat environment, and submit the request again. We can see that the environment variable has taken effect, retrieving user information for name 3, and similarly, we can see that the environment variable has a higher priority than the Collection variable.
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_110733.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="local-variables">Local Variables
&lt;/h4>&lt;p>Local variables are variables with the smallest scope, which only take effect in the current request. Local variables can be set in the pre-request script or test script of the request. Let&amp;rsquo;s look at an example:&lt;/p>
&lt;p>In the pre-request script of the user retrieval API, we add the following code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This sets a local variable name = 4. After submitting the request, we can see that the local variable has taken effect, retrieving user information for name 4, and we can see that the local variable has the highest priority among all variable types.&lt;/p>
&lt;h4 id="data-variables">Data Variables
&lt;/h4>&lt;p>Data variables are a special type of variable in Postman. They are not set directly like other variables but are used in conjunction with data files. This is very useful when we need to test the same API with different data.&lt;/p>
&lt;p>Let&amp;rsquo;s look at how to use data variables:
First, prepare a data file, which can be in CSV or JSON format. Here we use a CSV file as an example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csv" data-lang="csv">&lt;span class="line">&lt;span class="cl">&lt;span class="s">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">age&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">20&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">21&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span>&lt;span class="s">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">22&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then in Postman, select Runner:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_232538.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Select the Collection and API to run, and import the data file:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_232629.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>After clicking Run, Postman will automatically read the data from the data file and execute the API multiple times. Each time it will use a different row of data from the data file, and we can use these data through variables like {{name}} and {{age}}.&lt;/p>
&lt;h3 id="dynamic-variables">Dynamic Variables
&lt;/h3>&lt;p>In addition to the five types of variables mentioned above, Postman also provides some built-in dynamic variables that can be used directly without setting. These variables are mainly used to generate some random data or get the current time and other information. Here are some commonly used dynamic variables:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{{$guid}}&lt;/code>: Generate a GUID&lt;/li>
&lt;li>&lt;code>{{$timestamp}}&lt;/code>: Get the current timestamp (in seconds)&lt;/li>
&lt;li>&lt;code>{{$randomInt}}&lt;/code>: Generate a random integer&lt;/li>
&lt;li>&lt;code>{{$randomEmail}}&lt;/code>: Generate a random email address&lt;/li>
&lt;li>&lt;code>{{$randomUserName}}&lt;/code>: Generate a random username&lt;/li>
&lt;li>&lt;code>{{$randomAlphaNumeric}}&lt;/code>: Generate a random alphanumeric string&lt;/li>
&lt;li>&lt;code>{{$randomColor}}&lt;/code>: Generate a random color name&lt;/li>
&lt;li>&lt;code>{{$randomHexColor}}&lt;/code>: Generate a random hexadecimal color code&lt;/li>
&lt;/ul>
&lt;p>For example, if we want to test an API that creates a user, we can use these dynamic variables to generate test data:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">POST https://api.example.com/users
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;id&amp;#34;: &amp;#34;{{$guid}}&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;username&amp;#34;: &amp;#34;{{$randomUserName}}&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;email&amp;#34;: &amp;#34;{{$randomEmail}}&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;created_at&amp;#34;: {{$timestamp}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="variable-scope-and-priority">Variable Scope and Priority
&lt;/h3>&lt;p>After understanding these different types of variables, let&amp;rsquo;s summarize their scope and priority:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Scope&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Global variables: Effective throughout Postman&lt;/li>
&lt;li>Collection variables: Effective within the Collection&lt;/li>
&lt;li>Environment variables: Effective within the selected environment&lt;/li>
&lt;li>Local variables: Only effective in the current request&lt;/li>
&lt;li>Data variables: Effective during Collection Runner execution&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Priority&lt;/strong> (from highest to lowest):&lt;/p>
&lt;ul>
&lt;li>Local variables&lt;/li>
&lt;li>Data variables&lt;/li>
&lt;li>Environment variables&lt;/li>
&lt;li>Collection variables&lt;/li>
&lt;li>Global variables&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>When variables with the same name exist in different scopes, the one with higher priority will take effect.&lt;/p>
&lt;h3 id="postman-scripts">Postman Scripts
&lt;/h3>&lt;p>Postman provides powerful scripting capabilities, allowing us to perform various operations before and after requests. Postman scripts are written in JavaScript and can be used to set variables, perform tests, process response data, and more.&lt;/p>
&lt;h4 id="pre-request-scripts">Pre-request Scripts
&lt;/h4>&lt;p>Pre-request scripts are executed before a request is sent. They can be used to set variables, perform authentication, or prepare data for the request. Let&amp;rsquo;s look at some examples:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Setting variables&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Set a local variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;postman&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Set an environment variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;token&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Set a global variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;api_key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;xyz789&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;strong>Generating random data&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Generate a random user ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">userId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">userId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;strong>Performing authentication&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Generate a timestamp for authentication
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;timestamp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timestamp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Generate a signature
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;api_key&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">timestamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">signature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">CryptoJS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MD5&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;signature&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">signature&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="test-scripts">Test Scripts
&lt;/h4>&lt;p>Test scripts are executed after a response is received. They can be used to verify the response, extract data from the response, or set variables for subsequent requests. Let&amp;rsquo;s look at some examples:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Verifying response status&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check if the response status is 200 OK
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Status code is 200&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;strong>Verifying response body&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check if the response contains specific text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Response contains user data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check if a specific field has the expected value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">responseData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;User ID is correct&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">responseData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;strong>Extracting data from the response&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Extract the token from the response and save it as an environment variable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">responseData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;token&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">responseData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">token&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>&lt;strong>Performing complex validations&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check if the response time is less than 200ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Response time is less than 200ms&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">responseTime&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">be&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">below&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check if the response headers contain specific values
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Content-Type header is present&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check if the response body is valid JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Response is valid JSON&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">be&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="postman-console">Postman Console
&lt;/h3>&lt;p>Postman provides a console that can be used to view logs and debug scripts. You can open the console by clicking on the &amp;ldquo;Console&amp;rdquo; button in the bottom left corner of the Postman window, or by pressing the Alt+Ctrl+C (Windows/Linux) or Option+Command+C (Mac) keyboard shortcut.&lt;/p>
&lt;p>In your scripts, you can use &lt;code>console.log()&lt;/code> to output information to the console:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;This is a debug message&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Variable value:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is very useful for debugging your scripts and understanding what&amp;rsquo;s happening during execution.&lt;/p>
&lt;h3 id="postman-collection-runner">Postman Collection Runner
&lt;/h3>&lt;p>The Collection Runner is a powerful feature in Postman that allows you to run a collection of requests in a specific order. This is particularly useful for testing API workflows or running the same request with different data.&lt;/p>
&lt;p>To use the Collection Runner:&lt;/p>
&lt;ol>
&lt;li>Click on the &amp;ldquo;Runner&amp;rdquo; button in the top left corner of the Postman window&lt;/li>
&lt;li>Select the collection or folder you want to run&lt;/li>
&lt;li>Configure the run settings (iterations, delay, data file, etc.)&lt;/li>
&lt;li>Click on the &amp;ldquo;Run&amp;rdquo; button&lt;/li>
&lt;/ol>
&lt;p>The Collection Runner will execute the requests in the specified order and display the results, including any test results.&lt;/p>
&lt;h3 id="postman-newman">Postman Newman
&lt;/h3>&lt;p>Newman is the command-line companion for Postman. It allows you to run and test a Postman collection directly from the command line. This is particularly useful for integrating Postman tests into your CI/CD pipeline.&lt;/p>
&lt;p>To use Newman, you first need to install it via npm:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install -g newman
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then you can run a collection using:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman run collection.json -e environment.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Where &lt;code>collection.json&lt;/code> is your exported Postman collection and &lt;code>environment.json&lt;/code> is your exported Postman environment.&lt;/p>
&lt;p>Newman also supports various options for customizing the run and generating reports:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">newman run collection.json -e environment.json --reporters cli,html --reporter-html-export report.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This command will run the collection and generate both CLI and HTML reports, with the HTML report saved to &lt;code>report.html&lt;/code>.&lt;/p>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>In this article, we&amp;rsquo;ve explored the advanced features of Postman, including variables, scripts, the console, Collection Runner, and Newman. These features make Postman a powerful tool for API testing and development.&lt;/p>
&lt;p>By mastering these features, you can:&lt;/p>
&lt;ul>
&lt;li>Create more flexible and reusable API tests&lt;/li>
&lt;li>Automate complex testing scenarios&lt;/li>
&lt;li>Validate API responses with detailed assertions&lt;/li>
&lt;li>Generate comprehensive test reports&lt;/li>
&lt;li>Integrate API testing into your CI/CD pipeline&lt;/li>
&lt;/ul>
&lt;p>In the next article, we&amp;rsquo;ll dive deeper into Postman&amp;rsquo;s automation capabilities and explore how to use Postman for API monitoring and documentation.&lt;/p></description></item><item><title>Postman Basics</title><link>https://chengxiaqiucao.github.io/en/post/001-postman-basic/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/en/post/001-postman-basic/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman Basics" />&lt;h3 id="introduction">Introduction
&lt;/h3>&lt;p>This tutorial will combine the widely acclaimed and used RestAPI design exemplar, the Github API, to provide a detailed introduction to the usage methods and practical techniques of the Postman API testing tool.&lt;/p>
&lt;p>Before starting this tutorial, let&amp;rsquo;s discuss why API testing is so important in the current software industry. Why should we learn Postman?&lt;/p>
&lt;p>The modern software industry has evolved from the traditional World Wide Web to mobile internet, cloud computing, and now into the era of the Internet of Everything. Software and networks connect every aspect of our lives, with different devices and software systems interconnected in various ways. APIs serve as the bridge between different devices and systems, making them increasingly important in both current and future hardware and software industries.&lt;/p>
&lt;h4 id="what-is-an-api">What is an API?
&lt;/h4>&lt;p>The IT industry has evolved from the C/S and B/S architectures of the &lt;strong>World Wide Web era&lt;/strong>, to the big frontend era of the &lt;strong>mobile internet era&lt;/strong>, to the cloud architecture represented by IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service) in the &lt;strong>cloud computing era&lt;/strong>, and now into the &lt;strong>Internet of Things era&lt;/strong> where networks connect every aspect of our lives. The connection points that carry these connections are network interfaces. &lt;strong>APIs are the entry points and bridges for connection, interaction, and mutual effect between different network applications&lt;/strong>.&lt;/p>
&lt;p>As shown in the figure below, this is a diagram of the position of interfaces in a software system
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_160134.png"
loading="lazy"
alt="image"
>
Here, UI interfaces and API interfaces represent user interaction interfaces and application programming interfaces respectively&lt;/p>
&lt;h4 id="api-testing">API Testing
&lt;/h4>&lt;p>Now that we understand the concept of APIs, let&amp;rsquo;s look at what API testing is.&lt;/p>
&lt;p>Here is the definition given by Baidu Encyclopedia:&lt;/p>
&lt;blockquote>
&lt;p>API testing is a type of testing for interfaces between system components. API testing is mainly used to detect interaction points between external systems and the system, as well as between internal subsystems. The focus of testing is to check data exchange, transmission and control management processes, as well as the logical interdependencies between systems.&lt;/p>&lt;/blockquote>
&lt;p>As we can see, after explaining the definition of interfaces, it clarifies that the focus of API testing includes the data interaction, processes, and the business logic behind them.&lt;/p>
&lt;p>Looking further at the more commonly used definition of API testing, which Baidu has not included, we can look at the definition from Wiki:&lt;/p>
&lt;blockquote>
&lt;p>API testing is a type of software testing that involves testing application programming interfaces (APIs) directly and as part of integration testing to determine if they meet expectations for functionality, reliability, performance, and security.[1] Since APIs lack a GUI, API testing is performed at the message layer.[2] API testing is now considered critical for automating testing because APIs now serve as the primary interface to application logic and because GUI tests are difficult to maintain with the short release cycles and frequent changes commonly used with Agile software development and DevOps.[3][4]&lt;/p>&lt;/blockquote>
&lt;p>It is a type of integration testing that directly tests APIs, and Wiki categorizes API testing in the integration testing phase. This means it is more often implemented during system integration. It also clarifies that API testing is not purely functional testing, but also needs to consider reliability, security, performance, etc. API testing differs from GUI testing in that it is more reflected in the message layer, and due to the inherent disadvantages of GUI layer in automated testing, API automation is currently a key practice in the field of automated testing as well as in development models such as Agile and DevOps.&lt;/p>
&lt;p>The figure below is the famous test pyramid, which layers software testing according to different test types. The bottom layer is unit testing aimed at the code level, the middle is service testing, and in today&amp;rsquo;s application services, services are more often manifested in API form, so service testing can also be understood as API testing. The top layer is GUI testing aimed at the user interface.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_161451.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>This model shows that in automated testing, the lower the layer of automated testing, the greater the proportion it should occupy for a better return on investment. The middle layer of API testing is neither as costly to maintain as the UI layer, making it difficult to keep up with rapid iterations, nor is it as capable of quality verification in business logic as unit testing. Therefore, API testing is now generally considered the priority choice for automated testing implementation.&lt;/p>
&lt;h3 id="http-protocol-basics">HTTP Protocol Basics
&lt;/h3>&lt;p>Before formally introducing Postman&amp;rsquo;s functionality, we first need to introduce the testing object of Postman. Postman is primarily a testing tool for HTTP protocol interfaces, so this chapter will first introduce the basic knowledge of the HTTP protocol.&lt;/p>
&lt;blockquote>
&lt;p>HTTP, or Hypertext Transfer Protocol, is one of the most widely used network protocols on the Internet. Currently, version 1.1 is mainly used, based on the TCP/IP communication protocol to transfer data (HTML, files, data, API interface messages, etc.)&lt;/p>&lt;/blockquote>
&lt;p>The HTTP protocol works on a client-server or C/S architecture
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_163102.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="http-message-composition">HTTP Message Composition
&lt;/h4>&lt;p>The client sends an HTTP request to the server, and the request message includes the following format:&lt;/p>
&lt;p>&lt;strong>Request line, request header, blank line, and request data&lt;/strong> are the four parts. As shown in the figure&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_163224.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Below is an example of a request to the Baidu homepage:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">GET https://www.baidu.com/ HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Request method URL HTTP protocol version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Request server address&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#The following is the message header content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: keep-alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Connection method: keep-alive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: max-age&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Request cache control, need to confirm whether the request content has been modified&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Upgrade-Insecure-Requests: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Support HTTPS protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">User-Agent: Mozilla/5.0 &lt;span class="o">(&lt;/span>Windows NT 10.0&lt;span class="p">;&lt;/span> Win64&lt;span class="p">;&lt;/span> x64&lt;span class="o">)&lt;/span> AppleWebKit/537.36 &lt;span class="o">(&lt;/span>KHTML, like Gecko&lt;span class="o">)&lt;/span> Chrome/71.0.3578.98 Safari/537.36
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Request client, browser version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept: text/html,application/xhtml+xml,application/xml&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.9,image/webp,image/apng,*/*&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Supported response content types&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Encoding: gzip, deflate, br
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Supported encoding types&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Language: zh-CN,zh&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.9,en&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Supported languages&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cookie: &lt;span class="nv">BAIDUID&lt;/span>&lt;span class="o">=&lt;/span>C0A2...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Carried cookie information&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#No request message body carried, body is empty&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The server receives and processes the request sent by the client and returns an HTTP response message. It also consists of four parts:&lt;/p>
&lt;p>&lt;strong>Response status line, message header, blank line, and response body&lt;/strong>. As shown in the figure&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_163802.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Below is an example of the Baidu homepage response&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">HTTP/1.1 &lt;span class="m">200&lt;/span> OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Protocol version Message status code Status description&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdpagetype: &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdqid: 0x8707d7d80001f34e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Custom message header&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: private
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Cache control strategy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: Keep-Alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Keep-alive connection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Type: text/html&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>utf-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Response content type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Sat, &lt;span class="m">22&lt;/span> Dec &lt;span class="m">2018&lt;/span> 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Response time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expires: Sat, &lt;span class="m">22&lt;/span> Dec &lt;span class="m">2018&lt;/span> 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Expiration time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: BWS/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Server system and version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: &lt;span class="nv">BDSVRTM&lt;/span>&lt;span class="o">=&lt;/span>372&lt;span class="p">;&lt;/span> &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: &lt;span class="nv">BD_HOME&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span> &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/&lt;span class="p">;&lt;/span> &lt;span class="nv">domain&lt;/span>&lt;span class="o">=&lt;/span>.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Set client cookie&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Strict-Transport-Security: max-age&lt;span class="o">=&lt;/span>&lt;span class="m">172800&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Strict security transport, valid time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">X-Ua-Compatible: &lt;span class="nv">IE&lt;/span>&lt;span class="o">=&lt;/span>Edge,chrome&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Compatible browser version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Length: &lt;span class="m">191722&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Message body length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#The following is the message body content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;!Doctype html&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;html &lt;span class="nv">xmlns&lt;/span>&lt;span class="o">=&lt;/span>http://www.w3.org/1999/xhtml&amp;gt;&amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="http-methods">HTTP Methods
&lt;/h4>&lt;p>HTTP methods are key information carried in request messages, informing the server of the type of operation the request hopes to perform. Currently, in HTTP 1.1 version, the following methods are common&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">No.&lt;/th>
&lt;th style="text-align: center">Method&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">GET&lt;/td>
&lt;td>Requests the specified page information and returns the entity body.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">2&lt;/td>
&lt;td style="text-align: center">HEAD&lt;/td>
&lt;td>Similar to a GET request, but the response does not contain specific content, used to obtain headers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">3&lt;/td>
&lt;td style="text-align: center">POST&lt;/td>
&lt;td>Submits data to the specified resource for processing (e.g., submitting a form or uploading a file). The data is included in the request body. POST requests may result in the creation of new resources and/or modification of existing resources.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">4&lt;/td>
&lt;td style="text-align: center">PUT&lt;/td>
&lt;td>Transfers data from the client to the server to replace the content of the specified document.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">5&lt;/td>
&lt;td style="text-align: center">DELETE&lt;/td>
&lt;td>Requests the server to delete the specified page.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">6&lt;/td>
&lt;td style="text-align: center">CONNECT&lt;/td>
&lt;td>Reserved in the HTTP/1.1 protocol for proxy servers that can change the connection to a tunnel method.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">7&lt;/td>
&lt;td style="text-align: center">TRACE&lt;/td>
&lt;td>Echoes back the received request, mainly used for testing or diagnosis.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">8&lt;/td>
&lt;td style="text-align: center">PATCH&lt;/td>
&lt;td>Transfers data from the client to the server to replace part of the content of the specified document.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="http-status-codes">HTTP Status Codes
&lt;/h4>&lt;p>HTTP status codes define the result information of the server processing HTTP requests, mainly including the following five categories:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Status Code&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1XX&lt;/td>
&lt;td>Received, pending processing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2XX&lt;/td>
&lt;td>Request processed successfully&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3XX&lt;/td>
&lt;td>Redirect, resource location has changed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4XX&lt;/td>
&lt;td>Client request information error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5XX&lt;/td>
&lt;td>Server processing error&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="1xx-informational">&lt;strong>1xx Informational&lt;/strong>
&lt;/h5>&lt;p>This type of status code represents that the request has been accepted and needs to be further processed. These responses are temporary, containing only the status line and some optional response header information, and ending with a blank line. Since no 1xx status codes are defined in the HTTP/1.0 protocol, servers are prohibited from sending 1xx responses to such clients except under certain experimental conditions.[4] These status codes represent informational responses, indicating other actions that the client should take.&lt;/p>
&lt;h5 id="2xx-success">&lt;strong>2xx Success&lt;/strong>
&lt;/h5>&lt;p>This type of status code represents that the request has been successfully received, understood, and accepted by the server.&lt;/p>
&lt;h5 id="3xx-redirection">&lt;strong>3xx Redirection&lt;/strong>
&lt;/h5>&lt;p>This class of status code indicates that further action needs to be taken by the client to complete the request. Typically, these status codes are used for redirection, with the subsequent request address (redirection target) specified in the Location field of this response.&lt;/p>
&lt;h5 id="4xx-client-error">&lt;strong>4xx Client Error&lt;/strong>
&lt;/h5>&lt;p>This class of status code represents that the client appears to have made an error that prevents the server from processing. Unless the response is to a HEAD request, the server should return an entity describing the current error condition and whether it is a temporary or permanent condition. These status codes are applicable to any request method. Browsers should display any entity content contained in such error responses to the user.&lt;/p>
&lt;h5 id="5xx-server-error">&lt;strong>5xx Server Error&lt;/strong>
&lt;/h5>&lt;p>Indicates that the server cannot complete a clearly valid request. This class of status codes represents that an error or exception has occurred in the server&amp;rsquo;s processing of the request, or that the server is aware that it cannot complete the processing of the request with the current software and hardware resources. Unless this is a HEAD request, the server should include an entity explaining the current error status and whether this condition is temporary or permanent. Browsers should display any entity included in the current response to the user. These status codes are applicable to any response method.&lt;/p>
&lt;p>&lt;em>For a detailed list of status codes, please refer to the appendix&lt;/em>&lt;/p>
&lt;h3 id="github-api">GitHub API
&lt;/h3>&lt;p>This tutorial will mainly use the Github API for practical introduction to APIs. This chapter will briefly introduce the Github website and Github API.&lt;/p>
&lt;p>GitHub is a hosting platform for open source and private software projects. It is named GitHub because it only supports Git as the only version control format for hosting. It is also currently the world&amp;rsquo;s largest code hosting platform, which can be said to be the holy land of programmers, known as the world&amp;rsquo;s largest same-sex social platform :joy:
(Github is sometimes intermittently inaccessible in China, you may need to use a VPN)&lt;/p>
&lt;h4 id="main-concepts-in-github">Main concepts in github
&lt;/h4>&lt;ol>
&lt;li>&lt;strong>Commit&lt;/strong>: Commit changes to the repository (local Git repository and GitHub repository are two different things).&lt;/li>
&lt;li>&lt;strong>Commit message&lt;/strong>: Every time you commit, you need to provide a message describing what was done in this commit.&lt;/li>
&lt;li>&lt;strong>Branch&lt;/strong>: Like a tree diagram, each independent branch is a version of the project, and branches can be merged with the master.&lt;/li>
&lt;li>&lt;strong>Master branch&lt;/strong>: All Git projects create a default branch when initially created, which is the master branch. In development, when writing a new feature, a branch is first created, the feature is completed and tested on that branch, and after passing, the project leader merges that branch into the master.&lt;/li>
&lt;li>&lt;strong>Feature branch&lt;/strong>: Not used much&lt;/li>
&lt;li>&lt;strong>Release branch&lt;/strong>: If there is a manual QA (quality management) process, or if old versions of the software must be supported, a release branch is needed to store necessary patches and update records. There is no technical difference between feature branches and release branches, but they help distinguish categories when discussing within the team.&lt;/li>
&lt;li>&lt;strong>Merge&lt;/strong>: Merge can combine all the content on one branch into another branch, generally merging a branch into the main branch.&lt;/li>
&lt;li>&lt;strong>Tag&lt;/strong>: Commonly used to record release versions. When a version is released, a tag is given, so that the code of that version can be recorded when it was generated.&lt;/li>
&lt;li>&lt;strong>Check out&lt;/strong>: Generally refers to viewing the operation records on a certain branch.&lt;/li>
&lt;li>&lt;strong>Pull request&lt;/strong>: Generally used to pull code from a branch in a remote repository to the local, or to pull branch code from the local repository into the current project.&lt;/li>
&lt;li>&lt;strong>Issue&lt;/strong>: GitHub&amp;rsquo;s feature for raising issues. Generally, when encountering problems, the problematic situation can be recorded through issues.&lt;/li>
&lt;li>&lt;strong>Wiki&lt;/strong>: A lightweight way to create Web pages, where created Web pages can be linked to each other. Projects in GitHub typically use WIKIs for documentation.&lt;/li>
&lt;li>&lt;strong>Clone&lt;/strong>: Download a copy from GitHub to the local, which can be pulled up after operation.&lt;/li>
&lt;li>&lt;strong>Fork&lt;/strong>: A copies B&amp;rsquo;s project to their own account, modifies it and then submits it. B can see the content modified by A, but B&amp;rsquo;s original project will not have any changes.&lt;/li>
&lt;/ol>
&lt;h4 id="github-main-interface-functions">Github main interface functions
&lt;/h4>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_203928.png"
loading="lazy"
alt="image"
>
&lt;a class="link" href="http://blog.csdn.net/android_zyf/article/details/64175941" target="_blank" rel="noopener"
>Image from george_zyf&amp;rsquo;s blog&lt;/a>&lt;/p>
&lt;h4 id="github-api-1">Github API
&lt;/h4>&lt;p>Currently, the latest V4 version of the Github API is based on GraphQL, but the commonly used one is still the V3 &lt;a class="link" href="https://developer.github.com/v3/" target="_blank" rel="noopener"
>Restful API&lt;/a>&lt;/p>
&lt;h5 id="main-resources-and-corresponding-operations-in-github-api">&lt;strong>Main resources and corresponding operations in github API&lt;/strong>
&lt;/h5>&lt;p>User resource&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_200328.png"
loading="lazy"
alt="user"
>&lt;/p>
&lt;p>Repo operations&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_200253.png"
loading="lazy"
alt="repos"
>&lt;/p>
&lt;p>Issue operations&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_200314.png"
loading="lazy"
alt="issues"
>&lt;/p>
&lt;p>&lt;em>Images from &lt;a class="link" href="https://blog.csdn.net/woshinannan741/article/details/78541029" target="_blank" rel="noopener"
>the web&lt;/a>&lt;/em>&lt;/p>
&lt;h5 id="time-format-in-github">&lt;strong>Time format in github&lt;/strong>
&lt;/h5>&lt;p>The time format in github is as follows:&lt;/p>
&lt;blockquote>
&lt;p>YYYY-MM-DDTHH:MM:SSZ&lt;/p>&lt;/blockquote>
&lt;h5 id="github-rate-limiting-rules">&lt;strong>Github rate limiting rules&lt;/strong>
&lt;/h5>&lt;p>To include server-side load pressure, github restricts request traffic. Each github response header carries github&amp;rsquo;s rate limiting settings.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Header Parameter&lt;/th>
&lt;th>Meaning&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>X-RateLimit-Limit&lt;/td>
&lt;td>Current maximum request limit per hour, generally 60 times for unauthenticated requests, 5000 times for authenticated requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Remaining&lt;/td>
&lt;td>Current remaining number of requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Reset&lt;/td>
&lt;td>Remaining limit reset time, in milliseconds&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="request-parameters-and-pagination">&lt;strong>Request Parameters and Pagination&lt;/strong>
&lt;/h5>&lt;p>Parameters can be carried in requests, generally including two types of parameters: &lt;strong>path parameters&lt;/strong> and &lt;strong>query parameters&lt;/strong>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_121133.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The github API supports two default pagination parameters:&lt;/p>
&lt;ul>
&lt;li>page: Current page number to display&lt;/li>
&lt;li>per_page: Number of results to display per page&lt;/li>
&lt;/ul>
&lt;h3 id="postman-basics">Postman Basics
&lt;/h3>&lt;p>There are many testing tools that can be used for Rest API testing, common ones include soapUI, Jmeter, fiddler, etc., which are often used for API testing. However, currently the most popular and common tool among API testers is Postman, which we will introduce in this chapter.&lt;/p>
&lt;h4 id="installing-postman">Installing Postman
&lt;/h4>&lt;p>The earliest version of Postman, and for a long time, existed as a Chrome plugin. Many people even thought that postman was Google&amp;rsquo;s official tool plugin, and a large amount of the resources we can see now are based on the chrome plugin form for introduction.&lt;/p>
&lt;p>But currently Postman has actually launched a standalone local App program, and the official has announced that it no longer supports the chrome plugin form. Although the plugin version can still be used now, compared to the Native version, it is limited by the functionality of the chrome browser, and many features are lacking in the plugin version, such as built-in support for cookies, proxy functionality, console functionality, etc. So the installation of the plugin version will not be introduced here.&lt;/p>
&lt;p>The installation of the local version is actually very simple. Just download the appropriate version from the official website according to your operating system type.
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>There is one more thing to note here, on the postman&amp;rsquo;s official website, we should register an account, as many advanced features will require this account to log in before they can be used.&lt;/p>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210848.png" width = "320" height = "450" />
&lt;p>Installation is complete when the Postman icon with the cool pose &lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_211842.png" width = "30" height = "33" /> appears on the desktop.&lt;/p>
&lt;h4 id="postman-main-interface">Postman Main Interface
&lt;/h4>&lt;p>Open Postman and enter, you will be prompted to select the type of task you want to create for the first time.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_212729.png"
loading="lazy"
alt="image"
>
There are six types of tasks here, we will explain them in detail in the practical section below, but here is a brief explanation:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Request&lt;/strong> is the foundation and core of Postman software, which is used to create request requests to complete the core work of API testing.&lt;/li>
&lt;li>&lt;strong>Collection&lt;/strong> is actually a collection, which we can think of as a collection of a batch of Request requests, or a test set. It is also the basic unit of some advanced features of Postman&lt;/li>
&lt;li>&lt;strong>Environment&lt;/strong>, literally understood as environment, can actually be considered as a collection of some configuration variables, which can have the effect of distinguishing different test environments through different configurations in practical applications
The following three are advanced features of Postman&lt;/li>
&lt;li>&lt;strong>API documention&lt;/strong>, is to automatically generate API documentation through the requests that we have debugged, which is convenient for team sharing and API delivery.&lt;/li>
&lt;li>&lt;strong>Mock server&lt;/strong>
When we are testing or developing APIs, we often need to simulate the interface server on the other end, and Mock server plays the role of simulating the server side.&lt;/li>
&lt;li>&lt;strong>Monitor&lt;/strong>
This is a monitoring function, through which we can monitor whether our interface is normal. In simple terms, this is actually a timed interface execution function.&lt;/li>
&lt;/ul>
&lt;p>Having a general understanding of the different types of tasks, let&amp;rsquo;s close this interface and look at the functional areas of the main interface
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221026.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="banner-area">&lt;strong>Banner Area&lt;/strong>
&lt;/h5>&lt;p>First is the menu bar above, corresponding to the various functions in the function area, all of which can be found in the corresponding menu on the menu bar. Then there is the banner area below.
Introducing from left to right:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213611.png"
loading="lazy"
alt="image"
> will open the creation window at startup, used to create six types of tasks.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213722.png"
loading="lazy"
alt="image"
> button, can be used to import external files, external files can be postman&amp;rsquo;s Collection format files, data files, and other API definition files&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213808.png"
loading="lazy"
alt="image"
> will start the Collection runner, which is a runner used to run established test tasks. We will have a detailed introduction later&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213839.png"
loading="lazy"
alt="image"
> The fourth button, can create a new tab, or open multiple postman programs, or runner programs.&lt;/p>
&lt;p>In the middle &lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_214059.png"
loading="lazy"
alt="image"
> is to select the workspace to use, but this requires account login, which will synchronize the workspace settings in the cloud. Each account will have a default workspace, which is a workspace that can be understood as similar to a project or engineering.&lt;/p>
&lt;p>There are also several buttons on the right side of the banner bar &lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_214216.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>The first is synchronization, which is also in the case of having an account, can synchronize the relevant interface test design in the workspace between multiple computers.&lt;/li>
&lt;li>The second proxy, is similar to the fiddler introduced earlier, providing proxy capture API functionality. Of course, this function is not as rich as Fiddler&lt;/li>
&lt;li>The third button includes settings and documentation guides. The settings are the local configuration of the software&lt;/li>
&lt;li>The fourth button is message notification, which is easy to understand, it will display some reminder information&lt;/li>
&lt;li>Then there is postman&amp;rsquo;s twitter, don&amp;rsquo;t look at it if you&amp;rsquo;re behind the wall&lt;/li>
&lt;li>Finally, there is login, which can be used to log in with a postman account&lt;/li>
&lt;/ul>
&lt;h5 id="setting">&lt;strong>Setting&lt;/strong>
&lt;/h5>&lt;p>The usage properties and application settings of the Postman tool can be set in the Setting. The following are explained separately:&lt;/p>
&lt;h6 id="general">&lt;strong>General&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_113726.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="themes">&lt;strong>Themes&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_113828.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="shortcuts">&lt;strong>Shortcuts&lt;/strong>
&lt;/h6>&lt;p>Tool shortcuts
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_113904.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="data">&lt;strong>Data&lt;/strong>
&lt;/h6>&lt;p>Tool data import and export
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114000.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="add-ons">&lt;strong>add-ons&lt;/strong>
&lt;/h6>&lt;p>Newman plugin download method
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114231.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="sync">&lt;strong>Sync&lt;/strong>
&lt;/h6>&lt;p>Synchronization settings
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114249.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="certificates">&lt;strong>certificates&lt;/strong>
&lt;/h6>&lt;p>Local certificate settings
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114304.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="proxy">&lt;strong>Proxy&lt;/strong>
&lt;/h6>&lt;p>Local network proxy settings
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114316.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="update">&lt;strong>update&lt;/strong>
&lt;/h6>&lt;p>Upgrade settings
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114330.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="about">&lt;strong>about&lt;/strong>
&lt;/h6>&lt;p>Tool &lt;strong>About&amp;hellip;&lt;/strong> and other version information
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114343.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="left-sidebar">&lt;strong>Left Sidebar&lt;/strong>
&lt;/h5>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215120.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>filter bar, filter to display different messages&lt;/li>
&lt;li>history is a list of operation message records&lt;/li>
&lt;li>collection as introduced earlier, displays request collections&lt;/li>
&lt;/ul>
&lt;h5 id="bottom-status-bar">&lt;strong>Bottom Status Bar&lt;/strong>
&lt;/h5>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215400.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>Leftmost, show and hide the left sidebar&lt;/li>
&lt;li>Then there is the search function, which is easy to understand&lt;/li>
&lt;li>The third is the console, where you can see detailed information about messages&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215445.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>User guide&lt;/li>
&lt;li>Adjust the display style of the function area&lt;/li>
&lt;li>Shortcut list reference&lt;/li>
&lt;li>Help related links&lt;/li>
&lt;/ul>
&lt;h5 id="main-function-area">&lt;strong>Main Function Area&lt;/strong>
&lt;/h5>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215313.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Mainly includes two parts, the upper part is the request area, and the lower part is the response area. It can also be displayed in left and right.&lt;/p>
&lt;h6 id="request-area">&lt;strong>Request Area&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221203.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The request part has a tab open by default, and multiple tabs can be opened for simultaneous editing.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221316.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>The GET method is used by default, which is also the most used HTTP method. You can select other methods from the dropdown, what are the commonly used ones? POST, PUT, Delete, etc.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221359.png"
loading="lazy"
alt="image"
>
Enter the request address in the URL section. For example, we enter the root address of the GithubAPI.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221529.png"
loading="lazy"
alt="image"
>
param is the parameter management interface, where we can add parameters (with key-value, block editing mode).&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221557.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Send to send the request, the small arrow below send and download, will export the response message as json after sending. The save button next to it is to save this request as a case to the collection.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221704.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Authentication part, although the request editor is powerful enough to handle authentication messages, authentication is often a frequently used function, so Postman separately extracts the authentication part and encapsulates most of the current authentication methods&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Inherit&lt;/strong>, default authentication method&lt;/li>
&lt;li>&lt;strong>No Auth&lt;/strong>&lt;/li>
&lt;li>&lt;strong>bearer token&lt;/strong> authentication, also called Json web token, which is actually sending a token in json format, and the server will decrypt and verify the token&lt;/li>
&lt;li>&lt;strong>Basic Auth&lt;/strong> basic verification, providing username and password verification, postman will automatically generate authorization, common authentication method&lt;/li>
&lt;li>&lt;strong>digest auth&lt;/strong>, digest authentication
Extends security on basic authentication, the server generates a unique random number for each connection, the client uses this random number to MD5 encrypt the password, then returns it to the server, the server also encrypts the password with this random number, and then compares with the encrypted data transmitted by the client, if consistent, returns the result.
It is a two-step verification process, there will be two authentication interaction messages
Client requests resource -&amp;gt; Server returns authentication mark -&amp;gt; Client sends authentication information -&amp;gt; Server verifies authentication&lt;/li>
&lt;li>&lt;strong>Oauth&lt;/strong>, generally used for third-party authentication, with versions 1 and 2, requiring different information. Also a common authentication method&lt;/li>
&lt;li>&lt;strong>Hawk&lt;/strong> authentication, is another authentication scheme, using a message code authentication algorithm, similar to Digest authentication, it also requires two interactions&lt;/li>
&lt;li>&lt;strong>AWS signature&lt;/strong> authentication, is an authentication method for Amazon AWS public cloud user signatures&lt;/li>
&lt;li>&lt;strong>NTLM&lt;/strong> is Microsoft&amp;rsquo;s LAN management authentication protocol&lt;/li>
&lt;/ul>
&lt;p>Just have a basic understanding, generally the more commonly used are basic and OAuth2.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221901.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>header is message header management, where you can define header information.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221935.png"
loading="lazy"
alt="image"
>
Body, request message body. Generally, requests that will update content such as Post, put, patch, etc. will carry a message body.&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222023.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Next to it is pre-script, which means that some preprocessing work can be done before the request is sent, similar to the setup method in unit testing frameworks such as junit, supporting js script syntax&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222100.png"
loading="lazy"
alt="image"
>
Test is to verify or otherwise process the response after the response, similar to the teardown method in the junit framework, also supporting js script syntax&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222148.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>cookie management postman local cookie information&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222218.png"
loading="lazy"
alt="image"
>
code is a convenient function for programmers, which can automatically convert interface requests into related language coding, you can see that the supported languages are very rich, basically covering various mainstream programming languages.&lt;/p>
&lt;h6 id="response-area">&lt;strong>Response Area&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222427.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>In the upper right corner of the response message is the status code, hover to see a detailed explanation. Also, there is the response time (from the time the request is sent to the time the client receives it), and the message size (including message header and message body).&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190102_203757.png"
loading="lazy"
alt="image"
>
Response body part, i.e., message body. Includes the following buttons&lt;/p>
&lt;ul>
&lt;li>pretty, can format the display according to the presentation type, default json, if it is other format types, you can select the corresponding form for formatting.&lt;/li>
&lt;li>Raw is the unformatted form&lt;/li>
&lt;li>preview is the preview, which is how it looks when rendered in the browser, for example, if the return is html, it is very intuitive.&lt;/li>
&lt;li>Next to it is the auto-wrap button.&lt;/li>
&lt;/ul>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190102_203931.png" width = "300" height = "83" />
&lt;p>On the right are copy to clipboard and search buttons (regex, case sensitive, whole word match)&lt;/p>
&lt;p>Other tabs:&lt;/p>
&lt;ul>
&lt;li>cookie: cookie information of the response message&lt;/li>
&lt;li>header: header information of the response message&lt;/li>
&lt;li>Test Results: After adding a test Script to the request, the verification results of the test script will be displayed here&lt;/li>
&lt;/ul>
&lt;h3 id="summary">Summary
&lt;/h3>&lt;p>This article introduces the basic concepts of REST API and the basic usage of Postman. In the next article, we will introduce how to use Postman to test REST API in detail.&lt;/p>
&lt;p>The main points covered in this article include:&lt;/p>
&lt;ol>
&lt;li>Understanding of REST API and its basic concepts&lt;/li>
&lt;li>Installation and basic interface of Postman&lt;/li>
&lt;li>Basic usage of Postman&amp;rsquo;s request and response areas&lt;/li>
&lt;li>Understanding of various settings in Postman&lt;/li>
&lt;/ol>
&lt;p>In the next article, we will focus on:&lt;/p>
&lt;ol>
&lt;li>How to use Postman to test REST API&lt;/li>
&lt;li>How to use Postman&amp;rsquo;s various advanced features&lt;/li>
&lt;li>How to use Postman for automated testing&lt;/li>
&lt;/ol></description></item></channel></rss>
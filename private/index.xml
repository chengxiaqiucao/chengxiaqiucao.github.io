<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Privates on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/private/</link><description>Recent content in Privates on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><atom:link href="https://chengxiaqiucao.github.io/private/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://chengxiaqiucao.github.io/private/temp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/private/temp/</guid><description>&lt;h1 id="从测试工程师的视角看软件质量与软件测试的区别">从测试工程师的视角看软件质量与软件测试的区别
&lt;/h1>&lt;p>交付高质量的软件——让客户满意、符合利益相关者期望的产品——是一项持续的旅程，而不仅仅是一个检查点。许多人常常将质量与测试混为一谈，部分原因在于“质量保证”（QA）这一术语的历史使用，使得人们误以为仅通过测试便能确保软件的质量。然而，实际上，软件质量与软件测试是两个不同的概念，理解它们之间的区别对我们作为测试工程师来说至关重要。本文将从测试工程师的视角，深入探讨软件质量和软件测试的定义、重要性，以及如何超越这些误解，构建真正高质量的软件。&lt;/p>
&lt;h2 id="什么是软件质量">什么是软件质量？
&lt;/h2>&lt;p>软件质量是一个内在且相对的价值概念。一个人眼中的“高质量”软件，可能并不符合另一个人的期望。在软件开发中，讨论软件质量时，我们需要考虑谁来定义质量，以及我们如何评估和测量它。&lt;/p>
&lt;h3 id="质量由利益相关者定义">质量由利益相关者定义
&lt;/h3>&lt;p>高质量软件是满足重要利益相关者——客户、用户、商业决策者等——期望的软件。这些人使用软件、投资于软件，并最终在其情境中定义“质量”的含义。作为测试工程师，我们的工作是确保理解这些利益相关者的需求，并帮助实现他们的期望。&lt;/p>
&lt;h4 id="案例分析">案例分析
&lt;/h4>&lt;p>以一家电子商务平台为例，开发团队与市场部门密切合作，了解客户对用户体验的期待。在一次用户反馈中，客户指出结账流程过于复杂。通过与客户的沟通，团队重新设计了结账流程，使其更加简洁明了，最终得到了客户的好评。这一案例表明，只有在真正理解利益相关者的期望后，团队才能交付出高质量的软件。&lt;/p>
&lt;h3 id="交付质量所需的条件">交付质量所需的条件
&lt;/h3>&lt;p>确保软件质量需要的不仅仅是测试。它涉及以下几个方面：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>沟通&lt;/strong>：我们是否真正理解利益相关者和客户的需求？我们是否超越了验证需求，而是确保解决了正确的问题？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>协作&lt;/strong>：团队是否有效合作？是否对利益相关者的“质量”有清晰的理解？团队之间是否能够有效沟通和澄清不确定性？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>流程与实践&lt;/strong>：质量是通过严谨的编码实践、代码审查、软件测试、自动化、持续集成/持续交付（CI/CD）管道和反馈循环等手段内嵌于软件中的，这些都塑造了最终产品。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>作为测试工程师，我们需要在这些领域中发挥重要作用，确保团队在每一个环节都注重质量。&lt;/p>
&lt;h2 id="什么是软件测试">什么是软件测试？
&lt;/h2>&lt;p>软件测试是高质量软件拼图中的一个组成部分，但常常被误解。测试的意义常常被简化为寻找缺陷或验证需求是否满足。然而，实际上，测试的范围更广泛，更具战略意义。软件测试是一项关键的调查性过程，评估软件行为，识别缺陷，并突出潜在风险。它为团队提供了有价值的见解，帮助评估软件的准备状态，并做出关于其质量和可靠性的明智决策。&lt;/p>
&lt;h3 id="测试在开发的每个阶段进行">测试在开发的每个阶段进行
&lt;/h3>&lt;p>测试应该在整个软件生命周期中嵌入，涵盖编码前、编码中和编码后：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>编码前&lt;/strong>：理解风险、定义验收标准、对原型进行探索性测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编码中&lt;/strong>：单元测试、结对编程、静态分析、左移测试方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>编码后&lt;/strong>：自动化回归测试、手动探索性测试、性能和安全性测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>部署前后&lt;/strong>：金丝雀发布、可观测性、生产监控、功能标记策略。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这种整体的测试方法确保了质量持续评估和改进，而不是在最后时刻进行测试。&lt;/p>
&lt;h4 id="案例分析-1">案例分析
&lt;/h4>&lt;p>想象一个开发团队在推出新功能之前，首先进行了一次原型的探索性测试。通过与用户的早期反馈，团队发现了用户在使用新功能时的一些潜在问题。这个过程帮助他们在编码之前就识别了风险，最终减少了后续阶段的返工和修复。&lt;/p>
&lt;h2 id="为什么这种区别很重要">为什么这种区别很重要？
&lt;/h2>&lt;p>理解软件质量与软件测试之间的区别至关重要，因为实现高质量软件需要多种不同的策略，而测试仅是其中之一。随着时间的推移，质量工程（QE）这一术语逐渐流行，标志着行业的转变。组织开始认识到，交付高质量软件不仅仅依赖于工具，而是关于创建一种渗透到所有工程团队中的质量文化。&lt;/p>
&lt;p>在这个过程中，作为测试工程师，我们的角色变得越来越重要。我们不仅仅是寻找缺陷的工具，更是推动整个团队关注质量的关键人物。&lt;/p>
&lt;h3 id="质量文化的建设">质量文化的建设
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>培养质量意识&lt;/strong>：团队成员需要意识到每一个人都是质量的守护者。无论是开发人员、测试人员还是产品经理，大家都要对产品的质量负责。在团队会议中，讨论质量指标，分享成功案例和失败教训，推动质量意识的提升。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>强化协作&lt;/strong>：跨职能团队能够更好地理解质量的各个方面。通过定期的跨部门交流会议，团队可以分享各自的观点和经验，增强对质量的共同理解。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持续学习与改进&lt;/strong>：质量文化强调持续学习。团队应定期回顾项目，识别可以改进的地方，并制定相应的行动计划。通过进行“后期分析”（Postmortem）会议，团队可以总结经验教训，确保在未来的项目中避免同样的问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="如何在团队中推动质量">如何在团队中推动质量？
&lt;/h2>&lt;p>作为测试工程师，我们不仅是在执行测试，更是在推动质量文化的建立。以下是一些可行的策略：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>引导需求讨论&lt;/strong>：在项目初期，与产品经理和利益相关者一起参与需求讨论，确保大家对质量的期望有一致的理解，通过引导讨论找到潜在的风险。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>实施测试驱动开发（TDD）&lt;/strong>：鼓励团队在开发新功能时先编写测试用例，确保每个功能都有相应的测试覆盖，从而提高代码质量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自动化测试&lt;/strong>：通过持续集成和自动化测试，确保每次代码提交后都能快速验证软件的质量，减少人为错误，提高发布频率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>反馈循环&lt;/strong>：建立快速有效的反馈机制，让开发团队及时了解测试结果和用户反馈，从而快速响应问题，持续改进软件质量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>培训与知识分享&lt;/strong>：定期组织培训和知识分享会，帮助团队成员提升测试技能和质量意识，分享行业最佳实践和新工具的使用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>高质量软件的交付是一个复杂而动态的过程，而不仅仅是通过测试来实现。作为测试工程师，我们需要超越传统的测试角色，积极推动质量文化的建设，理解利益相关者的期望，实施有效的沟通与协作。只有这样，才能在软件开发的每一个环节中，确保我们交付出真正高质量的软件。&lt;/p>
&lt;p>在这个时代，质量工程（QE）的兴起为我们提供了一个新的视角，让我们可以更全面地看待软件的质量。通过持续改进和团队协作，我们不仅能够满足客户的需求，还能超越他们的期望。希望本文能为测试工程师提供一些启发，让我们在实践中不断提升软件质量，最终实现更高的客户满意度和商业成功。&lt;/p>
&lt;hr>
&lt;p>&lt;a class="link" href="https://applitools.com/blog/how-ai-can-augment-manual-testing/" target="_blank" rel="noopener"
>https://applitools.com/blog/how-ai-can-augment-manual-testing/&lt;/a>&lt;/p>
&lt;h1 id="人工智能如何增强手动测试未来软件测试的新视角">人工智能如何增强手动测试：未来软件测试的新视角
&lt;/h1>&lt;p>在软件开发的世界里，手动测试一直是不可或缺的一部分。然而，随着应用程序复杂性的增加，传统的手动测试方法面临着效率和速度的挑战。这时，人工智能（AI）的出现为手动测试提供了创新的解决方案，帮助测试人员提升工作效率，减轻重复性劳动的负担。&lt;/p>
&lt;p>人工智能并不是要取代手动测试人员，而是作为一种助力，增强他们的能力，提高测试的准确性并减少重复工作。AI无法像人类一样感知应用程序的外观和感觉，但它可以通过多种方式来支持手动测试的过程。本文将深入探讨人工智能如何增强手动测试，使测试过程变得更加智能、高效和有效。&lt;/p>
&lt;h2 id="手动测试的角色">手动测试的角色
&lt;/h2>&lt;p>手动测试是指测试人员在没有自动化工具的情况下执行测试用例。这种方法在以下几个方面至关重要：&lt;/p>
&lt;h3 id="1-可用性测试">1. 可用性测试
&lt;/h3>&lt;p>可用性测试旨在确保用户体验的流畅性。测试人员通过观察用户与应用程序的互动，识别出潜在的可用性问题。这种人性化的评估是自动化测试无法完全替代的。&lt;/p>
&lt;h3 id="2-探索性测试">2. 探索性测试
&lt;/h3>&lt;p>探索性测试允许测试人员在没有固定脚本的情况下，自由探索应用程序，从而识别边缘案例和不可预测的场景。这种灵活性使得测试人员能够发现自动化脚本可能遗漏的缺陷。&lt;/p>
&lt;h3 id="3-临时测试">3. 临时测试
&lt;/h3>&lt;p>这种测试方法用于发现自动化脚本可能错过的缺陷。测试人员可以根据直觉和经验迅速定位问题，及时反馈给开发团队。&lt;/p>
&lt;h3 id="4-可访问性测试">4. 可访问性测试
&lt;/h3>&lt;p>可访问性测试评估应用程序如何满足不同用户的需求。测试人员使用多种设备和辅助工具，确保所有用户都能顺畅使用应用程序。&lt;/p>
&lt;p>尽管手动测试在许多方面是不可或缺的，但它也面临一些挑战。手动测试常常耗时且重复，容易出错，尤其是在极端情况下可能会出现缺陷漏检。此外，随着新技术的不断涌现，手动测试的可扩展性变得越来越困难。这正是人工智能可以发挥作用的地方。&lt;/p>
&lt;h2 id="人工智能如何增强手动测试">人工智能如何增强手动测试
&lt;/h2>&lt;h3 id="1-测试用例生成与优化">1. 测试用例生成与优化
&lt;/h3>&lt;p>手动创建测试用例通常是劳动密集型且低效的。AI驱动的工具可以：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分析历史缺陷数据&lt;/strong>，建议最佳测试场景。&lt;/li>
&lt;li>&lt;strong>根据应用程序的变化动态生成测试用例&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>优化测试覆盖率&lt;/strong>，识别冗余的测试用例。&lt;/li>
&lt;/ul>
&lt;p>通过减少手动生成测试用例的时间，测试人员可以将更多精力投入到更具战略性的任务中。&lt;/p>
&lt;h3 id="2-智能缺陷检测">2. 智能缺陷检测
&lt;/h3>&lt;p>人工智能可以通过以下方式提高缺陷识别的效率：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分析日志、用户界面和用户行为&lt;/strong>，检测异常情况。&lt;/li>
&lt;li>&lt;strong>提前识别潜在失败点&lt;/strong>，降低风险。&lt;/li>
&lt;li>&lt;strong>自动分类缺陷&lt;/strong>，优先处理关键缺陷。&lt;/li>
&lt;/ul>
&lt;p>例如，当应用程序崩溃时，AI可以分析崩溃日志，帮助测试人员快速定位问题，节省大量的排查时间。&lt;/p>
&lt;h3 id="3-自动化测试执行建议">3. 自动化测试执行建议
&lt;/h3>&lt;p>AI能够辅助手动测试人员：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>根据失败概率推荐测试用例&lt;/strong>，提高测试效率。&lt;/li>
&lt;li>&lt;strong>识别高风险区域&lt;/strong>，确保重点测试。&lt;/li>
&lt;li>&lt;strong>基于真实用户活动提出探索性测试路径&lt;/strong>，提升测试覆盖率。&lt;/li>
&lt;/ul>
&lt;p>这种智能化的建议使得测试人员能够更有效地分配时间和资源，集中在最重要的测试上。&lt;/p>
&lt;h3 id="4-自愈测试脚本">4. 自愈测试脚本
&lt;/h3>&lt;p>自动化测试中最大的痛点之一是脚本维护。AI驱动的自动化工具可以：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>在用户界面或功能变更时自动修改测试脚本&lt;/strong>，减少维护负担。&lt;/li>
&lt;li>&lt;strong>通过对轻微变化的调优，降低假阳性率&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>从先前的运行中学习，优化脚本&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>这种自愈能力大大减少了测试人员的工作量，使他们能够专注于其他重要的任务。&lt;/p>
&lt;h3 id="5-增强的探索性测试">5. 增强的探索性测试
&lt;/h3>&lt;p>虽然AI无法替代测试人员，但它可以增强测试人员的能力。在探索性测试中，AI可以通过以下方式提供支持：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>根据应用程序行为提供测试建议和提示&lt;/strong>，帮助测试人员更好地理解应用。&lt;/li>
&lt;li>&lt;strong>构建真实的使用场景&lt;/strong>，扩大测试覆盖面。&lt;/li>
&lt;li>&lt;strong>根据历史趋势识别可能的薄弱区域&lt;/strong>，指导测试人员关注重点。&lt;/li>
&lt;/ul>
&lt;p>这种支持使得测试人员在探索性测试中能够更加高效地发现问题。&lt;/p>
&lt;h3 id="6-更智能的测试数据管理">6. 更智能的测试数据管理
&lt;/h3>&lt;p>人工智能可以优化测试数据的创建：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>根据应用需求综合生成测试数据&lt;/strong>，提高数据的相关性。&lt;/li>
&lt;li>&lt;strong>识别缺失的测试数据场景&lt;/strong>，确保覆盖全面。&lt;/li>
&lt;li>&lt;strong>为安全和合规目的遮蔽敏感数据&lt;/strong>，保护用户隐私。&lt;/li>
&lt;/ul>
&lt;p>通过自动化测试数据的生成和管理，测试人员可以大幅提高工作效率。&lt;/p>
&lt;h3 id="7-视觉和ui测试">7. 视觉和UI测试
&lt;/h3>&lt;p>在多个设备上确保用户体验一致性是一项挑战。基于AI的视觉测试工具可以：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>识别不同屏幕尺寸上的UI异常和布局变化&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>检测颜色对比问题，以符合可访问性标准&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>与新版本进行基线截图比较，突出差异&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>这种视觉测试的自动化可以显著提高UI的质量，确保最终用户获得一致的体验。&lt;/p>
&lt;h3 id="8-风险基础测试的预测分析">8. 风险基础测试的预测分析
&lt;/h3>&lt;p>AI可以帮助团队专注于高风险区域：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分析以往测试运行数据，预测可能的失败点&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>根据缺陷趋势推荐测试优先级&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>通过优化风险覆盖率，去除冗余测试&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>这样的智能分析使得测试人员能够将精力集中在最重要的测试上，提高测试的有效性和效率。&lt;/p>
&lt;h3 id="9-聊天机器人在测试执行和支持中的应用">9. 聊天机器人在测试执行和支持中的应用
&lt;/h3>&lt;p>AI驱动的聊天机器人可以：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>提供测试结果和缺陷模式的即时可见性&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>通过自然界面按需执行测试用例&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>协助作者构建和优化测试脚本&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>这种实时支持让测试人员能够更快地响应问题，提升工作效率。&lt;/p>
&lt;h2 id="ai增强测试的未来完美结合">AI增强测试的未来：完美结合
&lt;/h2>&lt;p>人工智能正在改变测试的方式，但人类测试人员仍然不可或缺。对于现代测试人员来说，适应新的趋势将是一项挑战，但这并不是前所未有的。正如过去我们对自动化的看法，直到实际体验到它的帮助，才意识到它的价值。&lt;/p>
&lt;p>未来的测试将依赖于以下几点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>人机协作&lt;/strong>：AI负责重复性任务，而测试人员则专注于关键思考和用户体验。&lt;/li>
&lt;li>&lt;strong>更具适应性的AI模型&lt;/strong>：AI将继续学习测试结果和用户行为，随着时间的推移不断改进。&lt;/li>
&lt;li>&lt;strong>基于AI的测试编排&lt;/strong>：将AI无缝集成进DevOps流程，实现持续测试和交付。&lt;/li>
&lt;/ol>
&lt;p>尽管AI增强了手动测试，通过自动化重复性任务、提高准确性和加快缺陷检测速度，但部分测试人员仍然对其持谨慎态度。&lt;/p>
&lt;p>然而，与其害怕AI，不如将其视为一个强有力的盟友。AI消除了繁琐的任务，提高了效率，使得测试人员能够专注于批判性思维和创造性问题解决。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>人工智能并不是在取代手动测试人员，而是在赋能他们。通过自动化重复性任务、优化测试执行、增强缺陷检测以及改善探索性测试，AI使测试人员能够专注于真正重要的事情：确保无缝的用户体验。&lt;/p>
&lt;p>随着AI的不断发展，拥抱AI驱动工具的测试人员将能够更快、更高效地交付高质量软件。关键在于找到人类专业知识与AI增强之间的平衡，确保软件测试智能、适应性强且有效。&lt;/p>
&lt;p>在这个快速变化的行业中，您准备好在测试工作流程中拥抱AI了吗？希望这篇文章能激励您探索AI在软件测试中的潜力，提升您的测试效率和软件质量。&lt;/p>
&lt;hr>
&lt;p>&lt;a class="link" href="https://dzone.com/articles/rebalancing-agile-bringing-people-back-into-focus" target="_blank" rel="noopener"
>https://dzone.com/articles/rebalancing-agile-bringing-people-back-into-focus&lt;/a>&lt;/p>
&lt;h1 id="敏捷方法论的重新审视">敏捷方法论的重新审视
&lt;/h1>&lt;p>敏捷方法论的引入旨在增强协作、促进持续改进，并推动软件和人员的成长。其初衷是创造一个不仅改善交付，还能赋能团队创新、学习和超越直接任务的框架。&lt;/p>
&lt;p>然而，在许多情况下，原本崇高的理念已逐渐演变为一个单纯关注交付的系统。团队越来越被限制在用户故事的复选框中，遵循僵化的流程，参与无休止的会议，几乎没有空间进行创造、自主或职业成长。&lt;/p>
&lt;h2 id="当前敏捷的现实从愿景到执行的转变">当前敏捷的现实：从愿景到执行的转变
&lt;/h2>&lt;p>如今的敏捷往往是项目驱动而非以人为本，尤其是在像Scrum这样的框架下。这种转变在几个方面表现得尤为明显：&lt;/p>
&lt;h3 id="清单心态">清单心态
&lt;/h3>&lt;p>工程师，尤其是QA专业人士，发现自己被限制在执行来自产品负责人（PO）或项目经理（PM）的预定义任务中。用户故事主导了工作，几乎没有空间让工程师质疑、创新或探索。&lt;/p>
&lt;h3 id="会议过载">会议过载
&lt;/h3>&lt;p>Scrum仪式以及跨职能团队的互动占据了大量时间，减少了进行深度工作或技能发展的时间。&lt;/p>
&lt;h3 id="权限有限">权限有限
&lt;/h3>&lt;p>需求往往来自架构师和管理者，而工程师则成为执行者，而非设计或战略的贡献者。&lt;/p>
&lt;h2 id="对qa专业人士的影响">对QA专业人士的影响
&lt;/h2>&lt;p>尽管敏捷最初承诺创造一个以协作和质量为核心的环境，但这一转变对QA专业人士的影响尤为明显。&lt;/p>
&lt;h3 id="角色受限">角色受限
&lt;/h3>&lt;p>QA常常被期望仅仅验证用户故事中的验收标准，这限制了探索性测试、风险评估和测试策略的改进。&lt;/p>
&lt;h3 id="速度优先于质量">速度优先于质量
&lt;/h3>&lt;p>在短期冲刺中的交付压力使得QA不得不优先考虑速度，而非深度，这可能会影响产品质量。&lt;/p>
&lt;h3 id="技能停滞">技能停滞
&lt;/h3>&lt;p>由于缺乏学习或创新的时间，QA专业人士发现自己很少有机会成长、提升技能或采用新工具和实践。&lt;/p>
&lt;p>QA仍然可以在敏捷中发挥更大的作用，通过贡献预防性测试、自动化策略和跨团队协作来提升产品质量，前提是能够在这些领域自由探索。&lt;/p>
&lt;h2 id="敏捷为何变得以交付为中心">敏捷为何变得以交付为中心？
&lt;/h2>&lt;p>这一转变的原因主要有以下几点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对敏捷的误解&lt;/strong>：许多组织将敏捷实施为一种清单驱动的过程，而非真正拥抱其适应性和协作的核心原则。&lt;/li>
&lt;li>&lt;strong>利益相关者压力&lt;/strong>：快速发布和达到截止日期的强调常常遮蔽了质量和团队幸福感的需求。&lt;/li>
&lt;li>&lt;strong>僵化框架&lt;/strong>：如Scrum这样的框架如果被教条式地遵循，可能变得官僚化，几乎没有创新或团队驱动的改进空间。&lt;/li>
&lt;/ul>
&lt;p>这些挑战并非敏捷或Scrum框架固有，而是源于外部压力驱动下的僵化、清单驱动的实施。&lt;/p>
&lt;h2 id="重新平衡敏捷变革的策略">重新平衡敏捷：变革的策略
&lt;/h2>&lt;p>为了恢复敏捷的原始意图，创造一个既能交付又能让人发展的环境，组织可以采取以下策略：&lt;/p>
&lt;h3 id="1-发展灵活的模型">1. 发展灵活的模型
&lt;/h3>&lt;p>从僵化的Scrum框架转向看板或混合模型，强调流程和持续交付，而非固定的冲刺周期。这种灵活性为团队提供了专注于质量、学习和持续改进的空间。&lt;/p>
&lt;h3 id="2-重温敏捷核心价值">2. 重温敏捷核心价值
&lt;/h3>&lt;p>敏捷应优先考虑：&lt;/p>
&lt;ul>
&lt;li>人员和互动高于过程和工具。&lt;/li>
&lt;li>可工作的软件高于全面的文档。&lt;/li>
&lt;/ul>
&lt;p>领导层应倡导这些原则，促进协作、创造力和对过程的拥有感，而非僵化的遵循。&lt;/p>
&lt;h3 id="3-促进自主性">3. 促进自主性
&lt;/h3>&lt;p>赋予团队拥有工作的权利，让他们决定如何实现结果。QA专业人士应有自由去创新、探索风险和提出改进建议。&lt;/p>
&lt;h3 id="4-衡量正确的指标">4. 衡量正确的指标
&lt;/h3>&lt;p>转变传统的速度和燃尽图等指标，关注以下方面：&lt;/p>
&lt;ul>
&lt;li>客户满意度&lt;/li>
&lt;li>质量改进&lt;/li>
&lt;li>团队参与感和士气&lt;/li>
&lt;/ul>
&lt;h3 id="5-创造成长空间">5. 创造成长空间
&lt;/h3>&lt;p>在冲刺中分配时间用于学习、技能发展和创新。鼓励团队进行实验，主动掌握自己的成长。&lt;/p>
&lt;h3 id="6-精简会议">6. 精简会议
&lt;/h3>&lt;p>评估每个会议的必要性。更少、更集中会议可以为深度工作和自我提升腾出时间。&lt;/p>
&lt;h3 id="7-持续改进超越回顾">7. 持续改进超越回顾
&lt;/h3>&lt;p>引入专注于技术债务、自动化改进或技能发展的改进冲刺。这些冲刺可以增强团队能力和产品质量。&lt;/p>
&lt;h3 id="8-领导层问责">8. 领导层问责
&lt;/h3>&lt;p>敏捷转型应当是自上而下与自下而上的结合。领导者需要营造一个重视个人成长的环境，持续倡导学习和改进的文化。&lt;/p>
&lt;h3 id="9-采用产品思维">9. 采用产品思维
&lt;/h3>&lt;p>从特性驱动的开发转向关注长期价值交付和持续产品改进。这种思维模式强调可持续增长，而非短期特性完成。&lt;/p>
&lt;h2 id="结论-1">结论
&lt;/h2>&lt;p>敏捷绝不仅仅是交付。它的设计初衷是赋予团队交付价值、持续成长以及改善产品和自身的能力。通过重温敏捷的核心原则，培育学习、协作和自主的文化，组织能够重新对齐其原始意图。&lt;/p>
&lt;p>将焦点重新放回到人身上，敏捷能够再次成为一个激励、赋能并实现真正增长的框架——不仅是为了产品，也为了构建这些产品的专业人士。&lt;/p></description></item><item><title/><link>https://chengxiaqiucao.github.io/private/%E6%96%87%E7%AB%A0%E6%B8%85%E5%8D%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/private/%E6%96%87%E7%AB%A0%E6%B8%85%E5%8D%95/</guid><description>&lt;h2 id="草稿">草稿
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">TABLE title as &amp;#34;标题&amp;#34;, date as &amp;#34;创建日期&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from &amp;#34;post&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">where draft = true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="已发布">已发布
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">TABLE title as &amp;#34;标题&amp;#34;, date as &amp;#34;创建日期&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from &amp;#34;post&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">where draft != true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sort date desc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>
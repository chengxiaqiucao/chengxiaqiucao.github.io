<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI测试 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/tags/ai%E6%B5%8B%E8%AF%95/</link><description>Recent content in AI测试 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Sun, 01 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/tags/ai%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>AI自动化工具Mid scene.js评测</title><link>https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521.png" alt="Featured image of post AI自动化工具Mid scene.js评测" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>AI已经越来越深入地走入我们的实际工作，在软件测试领域，和AI相关的新测试工具、方法也层出不穷。在之前我们介绍过结合 mcp server 实现 AI 驱动测试的案例，本文我们将介绍一个近期崭露头角的国产AI测试工具 &lt;code>Midscene.js&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521.png"
width="508"
height="482"
srcset="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521_hu_8c2283c0ca764a99.png 480w, https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521_hu_c98e8bf2be242eda.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;h2 id="midscenejs简介">Midscene.js简介
&lt;/h2>&lt;p>&lt;code>MidScene.js&lt;/code> 是由字节跳动 web-infra 团队推出的一个开源 ai 自动化测试工具，基于多模态大模型，通过针对页面的智能视觉解析来理解我们的自然语言指令，并进一步完成自动化操作。可以显著降低编写自动化测试脚本的复杂性，并更好适应页面结构和元素的变化，使自动化测试脚本的稳定性也有较大提升。&lt;/p>
&lt;p>官网地址： &lt;a class="link" href="https://midscenejs.com/" target="_blank" rel="noopener"
>https://midscenejs.com/&lt;/a>&lt;/p>
&lt;h2 id="midscene工作原理">Midscene工作原理
&lt;/h2>&lt;p>和之前我们介绍 mcp server 时，利用通用大模型来理解页面并调用本地工具能力进行扩展不同，Midscene使用多模态大模型如 &lt;code>ChatGPT-4o&lt;/code>，&lt;code>qwen-vl&lt;/code>, 字节的 &lt;code>UI-TARS&lt;/code>等，也就是能支持视觉输入的大模型来理解页面，更接近我们进行实际功能测试的场景。&lt;/p>
&lt;p>MidScene会首先获取页面当前截图和具体的页面结构信息，再和用户指令一起提交给大模型，由大模型判断出需要操作的页面控件位置，并进行下一步动作。&lt;/p>
&lt;p>以在待办页面任务框中输入 “今天学习Playwright”为例：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521-3.png"
width="1920"
height="673"
srcset="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521-3_hu_19ae45ca69a8c700.png 480w, https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521-3_hu_e22ffafc27de64a6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="684px"
>&lt;/p>
&lt;p>MidScene的内部操作大致如下：&lt;/p>
&lt;ol>
&lt;li>获取用户指令 “在任务框输入 学习Playwright，按回车键”&lt;/li>
&lt;li>MidScene截图，获取页面整体元素结构&lt;/li>
&lt;li>提交大模型完成页面特征提取&lt;/li>
&lt;li>获取大模型分析结果，确定下一步操作类型(Tap)和控件的具体位置(坐标)&lt;/li>
&lt;li>规划下一步操作&lt;/li>
&lt;li>完成执行&lt;/li>
&lt;/ol>
&lt;h2 id="大模型的选择">大模型的选择
&lt;/h2>&lt;p>从以上Midscene的原理分析，MidScene 主要依赖多模态大模型的如下能力&lt;/p>
&lt;ol>
&lt;li>理解截图和 &lt;em>规划&lt;/em> 操作步骤的能力。&lt;/li>
&lt;li>给出指定元素的坐标信息（Visual Grounding）的能力。&lt;/li>
&lt;/ol>
&lt;p>支持以上能力的大模型，目前官网提供的支持包括如下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>OPENAI GPT-4o&lt;/strong>&lt;/li>
&lt;li>&lt;strong>阿里 Qwen-2.5-VL&lt;/strong>&lt;/li>
&lt;li>&lt;strong>字节 UI-TARS&lt;/strong>&lt;/li>
&lt;li>&lt;strong>字节火山引擎 Doubao-1.5-thinking-vision-pro&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Google Gemini-2.5-Pro&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>从工作原理上，需要提供给大模型包括截图和页面结构等信息，对大模型的Token消耗还是比较可观。从官方的评估，每个操作通常都要至少数千Token的消耗。而其中性价比较好的大模型，官方推荐的QWen-VL。&lt;/p>
&lt;h2 id="chrome插件方式使用">Chrome插件方式使用
&lt;/h2>&lt;p>零代码的Chrome插件方式，可以帮助我们快速理解MidScene的应用。&lt;/p>
&lt;p>通过Chrome的插件商店可以直接安装 &lt;a class="link" href="https://chromewebstore.google.com/detail/midscenejs/gbldofcpkknbggpkmbdaefngejllnief" target="_blank" rel="noopener"
>Midscene插件&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521-2.png"
width="1755"
height="547"
srcset="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521-2_hu_42f4fce6b95b35ab.png 480w, https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250521-2_hu_b3474ce1983fd3ed.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="320"
data-flex-basis="770px"
>&lt;/p>
&lt;h3 id="配置大模型">配置大模型
&lt;/h3>&lt;p>启用插件后，需要配置使用的大模型。这里我们使用对token消耗比较少的阿里千问多模态模型&lt;code>qwen-vl-max-latest&lt;/code>, 通过阿里云百炼平台申请对应的API Key即可，现在申请还赠送100W Token额度。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520-2.png"
width="1199"
height="217"
srcset="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520-2_hu_89f4c27c45807341.png 480w, https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520-2_hu_d9e504c150c9fb67.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="552"
data-flex-basis="1326px"
>&lt;/p>
&lt;p>完成申请后，在插件的模型配置界面中配置对应的大模型参数，qwen模型需要配置以下四个参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">OPENAI_BASE_URL=&amp;#34;https://dashscope.aliyuncs.com/compatible-mode/v1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OPENAI_API_KEY=&amp;#34;sk- your API KEY&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MIDSCENE_MODEL_NAME=&amp;#34;qwen-vl-max-latest&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MIDSCENE_USE_QWEN_VL=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="操作浏览器">操作浏览器
&lt;/h3>&lt;p>接下来就可以在插件界面中体验Midscene对浏览器的操控了，这里主要支持四种行为：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Action&lt;/strong>：对应AI自动规划操作，Midscene会自动规划操作步骤并执行。更智能，但速度较慢，效果依赖大模型的质量。&lt;/li>
&lt;li>&lt;strong>Query&lt;/strong>：直接从 UI 提取数据，并借助多模态 AI 的推理能力，实现智能提取&lt;/li>
&lt;li>&lt;strong>Assert&lt;/strong>：通过自然语言描述一个断言条件，让 AI 判断该条件是否为真&lt;/li>
&lt;li>&lt;strong>Tap&lt;/strong>：对应页面点击的即时操作，Midscene会直接执行，大模型只负责底层如元素定位等任务。效率更高，适合已确定要执行的操作时使用&lt;/li>
&lt;/ul>
&lt;p>我们可以用接近自然语言的AI提示词输入提示词指令，针对不同的行为模式，插件会驱动浏览器完成不同的操作，并反馈操作结果。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520.png"
width="1910"
height="899"
srcset="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520_hu_82f5a3b5c2a2fe48.png 480w, https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520_hu_b94695f1053d5140.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;p>具体执行过程也可参见下方视频演示。&lt;/p>
&lt;h2 id="脚本集成">脚本集成
&lt;/h2>&lt;p>除了通过浏览器插件调用Midscene，更推荐的方法是通过测试框架的脚本集成Midscene能力。&lt;/p>
&lt;p>通过脚本集成，同样需要配置相关模型调用参数，和插件中配置的相关变量值一样，只是需要将相关变量配置为&lt;strong>系统环境变量&lt;/strong>&lt;/p>
&lt;p>因为 Midscene 是基于JS的工具，这里的和测试框架集成，也是需要支持JS。这里以 Playwright 为例&lt;/p>
&lt;h3 id="安装">安装
&lt;/h3>&lt;p>首先自然需要具备 Playwright 框架，进入项目目录，初始化并安装Playwright，然后安装Midscene&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">npm&lt;/span> &lt;span class="n">init&lt;/span> &lt;span class="n">playwright&lt;/span>&lt;span class="nv">@latest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">npm&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="nv">@midscene&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">web&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-save-dev&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="playwright框架配置">playwright框架配置
&lt;/h3>&lt;p>在 &lt;code>playwright.config.ts&lt;/code> 文件中配置框架本身的测试发现目录和测试脚本，加载环境变量以及浏览器类型，执行策略等基础配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">defineConfig&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">devices&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@playwright/test&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">dotenv&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;dotenv&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* 通过dotenv从.env文件中加载环境变量 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">dotenv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">defineConfig&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">testDir&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;./e2e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">testMatch&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;**/*.spec.ts&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">timeout&lt;/span>: &lt;span class="kt">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Run tests in files in parallel */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">fullyParallel&lt;/span>: &lt;span class="kt">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Fail the build on CI if you accidentally left test.only in the source code. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">forbidOnly&lt;/span>: &lt;span class="kt">Boolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CI&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Retry on CI only */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">retries&lt;/span>: &lt;span class="kt">process.env.CI&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">2&lt;/span> : &lt;span class="kt">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Opt out of parallel tests on CI. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">workers&lt;/span>: &lt;span class="kt">process.env.CI&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">1&lt;/span> : &lt;span class="kt">undefined&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Reporter to use. See https://playwright.dev/docs/test-reporters */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">reporter&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="s2">&amp;#34;line&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;@midscene/web/playwright-report&amp;#34;&lt;/span>&lt;span class="p">]],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">use&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="cm">/* Base URL to use in actions like `await page.goto(&amp;#39;/&amp;#39;)`. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="c1">// baseURL: &amp;#39;http://127.0.0.1:3000&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="cm">/* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">trace&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;on-first-retry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="cm">/* Configure projects for major browsers */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">projects&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;chromium&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="nx">use&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">devices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Desktop Chrome&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="测试脚本">测试脚本
&lt;/h3>&lt;p>通过单独的fixture脚本引入Midscene库&lt;/p>
&lt;p>fixture.ts&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">test&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">base&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;@playwright/test&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="kr">type&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">PlayWrightAiFixtureType&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;@midscene/web/playwright&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">PlaywrightAiFixture&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;@midscene/web/playwright&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">base&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">extend&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">PlayWrightAiFixtureType&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">PlaywrightAiFixture&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">waitForNetworkIdleTimeout&lt;/span>: &lt;span class="kt">10000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 可选, 交互过程中等待网络空闲的超时时间, 默认值为 2000ms, 设置为 0 则禁用超时
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编写脚本测试 &lt;code>https://todomvc.com/&lt;/code> 待办清单示例项目，通过 &lt;code>.ai&lt;/code>、&lt;code>.aiTap&lt;/code>、 &lt;code>.aiQuery&lt;/code>、&lt;code>.aiAssert&lt;/code>等API方法，对应前面说到的四种典型操作。&lt;/p>
&lt;p>todo_spec.ts&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">expect&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@playwright/test&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">test&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;./fixture&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">beforeEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://todomvc.com/examples/react/dist/&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ai todo - Chinese Prompt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">ai&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">aiQuery&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">aiAssert&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">aiTap&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="c1">// .ai - 通用 AI 操作方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">ai&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;在任务框 input 输入 今天学习 Playwright，按回车键&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">ai&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;在任务框 input 输入 明天学习 js脚本，按回车键&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">ai&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;在任务框 input 输入 后天学习 AI测试，按回车键&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">ai&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;将鼠标移动到任务列表中的第二项&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">aiTap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;第二项任务右边的删除按钮&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="c1">// .aiTap - 指定操作类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">aiTap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;第二条任务左边的勾选按钮&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">aiTap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;任务列表下面的 completed 状态按钮&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// .aiQuery - 页面信息提取操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>  &lt;span class="kr">const&lt;/span> &lt;span class="nx">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">aiQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;string[], 完整的任务列表&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// .aiAssert - 断言操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">await&lt;/span> &lt;span class="nx">aiAssert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;列表下方有一个区域显示有 &amp;#34;1 item left&amp;#34;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">npx&lt;/span> &lt;span class="n">playwright&lt;/span> &lt;span class="n">test&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-headed&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行过程可以参见我录制的视频&lt;/p>
&lt;p>【】&lt;/p>
&lt;h3 id="可视化结果报告">可视化结果报告
&lt;/h3>&lt;p>报告是Midscene的一大亮点，通过这个报告可以回看整个执行过程，并详细显示AI的空间判断过程和具体操作细节，便于调试和优化脚本。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520-1.png"
width="1920"
height="899"
srcset="https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520-1_hu_8c25d4e74876b37c.png 480w, https://chengxiaqiucao.github.io/post/099-midscene.js%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250520-1_hu_f9ca92c1327f521.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;h2 id="yaml文件驱动">YAML文件驱动
&lt;/h2>&lt;p>除了通过测试框架脚本的集成方法，Midscene也支持直接通过YAML文件编写测试脚本，实现无代码的脚本驱动，类似于传统自动化的关键字驱动方式。&lt;/p>
&lt;p>这种方式，本质上其实还是将对应关键转化为 Midscene 支持的相关API来进行驱动。&lt;/p>
&lt;p>类似如下的格式， 操作天气网站：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-YAML" data-lang="YAML">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">web&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.bing.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">搜索天气&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">flow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">ai&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">搜索 &amp;#34;今日天气&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">sleep&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">检查结果&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">flow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">aiAssert&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">结果中展示了天气信息&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行yaml格式脚本，需要安装Midscene的命令行支持&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">npm&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="nv">@midscene&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">cli &lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="n">-save-dev&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 执行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">npx&lt;/span> &lt;span class="n">midscene&lt;/span> &lt;span class="p">./&lt;/span>&lt;span class="n">weather&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">yaml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="mcp方式">MCP方式
&lt;/h2>&lt;p>除了上述方式之外，Midscene也提供了作为本地MCP server方式。这种方式，其实是将MidScene的Chrome插件作为本地能力封装到MCP中，再通过大模型结合mcp server的方式完成浏览器驱动。&lt;/p>
&lt;p>关于 mcp server的介绍和使用，可以参考我之前的相关文章 【】&lt;/p>
&lt;p>mcp server 配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcp-midscene&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;npx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;-y&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;@midscene/mcp&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;env&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MIDSCENE_MODEL_NAME&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;REPLACE_WITH_YOUR_MODEL_NAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;OPENAI_API_KEY&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;REPLACE_WITH_YOUR_OPENAI_API_KEY&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;MCP_SERVER_REQUEST_TIMEOUT&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;800000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="当前版本的局限">当前版本的局限
&lt;/h2>&lt;p>虽然Midsence工具已经展现出不俗的潜力，目前也还在持续更新和迭代中，但在实用上还是具有不少缺陷，主要表现在：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>交互类型有限&lt;/strong>：目前仅支持点击、拖拽(只在 UI-TARS 模型中支持)、输入、键盘和滚动操作。&lt;/li>
&lt;li>&lt;strong>稳定性风险&lt;/strong>：AI 模型的返回值不能保证 100% 准确。对提示词的编写要求较高&lt;/li>
&lt;li>&lt;strong>元素识别能力&lt;/strong>：部分大模型在元素识别上的能力不太好，比如iframe、canvas等元素的交互。而且对于Chrome的原生控件如弹出提示、右键菜单等还不能支持。&lt;/li>
&lt;li>&lt;strong>成本较高&lt;/strong>：基于视觉识别方式，对Token的消耗比较可观，如果使用付费大模型，成本比较高昂。&lt;/li>
&lt;/ul>
&lt;p>但瑕不掩瑜，Midscene在UI自动化测试借助AI能力的提升上，已经迈出了坚实的一步！后续我们还会持续关注其进一步发展！&lt;/p>
&lt;hr>
&lt;h3 id="参考阅读">参考阅读：
&lt;/h3>&lt;p>【】
【】&lt;/p>
&lt;p>进群，大纲&lt;/p></description></item><item><title>微软重磅发布Magentic UI，交互式AI Agent助手实测！</title><link>https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/</link><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/magentic_logo.png" alt="Featured image of post 微软重磅发布Magentic UI，交互式AI Agent助手实测！" />&lt;h2 id="何为magentic-ui">何为Magentic UI？
&lt;/h2>&lt;p>&lt;code>Magentic UI&lt;/code> 是微软于5.19重磅发布的开源Agent助手，并于24日刚更新了第二个版本0.04版&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526.png"
width="437"
height="121"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526_hu_998ab8bc0c64b884.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526_hu_7362028b6e24293.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="361"
data-flex-basis="866px"
>&lt;/p>
&lt;p>从官方的介绍来看，目标是打造一款 &lt;strong>以人为中心&lt;/strong> 的智能助手，其底层由多个不同的智能体系统驱动，能够实现网页浏览与操作、代码生成与执行、文件生成与分析等功能。&lt;/p>
&lt;p>它区别于其他一些AI浏览器工具的主要区别在于其 &lt;strong>透明可控的交互界面&lt;/strong>，支持高效的人机协同参与。该系统基于微软的Agent构建框架 AutoGen 构建，目前还处在原型研究阶段。&lt;/p>
&lt;p>核心功能包括：&lt;/p>
&lt;p>🧑‍🤝‍🧑 &lt;strong>协同规划&lt;/strong>：用户和AI通过聊天和计划编辑器协作创建并修订分步执行计划。&lt;br>
🤝 &lt;strong>协同任务&lt;/strong>：用户可直接通过网页浏览器或聊天界面实时介入并指导任务执行。Magentic-UI 能在需要时主动确认或要求协助。&lt;br>
🛡️ &lt;strong>操作防护&lt;/strong>：敏感操作需经用户明确批准后方可执行。&lt;br>
🧠 &lt;strong>计划学习与检索&lt;/strong>：从过往任务中学习经验以优化未来自动化流程，并将优秀方案保存至计划库。在后续任务中可自动或手动调用已存储的计划。&lt;br>
🔀 &lt;strong>并行任务执行&lt;/strong>：支持多任务并行运行，会话状态指示器会实时提示 Magentic-UI 何时需要您的输入或任务已完成。&lt;/p>
&lt;h2 id="设计架构">设计架构
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-1.png"
width="1723"
height="1307"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-1_hu_427424952f587218.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-1_hu_5cfb5d6930358133.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>&lt;strong>Magentic-UI&lt;/strong> 的底层系统是由一组从 AutoGen 的 &lt;strong>Magentic-One&lt;/strong> 系统（如上图所示）改造而来的专业化 Agent 组构成，各Agent通过模块化协作实现不同功能：&lt;/p>
&lt;h3 id="agent功能说明">Agent功能说明
&lt;/h3>&lt;h4 id="总控代理orchestrator">&lt;strong>总控代理（Orchestrator）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：基于大语言模型（LLM）的主控智能体，负责与用户协同制定计划、决策何时请求用户反馈，并向其他智能体分配子任务。&lt;/li>
&lt;li>&lt;strong>协作流程&lt;/strong>：
&lt;ol>
&lt;li>与用户共同制定分步执行计划；&lt;/li>
&lt;li>动态判断需用户介入的节点；&lt;/li>
&lt;li>将子任务分派至其他智能体执行。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="网页浏览代理websurfer">&lt;strong>网页浏览代理（WebSurfer）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：配备网页浏览器的 LLM 智能体，支持多轮次网页交互操作。&lt;/li>
&lt;li>&lt;strong>核心能力&lt;/strong>：
&lt;ul>
&lt;li>根据总控代理的指令，执行点击、输入、滚动、页面跳转等操作；&lt;/li>
&lt;li>&lt;strong>超越 AutoGen 多模态网页浏览器&lt;/strong>：新增标签管理、选项选择、文件上传及多模态查询支持。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="代码执行代理coder">&lt;strong>代码执行代理（Coder）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：配备 Docker 代码执行容器的 LLM 智能体。&lt;/li>
&lt;li>&lt;strong>核心能力&lt;/strong>：
&lt;ul>
&lt;li>编写并执行 Python 和 Shell 命令；&lt;/li>
&lt;li>将执行结果反馈至总控代理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="文件处理代理filesurfer">**文件处理代理（FileSurfer）
&lt;/h4>&lt;p>**&lt;/p>
&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：集成 Docker 容器与 MarkItDown 包文件转换工具的 LLM 智能体。&lt;/li>
&lt;li>&lt;strong>核心能力&lt;/strong>：
&lt;ul>
&lt;li>定位 Magentic-UI 控制目录下的文件；&lt;/li>
&lt;li>将文件转换为 Markdown 格式并支持内容问答。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="用户代理userproxy">&lt;strong>用户代理（UserProxy）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：代表用户与系统交互的代理角色。&lt;/li>
&lt;li>&lt;strong>协作模式&lt;/strong>：总控代理可将任务直接委派给用户（而非其他智能体）完成。&lt;/li>
&lt;/ul>
&lt;h3 id="用户交互流程">用户交互流程
&lt;/h3>&lt;p>用户利用 Magentic UI 的交互流程可以用下图表示：
&lt;a class="link" href="https://mermaid.live/edit#pako:eNplVFtPGlEQ_ivkPKOyiCKYtGm9VFut9zbpwgPKqiSVNSsk2g2JNl5AUaCo0YgXLF7SVNCmliqif4Zzdvdf9OyZZcW6Tztzvm_mmzkzR0Zjol9AbjQh-aYnLcPtnqCFfq94ZfOcRIs4kVKvi2qhSK6-ei11dS8sr3n1Po2XTsj2Csn8bNB2F_HqEd67V2Ir3lYgv2bANrnXNyEEQ4GxupFui7J5SKJJHF0mFydqPouj3yIGuo2ijWMdsXrI2O2GAPVhjyYDhnK3rd6nlK24tn_sfc7GuSv19wnk5niSSCq5WwiirayT7UvQbRI5KIea4GiHSDoeEkFShuqQwUXS65Vypqq8Q2eQYok2oAFHj7TdXEPlIU82b2iN2o8c1FGLVbJ5NZ_D-ThVy047eTJfIhtnldJ3JbmML3bw13NI6zV1dTLkGx4nC3jVOCWxMzUbx3dbJL1RLegNw3XJJB7Tsrf4NgEg0BIxw3UxWLeMy2kcW4dT5aqED9ZeVuuaCY_CNOClYqWcBgxEA4D--QOSMBYKiEFLz-Cjt1sv86MwOhSWxgWJpXrLA1Upp7TsNXSwqtmktNEhBPg73rjNmz_A03tztPCM0Rn4LNRk6eFxbpH2kI5lpfTnGXpkRpD6JXF2joF7n0wHia3Rxj4VJgT91Ya9ZZT3stGGnQJOnsKgwkWabXsHQMPqeWL1mhbY79no7BSYu08msXmSiUEGvL-Ci7_-i83wNDHD9_Nq_hKXt7TNXbVQwBuHeO_ocV76GWZABqVaZl49XTAW4GyRzo4Zc6BWwyAPS25sXf4vThRqWdXGDIKQOFlMwKbV-snaN6W0z_xDvFKKkotjcr2gnK95a1NWyxgyJffVKhk2BoBk5mkIpZQmB-a19NXyu0z-MLNH6IqkjGcrFVU2Lp9yRxjoA6979w-9rchK37yAH7lDUliwoilBmvLpJpJ1vAeFJoUpwYPc9HdclISZkAd5ghHKmvYFP4niVJUoieGJSeQe932eoVZ42u8LCe0BH92gRwgdJ0FqE8PBEHJzLhYCuWU0i9yNLU31dpvLaWtq4Zycw95kRXPI7eDqHZzdaXM4XdTlbOQiVvSF5bTVu2wue6O92c412m0tDluzFQn-QEiUeuEdZ8955B-N54jD" target="_blank" rel="noopener"
>&lt;img src="https://mermaid.ink/img/pako:eNplVFtPGlEQ_ivkPKOyiCKYtGm9VFut9zbpwgPKqiSVNSsk2g2JNl5AUaCo0YgXLF7SVNCmliqif4Zzdvdf9OyZZcW6Tztzvm_mmzkzR0Zjol9AbjQh-aYnLcPtnqCFfq94ZfOcRIs4kVKvi2qhSK6-ei11dS8sr3n1Po2XTsj2Csn8bNB2F_HqEd67V2Ir3lYgv2bANrnXNyEEQ4GxupFui7J5SKJJHF0mFydqPouj3yIGuo2ijWMdsXrI2O2GAPVhjyYDhnK3rd6nlK24tn_sfc7GuSv19wnk5niSSCq5WwiirayT7UvQbRI5KIea4GiHSDoeEkFShuqQwUXS65Vypqq8Q2eQYok2oAFHj7TdXEPlIU82b2iN2o8c1FGLVbJ5NZ_D-ThVy047eTJfIhtnldJ3JbmML3bw13NI6zV1dTLkGx4nC3jVOCWxMzUbx3dbJL1RLegNw3XJJB7Tsrf4NgEg0BIxw3UxWLeMy2kcW4dT5aqED9ZeVuuaCY_CNOClYqWcBgxEA4D--QOSMBYKiEFLz-Cjt1sv86MwOhSWxgWJpXrLA1Upp7TsNXSwqtmktNEhBPg73rjNmz_A03tztPCM0Rn4LNRk6eFxbpH2kI5lpfTnGXpkRpD6JXF2joF7n0wHia3Rxj4VJgT91Ya9ZZT3stGGnQJOnsKgwkWabXsHQMPqeWL1mhbY79no7BSYu08msXmSiUEGvL-Ci7_-i83wNDHD9_Nq_hKXt7TNXbVQwBuHeO_ocV76GWZABqVaZl49XTAW4GyRzo4Zc6BWwyAPS25sXf4vThRqWdXGDIKQOFlMwKbV-snaN6W0z_xDvFKKkotjcr2gnK95a1NWyxgyJffVKhk2BoBk5mkIpZQmB-a19NXyu0z-MLNH6IqkjGcrFVU2Lp9yRxjoA6979w-9rchK37yAH7lDUliwoilBmvLpJpJ1vAeFJoUpwYPc9HdclISZkAd5ghHKmvYFP4niVJUoieGJSeQe932eoVZ42u8LCe0BH92gRwgdJ0FqE8PBEHJzLhYCuWU0i9yNLU31dpvLaWtq4Zycw95kRXPI7eDqHZzdaXM4XdTlbOQiVvSF5bTVu2wue6O92c412m0tDluzFQn-QEiUeuEdZ8955B-N54jD?type=png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">graph TD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    A[用户发起请求] --&amp;gt; B[输入文本/附加图片];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    B --&amp;gt; C{Magentic-UI 生成分步计划};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    C -- 生成成功 --&amp;gt; D[用户进入计划编辑界面];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    C -- 生成失败 --&amp;gt; C1[提示用户重新输入];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    C1 --&amp;gt; B;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    D -- 用户编辑计划 --&amp;gt; E{编辑操作};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    E -- 添加/删除/修改步骤 --&amp;gt; D;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    E -- 确认完成 --&amp;gt; F[总控代理存储计划];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    F --&amp;gt; G[启动计划执行引擎];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    G --&amp;gt; H{按顺序执行步骤};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    H --&amp;gt; I{当前步骤类型?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    subgraph 具体步骤执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        direction LR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- WebSurfer --&amp;gt; J[执行网页操作];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- Coder --&amp;gt; K[生成并执行代码];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- FileSurfer --&amp;gt; L[处理文件];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- UserProxy --&amp;gt; M[提示用户手动操作];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    J --&amp;gt; N{步骤是否成功完成?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    K --&amp;gt; N;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    L --&amp;gt; N;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    M --&amp;gt; N;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    N -- 是 --&amp;gt; O{所有步骤均已完成?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    N -- 否 --&amp;gt; P[记录错误原因];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    P --&amp;gt; Q{是否需要重新规划?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Q -- 是 --&amp;gt; R[请求用户许可重新规划];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    R -- 同意 --&amp;gt; C;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    R -- 拒绝 --&amp;gt; S[终止流程];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Q -- 否 --&amp;gt; S;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    O -- 是 --&amp;gt; T[生成最终结果];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    O -- 否 --&amp;gt; H;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    T --&amp;gt; U[向用户呈现结果];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    U --&amp;gt; V[结束];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>输入与计划生成&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用户通过文本/图片触发流程，系统生成初始计划。若失败则提示用户重新输入。&lt;/li>
&lt;li>用户通过编辑界面迭代优化计划，确认后进入执行阶段。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>计划执行逻辑&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>总控代理按步骤分配任务至对应智能体（WebSurfer/Coder/FileSurfer）或用户。&lt;/li>
&lt;li>每个步骤完成后验证状态，若失败则判断是否需要重新规划（需用户授权）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态控制与终止&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用户可随时干预：暂停执行、修改计划或终止流程。&lt;/li>
&lt;li>所有步骤完成后交付最终结果，异常情况下提供透明错误反馈。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="工具部署">工具部署
&lt;/h2>&lt;p>&lt;strong>Magentic AI&lt;/strong> 主要基于Python 开发，Web部分基于FastAPI。而它的AI控制主要通过 Playwright 控制 &lt;strong>Docker&lt;/strong> 容器中的一个虚拟浏览器，且可以实时显示给用户。而背后的大模型则主要基于各个开放大模型的API接入方式使用。&lt;/p>
&lt;p>所以要部署Magentic UI，需要先确认相关前置条件：&lt;/p>
&lt;ul>
&lt;li>Docker已安装，如果是Window系统，安装Docker Desktop，且和WSL集成&lt;/li>
&lt;li>提供大模型的接入&lt;strong>API KEY&lt;/strong>，默认使用的是 &lt;strong>OPENAI&lt;/strong> 的API KEY&lt;/li>
&lt;li>Python运行环境且 &lt;strong>&amp;gt;3.10&lt;/strong> 版本&lt;/li>
&lt;/ul>
&lt;p>是在WSL中部署的这个工具， 首先创建python虚拟环境，然后安装Magentic AI及相关依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python3 -m venv .venv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> .venv/bin/activate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip3 install magentic-ui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>确保Docker已启动, 运行Magentic UI前应该没有相关容器在运行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大模型这里可以使用微软Azure AI上的OPENAI, ， 完成配置后，将对应api key设置为环境变量 &lt;code>OPENAI_API_KEY&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENAI_API_KEY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外Magentic UI本身需要对大模型进行配置，Azure AI的配置模板如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-YAML" data-lang="YAML">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">model_config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">&amp;amp;client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">  &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">AzureOpenAIChatCompletionClient&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">  &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">model&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gpt-4o&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">azure_endpoint&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;YOUR ENDPOINT&amp;gt;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">azure_deployment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;YOUR DEPLOYMENT&amp;gt;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">api_version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2024-10-21&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">azure_ad_token_provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">      &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">autogen_ext.auth.azure.AzureTokenProvider&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">      &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">        &lt;/span>&lt;span class="nt">provider_kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DefaultAzureCredential&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">        &lt;/span>&lt;span class="nt">scopes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">          &lt;/span>- &lt;span class="l">https://cognitiveservices.azure.com/.default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">max_retries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">orchestrator_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">coder_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">web_surfer_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">file_surfer_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">action_guard_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="运行">运行
&lt;/h2>&lt;p>然后运行Magentic ui, 默认使用8081端口，首次运行会下载多个不同docker镜像及相关依赖，时间较长，等待安装完成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">magentic ui --port &lt;span class="m">8081&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等运行log中出现如下信息，则启动成功&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">| INFO | magentic_ui.backend.web.app:lifespan:59 - Application startup complete. Navigate to http://127.0.0.1:8081
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>浏览器访问 &lt;code>http://localhost:8081&lt;/code>&lt;/p>
&lt;p>会看到如下界面
&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-3.png"
width="1799"
height="762"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-3_hu_fe26cb204b45df8c.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-3_hu_d4b7548936aad01a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="566px"
>&lt;/p>
&lt;p>启动一个会话后，比如让AI协助我们完成一个测试&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">请测试saucedemo.com网站的不同用户登录功能是否正常，并汇总问题为markdown格式
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如安装正确，大模型调用正常，那么Magentic UI 就会规划相关任务计划，并让用户确认&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-5.png"
width="1830"
height="825"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-5_hu_e4f7b711cc461b62.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-5_hu_5dc9845a629c1a17.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;p>用户也可以根据相关反馈，对计划进行调整，在计划执行过程中，也可以和AI交互，变更它的执行路径。具体的执行演示，可参看下方视频。&lt;/p>
&lt;p>这时查看WSL中的docker 运行信息，可以看到运行了3个容器，其中两个是mangenti UI的&lt;code>coder&lt;/code> 和 &lt;code>file surfer&lt;/code> 智能体，另一个是可远程查看的 &lt;code>vnc_browser&lt;/code> 容器&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-2.png"
width="795"
height="189"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-2_hu_4b1b4977de39e810.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-2_hu_bf1e193fd2bb5b12.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="420"
data-flex-basis="1009px"
>&lt;/p>
&lt;p>一系列步骤执行完成，Magentic UI根据最开始的指令，得到了如下markdown格式结果汇总。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">以下是对saucedemo.com网站不同用户登录功能测试的结果汇总：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> &lt;span class="gs">**标准用户**&lt;/span> (&lt;span class="sb">`standard_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录成功。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 无问题，用户可以正常访问库存页面并浏览产品。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> &lt;span class="gs">**被锁定用户**&lt;/span> (&lt;span class="sb">`locked_out_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录失败。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 显示错误消息 &amp;#34;Epic sadface: Sorry, this user has been locked out.&amp;#34; 账户已被锁定，无法访问。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> &lt;span class="gs">**问题用户**&lt;/span> (&lt;span class="sb">`problem_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录成功。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 产品图像存在不匹配的问题，图像错误是已知问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">4.&lt;/span> &lt;span class="gs">**性能故障用户**&lt;/span> (&lt;span class="sb">`performance_glitch_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录成功。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 无明显系统减慢或异常，用户可以正常导航。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些结果表明网站能够正确处理不同账户类型的登录场景。如果您想亲自测试，可以访问 [&lt;span class="nt">saucedemo.com&lt;/span>](&lt;span class="na">https://www.saucedemo.com/&lt;/span>)。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用体会">使用体会
&lt;/h2>&lt;p>总体应用下来，把AI重新定位为辅助者角色，显然更贴合当前AI应用的实际，而且通过容器实时显示AI的操作过程，使AI执行任务不再像个黑盒，确实友好了很多。&lt;/p>
&lt;p>不过应用中感觉还是实用性不是太好，虽然官方已声明现阶段还是研究性质，但尚有较大改进空间。&lt;/p>
&lt;ol>
&lt;li>安装和配置比较复杂，各种依赖包众多，耗时较久&lt;/li>
&lt;li>大模型本身能力对执行过程，包括是否能正常完成交互都有较大影响。调用失败和异常较多。&lt;/li>
&lt;li>大模型的token消耗比较可观，完成一个任务，其实会分解多数十个不同请求，而每个请求的token消耗也是数千计，实用付费模型的话，成本高昂&lt;/li>
&lt;/ol>
&lt;p>下图是Azure后台查看的我试验期间的token消耗，比较可观。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-4.png"
width="1524"
height="388"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-4_hu_e0d7e868c2da13d7.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-4_hu_5ac4275b5ccc0967.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>&lt;/p>
&lt;p>总之，Magentic UI 的发展方向值得期待，但当下还需要多等待它的进一步完善。&lt;/p>
&lt;hr></description></item><item><title>Cursor收费？没事，咱们还有codebuddy！</title><link>https://chengxiaqiucao.github.io/post/092-codebuddy/</link><pubDate>Fri, 09 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/092-codebuddy/</guid><description>&lt;p>之前我们介绍通过AI生成自动化测试代码，以及通过 mcp server 控制浏览器，使用的是AI编程IDE &lt;strong>Cursor&lt;/strong>, Cursor以其强大的智能分析和辅助编程能力，在我们用自然语言给出一个编程需求时，即可自动帮我们完成代码的实现，高效且效果很好。但 Cursor 并不是一个免费软件，试用期结束后，作为日常工具的话，费用还是比较高昂。&lt;/p>
&lt;p>但现在，腾讯也出手推出了一个代码助手，正是本文主角，CodeBuddy。编程能力比Cursor不遑多让，更是对小程序这样腾讯生态下的应用有光环加成，更重要的是：完全免费！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601.png"
width="1864"
height="748"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601_hu_a6a7c5383c51629a.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601_hu_6bca803f41c61e5a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;h2 id="安装">安装
&lt;/h2>&lt;p>CodeBuddy本身并没有提供单独的IDE，但是对于各种主流IDE，都提供了插件支持&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-2.png"
width="1347"
height="343"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-2_hu_14512690b13ddb8a.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-2_hu_8d6b89237956795d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>&lt;/p>
&lt;p>在各款开发工具的插件市场中搜索”腾讯云代码助手“，均能找到对应插件，相应进行安装即可&lt;/p>
&lt;p>以vs code为例，插件安装后，打开插件界面，即可类似Copilot或Cursor的助手页面那样进行编程辅助， 在CodeBuddy中，称为 &lt;strong>Craft&lt;/strong> 模式&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-3.png"
width="1920"
height="1080"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-3_hu_cc0331be89deb021.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-3_hu_34205d90cfba55c2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>除了辅助生成代码这个模式，还包括Chat模式，可以类似生成式AI那样进行对话交流。&lt;/p>
&lt;p>此外Code Review模式可以帮助完成已有代码的评审，Unit Test则会针对当前代码自动编写单元测试脚本。&lt;/p>
&lt;h2 id="小程序开发实测">小程序开发实测
&lt;/h2>&lt;p>而CodeBuddy本身基于腾讯生态，对于像小程序开发这样的工作，可以说是有着先天的右手。&lt;/p>
&lt;p>这里笔者在微信开发者工具中，安装CodeBuddy插件之后，仅仅通过几次交互问答，就帮助我完成了一个小程序的实现。&lt;/p>
&lt;p>如下，就是我通过它完成的获取Github最近一个月最热门仓库的实现，总用时大概10多分钟，实测可用且界面友好。&lt;/p>
&lt;p>以后可能真的人人都是开发者，即便对编程不甚了解，只要有想法，也能轻松转化为现实！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-1.png"
width="1848"
height="937"
srcset="https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-1_hu_a9b662602227106e.png 480w, https://chengxiaqiucao.github.io/post/092-codebuddy/snap_20250601-1_hu_4d774c2fbd25080f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>附上完成这个应用的完整交互过程&lt;/p>
&lt;blockquote>
&lt;p>请帮我开发一个简单的小程序，获取github上当日最热门的5个repo的介绍，界面重点突出，保证视觉效果&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CodeBuddy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">用户需要一个小程序来展示GitHub上当日最热门的5个仓库，并且要求界面视觉效果突出。我需要进一步了解用户的需求，并收集一些信息来制定合适的计划。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先，我需要明确以下几点：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 小程序的平台 - 是Web应用、移动应用还是桌面应用？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 技术栈偏好 - 用户是否有特定的编程语言或框架偏好？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. &amp;#34;当日最热门&amp;#34;的定义 - 是基于星标数、fork数还是其他指标？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 视觉效果的具体要求 - 用户对UI/UX有什么特定的期望？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 功能需求 - 除了展示仓库介绍外，是否需要其他功能，如点击跳转到仓库页面等？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我先看看项目目录结构，了解当前的环境：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根目录0个文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">明白了，这是一个全新的项目。让我与用户进行需求澄清，以便更好地规划这个项目。我需要询问一些关键问题来确保我们能够开发出符合用户期望的应用。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为了更好地帮助您开发这个展示GitHub热门仓库的应用，我需要确认一些关键细节：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **平台选择**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 您期望这个应用是网页应用（Web App）还是桌面应用（Desktop App）？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **技术栈偏好**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 您是否有特定的编程语言或框架偏好？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 比如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Web应用：React、Vue、Angular等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 桌面应用：Electron、Python+Qt等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **UI/视觉需求**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 您对视觉效果有什么具体期望？比如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 深色/浅色主题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 卡片式布局
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 动画效果等
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **功能细节**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 除了显示仓库名称和介绍外，您是否需要显示：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库星标数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 作者信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编程语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 直接跳转链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 是否需要自动刷新功能？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">请告诉我您的偏好，这样我可以制定一个更符合您需求的具体实现方案。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>平台：微信小程序；技术偏好：vue；视觉效果：现代简约；功能：包含当前建议功能&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CodeBuddy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">感谢用户的回复，现在我有了更明确的需求信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 平台：微信小程序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 技术偏好：Vue (在微信小程序中，我们可以使用类似Vue的MVVM框架，即微信小程序原生开发方式)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 视觉效果：现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 功能：包含我建议的功能，即：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示仓库名称和介绍
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示仓库星标数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示作者信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 显示编程语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 提供直接跳转链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我可以制定一个更具体的实施计划。微信小程序开发需要使用微信开发者工具，并且需要调用GitHub API来获取热门仓库信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">感谢您的回复！基于您提供的信息，我们将开发一个**微信小程序**，使用**类Vue的开发方式**，采用**现代简约**的视觉风格，展示GitHub当日最热门的5个仓库。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">还有几个技术细节需要确认：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **GitHub API 访问方式**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 微信小程序对跨域请求有限制，我们需要考虑如何调用GitHub API
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选项1：使用云函数作为中间层（推荐，更安全且避免跨域问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选项2：直接在小程序中调用API（可能面临跨域限制）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **热门仓库的定义**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- GitHub API提供多种排序方式，您希望基于哪种指标来定义&amp;#34;热门&amp;#34;？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 当日新增星标数最多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 总星标数最多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 当日新建且受关注度高的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **刷新机制**：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 是否需要下拉刷新功能？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 是否需要定时自动刷新（如每小时更新一次）？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些信息将帮助我设计一个更符合您期望的小程序方案。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>github API使用云函数，热门指标：当日新增星标最多；启动App时进行刷新即可&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;span class="lnt">261
&lt;/span>&lt;span class="lnt">262
&lt;/span>&lt;span class="lnt">263
&lt;/span>&lt;span class="lnt">264
&lt;/span>&lt;span class="lnt">265
&lt;/span>&lt;span class="lnt">266
&lt;/span>&lt;span class="lnt">267
&lt;/span>&lt;span class="lnt">268
&lt;/span>&lt;span class="lnt">269
&lt;/span>&lt;span class="lnt">270
&lt;/span>&lt;span class="lnt">271
&lt;/span>&lt;span class="lnt">272
&lt;/span>&lt;span class="lnt">273
&lt;/span>&lt;span class="lnt">274
&lt;/span>&lt;span class="lnt">275
&lt;/span>&lt;span class="lnt">276
&lt;/span>&lt;span class="lnt">277
&lt;/span>&lt;span class="lnt">278
&lt;/span>&lt;span class="lnt">279
&lt;/span>&lt;span class="lnt">280
&lt;/span>&lt;span class="lnt">281
&lt;/span>&lt;span class="lnt">282
&lt;/span>&lt;span class="lnt">283
&lt;/span>&lt;span class="lnt">284
&lt;/span>&lt;span class="lnt">285
&lt;/span>&lt;span class="lnt">286
&lt;/span>&lt;span class="lnt">287
&lt;/span>&lt;span class="lnt">288
&lt;/span>&lt;span class="lnt">289
&lt;/span>&lt;span class="lnt">290
&lt;/span>&lt;span class="lnt">291
&lt;/span>&lt;span class="lnt">292
&lt;/span>&lt;span class="lnt">293
&lt;/span>&lt;span class="lnt">294
&lt;/span>&lt;span class="lnt">295
&lt;/span>&lt;span class="lnt">296
&lt;/span>&lt;span class="lnt">297
&lt;/span>&lt;span class="lnt">298
&lt;/span>&lt;span class="lnt">299
&lt;/span>&lt;span class="lnt">300
&lt;/span>&lt;span class="lnt">301
&lt;/span>&lt;span class="lnt">302
&lt;/span>&lt;span class="lnt">303
&lt;/span>&lt;span class="lnt">304
&lt;/span>&lt;span class="lnt">305
&lt;/span>&lt;span class="lnt">306
&lt;/span>&lt;span class="lnt">307
&lt;/span>&lt;span class="lnt">308
&lt;/span>&lt;span class="lnt">309
&lt;/span>&lt;span class="lnt">310
&lt;/span>&lt;span class="lnt">311
&lt;/span>&lt;span class="lnt">312
&lt;/span>&lt;span class="lnt">313
&lt;/span>&lt;span class="lnt">314
&lt;/span>&lt;span class="lnt">315
&lt;/span>&lt;span class="lnt">316
&lt;/span>&lt;span class="lnt">317
&lt;/span>&lt;span class="lnt">318
&lt;/span>&lt;span class="lnt">319
&lt;/span>&lt;span class="lnt">320
&lt;/span>&lt;span class="lnt">321
&lt;/span>&lt;span class="lnt">322
&lt;/span>&lt;span class="lnt">323
&lt;/span>&lt;span class="lnt">324
&lt;/span>&lt;span class="lnt">325
&lt;/span>&lt;span class="lnt">326
&lt;/span>&lt;span class="lnt">327
&lt;/span>&lt;span class="lnt">328
&lt;/span>&lt;span class="lnt">329
&lt;/span>&lt;span class="lnt">330
&lt;/span>&lt;span class="lnt">331
&lt;/span>&lt;span class="lnt">332
&lt;/span>&lt;span class="lnt">333
&lt;/span>&lt;span class="lnt">334
&lt;/span>&lt;span class="lnt">335
&lt;/span>&lt;span class="lnt">336
&lt;/span>&lt;span class="lnt">337
&lt;/span>&lt;span class="lnt">338
&lt;/span>&lt;span class="lnt">339
&lt;/span>&lt;span class="lnt">340
&lt;/span>&lt;span class="lnt">341
&lt;/span>&lt;span class="lnt">342
&lt;/span>&lt;span class="lnt">343
&lt;/span>&lt;span class="lnt">344
&lt;/span>&lt;span class="lnt">345
&lt;/span>&lt;span class="lnt">346
&lt;/span>&lt;span class="lnt">347
&lt;/span>&lt;span class="lnt">348
&lt;/span>&lt;span class="lnt">349
&lt;/span>&lt;span class="lnt">350
&lt;/span>&lt;span class="lnt">351
&lt;/span>&lt;span class="lnt">352
&lt;/span>&lt;span class="lnt">353
&lt;/span>&lt;span class="lnt">354
&lt;/span>&lt;span class="lnt">355
&lt;/span>&lt;span class="lnt">356
&lt;/span>&lt;span class="lnt">357
&lt;/span>&lt;span class="lnt">358
&lt;/span>&lt;span class="lnt">359
&lt;/span>&lt;span class="lnt">360
&lt;/span>&lt;span class="lnt">361
&lt;/span>&lt;span class="lnt">362
&lt;/span>&lt;span class="lnt">363
&lt;/span>&lt;span class="lnt">364
&lt;/span>&lt;span class="lnt">365
&lt;/span>&lt;span class="lnt">366
&lt;/span>&lt;span class="lnt">367
&lt;/span>&lt;span class="lnt">368
&lt;/span>&lt;span class="lnt">369
&lt;/span>&lt;span class="lnt">370
&lt;/span>&lt;span class="lnt">371
&lt;/span>&lt;span class="lnt">372
&lt;/span>&lt;span class="lnt">373
&lt;/span>&lt;span class="lnt">374
&lt;/span>&lt;span class="lnt">375
&lt;/span>&lt;span class="lnt">376
&lt;/span>&lt;span class="lnt">377
&lt;/span>&lt;span class="lnt">378
&lt;/span>&lt;span class="lnt">379
&lt;/span>&lt;span class="lnt">380
&lt;/span>&lt;span class="lnt">381
&lt;/span>&lt;span class="lnt">382
&lt;/span>&lt;span class="lnt">383
&lt;/span>&lt;span class="lnt">384
&lt;/span>&lt;span class="lnt">385
&lt;/span>&lt;span class="lnt">386
&lt;/span>&lt;span class="lnt">387
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CodeBuddy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">非常感谢用户的进一步澄清。现在我有了完整的需求信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 平台：微信小程序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 技术偏好：Vue风格的微信小程序开发
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 视觉效果：现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. GitHub API访问方式：使用云函数作为中间层
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 热门仓库定义：当日新增星标数最多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 刷新机制：启动App时进行刷新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">基于这些信息，我可以制定一个详细的实施计划，包括项目结构、主要功能模块、UI设计思路以及开发步骤。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># GitHub热门仓库微信小程序开发计划
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**项目概述**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">开发一个微信小程序，展示GitHub当日新增星标数最多的5个仓库，采用现代简约的UI设计，使用云函数调用GitHub API。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**技术栈**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 前端：微信小程序原生开发（WXML, WXSS, JS）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 后端：微信云开发（云函数）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- API：GitHub REST API
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**项目结构**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">`├── miniprogram/ # 小程序前端代码 │ ├── pages/ # 页面文件 │ │ ├── index/ # 主页面 │ │ └── detail/ # 详情页面（可选） │ ├── components/ # 自定义组件 │ │ └── repo-card/ # 仓库卡片组件 │ ├── images/ # 图标和图片资源 │ ├── styles/ # 公共样式 │ └── utils/ # 工具函数 └── cloudfunctions/ # 云函数 └── getHotRepos/ # 获取热门仓库的云函数`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**功能模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**1. 云函数模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建`getHotRepos`云函数，负责：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 调用GitHub API获取当日新增星标最多的仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 数据处理和过滤，返回前5个仓库的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 处理API请求限制和错误情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**2. 前端展示模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 主页面（index）：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 顶部标题栏，展示应用名称和刷新状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库列表区域，使用卡片式布局展示5个热门仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 加载状态和错误提示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库卡片组件（repo-card）：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 仓库名称和描述
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 作者信息和头像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 星标数（总数和今日新增）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编程语言（带颜色标识）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 跳转按钮（可打开web-view或复制链接）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**3. 数据交互模块**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 应用启动时自动调用云函数获取数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现下拉刷新功能（可选）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 数据缓存机制，减少不必要的API调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**UI设计思路**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配色方案：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 主色调：GitHub深蓝色 (#0366d6)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 背景色：浅灰色或白色 (#f6f8fa)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 强调色：GitHub绿色 (#2ea44f)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 卡片设计：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 圆角矩形卡片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 适当的阴影效果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 信息层次分明
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 动效：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 加载动画
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 卡片点击反馈
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 平滑的列表滚动效果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**开发步骤**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **项目初始化**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建微信小程序项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置云开发环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **云函数开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编写获取GitHub热门仓库的云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试API调用和数据处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **前端页面开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 设计并实现主页面布局
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 开发仓库卡片组件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现数据加载和展示逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **样式优化**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 应用现代简约风格
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 优化视觉效果和交互体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. **功能测试与优化**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试数据加载和展示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 优化性能和用户体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. **发布与部署**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置小程序基本信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 提交审核并发布
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**注意事项**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- GitHub API有请求频率限制，需要合理设计缓存策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 微信小程序对网络请求和页面大小有限制，需注意性能优化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 确保UI在不同尺寸的设备上都有良好的展示效果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根据用户提供的开发计划，我需要开发一个微信小程序，展示GitHub当日新增星标数最多的5个仓库。这个项目需要使用微信小程序原生开发和云开发。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先，我需要创建项目的基本结构，包括：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 创建小程序前端代码结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 创建云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 实现主要功能模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我先检查当前目录是否为空，然后开始创建项目结构。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">根目录0个文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">目录为空，我们需要从头开始创建项目结构。首先创建基本的项目目录结构，包括小程序前端代码和云函数目录。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我们先创建以下关键文件：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. project.config.json - 小程序项目配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. app.json - 小程序全局配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. app.js - 小程序入口文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. app.wxss - 小程序全局样式文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们先创建项目配置文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">project.config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+78 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们已经创建了项目配置文件，接下来需要创建小程序的基本结构。首先创建miniprogram目录，然后在其中创建app.js、app.json和app.wxss文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 创建miniprogram目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 创建app.js - 小程序入口文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 创建app.json - 小程序全局配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 创建app.wxss - 小程序全局样式文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们先创建miniprogram目录，然后创建这些基本文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p miniprogram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">目录创建成功，现在让我们创建小程序的基本文件。首先创建app.json，配置小程序的全局设置，包括页面路径、窗口样式等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/app.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+16 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建app.js文件，这是小程序的入口文件，用于初始化小程序。我们将在这里初始化云开发环境。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/app.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+22 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接下来创建app.wxss文件，定义全局样式。我们将使用GitHub的配色方案，并定义一些通用样式。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/app.wxss
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+80 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建主页面（index）的相关文件。我们需要在miniprogram/pages/index/目录下创建以下文件：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. index.js - 页面逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. index.wxml - 页面结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. index.wxss - 页面样式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. index.json - 页面配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先创建index目录，然后创建这些文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p miniprogram/pages/index
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">目录创建成功，现在让我们创建index页面的文件。首先创建index.wxml，设计页面的基本结构，包括加载状态、仓库列表等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.wxml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+58 -2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建index.wxss文件，为主页面添加样式。我们将使用现代简约的设计风格，包括卡片式布局、适当的阴影效果等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.wxss
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+144 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">接下来创建index.js文件，实现页面的业务逻辑，包括：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 页面加载时获取热门仓库数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 处理刷新操作
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 实现复制链接和打开仓库等功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+78 -40
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建index.json文件，配置页面的基本设置，包括启用下拉刷新等功能。然后我们需要创建云函数getHotRepos来获取GitHub热门仓库数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/pages/index/index.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+7 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建一些必要的图片资源。我们需要在miniprogram目录下创建images文件夹，并准备一些基本图标，如加载图标、星标图标等。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先创建images目录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p miniprogram/images
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建云函数getHotRepos。首先创建cloudfunctions目录和getHotRepos云函数目录，然后创建云函数的相关文件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 创建cloudfunctions/getHotRepos目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 创建package.json和index.js文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p cloudfunctions/getHotRepos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建云函数的package.json文件，添加必要的依赖，包括用于发起HTTP请求的axios。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cloudfunctions/getHotRepos/package.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+17 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在创建云函数的主文件index.js，实现获取GitHub热门仓库的逻辑。我们将：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 使用GitHub API搜索仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 按照当日新增星标数排序
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 获取前5个仓库的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 处理错误情况和API限制
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cloudfunctions/getHotRepos/index.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+144 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们需要创建一些基本的图标文件。由于我们无法直接创建二进制图片文件，我们可以创建一个sitemap.json文件，这是微信小程序必需的文件，用于配置小程序的索引规则。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">然后，我们可以创建一个README.md文件，提供项目的说明和使用指南。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">miniprogram/sitemap.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+8 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在让我们创建一个README.md文件，提供项目的详细说明、安装步骤和使用指南。这将帮助其他开发者理解和使用这个项目。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+88 -0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">已接受
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我们已经完成了项目的基本结构和核心功能的开发。让我们总结一下已完成的工作和下一步需要用户进行的操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 已完成的工作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了完整的项目结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了主页面的UI和逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了云函数获取GitHub热门仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了项目文档
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 用户需要进行的操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置微信开发者工具和AppID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 开通云开发环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置GitHub Token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 上传和部署云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在images目录中添加必要的图标文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我使用attempt_completion工具来总结项目的完成状态和后续步骤。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># GitHub热门仓库小程序开发完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**已完成的开发工作**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **项目结构搭建**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了完整的微信小程序项目结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 配置了必要的项目文件（project.config.json, app.json等）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了云函数目录结构
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **前端开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了主页面（index）的完整功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 设计了现代简约风格的UI界面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了下拉刷新等交互功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **后端开发**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了getHotRepos云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 集成了GitHub API的调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 实现了数据处理和错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **文档编写**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 创建了详细的README.md文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 提供了完整的安装和使用说明
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**后续步骤**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">要运行这个项目，您需要：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. **环境配置**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 使用微信开发者工具打开项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在project.config.json中配置您的AppID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 开通云开发并创建云环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在app.js中配置云环境ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. **资源准备**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在miniprogram/images/目录下添加必要的图标：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- loading.gif（加载动画）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- star.png（星标图标）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. **云函数部署**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 进入cloudfunctions/getHotRepos目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 安装依赖：npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 在云开发控制台中配置GitHub Token（可选）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 上传并部署云函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. **运行测试**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 编译运行项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试数据加载功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试下拉刷新功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 测试仓库链接复制功能
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">**注意事项**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 请确保正确配置了所有必要的环境变量和配置项
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 建议配置GitHub Token以避免API限制
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 首次运行时需要等待云函数部署完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 如遇到问题，请查看README.md中的详细说明
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">项目源码已经准备就绪，您可以按照上述步骤开始使用和测试了。如果有任何问题，欢迎参考README.md文件或提出问题。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>AI智能驱动浏览器工具Browser Use详解</title><link>https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-1.png" alt="Featured image of post AI智能驱动浏览器工具Browser Use详解" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在之前关于 AI 测试相关的几篇文章中，我们分别介绍了通过 &lt;code>playwright-mcp&lt;/code>，以及 &lt;code>midscene.js&lt;/code>、&lt;code>magentic ui&lt;/code> 等几个不同的 AI 浏览器工具，实现 AI 驱动自动化测试的方法介绍。而其实在这些不断涌现的新工具出现之前，还有一个更早推出（2024.11），也同样还在不断完善的AI浏览器驱动工具 &lt;code>Browser Use&lt;/code>，其工具实现思路，为后来的相关工具提供了很多借鉴。 而经过半年多40多个版本的迭代，目前最新版本 &lt;code>0.2.5&lt;/code>，工具功能也日臻完善。&lt;/p>
&lt;p>本文，我们就再来对这个 AI 浏览器做一个系统的介绍。&lt;/p>
&lt;h2 id="browser-use简介">browser-use简介
&lt;/h2>&lt;p>browser-use 的定位是提供一个简易且功能强大的，将不同AI Agent和浏览器连接起来的方案，实现基于AI的智能化浏览器自动化。&lt;/p>
&lt;p>它是一个基于Python的开源库，在github上已有超过 &lt;strong>61K&lt;/strong> 的Stars，可以说是备受关注。&lt;/p>
&lt;p>主要依托 &lt;strong>Playwright/Puppeteer&lt;/strong> 的浏览器控制能力和 AI 大模型的推理分析能力，完成让 AI 从资讯助手向辅助执行的转变。在其之后，mcp大行其道，包括后续的其他各种浏览器AI驱动，也都能看到 browser-use 方案的影子。&lt;/p>
&lt;h2 id="实现原理">实现原理
&lt;/h2>&lt;p>&lt;strong>browser-use&lt;/strong> 的实现，其实是通过 &lt;strong>Langchain&lt;/strong> 和 &lt;strong>LLM 大语言模型&lt;/strong>实现的一个 &lt;strong>AI Agent&lt;/strong> 智能体，来理解网页内容并进一步生成操作指令。项目底层依赖 &lt;strong>Playwright&lt;/strong> 框架实现浏览器自动化操作，支持多浏览器（如 Chromium、Firefox 等），能够模拟真实用户的点击、输入、导航等行为。&lt;/p>
&lt;p>基于 AI 能力，系统能够自动识别网页中的可交互元素（如按钮、输入框等），并结合上下文的理解生成对应的交互逻辑，提升自动化效率，实现基于 AI 的浏览器智能。&lt;/p>
&lt;h2 id="核心架构解析">核心架构解析
&lt;/h2>&lt;p>browser-use 通过分层架构实现 AI Agent 与浏览器的深度集成，其核心架构不同分层的主要作用如下：&lt;/p>
&lt;h3 id="agent-层决策中枢">&lt;strong>Agent 层&lt;/strong>（决策中枢）
&lt;/h3>&lt;p>这一层，主要负责任务流程编排与决策制定。通过实现小型状态机管理任务流程， 并与 LLM（如 OpenAI）进行交互获取决策指令。&lt;/p>
&lt;h3 id="controller-层指令转换器">&lt;strong>Controller 层&lt;/strong>（指令转换器）
&lt;/h3>&lt;p>这一层负责将高级决策转化为具体浏览器操作指令， 支持 DOM 操作、页面导航等基础动作，也提供对多标签页交互逻辑的管理。&lt;/p>
&lt;h3 id="dom-解析引擎">&lt;strong>DOM 解析引擎&lt;/strong>
&lt;/h3>&lt;p>在这一层对网页结构与内容实时解析，包括提供视觉识别能力（OCR 支持），完成对可操作的网页元素映射关系的构建。&lt;/p>
&lt;h3 id="browser-接口层">&lt;strong>Browser 接口层&lt;/strong>
&lt;/h3>&lt;p>在这一层，基于Playwright框架实际驱动浏览器行为，除了内置的无头模式控制，也可以通过指定浏览器路径和用户浏览器进行交互。&lt;/p>
&lt;h3 id="架构图">架构图
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529.png"
width="761"
height="638"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529_hu_12b6a65ba38f36d8.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529_hu_e32f6c65fd498b79.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;h2 id="部署安装">部署安装
&lt;/h2>&lt;p>建议使用 python 包管理工具 &lt;strong>uv&lt;/strong> 进行安装部署&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span> &lt;span class="n">venv&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-python&lt;/span> &lt;span class="mf">3.11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">venv&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Scripts&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">activate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span> &lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="nb">browser-use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">playwright&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-with-deps&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>工具需要使用对应大模型的API KEY, 定义在&lt;code>.env&lt;/code> 环境配置文件中, 支持各大主流LLM:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">OPENAI_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ANTHROPIC_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AZURE_OPENAI_ENDPOINT=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AZURE_OPENAI_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GOOGLE_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DEEPSEEK_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GROK_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NOVITA_API_KEY=
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="通过web界面使用">通过web界面使用
&lt;/h2>&lt;p>browser-use 本身也提供了一个 Web UI 界面来直接调用，它也需要单独安装， 在 venv下继续执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">browser-use&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">web-ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">git&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd web-ui&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span> &lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">-r&lt;/span> &lt;span class="n">requirements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">python&lt;/span> &lt;span class="n">webui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">py&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-ip&lt;/span> &lt;span class="mf">127.0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">1&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-port&lt;/span> &lt;span class="mf">7788&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="启动界面">启动界面
&lt;/h3>&lt;p>运行成功后，会看到如下 web-ui 的界面，&lt;code>Agent Settings&lt;/code> 可以在界面上配置使用的LLM，&lt;code>Browser Settings&lt;/code> 配置浏览器的交互方式，&lt;code>Run Agent&lt;/code> 是实际调用大模型和浏览器完成自动化任务的交互界面和结果记录
&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-3.png"
width="1446"
height="731"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-3_hu_62263a26fba44e16.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-3_hu_14e2c77e39afdc04.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;h3 id="llm配置">LLM配置
&lt;/h3>&lt;p>这里使用的是本地部署的Ollama+Deepseek-r1:14b&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-4.png"
width="1238"
height="775"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-4_hu_ea62e7ead95668ac.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-4_hu_1bec7f4e2b18ab45.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;h3 id="运行过程">运行过程
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-5.png"
width="1257"
height="826"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-5_hu_197e74af798b61b1.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-5_hu_91ab40dd48765c25.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>实际调用的浏览器和运行日志：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-2.png"
width="1896"
height="1015"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-2_hu_d336a8b779971127.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-2_hu_1a928ad7d8ee6553.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>整个执行过程还会生成一个 gif 图：
&lt;img src="https://chengxiaqiucao.github.io/browseruse-web-ui.gif"
loading="lazy"
>&lt;/p>
&lt;h2 id="python脚本调用">Python脚本调用
&lt;/h2>&lt;p>除了通过 Web-UI 来完成任务，当然更多的情况下是通过代码调用，比如如下代码通过 Deepseek的官方API调用，包括了输出格式的定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">langchain_deepseek&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ChatDeepSeek&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">browser_use&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Agent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pydantic&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SecretStr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BaseModel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ValidationError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">field_validator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ConfigDict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Field&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dotenv&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">load_dotenv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">browser_use&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 统一模型输出定义&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PostItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseModel&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model_config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConfigDict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">extra&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ignore&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post_title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post_url&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_comments&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hours_since_post&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@field_validator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;num_comments&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;hours_since_post&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;before&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">convert_numbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;确保数值字段转换为整数&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdigit&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Posts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseModel&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">posts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PostItem&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 结果解析函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">parse_result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Posts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;安全解析结果数据&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parsed data:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Posts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model_validate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONDecodeError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ValidationError&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;解析错误: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 非json格式，直接返回结果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">controller&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Controller&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output_model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Posts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">api_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;DEEPSEEK_API_KEY&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Initialize the model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">llm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ChatDeepSeek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;https://api.deepseek.com/v1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;deepseek-reasoner&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">api_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">SecretStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">api_key&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Create agent with the model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Agent&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;测试saucedemo.com网站standard_user的登录功能, 使用不同密码(secret_sauce,空密码)，登录成功则验证完成，否则需要输出错误信息。测试结果需要包含以下信息：&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">1. 登录是否成功&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">2. 如果登录失败，错误信息是什么&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">llm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">llm&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">use_vision&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">history&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">history&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">final_result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parsed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parse_result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">parsed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">post&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">parsed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">--------------------------------&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;Title: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post_title&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;URL: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post_url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;Comments: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">num_comments&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;Hours since post: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hours_since_post&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 异步主函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;程序运行时出错: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行也是通过playwright打开浏览器，效果和web-ui类似。&lt;/p>
&lt;p>程序输出如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">C:\qiucao\AI\browser_use&amp;gt;python app.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING [agent] ⚠️ DeepSeek models do not support use_vision=True yet. Setting use_vision=False for now...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Starting an agent with main_model=deepseek-reasoner +rawtools +memory, planner_model=None, extraction_model=deepseek-reasoner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [mem0.vector_stores.faiss] Loaded FAISS index from /tmp/mem0_384_faiss/mem0.faiss with 0 vectors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [mem0.vector_stores.faiss] Loaded FAISS index from C:\Users\weiwe\.mem0\migrations_faiss/mem0_migrations.faiss with 1 vectors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🚀 Starting task: 测试saucedemo.com网站standard_user的登录功能, 使用不同密码(secret_sauce,空密码)，登录成功则验证完成，否则需要输出错误信息。测试结果需要包含以下信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 登录是否成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 如果登录失败，错误信息是什么
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🤷 Eval: Unknown - Just started the task. No previous actions taken.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: Starting task: Test login functionality on saucedemo.com for user &amp;#39;standard_user&amp;#39; with two password cases. 0 out of 2 password tests completed. First need to navigate to login page.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Navigate to saucedemo.com login page to begin testing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/1: {&amp;#34;go_to_url&amp;#34;:{&amp;#34;url&amp;#34;:&amp;#34;https://www.saucedemo.com&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🔗 Navigated to https://www.saucedemo.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Navigation to saucedemo.com completed successfully. Login page is loaded with required input fields visible.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 0 out of 2 password tests completed. Starting first test case: username &amp;#39;standard_user&amp;#39; with valid password &amp;#39;secret_sauce&amp;#39;. Will verify login success by checking URL change to /inventory.html after submission.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Execute first login test with valid credentials and verify success
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:0,&amp;#34;text&amp;#34;:&amp;#34;standard_user&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 2/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:1,&amp;#34;text&amp;#34;:&amp;#34;secret_sauce&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 3/3: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input standard_user into index 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input secret_sauce into index 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 2:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING [message_manager] Failed to parse model output: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;current_state&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;evaluation_previous_goal&amp;#34;: &amp;#34;Success - First test case completed: Login with username &amp;#39;standard_user&amp;#39; and password &amp;#39;secret_sauce&amp;#39; was successful. Verified by URL change to /inventory.html and presence of product listings.&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;memory&amp;#34;: &amp;#34;1 out of 2 password tests completed. First test successful. Next: Test with empty password. Need to logout before second test.&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;next_goal&amp;#34;: &amp;#34;Logout to return to login page for second test case&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;action&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 0}}, // Open menu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;wait&amp;#34;: {&amp;#34;seconds&amp;#34;: 2}}, // Wait for menu animation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 34}} // Logout (assuming logout appears at index 34 after menu opens)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">} Expecting value: line 8 column 48 (char 532)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING [agent] Failed to parse model output: content=&amp;#39;{\n &amp;#34;current_state&amp;#34;: {\n &amp;#34;evaluation_previous_goal&amp;#34;: &amp;#34;Success - First test case completed: Login with username \&amp;#39;standard_user\&amp;#39; and password \&amp;#39;secret_sauce\&amp;#39; was successful. Verified by URL change to /inventory.html and presence of product listings.&amp;#34;,\n &amp;#34;memory&amp;#34;: &amp;#34;1 out of 2 password tests completed. First test successful. Next: Test with empty password. Need to logout before second test.&amp;#34;,\n &amp;#34;next_goal&amp;#34;: &amp;#34;Logout to return to login page for second test case&amp;#34;\n },\n &amp;#34;action&amp;#34;: [\n {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 0}}, // Open menu\n {&amp;#34;wait&amp;#34;: {&amp;#34;seconds&amp;#34;: 2}}, // Wait for menu animation\n {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 34}} // Logout (assuming logout appears at index 34 after menu opens)\n ]\n}&amp;#39; additional_kwargs={&amp;#39;refusal&amp;#39;: None, &amp;#39;reasoning_content&amp;#39;: &amp;#39;We are on the inventory page after successful login with the first password (secret_sauce). This indicates that the first test case (valid password) was successful.\n Now, we need to test the second case: empty password. \n However, we are currently logged in. We must first log out to return to the login page.\n\n Steps:\n 1. Open the menu (index 0: button with text &amp;#34;Open Menu&amp;#34;)\n 2. In the menu, there should be a logout option. We need to find the logout link.\n\n But note: the interactive elements provided are only for the current viewport. The menu is not open, so the logout link is not visible yet.\n\n After clicking the menu button, the menu will open and we can see the logout link. Then we can click it.\n\n However, the current action sequence can only include actions that are based on the current state (before opening the menu). So we can only plan to click the menu button now, and then in the next step we will see the updated elements including the logout link.\n\n Alternatively, we could use a longer sequence? But the problem is that after clicking the menu, the page changes (menu opens) so the state updates and we get new interactive elements. Therefore, we should only click the menu now and then in the next step we will see the logout link.\n\n But note: the task requires testing two cases. We have done one (with valid password) and now we need to do the second (empty password). We must log out first.\n\n Plan:\n Step 1: Click the menu button (index 0)\n Step 2: After the menu opens, we expect to see a logout link. Then click that logout link to return to the login page.\n\n However, the current response can only include one step because the state will change after clicking the menu. So we do:\n\n Action: [{&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 0}}]\n\n Then in the next step, we will see the menu and the logout link, and then we can click logout.\n\n But note: the task history memory is now at step 3/100. We have to remember that we are in the middle of the second test case.\n\n We have to update the memory: \n First test case: valid password -&amp;gt; successful login (we are on inventory page)\n Now we are going to log out to test the second case.\n\n Let\&amp;#39;s write the state accordingly.&amp;#39;} response_metadata={&amp;#39;token_usage&amp;#39;: {&amp;#39;completion_tokens&amp;#39;: 678, &amp;#39;prompt_tokens&amp;#39;: 4236, &amp;#39;total_tokens&amp;#39;: 4914, &amp;#39;completion_tokens_details&amp;#39;: {&amp;#39;accepted_prediction_tokens&amp;#39;: None, &amp;#39;audio_tokens&amp;#39;: None, &amp;#39;reasoning_tokens&amp;#39;: 495, &amp;#39;rejected_prediction_tokens&amp;#39;: None}, &amp;#39;prompt_tokens_details&amp;#39;: {&amp;#39;audio_tokens&amp;#39;: None, &amp;#39;cached_tokens&amp;#39;: 3072}, &amp;#39;prompt_cache_hit_tokens&amp;#39;: 3072, &amp;#39;prompt_cache_miss_tokens&amp;#39;: 1164}, &amp;#39;model_name&amp;#39;: &amp;#39;deepseek-reasoner&amp;#39;, &amp;#39;system_fingerprint&amp;#39;: &amp;#39;fp_393bca965e_prod0425fp8&amp;#39;, &amp;#39;id&amp;#39;: &amp;#39;68127967-53c3-4329-a9fe-01feb6090fc4&amp;#39;, &amp;#39;finish_reason&amp;#39;: &amp;#39;stop&amp;#39;, &amp;#39;logprobs&amp;#39;: None} id=&amp;#39;run-c6f0d672-4dd5-4ea7-b269-9c908f5aef4e-0&amp;#39; usage_metadata={&amp;#39;input_tokens&amp;#39;: 4236, &amp;#39;output_tokens&amp;#39;: 678, &amp;#39;total_tokens&amp;#39;: 4914, &amp;#39;input_token_details&amp;#39;: {&amp;#39;cache_read&amp;#39;: 3072}, &amp;#39;output_token_details&amp;#39;: {&amp;#39;reasoning&amp;#39;: 495}} Could not parse response.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ERROR [agent] ❌ Result failed 1/3 times:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Could not parse response.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - First test case completed successfully. Login with valid password &amp;#39;secret_sauce&amp;#39; succeeded as confirmed by URL change to /inventory.html and visible product listings.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 1 out of 2 password tests completed (valid password successful). Remaining: test with empty password. Need to logout before next test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Logout to return to login page for second test case
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/2: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:0}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 2/2: {&amp;#34;wait&amp;#34;:{&amp;#34;seconds&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 0: Open Menu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🕒 Waiting for 2 seconds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Menu opened successfully after login. Logout option is visible at index 2.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 1 out of 2 password tests completed (valid password successful). Need to logout for second test with empty password. Next: click logout button.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Logout to return to login page for second password test case
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/1: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 2: Logout
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Successfully logged out and returned to login page. All interactive elements for testing are available.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 1 out of 2 password tests completed (valid password successful). Remaining test: username &amp;#39;standard_user&amp;#39; with empty password. After submission, need to capture error message if login fails.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Execute second test case with empty password and capture results
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:0,&amp;#34;text&amp;#34;:&amp;#34;standard_user&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 2/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:1,&amp;#34;text&amp;#34;:&amp;#34;&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 3/3: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input standard_user into index 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input into index 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 2:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Second test case completed: Login failed as expected with empty password. Error message &amp;#39;Epic sadface: Password is required&amp;#39; is visible on page.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 2 out of 2 password tests completed: 1) Valid password &amp;#39;secret_sauce&amp;#39; - login succeeded 2) Empty password - login failed with error. No remaining tests.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Compile final test results and complete task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/1: {&amp;#34;done&amp;#34;:{&amp;#34;text&amp;#34;:&amp;#34;测试结果：\n1. 测试用例1 (密码: secret_sauce):\n - 登录成功: 是\n - 错误信息: 无\n\n2. 测试用例2 (密码: 空):\n - 登录成功: 否\n - 错误信息: \&amp;#34;Epic sadface: Password is required\&amp;#34;&amp;#34;,&amp;#34;success&amp;#34;:true}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📄 Result: 测试结果：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 测试用例1 (密码: secret_sauce):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 登录成功: 是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 错误信息: 无
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 测试用例2 (密码: 空):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 登录成功: 否
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 错误信息: &amp;#34;Epic sadface: Password is required&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] ✅ Task completed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] ✅ Successfully
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📝 Total input tokens used (approximate): 33168
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] Agent run telemetry logged.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从以上输出，可见Browser-Use 将任务分解为了6步：&lt;/p>
&lt;ol>
&lt;li>开始任务，访问网站 &lt;a class="link" href="https://www.saucedemo.com" target="_blank" rel="noopener"
>https://www.saucedemo.com&lt;/a>&lt;/li>
&lt;li>输入正常用户 standard_user/secret_sauce，点击登录按钮&lt;/li>
&lt;li>点击登出（未发现登出按钮，重试）&lt;/li>
&lt;li>点击菜单后登出&lt;/li>
&lt;li>使用空密码重新登录&lt;/li>
&lt;li>测试完成，获取输出结果&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>通过以上案例，可以看到，&lt;strong>Browser-Use&lt;/strong> 可以有效借助 LLM根据我们输入的提示词，分解任务，实现对页面的有效解析并完成执行，获取结果。&lt;/p>
&lt;p>执行效率上来说，API调用相对还是比较慢，对于复杂任务，会耗时较长。而在任务开始后，我们并无法干预后续执行路径（除非强制中断），这也是后续如 &lt;strong>Magentic UI&lt;/strong> 这样工具的重点优化方向。&lt;/p>
&lt;p>但 Browser-Use 的优点是已经较为成熟，对本地大模型和多种在线大模型都有良好支持，社区实践也较多，利用它辅助完成自动化测试也已有较多实践，包括系统提示词的优化。是我们利用AI辅助自动化测试的一个较好方向。&lt;/p>
&lt;hr>
&lt;h2 id="mermaid-架构图">Mermaid 架构图
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">graph TD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A[AI Agent] --&amp;gt;|决策指令| B(Controller)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B --&amp;gt;|DOM操作指令| C[DOM 解析引擎]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> C --&amp;gt;|网页内容| D[Browser 接口]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> D --&amp;gt;|浏览器交互| E[Chrome/Edge]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subgraph 功能模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B --&amp;gt; 多标签管理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> C --&amp;gt; 视觉识别(OCR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> D --&amp;gt; 真实用户行为模拟
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style A fill:#FFE4B5,stroke:#333
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style E fill:#98FB98,stroke:#333
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>AI测试，测试团队的必由之路</title><link>https://chengxiaqiucao.github.io/post/083-ai%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link><pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/083-ai%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%BA%BF%E5%9B%BE/</guid><description>&lt;blockquote>
&lt;p>本文根据知名测试博客 &lt;a class="link" href="https://testguild.com/" target="_blank" rel="noopener"
>https://testguild.com/&lt;/a> 的最新博文翻译整理，谈到了在测试团队中系统实施、推进 AI 测试的路线图，很有参考价值，现分享给大家&lt;/p>&lt;/blockquote>
&lt;h2 id="ai-测试自动化不再是可选项">AI 测试自动化不再是可选项
&lt;/h2>&lt;p>在当今的软件测试领域，人工智能（AI）已不再仅仅是一种选择，而是一种重要的战略优势 。AI 驱动的测试工具能够将从测试用例生成到测试执行的各个环节实现自动化，从而使您的团队能够专注于交付更高质量的软件版本 。&lt;/p>
&lt;p>Blinq.io 首席执行官 Tal Barmeir 曾指出：“生成式 AI 的作用在于帮助我们真正解决大量测试需求积压且覆盖范围非常有限的问题——这是我们在所有行业中都普遍看到的现象。”&lt;/p>
&lt;p>AI 驱动的测试工具能自动化从测试用例创建到执行和维护的整个流程，将助力测试团队：&lt;/p>
&lt;ul>
&lt;li>将测试创建时间缩短高达 80%&lt;/li>
&lt;li>将测试维护成本降低 40-60%&lt;/li>
&lt;li>通过更快的发布周期加速产品上市时间&lt;/li>
&lt;li>提高跨浏览器、设备和环境的测试覆盖率&lt;/li>
&lt;li>释放宝贵的工程资源用于创新&lt;/li>
&lt;/ul>
&lt;p>本指南提供了一种结构化的方法来实施 AI 测试，旨在带来即时效益和长期的转型。&lt;/p>
&lt;h2 id="阶段一第-1-15-天制定您的-ai-测试策略">阶段一（第 1-15 天）：制定您的 AI 测试策略
&lt;/h2>&lt;p>在深入研究具体的工具之前，首先需要明确您希望如何应用 AI ：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>辅助式 AI&lt;/strong>：增强以人工为主导的测试流程。&lt;/li>
&lt;li>&lt;strong>自主式 AI&lt;/strong>：由 AI 完全驱动的测试自动化，并有人工监督。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“大多数组织从辅助式 AI 开始。但很快他们就会意识到其价值有限，并尝试转向完全由 AI 主导。这种转变需要不同的工具、结构和思维模式。”&lt;/p>&lt;/blockquote>
&lt;p>对于 测试团队决策Leader 而言，关键的战略决策包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>自动化范围&lt;/strong>：您的团队是自动化现有测试用例，还是允许 AI 全权负责测试脚本的创建、执行和维护？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成要求&lt;/strong>：AI 测试将如何与您现有的 CI/CD 管道和开发工作流程集成？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>成功指标&lt;/strong>：将使用哪些 KPI 来衡量成功？（如测试覆盖率、执行时间、缺陷检测等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>风险评估&lt;/strong>：哪些应用程序或功能最适合作为 AI 测试的初始实施对象？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>行动建议&lt;/strong>：在进行工具评估之前，请务必明确 AI 测试愿景、范围和成功标准 。&lt;/p>
&lt;h2 id="阶段二第-16-30-天重新定义-qa-角色和测试输入">阶段二（第 16-30 天）：重新定义 QA 角色和测试输入
&lt;/h2>&lt;p>AI 测试自动化并不会消除现有角色，而是会对其进行转型 。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>传统角色&lt;/strong>&lt;/th>
&lt;th>&lt;strong>AI 增强角色&lt;/strong>&lt;/th>
&lt;th>&lt;strong>主要职责&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>手工测试人员&lt;/td>
&lt;td>提示词工程师&lt;/td>
&lt;td>创建有效的测试提示，审查 AI 生成的测试&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自动化工程师&lt;/td>
&lt;td>AI 测试主管&lt;/td>
&lt;td>监督 AI 测试的生成、执行和维护&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QA 经理&lt;/td>
&lt;td>AI 测试战略家&lt;/td>
&lt;td>定义 AI 测试策略，衡量投资回报率，优化流程&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>“人们常常认为 AI 意味着失业。这并非事实。它真正做的是重新利用测试人员——手动测试人员成为提示工程师，自动化工程师成为 AI 工作的监督者。”&lt;/p>&lt;/blockquote>
&lt;h3 id="扩展测试输入源">&lt;strong>扩展测试输入源&lt;/strong>
&lt;/h3>&lt;p>AI 测试平台能够从多种输入生成全面的测试用例 ，包括：&lt;/p>
&lt;ul>
&lt;li>Jira 工单和用户故事&lt;/li>
&lt;li>应用程序使用屏幕录像&lt;/li>
&lt;li>自然语言需求&lt;/li>
&lt;li>API 规范和文档&lt;/li>
&lt;li>现有手动测试用例&lt;/li>
&lt;/ul>
&lt;p>这种灵活性使得 AI 测试无需严格遵循 BDD 框架或特定的测试用例格式，从而使各种成熟度级别的团队都能够使用 AI 测试 。&lt;/p>
&lt;h2 id="阶段三第-31-45-天评估-ai-测试工具">阶段三（第 31-45 天）：评估 AI 测试工具
&lt;/h2>&lt;p>选择正确的 AI 测试工具，必须使其与您的基础设施、团队技能和长期愿景保持一致 。&lt;/p>
&lt;h3 id="企业级-ai-测试平台的基本功能">&lt;strong>企业级 AI 测试平台的基本功能&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>开源测试代码生成&lt;/strong>：以标准框架（如 Playwright、Selenium 等）生成可维护的代码。&lt;/li>
&lt;li>&lt;strong>自愈能力&lt;/strong>：无需人工干预即可自动适应用户界面（UI）变化。&lt;/li>
&lt;li>&lt;strong>全面测试支持&lt;/strong>：涵盖功能、视觉、性能和安全测试。&lt;/li>
&lt;li>&lt;strong>企业集成&lt;/strong>：与您的 CI/CD 管道、测试管理和缺陷跟踪系统协同工作。&lt;/li>
&lt;li>&lt;strong>跨平台测试&lt;/strong>：支持 Web、移动、API 和企业应用程序（如 Salesforce、SAP 等）。&lt;/li>
&lt;li>&lt;strong>视觉测试&lt;/strong>：AI 驱动的视觉比较和异常检测。&lt;/li>
&lt;li>&lt;strong>不稳定测试管理&lt;/strong>：自动识别和解决不一致的测试。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“即使您停止使用某个供应商，您仍然拥有一个可以维护的代码项目。没有黑盒，没有供应商锁定。”&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>决策框架&lt;/strong>：根据您的具体需求、现有基础设施和团队能力评估工具 。优先选择那些能够生成标准、可维护测试代码而非专有格式的平台 。&lt;/p>
&lt;h2 id="阶段四第-46-60-天为新的-ai-增强测试角色进行培训">阶段四（第 46-60 天）：为新的 AI 增强测试角色进行培训
&lt;/h2>&lt;p>测试自动化中引入 AI，将带来新的 AI 功能和职责，从而提升 QA 团队的角色 。&lt;/p>
&lt;h3 id="ai-测试时代的关键技能">&lt;strong>AI 测试时代的关键技能&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>提示工程&lt;/strong>：创建有效的测试提示，以生成全面的测试覆盖。&lt;/li>
&lt;li>&lt;strong>AI 测试审查&lt;/strong>：评估和完善 AI 生成的测试脚本。&lt;/li>
&lt;li>&lt;strong>测试维护管理&lt;/strong>：监督自愈能力和测试稳定性。&lt;/li>
&lt;li>&lt;strong>测试优先级排序&lt;/strong>：确定每次发布中哪些测试能带来最高价值。&lt;/li>
&lt;li>&lt;strong>探索性测试&lt;/strong>：将人类创造力集中于边缘情况和复杂场景。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“旧技能是脚本编写和调试。新技能呢？编写提示、审查 AI 建议以及大规模管理代码。”&lt;/p>&lt;/blockquote>
&lt;h3 id="qa-团队的培训资源">&lt;strong>QA 团队的培训资源&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>关于 AI 测试概念和提示工程的内部研讨会。&lt;/li>
&lt;li>供应商提供的特定 AI 测试平台培训。&lt;/li>
&lt;li>在实际应用程序测试场景中的动手实践。&lt;/li>
&lt;li>手动和自动化测试人员之间的交叉培训。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>领导力重点&lt;/strong>：鼓励实验并创造一个学习环境，让团队可以通过实际应用发展 AI 测试专业知识 。&lt;/p>
&lt;h2 id="阶段五第-61-75-天试点并扩展-ai-测试覆盖范围">阶段五（第 61-75 天）：试点并扩展 AI 测试覆盖范围
&lt;/h2>&lt;p>启动一个重点明确的试点项目，使用 10-20 个测试场景，以实现快速、可衡量的影响，并建立对 AI 测试能力的信心 。&lt;/p>
&lt;h3 id="理想的试点项目特征">&lt;strong>理想的试点项目特征&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>具有稳定 UI 的中等复杂性应用程序。&lt;/li>
&lt;li>用于比较的现有手动测试用例。&lt;/li>
&lt;li>定期发布周期以展示 CI/CD 集成。&lt;/li>
&lt;li>混合了回归、功能和视觉测试需求。&lt;/li>
&lt;li>利益相关者乐于创新和流程变革。&lt;/li>
&lt;/ul>
&lt;h3 id="实施清单">&lt;strong>实施清单&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>选择试点应用程序并定义测试范围。&lt;/li>
&lt;li>配置 AI 测试工具并与 CI/CD 集成。&lt;/li>
&lt;li>创建初始测试提示并生成基线测试。&lt;/li>
&lt;li>在多个环境中执行测试。&lt;/li>
&lt;li>根据传统测试方法衡量结果。&lt;/li>
&lt;li>记录经验教训和优化机会。&lt;/li>
&lt;/ul>
&lt;p>此阶段非常适合扩展跨浏览器、设备和语言的测试覆盖范围——利用 AI 模型的多语言能力高效测试国际应用程序 。&lt;/p>
&lt;h2 id="阶段六第-76-90-天衡量-kpi-并优化">阶段六（第 76-90 天）：衡量 KPI 并优化
&lt;/h2>&lt;p>跟踪关键绩效指标（KPIs），量化 AI 测试实施的影响并发现优化机会 。&lt;/p>
&lt;h3 id="关键-ai-测试指标-">&lt;strong>关键 AI 测试指标&lt;/strong> ：
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>发布时间&lt;/strong>：整体测试周期时间的缩短。&lt;/li>
&lt;li>&lt;strong>测试覆盖率&lt;/strong>：功能和平台覆盖率的提高。&lt;/li>
&lt;li>&lt;strong>维护工作量&lt;/strong>：测试脚本维护时间的减少。&lt;/li>
&lt;li>&lt;strong>缺陷检测&lt;/strong>：缺陷识别率的提高。&lt;/li>
&lt;li>&lt;strong>资源利用率&lt;/strong>：QA 团队将重心转移到更高价值的活动。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“大多数领导者认为 AI 测试是为了削减成本。但最大的投资回报率实际上是更快的上市时间。”&lt;/p>&lt;/blockquote>
&lt;h3 id="持续改进框架">&lt;strong>持续改进框架&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>每周审查 AI 测试性能和准确性。&lt;/li>
&lt;li>根据测试结果和遗漏场景完善提示。&lt;/li>
&lt;li>将 AI 测试扩展到其他应用程序和测试类型。&lt;/li>
&lt;li>记录最佳实践并在团队之间分享。&lt;/li>
&lt;li>建立 AI 测试卓越中心。&lt;/li>
&lt;/ul>
&lt;p>这些见解将支持您的团队就测试覆盖率、发布准备情况和质量改进做出数据驱动的决策 。&lt;/p>
&lt;h2 id="总结您的-90-天-ai-测试实施路线图">总结：您的 90 天 AI 测试实施路线图
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>阶段&lt;/strong>&lt;/th>
&lt;th>&lt;strong>时间线&lt;/strong>&lt;/th>
&lt;th>&lt;strong>重点&lt;/strong>&lt;/th>
&lt;th>&lt;strong>关键交付物&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>第 1-15 天&lt;/td>
&lt;td>策略定义&lt;/td>
&lt;td>AI 测试愿景、实施方法、成功指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>第 16-30 天&lt;/td>
&lt;td>角色转型&lt;/td>
&lt;td>更新的团队结构、技能要求、输入源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>第 31-45 天&lt;/td>
&lt;td>工具选择&lt;/td>
&lt;td>AI 测试平台评估、选择标准、概念验证&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>第 46-60 天&lt;/td>
&lt;td>团队培训&lt;/td>
&lt;td>技能发展计划、培训资源、知识共享&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>第 61-75 天&lt;/td>
&lt;td>试点实施&lt;/td>
&lt;td>初始 AI 测试套件、与 CI/CD 集成、基线指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>第 76-90 天&lt;/td>
&lt;td>衡量与优化&lt;/td>
&lt;td>绩效分析、优化计划、扩展策略&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="qa-的未来ai-驱动的测试领导力">QA 的未来：AI 驱动的测试领导力
&lt;/h2>&lt;p>借助正确的 AI 测试策略，您的 QA 组织不仅能跟上行业步伐，更将引领向更快、更可靠的软件交付转型 。您不仅仅是在自动化测试，更是在赋能团队，以增强和简化整个测试生命周期，以前所未有的速度交付更高质量的软件，同时降低风险和技术债务 。现在就拥抱 AI 测试，您将使您的组织处于质量工程的前沿，通过卓越的软件质量和加速创新创造可持续的竞争优势 。&lt;/p></description></item><item><title>微软已发布Playwright Mcp</title><link>https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/</link><pubDate>Wed, 02 Apr 2025 16:38:33 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402.png" alt="Featured image of post 微软已发布Playwright Mcp" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>&lt;code>MCP协议&lt;/code>是由AI公司 Anthropic（claude的母公司）于2024年11月推出的一个针对AI能力的开放协议，旨在标准化大语言模型（LLM）与外部数据源、工具之间的交互接口。其核心设计目标：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>解耦与标准化&lt;/strong>：将LLM与外部系统的集成从定制化开发转变为基于统一协议的通用连接，类似硬件领域的USB-C接口。&lt;/li>
&lt;li>&lt;strong>去中心化&lt;/strong>：通过允许开发者自主构建MCP Server，分散AI能力，避免单一厂商垄断知识和服务。&lt;/li>
&lt;li>&lt;strong>安全可控&lt;/strong>：通过权限验证和本地化部署，确保数据隐私与操作安全。&lt;/li>
&lt;/ul>
&lt;p>而 &lt;code>MCP Server&lt;/code> 则是MCP的关键组件，提供如下三种功能：&lt;/p>
&lt;ul>
&lt;li>资源（Resources）：类似文件的数据，可以被客户端读取，如 API 响应或文件内容。&lt;/li>
&lt;li>工具（Tools）：可以被 LLM 调用的函数（需要用户批准）。&lt;/li>
&lt;li>提示（Prompts）：预先编写的模板，帮助用户完成特定任务。&lt;/li>
&lt;/ul>
&lt;p>通过这些能力，MCP Server可以为AI应用提供更加丰富的上下文操作私有数据或特定应用的能力，从而增强 LLM 的实用性。&lt;/p>
&lt;p>在上一篇文章 【】中，我们已经对 MCP Server有了基本认识，并且提供了一个基本的查询本地桌面的案例，并利用AI编辑器&lt;code>Cursor&lt;/code>实现了这个MCP server的调用。&lt;/p>
&lt;h1 id="微软官方推出playwright-mcp">微软官方推出Playwright-mcp
&lt;/h1>&lt;p>MCP Server目前的很多应用中，调度浏览器操作是一个极为高频的场景，基于Playwright这个新锐浏览器工具，也已经有第三方先行推出了MCP Server&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402.png"
width="1812"
height="972"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402_hu_dcfee7661167b616.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402_hu_eb9eb089cb2c9e93.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>而现在，微软官方也终于推出了Playwright-mcp，可以和Vscode copilot无缝结合使用&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-1.png"
width="1727"
height="969"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-1_hu_f83931781b693850.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-1_hu_f4937900ada6a48f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;h1 id="playwright-mcp-部署">Playwright-mcp 部署
&lt;/h1>&lt;p>因为Playwright-mcp刚刚推出，目前 vscode中对它的集成主要还是在vscode的先览版vscode insider中。所以我们可以从vscode官网先下载一个vscode insider
&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-2.png"
width="1051"
height="542"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-2_hu_5de3b2f34b5084a9.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-2_hu_dfa42d4ead8ed82c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>安装好vscode insider后，在github项目主页上，直接点击对应按钮即可进行安装&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-3.png"
width="1315"
height="891"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-3_hu_5c4449d9135f39e8.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-3_hu_f010a4faa2d88b64.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>打开vscode 后，选择 install server，这时会自动配置好mcp server的配置文件，点击start，将mcp server运行起来，这样其实就完成了部署&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-4.png"
width="2167"
height="1282"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-4_hu_10322492c1fa97d1.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-4_hu_bc963d7464a1b201.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="405px"
>&lt;/p>
&lt;p>点击copilot对话框中，显示的tools按钮，可以看到目前集成的tools，主要对应playwright的15种主要操作行为&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-5.png"
width="1534"
height="1147"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-5_hu_bade8d3df695395a.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-5_hu_8ce9e42f6fe87c4a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;h1 id="用playwright-mcp无代码完成浏览器操作和验证">用playwright-mcp无代码完成浏览器操作和验证
&lt;/h1>&lt;p>下面我们就看看效果吧。&lt;/p>
&lt;p>打开copilot，输入指令：&lt;/p>
&lt;blockquote>
&lt;p>导航到&lt;a class="link" href="vscode-file://vscode-app/c:/Users/Administrator/AppData/Local/Programs/Microsoft%20VS%20Code%20Insiders/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html" >https://www.saucedemo.com&lt;/a>, 用账号standard_user和密码secret_sauce登录，并确认登录成功，product页面正常显示&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-6.png"
width="2157"
height="1260"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-6_hu_8fe494e7a59ad5b8.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-6_hu_254210cae61ea493.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>继续执行，得出结果，用例执行成功&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-7.png"
width="2126"
height="1155"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-7_hu_21781221ab7518e2.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-7_hu_6c9cb4820d181e78.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="441px"
>&lt;/p>
&lt;p>可以看到，这里我们没有编写任何代码，就利用Playwright的mcp完成了对登录用例的执行。&lt;/p>
&lt;p>当然实际工作中，通过mcp server的集成，更多是为了我们方便地调用浏览器完成任务执行提供了更多便利！&lt;/p>
&lt;p>基于MCP-Server，相信还有更多、更丰富的实践可以帮助到我们！&lt;/p>
&lt;hr>
&lt;p>上一篇文章中，我们介绍了通过vscode insiders 集成微软官方的playwright mcp并执行测试的一个基本效果。&lt;/p>
&lt;p>有小伙伴提问是否能在 &lt;code>Cursor&lt;/code> 中使用？这里我也进行了尝试，答案是可以成功集成，但有点小坑。 这里就跟大家分享下配置过程，以及Cursor中集成mcp以后的强大能力。让 AI 帮助我们完成大部分基本的功能测试已经不再遥远&lt;/p>
&lt;h2 id="在cursor中启用playwright-mcp">在Cursor中启用playwright-mcp
&lt;/h2>&lt;h3 id="预置安装">预置安装
&lt;/h3>&lt;p>首先，当然要先安装mcp server以及对应的依赖，这里mcp和playwright都是基于nodejs的。所以通过下面命令先安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">npm install -g @playwright/mcp@latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm install -g @playwright@latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npx playwright install --with-deps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cursor配置">Cursor配置
&lt;/h3>&lt;p>完成安装后，进入 Cursor 的设置页面，在其MCP部分，添加 MCP server配置，参照Playwright官网的介绍，
添加mcp sever配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;playwright&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;npx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;@playwright/mcp@latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但这时，cursor中的mcp server实际并不能正常运行，会显示 &lt;code>Clint closed&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/-20250404.png"
width="1915"
height="746"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/-20250404_hu_39c9f769da6c86aa.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/-20250404_hu_e2be4efa3972eade.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="616px"
>&lt;/p>
&lt;h3 id="windows系统安装要规避两个坑">windows系统安装，要规避两个坑
&lt;/h3>&lt;p>&lt;strong>第一个坑：npx 包加载路径应该加入搜索路径&lt;/strong>&lt;/p>
&lt;p>也就是要将全局安装的相关包，放到nodejs的搜索路径中。做法是在windows系统的环境变量中，把npm包目录加入path中，并放到nodejs之前&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250404.png"
width="719"
height="794"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250404_hu_90aeece056371733.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250404_hu_1985853fae73d10.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>&lt;strong>第二个坑：修改mcp命令行调用命令&lt;/strong>&lt;/p>
&lt;p>cursor中调用npx，其实是通过命令行调用的，但windows系统下，直接通过命令行调用npx，cursor本身并不能拿到调用状态，所以这里要用 &lt;code>cmd /c&lt;/code> 命令调用, 获取命令句柄&lt;/p>
&lt;p>也就是上面的配置文件，修改成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;playwright&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cmd /c npx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;@playwright/mcp@latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改以上配置后，重新加载cursor，这时会启动一个命令行窗口，其实就是playwright-mcp，不要关闭，然后可以看到 Cursor中mcp也正常启动了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250403.png"
width="1327"
height="968"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250403_hu_376d11e59d74c973.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250403_hu_ab054adcc69cab03.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;h2 id="让-playwright-mcp-代替我们执行测试">让 playwright-mcp 代替我们执行测试
&lt;/h2>&lt;p>我们在Cursor中输入一个基本的任务指令：&lt;/p>
&lt;blockquote>
&lt;p>访问www.saucedemo.com网站，使用problem_user登录，验证该网站完整流程并记录发现的问题&lt;/p>&lt;/blockquote>
&lt;p>以下是完整执行过程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我将帮您访问 Sauce Demo 网站并使用 problem_user 账号进行完整测试流程验证。让我们开始吧。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先，让我访问网站：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_navigate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我使用 problem_user 账号登录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在输入密码：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击登录按钮：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们开始测试并记录问题。首先我注意到以下问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 商品图片问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">所有商品的图片都显示相同的图片（狗的图片），这明显是一个bug，因为每个商品应该显示其独特的产品图片。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我尝试添加商品到购物车：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我点击购物车图标查看购物车：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们返回商品列表并尝试使用排序功能：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我尝试使用排序功能：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_select_option
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">基于测试过程，我发现了以下问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 图片显示问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 所有商品的图片都显示为相同的狗图片，而不是各自的产品图片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这影响了用户对产品的视觉识别
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 购物车功能问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品图片或标题时，没有正确跳转到商品详情页，而是直接跳转到了一个固定的商品页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这影响了用户浏览和选择商品的体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 排序功能问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选择不同的排序选项（如按价格从低到高）后，商品列表顺序没有发生变化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 排序功能完全失效
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 导航问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品时总是跳转到同一个商品页面，而不是所点击的具体商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这严重影响了用户的购物体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 按钮状态问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 某些商品的&amp;#34;Add to cart&amp;#34;和&amp;#34;Remove&amp;#34;按钮状态显示不一致
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这可能导致用户对购物车中的商品状态产生混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题严重影响了网站的基本功能和用户体验。problem_user 账号确实展示了多个需要修复的问题，这些问题涵盖了UI显示、功能操作和用户体验等多个方面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">是否需要我继续测试其他功能，比如结账流程？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">请继续测试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">好的，我将继续测试结账流程。首先让我们添加一些商品到购物车，然后进行结账：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在让我们点击购物车图标进入购物车页面：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我发现点击购物车图标又出现了一个问题 - 它把我们带到了商品详情页而不是购物车页面。让我们尝试点击页面右上角的购物车图标：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_navigate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们继续结账流程，点击Checkout按钮：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们填写个人信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击Continue继续：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我发现了一个新的问题：虽然我们输入了姓氏，但系统显示&amp;#34;Last Name is required&amp;#34;的错误。这说明在输入字段上存在问题。让我们再次尝试输入姓氏：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">基于测试过程，我发现了以下新的问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 购物车导航问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品列表页面的购物车图标会错误地导航到商品详情页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 必须手动输入购物车URL才能访问购物车页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 结账表单问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 姓氏（Last Name）输入框存在严重问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 即使输入了姓氏，系统仍然显示&amp;#34;Last Name is required&amp;#34;错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这个问题阻止了用户完成结账流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 购物车商品显示问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 购物车中显示的商品数量与实际添加的商品数量不一致
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 一些未添加的商品也出现在购物车中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题与之前发现的问题一起，严重影响了整个购物流程：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 用户无法正常浏览商品（图片问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法正确添加商品到购物车（购物车功能问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法使用排序功能（排序失效）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法正常访问购物车（导航问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法完成结账流程（表单验证问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题使得 problem_user 账号几乎无法完成正常的购物流程。每个主要功能都存在不同程度的问题，这可能是为了测试目的而特意设置的。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">是否需要我继续测试其他功能，比如菜单栏的功能？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">完成测试，请退出登录并汇总发现的问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">好的，让我们先点击菜单按钮然后退出登录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我来汇总使用 problem_user 账号测试发现的所有问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 1. 商品展示问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 所有商品图片显示为相同的狗图片，而不是各自的产品图片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这严重影响了用户对产品的视觉识别和购物体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 2. 导航问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品图片或标题时，总是跳转到固定的商品页面，而不是所点击的具体商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击购物车图标错误地导航到商品详情页，而不是购物车页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 必须手动输入购物车URL才能正确访问购物车页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 3. 商品排序功能问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选择不同的排序选项（如按价格从低到高）后，商品列表顺序没有任何变化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 排序功能完全失效，无法帮助用户按需要的方式浏览商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 4. 购物车功能问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 购物车中显示的商品与实际添加的商品不一致
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 一些未添加的商品也出现在购物车中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- &amp;#34;Add to cart&amp;#34;和&amp;#34;Remove&amp;#34;按钮状态显示不一致，造成用户混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 5. 结账流程问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 姓氏（Last Name）输入框存在严重问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 即使输入了姓氏，系统仍然显示&amp;#34;Last Name is required&amp;#34;错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这个验证问题完全阻止了用户完成结账流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 6. 用户体验影响
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 以上问题的综合效果导致：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 用户无法正确浏览和选择商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法管理购物车内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法完成购物流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 整体购物体验严重受损
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 7. 功能可用性评估
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 基本功能几乎都存在问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 用户无法完成正常的购物流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这个账号可能是专门用于测试目的，展示了各种可能的问题场景
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题涵盖了电子商务网站的核心功能，包括商品展示、导航、购物车管理和结账流程。每个环节都存在不同程度的问题，使得整个购物体验变得极其困难和令人沮丧。这些问题的存在可能是为了测试目的，帮助开发人员和测试人员理解各种可能的错误场景。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，通过 Cursor + Playwright-mcp ，AI 已经可以通过我们交代的基本指令，主动帮助我们去覆盖主要的功能测试场景并发现和记录问题。假以时日，完全可以很大程度上替代掉比较基础功能测试任务，而测试人员则可以更关注在高价值的深度问题挖掘上。当然，另一方面，基础功能测试人员，确实也要有相当的危机意识，技能提升和扩展边界刻不容缓。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/qrcode_for_gh_e12c318badb4_258%20%281%29.jpg"
loading="lazy"
>&lt;/p>
&lt;p>欢迎关注秋草的测试技能体系化进阶提升课程，公众号回复 &lt;code>大纲&lt;/code> 了解课程详细目录&lt;/p></description></item><item><title>AI下一站 MCPServer</title><link>https://chengxiaqiucao.github.io/post/073-ai%E4%B8%8B%E4%B8%80%E7%AB%99-mcpserver/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/073-ai%E4%B8%8B%E4%B8%80%E7%AB%99-mcpserver/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/073-ai%E4%B8%8B%E4%B8%80%E7%AB%99-mcpserver/Pasted-20250402.png"
width="565"
height="316"
srcset="https://chengxiaqiucao.github.io/post/073-ai%E4%B8%8B%E4%B8%80%E7%AB%99-mcpserver/Pasted-20250402_hu_46206cb9f1795ee6.png 480w, https://chengxiaqiucao.github.io/post/073-ai%E4%B8%8B%E4%B8%80%E7%AB%99-mcpserver/Pasted-20250402_hu_f61027482dac19eb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;h2 id="引言">引言
&lt;/h2>&lt;p>在AI技术高速演进的2025年，大模型的局限性日益凸显：它们虽拥有强大的推理能力，却难以直接访问私有数据或调用外部工具。这一痛点催生了一项革命性技术——&lt;strong>MCP（Model Context Protocol，模型上下文协议）&lt;/strong>，而作为其核心组件的&lt;strong>MCP Server&lt;/strong>，正成为AI行业的下一个风口。本文将深入解析MCP Server的技术本质、行业价值，并结合实际案例探讨其应用前景。&lt;/p>
&lt;hr>
&lt;h2 id="一何为mcpmcp的前世今生">一、何为MCP？MCP的前世今生
&lt;/h2>&lt;h3 id="1-mcp的定义与设计目标">1. MCP的定义与设计目标
&lt;/h3>&lt;p>MCP是由AI公司Anthropic（claude母公司）于2024年11月推出的开放协议，旨在标准化大语言模型（LLM）与外部数据源、工具之间的交互接口。其核心设计目标：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>解耦与标准化&lt;/strong>：将LLM与外部系统的集成从定制化开发转变为基于统一协议的通用连接，类似硬件领域的USB-C接口。&lt;/li>
&lt;li>&lt;strong>去中心化&lt;/strong>：通过允许开发者自主构建MCP Server，分散AI能力，避免单一厂商垄断知识和服务。&lt;/li>
&lt;li>&lt;strong>安全可控&lt;/strong>：通过权限验证和本地化部署，确保数据隐私与操作安全。&lt;/li>
&lt;/ul>
&lt;h3 id="2-从langchain到mcp的技术演进">2. 从Langchain到MCP的技术演进
&lt;/h3>&lt;p>在MCP之前，开发者依赖如Langchain等中间层框架连接LLM与工具，但这些方案存在两大瓶颈：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>碎片化&lt;/strong>：不同厂商的API标准不统一，集成成本高；&lt;/li>
&lt;li>&lt;strong>封闭性&lt;/strong>：OpenAI等厂商的插件生态受限于自身平台，难以跨模型复用。&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>MCP通过协议层的抽象，将工具调用、数据访问等能力封装为标准化接口，使任何支持MCP协议的LLM均可无缝接入第三方服务。&lt;/p>
&lt;h3 id="3-mcp的生态现状">3. MCP的生态现状
&lt;/h3>&lt;p>现阶段，MCP生态已初具规模：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>头部公司支持&lt;/strong>：除了发起公司的claude，包括AI行业领军的OpenAI，在国内百度、腾讯等也均宣称支持MCP&lt;/li>
&lt;li>&lt;strong>开发者众多&lt;/strong>：因开发门槛低，当前公开的各类MCP Server已呈爆炸式增长态势，短短数周已有数千个公开Server，涵盖数据库、设计工具、支付系统等领域。&lt;/li>
&lt;li>&lt;strong>商业价值显现&lt;/strong>：a16z等机构已绘制MCP市场地图，预测其可能催生“Agentic AI领域的Stripe”级公司。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="二mcp-server有何作用为什么它可能是ai行业的下一个风口">二、MCP Server有何作用？为什么它可能是AI行业的下一个风口？
&lt;/h2>&lt;h3 id="1-mcp-server的核心功能">1. MCP Server的核心功能
&lt;/h3>&lt;p>MCP Server是MCP协议的具体实现，承担以下关键角色：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>工具代理&lt;/strong>：将外部API（如GitHub、PostgreSQL）转化为LLM可理解的标准化工具描述，例如将“创建GitHub Issue”抽象为函数调用。&lt;/li>
&lt;li>&lt;strong>数据网关&lt;/strong>：安全访问本地或云端数据，例如通过文件系统MCP Server让LLM读取桌面文件。&lt;/li>
&lt;li>&lt;strong>流程编排&lt;/strong>：支持多工具串联调用，例如先查询数据库再生成报告。&lt;/li>
&lt;/ul>
&lt;h3 id="2-成为风口的三大驱动力">2. 成为风口的三大驱动力
&lt;/h3>&lt;h4 id="1技术趋势从胖模型到瘦模型生态">（1）技术趋势：从“胖模型”到“瘦模型+生态”
&lt;/h4>&lt;p>传统“胖模型”试图将所有知识内化于参数中，导致训练成本高且时效性差。MCP架构下，LLM专注于语言理解，知识扩展与工具调用由MCP Server网络实现，形成“瘦模型+分布式能力”的新范式。&lt;/p>
&lt;h4 id="2经济模型创作者经济的ai化">（2）经济模型：创作者经济的AI化
&lt;/h4>&lt;p>MCP允许个人开发者通过构建MCP Server（如鸟类知识库）获得收益分成，形成去中心化的知识经济网络。例如，基于以太坊的OpenMCP.Network可通过智能合约实现调用量自动结算。&lt;/p>
&lt;h4 id="3行业需求企业私有化ai落地的刚需">（3）行业需求：企业私有化AI落地的刚需
&lt;/h4>&lt;p>企业可通过MCP Server将内部系统（如CRM、ERP）安全暴露给LLM，无需将敏感数据上传至云端。NineData等公司已推出数据库MCP Server解决方案，支持本地化数据管理。&lt;/p>
&lt;hr>
&lt;h2 id="三作为软件测试从业者我们如何应用mcp-server">三、作为软件测试从业者，我们如何应用MCP Server？
&lt;/h2>&lt;h3 id="1-测试场景的mcp化改造">1. 测试场景的MCP化改造
&lt;/h3>&lt;h4 id="1模拟外部依赖">（1）模拟外部依赖
&lt;/h4>&lt;p>通过构建Mock MCP Server，替代真实支付、第三方API等依赖项，实现测试环境隔离。例如，模拟支付宝接口返回异常响应，验证系统容错能力。&lt;/p>
&lt;h4 id="2数据驱动测试">（2）数据驱动测试
&lt;/h4>&lt;p>将测试用例存储在数据库或文件中，通过MCP Server动态读取并执行。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@mcp.tool&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">load_test_cases&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;从指定目录加载JSON格式测试用例&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;test_cases.json&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试框架可自动获取用例并生成测试报告。&lt;/p>
&lt;h4 id="3ai辅助测试">（3）AI辅助测试
&lt;/h4>&lt;p>利用LLM通过MCP Server调用测试工具，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>自动生成测试脚本&lt;/strong>：根据需求描述生成Selenium代码；&lt;/li>
&lt;li>&lt;strong>智能分析日志&lt;/strong>：结合ELK Stack的MCP Server定位缺陷根源。&lt;/li>
&lt;/ul>
&lt;h3 id="2-测试从业者的技能升级建议">2. 测试从业者的技能升级建议
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>掌握MCP Server开发&lt;/strong>：学习Python/TypeScript的MCP SDK，构建定制化测试工具。&lt;/li>
&lt;li>&lt;strong>熟悉主流MCP生态&lt;/strong>：关注GitHub上的Awesome MCP Servers列表，了解测试相关服务（如PostgreSQL、JIRA集成）。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="四mcp-server的简单实现案例桌面文件查询服务">四、MCP Server的简单实现案例：桌面文件查询服务
&lt;/h2>&lt;h3 id="1-环境准备">1. 环境准备
&lt;/h3>&lt;ul>
&lt;li>安装Python MCP SDK：&lt;code>pip install mcp&lt;/code>&lt;/li>
&lt;li>创建项目目录：&lt;code>mkdir mcp-demo &amp;amp;&amp;amp; cd mcp-demo&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="2-代码实现">2. 代码实现
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">mcp.server.fastmcp&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">FastMCP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mcp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FastMCP&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@mcp.tool&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">list_desktop_files&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;获取当前用户桌面文件列表&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">expanduser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;~/Desktop&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mcp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">transport&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;stdio&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此代码定义了一个MCP Server，提供&lt;code>list_desktop_files&lt;/code>工具，允许LLM查询用户桌面文件。&lt;/p>
&lt;h3 id="3-客户端配置与测试">3. 客户端配置与测试
&lt;/h3>&lt;p>在Cursor编辑器的&lt;code>mcp.json&lt;/code>中添加配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;desktop&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;python server.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动服务后，我们可直接提问：“我的桌面有哪些文件？”，Cursor将通过MCP协议调用服务并返回我当前桌面上的文件清单，并按类型进行分类。&lt;/p>
&lt;hr>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>MCP Server正在重塑AI与物理世界的交互方式。对开发者而言，它是降低集成成本的利器；对企业而言，它是激活数据价值的钥匙；对测试从业者而言，它是自动化演进的新引擎。尽管生态仍处早期，但其标准化、去中心化的设计理念，已为AI行业的下一站指明了方向。正如Anthropic所言：“MCP不是终点，而是Agentic AI时代的起点。”&lt;/p></description></item><item><title>AI时代的软件测试，助手还是对手？</title><link>https://chengxiaqiucao.github.io/post/070-ai%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%8B%E8%AF%95/</link><pubDate>Tue, 25 Mar 2025 21:38:36 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/070-ai%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>当下时代，AI浪潮呼啸而至，未来已来已不是一句空话。和AI相关的话题、讨论也成了科技圈的“流量密码”，从自动驾驶到智能客服，每个行业似乎都在蹭这波AI的热度。&lt;/p>
&lt;p>但作为测试从业者，我们在面对 AI 的快速发展时，大家更关心的可能是：&lt;strong>AI在软件测试里到底能干啥？真的能帮我们提高产出、效率吗？或者发展下去，AI会否彻底替代测试岗位？&lt;/strong>&lt;/p>
&lt;p>本篇我们就来探讨下这个话题&lt;/p>
&lt;h2 id="ai在软件测试不同阶段中的角色">AI在软件测试不同阶段中的角色
&lt;/h2>&lt;p>AI测试，归根到底，还是希望它承担部分或者辅助、提升原来的测试工作，也就是说，AI本身，并不会改变软件研发的测试生命周期规律。&lt;/p>
&lt;p>所以，我们可以从软件测试生命周期的不同阶段，测试工作职责范围的角度，来看AI可以发挥哪些作用。&lt;/p>
&lt;h3 id="需求分析阶段">需求分析阶段
&lt;/h3>&lt;p>这个阶段，我们可以基于AI的自然语言处理技术，对原始需求文档进行梳理，输出包括业务流程图、操作流图、数据流向等分析结果。&lt;/p>
&lt;p>同时也可以结合更多关联的本地数据，如历史Bug数据、测试日志、项目数据等，识别测试的优先级并构建风险模型，识别风险。并基于这些分析结果，帮助我们更合理地制定测试计划。&lt;/p>
&lt;h3 id="测测试用例设计阶段">测测试用例设计阶段
&lt;/h3>&lt;p>在软件设计和开发阶段，测试人员通常也会同步完成测试设计，这个阶段，我们可以利用 AI 帮助我们基于需求文档和需求分析阶段的成果，完成测试用例的生成，基于AI可以完成更多更充分的正向、反向用例以及各种边界条件以扩大覆盖范围。&lt;/p>
&lt;h3 id="测试准备阶段">测试准备阶段
&lt;/h3>&lt;p>这阶段，最主要的工作是测试环境的搭建部署，可以利用AI能力结合CI平台实现测试服务器、数据库的环境智能化管理和资源的动态调配等工作。&lt;/p>
&lt;h3 id="测试执行阶段">测试执行阶段
&lt;/h3>&lt;p>执行阶段，可以基于各种风险评估、依赖关系及业务影响等因素动态调整测试顺序，优先覆盖更高风险的模块，实现缺陷尽早暴露的目的。&lt;/p>
&lt;p>另外，也可以通过AI增强如日志分析、图像比对等能力，提升我们的测试执行效率和缺陷发现能力。&lt;/p>
&lt;h3 id="测试报告阶段">测试报告阶段
&lt;/h3>&lt;p>在测试的收尾部分，利用AI针对各种过程数据的综合分析，可以帮助我们出具多维度的测试报告，为项目决策者提供结构化的测试状态分析。&lt;/p>
&lt;h2 id="现阶段-ai-如何赋能软件测试">现阶段 AI 如何赋能软件测试
&lt;/h2>&lt;p>目前的AI的发展，已经可以在很多典型的测试场景下提供更多支持，以下梳理了可以通过AI赋能的一些典型场景&lt;/p>
&lt;ul>
&lt;li>&lt;strong>智能数据生成&lt;/strong>：创建多样化数据集，覆盖常规场景与边缘用例&lt;/li>
&lt;li>&lt;strong>自动化测试&lt;/strong>：自动适应UI变更，保证自动化测试脚本稳定性&lt;/li>
&lt;li>&lt;strong>精准回归测试&lt;/strong>：基于代码变更智能选取关联测试用例&lt;/li>
&lt;li>&lt;strong>流程克隆&lt;/strong>：学习测试工作流后自动执行相似流程&lt;/li>
&lt;li>&lt;strong>动态等待机制&lt;/strong>：智能判断页面加载状态后执行操作&lt;/li>
&lt;li>&lt;strong>日志智能分析&lt;/strong>：分析、识别错误日志中的潜在问题模式&lt;/li>
&lt;li>&lt;strong>负载/性能测试&lt;/strong>：模拟真实用户行为、诊断性能瓶颈&lt;/li>
&lt;li>&lt;strong>持续测试监控&lt;/strong>：实时监测应用状态并预警异常&lt;/li>
&lt;li>&lt;strong>探索性测试支持&lt;/strong>：在探索测试过程中提供智能化建议&lt;/li>
&lt;li>&lt;strong>预测性分析&lt;/strong>：基于历史数据预测版本发布风险&lt;/li>
&lt;/ul>
&lt;h2 id="引入ai的优势">引入AI的优势
&lt;/h2>&lt;p>AI 可以通过持续地学习、训练并不断提升，因此引入AI后，可以在以下诸多方面建立起优势：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>成本优化&lt;/strong>：可以降低人工成本，优化资源配置，加速产品上市&lt;/li>
&lt;li>&lt;strong>稳定可靠&lt;/strong>：确保测试的标准化执行与结果一致性&lt;/li>
&lt;li>&lt;strong>缺陷早筛&lt;/strong>：提前暴露问题，缩短修复周期&lt;/li>
&lt;li>&lt;strong>快速反馈&lt;/strong>：多环境并行测试，缩短反馈链路&lt;/li>
&lt;li>&lt;strong>高质量用例&lt;/strong>：自动生成单元测试、回归测试、API测试等多样化用例&lt;/li>
&lt;/ul>
&lt;h2 id="应用ai依然存在巨大的挑战">应用AI依然存在巨大的挑战
&lt;/h2>&lt;h3 id="人工智能还是人工智障">&lt;strong>人工智能还是“人工智障”&lt;/strong>
&lt;/h3>&lt;p>AI的训练数据如果有偏差，结果可能离谱到让你怀疑人生。如果AI的训练结果不理想，那么AI的应用可能不仅无法提升效率，反而还会浪费大量额外的资源去校正它的执行结果。&lt;/p>
&lt;h3 id="数据依赖症">&lt;strong>数据依赖症&lt;/strong>
&lt;/h3>&lt;p>AI 对于优质训练数据和各种参数调整的高要求，往往对具体行业的实际落地应用形成很大制约。&lt;/p>
&lt;h3 id="维护成本比想象中高">&lt;strong>维护成本比想象中高&lt;/strong>
&lt;/h3>&lt;p>不止是数据资源的投入，对本地数据集的模型训练也需要投入大量时间与资金，包括设备资源也是较大的开支。另外现阶段AI人才的缺口，也让AI应用的人力成本高出一大截&lt;/p>
&lt;h3 id="经验和直觉ai永远学不会">&lt;strong>经验和直觉，AI永远学不会&lt;/strong>
&lt;/h3>&lt;p>经验丰富的老测试人通过各种蛛丝马迹可以嗅出产品中一些隐性的缺陷，这种类似第六感的“玄学”，AI必然难以复制。&lt;/p>
&lt;h2 id="助手还是对手">助手还是对手？
&lt;/h2>&lt;p>“AI这么发展，测试工程师是不是要失业了？” &lt;strong>其实大可不必惊慌！&lt;/strong>&lt;/p>
&lt;p>AI的本质还是工具，就像通过自动化测试取代部分手工的校验一样，它只会改变部分工作方式，而非淘汰岗位。未来的测试人员更像是“AI训练师+策略指挥官”——我们需要做的其实就是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>教会AI理解业务逻辑&lt;/strong>（比如什么是“正确的订单状态流转”）；&lt;/li>
&lt;li>&lt;strong>设计更聪明的测试策略&lt;/strong>（比如如何平衡自动化与探索性测试）；&lt;/li>
&lt;li>&lt;strong>解读AI的结果并决策&lt;/strong>（比如某个异常到底是Bug还是误报）。&lt;/li>
&lt;/ul>
&lt;p>AI就像扫地机器人，能帮你清理地面，但遇到顽固污渍（复杂业务场景）、家具布局变化（需求变更），还是得你亲自出马。&lt;/p>
&lt;h2 id="结语ai不是终点而是新起点">结语：AI不是终点，而是新起点
&lt;/h2>&lt;p>AI在软件测试中的应用还处于起步期，我们可以看到它的巨大潜力，但还不到能完全信赖并放弃原有模式的时候。作为测试人员，与其焦虑“会不会被取代”，不如主动拥抱变化：学点机器学习基础知识，了解主流AI测试工具，甚至参与训练自己的模型。&lt;/p>
&lt;p>毕竟，&lt;strong>未来的软件测试江湖，最吃香的肯定不是“最会点鼠标的人”，而是“最会和AI打交道的人”&lt;/strong>。你说呢？&lt;/p>
&lt;hr>
&lt;p>部分前文也探讨过AI的发展，参考阅读&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/JkBcOzZpVEVJBtvZjE4vEQ?token=645759914&amp;amp;lang=zh_CN" target="_blank" rel="noopener"
>AI时代，程序员还有没有出路&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://mp.weixin.qq.com/s/k9Dj9eRBhehPtbMiIHnn9g" target="_blank" rel="noopener"
>测试职业和其发展前景&lt;/a>&lt;/p></description></item><item><title>代码中集成deepseekAPI执行测试</title><link>https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/</link><pubDate>Wed, 19 Mar 2025 14:05:03 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>在之前的文章&lt;/p>
&lt;p>&lt;a class="link" href="https://chengxiaqiucao.github.io/post/52-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/" target="_blank" rel="noopener"
>用deepseek+vscode自动完成测试脚本&lt;/a>&lt;/p>
&lt;p>我们介绍了vscode的AI插件，可以帮助我们完成自动化测试用例的生成。&lt;/p>
&lt;p>而目前Deepseek 官方的API其实也重新开放，对于我们深度利用Deepseek等大模型打造贴合实际工作应用的场景，提供了更多可能性。&lt;/p>
&lt;p>下面我们就以 Deepseek 官方API的集成为例，完成在代码中通过调用大模型，实现测试用例自动生成，并完成执行的实践。&lt;/p>
&lt;p>首先从Deepseek官网进入它的API开放平台&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319.png"
width="1640"
height="850"
srcset="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319_hu_d4f3554457c1966e.png 480w, https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319_hu_67db4896ac5d966c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>&lt;/p>
&lt;p>进入以后，申请一个APIkey，目前Deepseek的定价还是比较低的，而且特定时段还有较大折扣&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319-1.png"
width="1074"
height="758"
srcset="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319-1_hu_56ae016408b1a041.png 480w, https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319-1_hu_1e36cd156d004cf8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>有了这个API Key以后，我们就可以在代码中进行调用了&lt;/p>
&lt;p>目前Deepseek API 是兼容了openai 的 api 接口&lt;/p>
&lt;p>通过以下代码，结合Python标准库inspect，我们可以直接让deepseek针对我们的被测代码，实现用例的生成。&lt;/p>
&lt;p>当然我们也可以将对应的需求文本传输给deepseek，原理类似&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">inspect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">openai&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">OpenAI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 引入deepseek api&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OpenAI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">api_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;your_deepseek_api_key&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">base_url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://api.deepseek.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 被测函数，计算BMI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_bmi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;身高、体重必须大于0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bmi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">bmi&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">18.5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;竹竿！&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="mf">18.5&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">bmi&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">24.9&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;正常人&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="mi">25&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">bmi&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">29.9&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;壮士！&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;肥宅！&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过inspect获取函数源代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inspect&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">calculate_bmi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据获取的代码，定义提示词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">the_prompt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">请针对以下代码生成基于pytest框架的测试用例：&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">function_code&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">尽可能使用参数化测试，包含各种异常场景
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 调用deepseek api 使用V3模型，获取返回&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chat&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">completions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;deepseek-chat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">messages&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;system&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;You are a python testing assistant&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">the_prompt&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">max_tokens&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temperature&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">0.7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stream&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">choices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过以上代码，我们可以获取deepseek V3 返回的结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为了测试 &lt;span class="sb">`calculate_bmi`&lt;/span> 函数，我们可以使用 &lt;span class="sb">`pytest`&lt;/span> 框架，并结合 &lt;span class="sb">`pytest.mark.parametrize`&lt;/span> 来实现参数化测试。以下是一个完整的测试用例，涵盖了正常情况和异常情况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ``&lt;span class="sb">`python
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">import pytest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"># 导入要测试的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">from your_module import calculate_bmi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"># 正常情况的测试用例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">@pytest.mark.parametrize(&amp;#34;weight, height, expected&amp;#34;, [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (60, 1.75, &amp;#34;正常人&amp;#34;), # 正常BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (50, 1.75, &amp;#34;竹竿！&amp;#34;), # 低BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (80, 1.75, &amp;#34;壮士！&amp;#34;), # 高BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (100, 1.75, &amp;#34;肥宅！&amp;#34;), # 超高BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">])
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">def test_calculate_bmi_normal(weight, height, expected):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> assert calculate_bmi(weight, height) == expected
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"># 异常情况的测试用例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">@pytest.mark.parametrize(&amp;#34;weight, height, expected_exception&amp;#34;, [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (0, 1.75, ValueError), # 体重为0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (60, 0, ValueError), # 身高为0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (-10, 1.75, ValueError), # 体重为负数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (60, -1.75, ValueError), # 身高为负数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">])
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">def test_calculate_bmi_exceptions(weight, height, expected_exception):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> with pytest.raises(expected_exception):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> calculate_bmi(weight, height)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span> `&lt;span class="sb">`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">### 解释：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">1. **正常情况测试**：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 使用 `&lt;/span>pytest.mark.parametrize&lt;span class="sb">` 来测试不同的体重和身高组合，验证函数返回的BMI分类是否正确。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 测试用例包括正常BMI、低BMI、高BMI和超高BMI的情况。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">2. **异常情况测试**：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 测试函数在输入无效值（如体重或身高为0或负数）时是否抛出 `&lt;/span>ValueError&lt;span class="sb">` 异常。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 使用 `&lt;/span>pytest.raises&lt;span class="sb">` 来捕获预期的异常。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">### 运行测试：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">确保你已经安装了 `&lt;/span>pytest&lt;span class="sb">`，然后在终端中运行以下命令来执行测试：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>`&lt;span class="sb">`bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">pytest test_bmi.py
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span> `&lt;span class="sb">`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">### 注意：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">- `&lt;/span>your_module&lt;span class="sb">` 是包含 `&lt;/span>calculate_bmi&lt;span class="sb">` 函数的模块名，请根据实际情况替换。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">- 测试文件通常命名为 `&lt;/span>test_*.py&lt;span class="sb">` 或 `&lt;/span>*_test.py&lt;span class="sb">`，以便 `&lt;/span>pytest` 自动识别并运行测试。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而为了进一步直接利用生成的结果，我们其实可以针对这里的输出，提取出markdown格式文本中的代码，写入一个测试文件，然后调用执行即可&lt;/p>
&lt;p>具体代码如下，利用正则表达式（正则表达式详细介绍，可参见前文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/58-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener"
>搞定正则表达式，告别新手村！&lt;/a>）提取代码部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 用户配置 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">run_tests&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span> &lt;span class="c1"># 配置是否运行测试 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果需要运行测试，则将测试用例写入文件并执行 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">run_tests&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 创建测试文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;test_calculate_bmi.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_file_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">test_file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;import pytest&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;from ai_test import calculate_bmi&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">r&lt;/span>&lt;span class="s1">&amp;#39;```python([\s\S]*?)```\n&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_cases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DOTALL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_code&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 使用pytest执行测试 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">subprocess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;pytest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_file_name&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">capture_output&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 输出测试结果 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;测试结果:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;错误信息:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 可选：删除测试文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># os.remove(test_file_name)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这种方式，我们就完成了通过deepseek自动生成用例并立即执行，输出结果的尝试。&lt;/p>
&lt;p>当然，案例比较简单，只是一个通过AI全自动完成单元测试的初步试验，具体应用还须更进一步地深入探索！&lt;/p></description></item><item><title>用deepseek+vscode自动完成测试脚本</title><link>https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek+vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</link><pubDate>Fri, 31 Jan 2025 21:29:12 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek+vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</guid><description>&lt;p>近几日Deepseek大火，我这里也尝试了一下，确实很强。而目前vscode的AI toolkit插件也已经集成了deepseek R1，这里就介绍下在vscode中利用deepseek帮助我们完成自动化测试脚本的实践分享&lt;/p>
&lt;h2 id="安装ai-toolkit并启用deepseek">安装AI ToolKit并启用Deepseek
&lt;/h2>&lt;p>微软官方提供了一个针对AI辅助的插件，也就是 &lt;strong>AI Toolkit for Visual Studio Code&lt;/strong>， 这个插件可以利用各种开源或商用的大模型，目前也已经集成了Deepseek R1模型，可以让我们在VS code中方便地利用Deepseek来帮助我们的代码开发&lt;/p>
&lt;p>首先在插件中心中找到&lt;strong>AI Toolkit&lt;/strong>并完成安装&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131-1.png"
width="1586"
height="1180"
srcset="https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131-1_hu_21e0d5258939b6d2.png 480w, https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131-1_hu_b96bba8591f888d8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>安装完成插件以后，在插件页面，选择catalog中的models模型页面，并通过筛选条件 &lt;code>hosted by Github&lt;/code>, 以及 &lt;code>publisher Deepseek&lt;/code> 使用Deepseek-R1模型&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131.png"
width="1403"
height="1040"
srcset="https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131_hu_75f3fee0b99aaf21.png 480w, https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131_hu_ec9505cc538860aa.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;h2 id="ai帮助生成脚本">AI帮助生成脚本
&lt;/h2>&lt;p>有了deepseek模型后，我们就可以新建一个playgroud让deepseek帮助我们生成自动化脚本了，以下是我让Deepseek生成的针对saucedemo的测试脚本&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131-2.png"
width="1196"
height="657"
srcset="https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131-2_hu_de464dae80bb5d2a.png 480w, https://chengxiaqiucao.github.io/post/052-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/Pasted-20250131-2_hu_2b9c36158ae3ebfc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="436px"
>&lt;/p>
&lt;h3 id="思考过程">思考过程
&lt;/h3>&lt;p>嗯，我现在需要帮忙设计一个基于pytest和Playwright的自动化测试项目，针对saucedemo.com的登录和checkout流程，使用POM模式，用户数据放在user.yml里，还要包含异常场景。好的，我得一步一步来。&lt;/p>
&lt;p>首先，应该确定项目的结构。POM模式的话，通常会有page对象、测试用例、配置文件、数据文件等。可能需要这样的目录结构：&lt;/p>
&lt;ul>
&lt;li>tests/
&lt;ul>
&lt;li>pages/
&lt;ul>
&lt;li>login_page.py&lt;/li>
&lt;li>inventory_page.py&lt;/li>
&lt;li>cart_page.py&lt;/li>
&lt;li>checkout_page.py&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>test_login.py&lt;/li>
&lt;li>test_checkout.py&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conftest.py&lt;/li>
&lt;li>user.yml&lt;/li>
&lt;li>pytest.ini&lt;/li>
&lt;/ul>
&lt;p>然后，用户数据存在user.yml里，里面应该有不同的用户类型，比如标准用户，锁定用户，错误密码，没有用户等。然后测试用例要读取这些数据。&lt;/p>
&lt;p>接下来是Page Object Model的实现。每个页面比如登录页、商品页，购物车页、结算页都有自己的类，封装元素和操作。比如LoginPage有用户名、密码输入框，登录按钮，错误提示的方法。&lt;/p>
&lt;p>测试用例应该使用pytest的参数化来覆盖不同的用户场景。比如正常登录成功，无效密码，锁定用户等。同时，checkout流程需要正常流程的测试，可能还有填写信息不完整的情况。&lt;/p>
&lt;p>然后考虑conftest.py里面设置Playwright的fixture，比如browser，page，以及各个page对象的fixture。比如，每次测试前都转到登录页，登录后到库存页，这样可以处理前置条件。&lt;/p>
&lt;p>异常场景的话，例如登录时的各种错误信息，结账时的表单验证，比如必须填first name等。需要编写这些测试用例，并验证错误提示是否正确。&lt;/p>
&lt;p>用户的数据如何加载呢？可能用pyYAML库来读取user.yml文件，里面分不同用户的数据。测试时用@pytest.mark.parametrize参数化输入不同的用户数据。&lt;/p>
&lt;p>比如，用户数据分成valid_users，invalid_password，locked_user等键。在测试登录的时候，参数化这些情况，触发不同的测试用例。&lt;/p>
&lt;p>在测试checkout流程时，可能需要先登录，然后添加商品到购物车，进入购物车，进入结算页，填写信息，完成checkout。这时候，正常的测试用例需要用有效的数据，而异常情况比如不填写某些字段需要验证错误提示。&lt;/p>
&lt;p>还需要处理元素的选择器，Playwright的定位方法，比如使用CSS选择器或文本定位。例如，登录页可能通过id定位用户名和密码输入框。&lt;/p>
&lt;p>此外，测试完成后需要清理状态吗？比如，购物车中的商品或者是否需要登出，或者每个测试用例之间保持独立，可能使用 fixtures 来确保各自的状态。&lt;/p>
&lt;p>也可能需要处理异步操作，不过Playwright是自动处理等待的，所以在页面导航或元素点击时不需要额外处理。&lt;/p>
&lt;p>现在，具体的步骤：&lt;/p>
&lt;ol>
&lt;li>创建项目结构，安装依赖：pytest, playwright, pyyaml。&lt;/li>
&lt;li>编写user.yml，包含不同类型的用户数据。&lt;/li>
&lt;li>实现各个页面的Page类，包含元素定位和操作方法。&lt;/li>
&lt;li>在conftest.py中定义fixture，例如初始化page，创建各page对象的实例。&lt;/li>
&lt;li>编写测试用例，参数化用户数据，覆盖正常和异常流程。&lt;/li>
&lt;li>处理测试中的等待和断言，确保元素的存在或文本正确。&lt;/li>
&lt;/ol>
&lt;p>需要检查测试用例是否覆盖以下场景：&lt;/p>
&lt;p>登录：&lt;/p>
&lt;ul>
&lt;li>正确用户密码登录成功。&lt;/li>
&lt;li>错误密码提示错误信息。&lt;/li>
&lt;li>锁定用户无法登录。&lt;/li>
&lt;li>空用户名或密码提示错误。&lt;/li>
&lt;/ul>
&lt;p>Checkout：&lt;/p>
&lt;ul>
&lt;li>正常填写所有信息，完成订单。&lt;/li>
&lt;li>必填字段缺失（如first name为空）提示错误。&lt;/li>
&lt;li>取消订单流程。&lt;/li>
&lt;/ul>
&lt;p>现在，user.yml的结构应该是什么样的？&lt;/p>
&lt;p>可能如下：&lt;/p>
&lt;p>users: valid_user: username: standard_user password: secret_sauce invalid_password_user: username: standard_user password: wrongpass locked_user: username: locked_out_user password: secret_sauce missing_username: username: &amp;quot;&amp;quot; password: secret_sauce missing_password: username: standard_user password: &amp;quot;&amp;quot;&lt;/p>
&lt;p>在测试登录的时候，参数化这些情况。比如，对于valid_user，应该登录成功，跳转到/inventory.html。对于invalid_password，显示Epic sadface: Username and password do not match。锁定的用户提示Epic sadface: Sorry, this user has been locked out。缺少用户名或密码提示相应的错误信息。&lt;/p>
&lt;p>对于checkout流程，可行的步骤是：&lt;/p>
&lt;p>登录后，添加一个商品到购物车，点击购物车图标，进入购物车页，点击checkout按钮，填写信息，继续，完成。&lt;/p>
&lt;p>所以测试用例需要参数化填写的信息是否正确。例如：&lt;/p>
&lt;p>正常情况下的信息：&lt;/p>
&lt;p>first_name: John last_name: Doe zip: 12345&lt;/p>
&lt;p>异常情况，比如不填first name，是否提示错误。&lt;/p>
&lt;p>在编写这些测试时，需要使用页面对象的方法来完成每个步骤，比如添加商品，进入购物车，填写信息，继续按钮等。&lt;/p>
&lt;p>可能的问题点：&lt;/p>
&lt;p>元素的定位是否正确，特别是动态生成的内容或者异步加载的部分是否需要等待。不过Playwright有自动等待机制，所以选择元素时只要正确选择应该没问题。&lt;/p>
&lt;p>需要断言的地方包括：登录后的页面URL是否正确，订单完成后的确认信息是否存在，错误提示是否显示正确的文本。&lt;/p>
&lt;p>比如，登录成功后应该跳转到/inventory.html；checkout完成后应该显示“Thank you for your order”。&lt;/p>
&lt;p>另外，可能需要清理购物车，但因为每个测试可能独立运行，或者每个测试都重新开始会话，所以在fixture中可以处理，如在每次测试前登录并重置状态？&lt;/p>
&lt;p>或者使用类似于beforeEach的fixture，让每个测试用例开始时处于某个状态。比如，登录后的页面。&lt;/p>
&lt;p>此外，测试购物流程需要添加商品到购物车，所以库存页面的类需要有添加商品的方法。&lt;/p>
&lt;p>Page类示例：&lt;/p>
&lt;p>InventoryPage可以有添加某个商品的方法，比如点击“Add to cart”按钮。比如，根据商品名称定位对应的按钮。不过这可能比较复杂，也许在页面上使用通用的方法。&lt;/p>
&lt;p>或者，在InventoryPage中有方法add_item_to_cart(item_name)，用于点击对应商品的添加按钮。这时需要使用Playwright的定位方法，例如：&lt;/p>
&lt;p>def add_item_to_cart(self, item_name): self.page.locator(f&amp;quot;text={item_name}&amp;quot;).locator(&amp;ldquo;xpath=..&amp;rdquo;).locator(&amp;ldquo;button&amp;rdquo;).click()&lt;/p>
&lt;p>不过这可能需要根据实际的DOM结构来确定。可能需要inspector查看元素结构。&lt;/p>
&lt;p>例如，每个商品项的结构可能类似：&lt;/p>
&lt;div class="inventory_item"> &lt;div class="inventory_item_name">Sauce Labs Backpack&lt;/div> &lt;button class="btn btn_primary">Add to cart&lt;/button> &lt;/div>
&lt;p>所以，找到对应的名称元素，然后找到其父级元素中的按钮。&lt;/p>
&lt;p>或者，更简单的办法是每个商品的“Add to cart”按钮有不同的id，比如 add-to-cart-sauce-labs-backpack，或其他属性。需要看实际网站的结构。&lt;/p>
&lt;p>登录后的页面可能有多个商品，每个商品对应的添加按钮可能需要通过其文本来定位对应的按钮。或者通过其他属性。&lt;/p>
&lt;p>现在，需要实际查看saucedemo.com的结构。可能使用Playwright的代码生成功能来获取正确的选择器。&lt;/p>
&lt;p>假设，例如，每个商品的“Add to cart”按钮的id是动态生成的或者类似，例如对于“Sauce Labs Backpack”，对应的按钮的id可能是add-to-cart-sauce-labs-backpack，那么可以直接通过这个id去定位。&lt;/p>
&lt;p>这样的话，InventoryPage中可以有一个方法：&lt;/p>
&lt;p>def add_product_to_cart(self, product_name): product_id = product_name.lower().replace(&amp;rsquo; &amp;lsquo;, &amp;lsquo;-&amp;rsquo;) self.page.click(f&amp;quot;#add-to-cart-{product_id}&amp;quot;)&lt;/p>
&lt;p>当然，这需要查看实际的网站结构是否正确。&lt;/p>
&lt;p>假设正确的商品example在这里是Sauce Labs Backpack，其id可能确实是这样的，这样方法可行。&lt;/p>
&lt;p>另外，购物车图标上的数量是否正确，当商品添加后，购物车的图标显示数量为1。当进入购物车页，是否有对应的商品。&lt;/p>
&lt;p>需要注意，每个操作之后的页面变化是否需要新的Page对象实例，比如在InventoryPage点击购物车后跳转到CartPage，所以该操作应该返回CartPage的实例，从而能够继续操作。&lt;/p>
&lt;p>这样方法的返回值处理可能成为问题。比如：&lt;/p>
&lt;p>在InventoryPage中的方法：&lt;/p>
&lt;p>def go_to_cart(self): self.page.click(&amp;quot;.shopping_cart_link&amp;quot;) return CartPage(self.page)&lt;/p>
&lt;p>类似这样，每个导航动作返回新的Page对象。&lt;/p>
&lt;p>这会需要在各个页面的方法中处理返回相应的页面对象。&lt;/p>
&lt;p>然后是测试流程的组装：&lt;/p>
&lt;p>在测试checkout的时候，可能步骤很多，需要写一个大的测试用例，分步骤进行：&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>def test_checkout_process(login_page, inventory_page, checkout_data): # 登录 login_page.login(&amp;ldquo;standard_user&amp;rdquo;, &amp;ldquo;secret_sauce&amp;rdquo;) # 添加商品 inventory_page.add_product_to_cart(&amp;ldquo;Sauce Labs Backpack&amp;rdquo;) inventory_page.go_to_cart() # 进入购物车页面，点击checkout cart_page.click_checkout() # 填写checkout信息 checkout_page.fill_shipping_info(checkout_data) checkout_page.continue_to_overview() # 确认订单 checkout_page.finish_checkout() # 断言是否成功 assert checkout_page.get_order_confirmation() == &amp;ldquo;Thank you for your order!&amp;rdquo;&lt;/p>
&lt;p>当然，这可能涉及到许多页面的跳转，每个页面之间需要用对应的方法来连接。&lt;/p>
&lt;p>异常场景的话，比如在填写信息的时候不输入first name，点击continue时，出现错误提示。&lt;/p>
&lt;p>此时，测试用例可能参数化不同的数据，比如：&lt;/p>
&lt;p>@pytest.mark.parametrize(&amp;ldquo;first_name, last_name, zip_code, error_message&amp;rdquo;, [ (&amp;quot;&amp;quot;, &amp;ldquo;Doe&amp;rdquo;, &amp;ldquo;12345&amp;rdquo;, &amp;ldquo;Error: First Name is required&amp;rdquo;), (&amp;ldquo;John&amp;rdquo;, &amp;ldquo;&amp;rdquo;, &amp;ldquo;12345&amp;rdquo;, &amp;ldquo;Error: Last Name is required&amp;rdquo;), (&amp;ldquo;John&amp;rdquo;, &amp;ldquo;Doe&amp;rdquo;, &amp;ldquo;&amp;rdquo;, &amp;ldquo;Error: Postal Code is required&amp;rdquo;), ]) def test_checkout_missing_fields(&amp;hellip;, first_name, last_name, zip_code, error_message): # 填信息时，漏掉对应字段 checkout_page.fill_shipping_info(first_name, last_name, zip_code) checkout_page.continue_to_overview() assert checkout_page.get_error_message() == error_message&lt;/p>
&lt;p>可能还需要考虑，错误信息提示元素的定位是否正确，以及当出现错误时是否阻止进入下一步。&lt;/p>
&lt;p>现在，问题可能是如何组织这些数据和页面方法。&lt;/p>
&lt;p>另外，关于用户数据的读取，测试用例需要从YAML文件中加载。可能的做法是在conftest.py里面写个fixture读取YAML的数据，然后参数化测试用例。&lt;/p>
&lt;p>但pytest的参数化可能需要特定的方式处理，可能将YAML数据转换成测试参数。或者使用外部数据源来参数化测试。&lt;/p>
&lt;p>例如，在conftest.py中读取user.yml的所有用户数据，并为登录测试创建一个参数化的fixture。&lt;/p>
&lt;p>或者，可以在测试用例中直接读取YAML文件中的数据，并将其参数化。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;p>import yaml&lt;/p>
&lt;p>def load_users(): with open(&amp;lsquo;user.yml&amp;rsquo;) as f: data = yaml.safe_load(f) return data[&amp;lsquo;users&amp;rsquo;]&lt;/p>
&lt;p>然后在测试用例中用：&lt;/p>
&lt;p>@pytest.mark.parametrize(&amp;ldquo;user&amp;rdquo;, [ (&amp;ldquo;valid_user&amp;rdquo;), (&amp;ldquo;invalid_password_user&amp;rdquo;), (&amp;ldquo;locked_user&amp;rdquo;), # &amp;hellip; 其他情况 ], indirect=True) def test_login(login_page, user): login_page.login(user[&amp;lsquo;username&amp;rsquo;], user[&amp;lsquo;password&amp;rsquo;]) # 断言等操作&lt;/p>
&lt;p>不过，如何将数据转换为参数可能需要更细致的处理，比如将各个用户数据提取成各个测试实例的参数。&lt;/p>
&lt;p>可能更好的方法是将不同的用户情况分别写成不同的测试数据项。例如，把不同用户类型数据的键列出来，然后根据这些键从数据中加载相应的参数。&lt;/p>
&lt;p>或者，在所有参数化时，导入所有用户数据作为参数。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;p>import yaml import pytest&lt;/p>
&lt;p>with open(&amp;lsquo;user.yml&amp;rsquo;) as f: user_data = yaml.safe_load(f)[&amp;lsquo;users&amp;rsquo;]&lt;/p>
&lt;p>login_test_data = [ (user_data[&amp;lsquo;valid_user&amp;rsquo;], True, None), # 正常用户，登录成功，没有错误 (user_data[&amp;lsquo;invalid_password_user&amp;rsquo;], False, &amp;lsquo;Epic sadface: Username and password do not match&amp;rsquo;), (user_data[&amp;rsquo;locked_user&amp;rsquo;], False, &amp;lsquo;Epic sadface: Sorry, this user has been locked out.&amp;rsquo;), # &amp;hellip; 其他情况 ]&lt;/p>
&lt;p>@pytest.mark.parametrize(&amp;ldquo;user, success, error_msg&amp;rdquo;, login_test_data) def test_login_user(login_page, user, success, error_msg): login_page.navigate() login_page.login(user[&amp;lsquo;username&amp;rsquo;], user[&amp;lsquo;password&amp;rsquo;]) if success: assert login_page.current_url == &amp;lsquo;&lt;a class="link" href="https://www.saucedemo.com/inventory.html%27" target="_blank" rel="noopener"
>https://www.saucedemo.com/inventory.html'&lt;/a> else: assert login_page.get_error_message() == error_msg&lt;/p>
&lt;p>这时候，需要在user.yml里的每个用户数据中有一个error键，或者在参数化的准备阶段处理错误信息的映射。&lt;/p>
&lt;p>不过这样的参数方式可能更灵活，能够同时指定预期结果。&lt;/p>
&lt;p>对于YAML的结构，可能需要更详细的数据项，每个用户数据包含预期的错误消息。&lt;/p>
&lt;p>例如，user.yml部分内容：&lt;/p>
&lt;p>valid_user: username: standard_user password: secret_sauce expected: success: true error: null&lt;/p>
&lt;p>invalid_password_user: username: standard_user password: wrong expected: success: false error: &amp;ldquo;Epic sadface: Username and password do not match&amp;rdquo;&lt;/p>
&lt;p>locked_user: username: locked_out_user password: secret_sauce expected: success: false error: &amp;ldquo;Epic sadface: Sorry, this user has been locked out.&amp;rdquo;&lt;/p>
&lt;p>这样参数化时可以更具结构化。但在编写YAML时需要考虑每个用例的期望结果。&lt;/p>
&lt;p>这样，测试用例的参数可能会是直接从YAML中读取的结构，然后通过解析不同的用户组生成测试用例参数。&lt;/p>
&lt;p>不过，这可能有些复杂。另一个办法是，将每个测试案例定义为YAML中的一个项目，包含输入数据和预期结果。&lt;/p>
&lt;p>总之，这部分的处理可能需要更多设计。&lt;/p>
&lt;p>然后，关于Playwright的fixture设置，在conftest.py里可以使用pytest-playwright提供的fixture。例如，使用pytest-playwright插件中的page fixture。不过这可能需要安装pytest-playwright库，并调用playwright的安装步骤。&lt;/p>
&lt;p>安装依赖包括：&lt;/p>
&lt;p>pytest-playwright playwright pyyaml&lt;/p>
&lt;p>执行playwright install安装浏览器。&lt;/p>
&lt;p>然后，在conftest.py中，定义如何初始化各个page对象，并将它们作为fixture注入到测试用例中。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>import pytest from playwright.sync_api import Page from pages.login_page import LoginPage from pages.inventory_page import InventoryPage&lt;/p>
&lt;h5 id="其他页面的导入">其他页面的导入
&lt;/h5>&lt;p>@pytest.fixture def login_page(page: Page): return LoginPage(page)&lt;/p>
&lt;p>@pytest.fixture def inventory_page(page: Page): return InventoryPage(page)&lt;/p>
&lt;p>等等。这样每个测试用例如果需要用到特定的页面对象，可以直接在参数中声明需要的fixture。&lt;/p>
&lt;p>例如，一个测试用例函数可能接收login_page和inventory_page作为参数。&lt;/p>
&lt;p>接下来，各个Page类的示例。&lt;/p>
&lt;p>LoginPage类是这样的：&lt;/p>
&lt;p>class LoginPage: def &lt;strong>init&lt;/strong>(self, page): self.page = page self.username_input = page.locator(&amp;quot;#user-name&amp;quot;) self.password_input = page.locator(&amp;quot;#password&amp;quot;) self.login_button = page.locator(&amp;quot;#login-button&amp;quot;) self.error_message = page.locator(&amp;quot;.error-message-container&amp;quot;)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def navigate(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.page.goto(&amp;#34;https://www.saucedemo.com&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def login(self, username, password):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.username_input.fill(username)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.password_input.fill(password)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.login_button.click()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def get_error_message(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return self.error_message.inner_text()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但实际情况需要根据saucedemo.com的实际HTML结构调整选择器。比如，错误信息的元素可能是div.error-message-container带有data-test=&amp;ldquo;error&amp;quot;的属性，其文本可能在某个子元素内。&lt;/p>
&lt;p>比如说，实际的网站中，错误信息的HTML可能是：&lt;/p>
&lt;div class="error-message-container" data-test="error"> &lt;h3>Epic sadface: Username and password do not match any user in this service&lt;/h3> &lt;button class="error-button" data-test="关闭错误信息">&lt;/button> &lt;/div>
&lt;p>那么，error_message的locator需要定位到h3元素的文本。或者，定位到整个容器，然后用inner_text()获取文本。&lt;/p>
&lt;p>或者，正确的选择器可能是：&lt;/p>
&lt;p>error_message = page.locator(&amp;rsquo;[data-test=&amp;ldquo;error&amp;rdquo;]&amp;rsquo;)&lt;/p>
&lt;p>但Playwright支持多种选择方式，比如用data-testid属性等，所以在编写时需要查证正确的元素定位方式。&lt;/p>
&lt;p>所以可能更好的方式是使用data-test属性来选择元素，例如登录页的数据测试属性：&lt;/p>
&lt;p>用户名输入：data-test=&amp;ldquo;username&amp;rdquo;&lt;/p>
&lt;p>密码输入：data-test=&amp;ldquo;password&amp;rdquo;&lt;/p>
&lt;p>登录按钮：data-test=&amp;ldquo;login-button&amp;rdquo;&lt;/p>
&lt;p>错误信息元素：data-test=&amp;ldquo;error&amp;rdquo;，所以其元素可以定位为：&lt;/p>
&lt;p>self.error_message = page.locator(&amp;rsquo;[data-test=&amp;ldquo;error&amp;rdquo;]&amp;rsquo;)&lt;/p>
&lt;p>然后其文本内容可以用error_message.inner_text()来获取，包含错误信息的关键部分。&lt;/p>
&lt;p>至于其他页面，比如库存页面，购物车页等：&lt;/p>
&lt;p>InventoryPage可能有添加商品到购物车的方法，跳转到购物车的方法，或许购物车数量的显示。例如：&lt;/p>
&lt;p>class InventoryPage: def &lt;strong>init&lt;/strong>(self, page: Page): self.page = page&lt;/p>
&lt;p>def add_product_to_cart(self, product_name):
# 这里假设商品名称对应的添加按钮如何定位，假设data-test属性中有对应的add-to-cart按钮，例如 data-test=&amp;ldquo;add-to-cart-sauce-labs-backpack&amp;rdquo;
product_id = product_name.lower().replace(&amp;rsquo; &amp;lsquo;, &amp;lsquo;-&amp;rsquo;)
self.page.locator(f&amp;rsquo;[data-test=&amp;ldquo;add-to-cart-{product_id}&amp;rdquo;]&amp;rsquo;).click()&lt;/p>
&lt;p>def get_cart_count(self):
return self.page.locator(&amp;rsquo;.shopping_cart_badge&amp;rsquo;).inner_text()&lt;/p>
&lt;p>def go_to_cart(self):
self.page.locator(&amp;rsquo;.shopping_cart_link&amp;rsquo;).click()
return CartPage(self.page)&lt;/p>
&lt;p>CartPage类，可能有checkout按钮：&lt;/p>
&lt;p>class CartPage: def &lt;strong>init&lt;/strong>(self, page: Page): self.page = page&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def checkout(self):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.page.locator(&amp;#39;[data-test=&amp;#34;checkout&amp;#34;]&amp;#39;).click()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return CheckoutPage(self.page)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>CheckoutPage类：&lt;/p>
&lt;p>class CheckoutPage: def &lt;strong>init&lt;/strong>(self, page: Page): self.page = page self.first_name_input = page.locator(&amp;rsquo;[data-test=&amp;ldquo;firstName&amp;rdquo;]&amp;rsquo;) self.last_name_input = page.locator(&amp;rsquo;[data-test=&amp;ldquo;lastName&amp;rdquo;]&amp;rsquo;) self.postal_code_input = page.locator(&amp;rsquo;[data-test=&amp;ldquo;postalCode&amp;rdquo;]&amp;rsquo;) self.continue_button = page.locator(&amp;rsquo;[data-test=&amp;ldquo;continue&amp;rdquo;]&amp;rsquo;) self.error_message = page.locator(&amp;rsquo;[data-test=&amp;ldquo;error&amp;rdquo;]&amp;rsquo;)&lt;/p>
&lt;p>def fill_shipping_info(self, first_name, last_name, postal_code):
self.first_name_input.fill(first_name)
self.last_name_input.fill(last_name)
self.postal_code_input.fill(postal_code)&lt;/p>
&lt;p>def continue_to_overview(self):
self.continue_button.click()&lt;/p>
&lt;p>def get_error_message(self):
return self.error_message.inner_text().strip()&lt;/p>
&lt;p>然后，在完成信息填写后的页面，可能有finish按钮，在CheckoutOverviewPage类中：&lt;/p>
&lt;p>class CheckoutOverviewPage: def &lt;strong>init&lt;/strong>(self, page: Page): self.page = page self.finish_button = page.locator(&amp;rsquo;[data-test=&amp;ldquo;finish&amp;rdquo;]&amp;rsquo;) self.confirmation_message = page.locator(&amp;rsquo;.complete-header&amp;rsquo;)&lt;/p>
&lt;p>def finish_checkout(self):
self.finish_button.click()&lt;/p>
&lt;p>def get_confirmation_message(self):
return self.confirmation_message.inner_text()&lt;/p>
&lt;p>当然，这些需要根据实际页面的结构进行调整，比如确认信息的元素是否正确。&lt;/p>
&lt;p>这样，整体测试流程就可以通过各个页面的方法来串联。&lt;/p>
&lt;p>现在编写测试用例的步骤：&lt;/p>
&lt;p>测试登录流程：&lt;/p>
&lt;p>参数化不同的用户数据，判断登录是否成功，或者是否出现正确的错误提示。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>在test_login.py中：&lt;/p>
&lt;p>import pytest from playwright.sync_api import Page&lt;/p>
&lt;p>@pytest.mark.parametrize(&amp;ldquo;user_key, expected_success, expected_error&amp;rdquo;, [ (&amp;ldquo;valid_user&amp;rdquo;, True, None), (&amp;ldquo;invalid_password_user&amp;rdquo;, False, &amp;ldquo;Epic sadface: Username and password do not match&amp;rdquo;), (&amp;ldquo;locked_user&amp;rdquo;, False, &amp;ldquo;Epic sadface: Sorry, this user has been locked out.&amp;rdquo;), (&amp;ldquo;missing_username&amp;rdquo;, False, &amp;ldquo;Epic sadface: Username is required&amp;rdquo;), (&amp;ldquo;missing_password&amp;rdquo;, False, &amp;ldquo;Epic sadface: Password is required&amp;rdquo;), ]) def test_login(login_page, user_key, expected_success, expected_error): # 从YAML加载用户数据，这里假设有一个fixture可以加载全部的测试用户数据 users = load_users() user = users[user_key] login_page.navigate() login_page.login(user[&amp;lsquo;username&amp;rsquo;], user[&amp;lsquo;password&amp;rsquo;])&lt;/p>
&lt;p>if expected_success:
assert login_page.page.url == &amp;ldquo;&lt;a class="link" href="https://www.saucedemo.com/inventory.html%22" target="_blank" rel="noopener"
>https://www.saucedemo.com/inventory.html"&lt;/a>
else:
assert login_page.get_error_message() == expected_error&lt;/p>
&lt;p>需要写出load_users函数，或者使用fixture来传递给测试用例。&lt;/p>
&lt;p>这里的load_users可能是在conftest.py中的一个fixture：&lt;/p>
&lt;p>import pytest import yaml&lt;/p>
&lt;p>@pytest.fixture def users(): with open(&amp;lsquo;user.yml&amp;rsquo;) as f: data = yaml.safe_load(f) return data[&amp;lsquo;users&amp;rsquo;]&lt;/p>
&lt;p>然后测试用例可以接收users作为一个fixture：&lt;/p>
&lt;p>def test_login(login_page, users, user_key, expected_success, &amp;hellip;): user = users[user_key] &amp;hellip;&lt;/p>
&lt;p>但这种参数化可能需要结合indirect参数的使用，或者在参数化时动态获取用户数据。&lt;/p>
&lt;p>或者，将参数化的数据和用户密钥对应起来，通过字典获取正确的用户数据。&lt;/p>
&lt;p>这可能需要对pytest的参数化更深入的处理，例如使用间接参数化，将用户键作为参数，然后在测试函数内部获取相应用户的数据。&lt;/p>
&lt;p>或者，这种参数传递方式可能不太直接，可能需要重新设计参数化的结构。&lt;/p>
&lt;p>可能最好的方式在参数化的列表中直接指定用户数据的键，然后在测试用例中使用该键来索引users fixture中的对应数据。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>@pytest.mark.parametrize(&amp;ldquo;user_key, expected_success, expected_error&amp;rdquo;, [ (&amp;ldquo;valid_user&amp;rdquo;, True, None), (&amp;ldquo;invalid_password_user&amp;rdquo;, False, &amp;ldquo;Epic sadface: Username and password do not match&amp;rdquo;), (&amp;ldquo;locked_user&amp;rdquo;, False, &amp;ldquo;Epic sadface: Sorry, this user has been locked out.&amp;rdquo;), (&amp;ldquo;missing_username&amp;rdquo;, False, &amp;ldquo;Epic sadface: Username is required&amp;rdquo;), (&amp;ldquo;missing_password&amp;rdquo;, False, &amp;ldquo;Epic sadface: Password is required&amp;rdquo;), ]) def test_login(login_page, users, user_key, expected_success, expected_error): user = users[user_key] login_page.navigate() login_page.login(user[&amp;lsquo;username&amp;rsquo;], user[&amp;lsquo;password&amp;rsquo;]) if expected_success: assert login_page.page.url == &amp;ldquo;&lt;a class="link" href="https://www.saucedemo.com/inventory.html%22" target="_blank" rel="noopener"
>https://www.saucedemo.com/inventory.html"&lt;/a> else: assert login_page.get_error_message() == expected_error&lt;/p>
&lt;p>需要确保user.yml中存在相应的键，且各用户的数据正确。&lt;/p>
&lt;p>对于checkout流程的正常测试：&lt;/p>
&lt;p>在test_checkout.py中：&lt;/p>
&lt;p>def test_successful_checkout(login_page, inventory_page, users): valid_user = users[&amp;lsquo;valid_user&amp;rsquo;] login_page.login(valid_user[&amp;lsquo;username&amp;rsquo;], valid_user[&amp;lsquo;password&amp;rsquo;]) inventory_page.add_product_to_cart(&amp;ldquo;Sauce Labs Backpack&amp;rdquo;) cart_page = inventory_page.go_to_cart() checkout_page = cart_page.checkout() checkout_page.fill_shipping_info(&amp;ldquo;John&amp;rdquo;, &amp;ldquo;Doe&amp;rdquo;, &amp;ldquo;12345&amp;rdquo;) checkout_page.continue_to_overview() overview_page = CheckoutOverviewPage(checkout_page.page) overview_page.finish_checkout() assert overview_page.get_confirmation_message() == &amp;ldquo;Thank you for your order!&amp;rdquo;&lt;/p>
&lt;p>这需要定义CheckoutOverviewPage类的相应元素和方法。&lt;/p>
&lt;p>对于异常测试：&lt;/p>
&lt;p>比如，填写信息时省略必填字段：&lt;/p>
&lt;p>@pytest.mark.parametrize(&amp;ldquo;first_name, last_name, zip_code, expected_error&amp;rdquo;, [ (&amp;rdquo;&amp;rdquo;, &amp;ldquo;Doe&amp;rdquo;, &amp;ldquo;12345&amp;rdquo;, &amp;ldquo;Error: First Name is required&amp;rdquo;), (&amp;ldquo;John&amp;rdquo;, &amp;ldquo;&amp;rdquo;, &amp;ldquo;12345&amp;rdquo;, &amp;ldquo;Error: Last Name is required&amp;rdquo;), (&amp;ldquo;John&amp;rdquo;, &amp;ldquo;Doe&amp;rdquo;, &amp;ldquo;&amp;rdquo;, &amp;ldquo;Error: Postal Code is required&amp;rdquo;), ]) def test_checkout_error_messages(login_page, inventory_page, users, first_name, last_name, zip_code, expected_error): valid_user = users[&amp;lsquo;valid_user&amp;rsquo;] login_page.login(valid_user[&amp;lsquo;username&amp;rsquo;], valid_user[&amp;lsquo;password&amp;rsquo;]) inventory_page.add_product_to_cart(&amp;ldquo;Sauce Labs Backpack&amp;rdquo;) cart_page = inventory_page.go_to_cart() checkout_page = cart_page.checkout() checkout_page.fill_shipping_info(first_name, last_name, zip_code) checkout_page.continue_to_overview() assert checkout_page.get_error_message() == expected_error&lt;/p>
&lt;p>这里，需要确定实际的错误提示是否是类似这样的文本。比如，在reqreal的网站上，不填first name并继续时，错误提示是否真的是“Error: First Name is required”。需要查看实际页面的情况，可能错误信息是否包含在data-test=&amp;ldquo;error&amp;quot;元素中，或者是否是其他结构。&lt;/p>
&lt;p>综上所述，整个项目需要：&lt;/p>
&lt;ul>
&lt;li>正确配置POM的各个页面类。&lt;/li>
&lt;li>正确读取用户数据并参数化测试用例。&lt;/li>
&lt;li>处理不同测试场景的流程，尤其是Test checkout的流程可能需要连续的页面导航和状态维护。&lt;/li>
&lt;li>对异常情况进行断言，如错误消息的正确性。&lt;/li>
&lt;/ul>
&lt;p>可能还需要对页面元素的同步进行确认，尽管Playwright自动等待，但例如，点击按钮后的跳转是否完成可能会需要确认页面的某些元素，这样更稳定。&lt;/p>
&lt;p>对于一些异步动作，比如点击按钮后元素变化，可以不用等待，因为Playwright内部已经处理了。&lt;/p>
&lt;p>总的来说，这样的设计应该能够覆盖所需的自动化测试需求。接下来，我需要根据这些思路编写具体的代码文件，并验证是否正确工作。&lt;/p>
&lt;h3 id="具体实现">具体实现
&lt;/h3>&lt;p>为了基于pytest和Playwright完成针对saucedemo.com的自动化测试登录和checkout流程，并遵循POM模式，以下是详细的实现方案：&lt;/p>
&lt;h3 id="项目结构">项目结构
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">project-root/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── tests/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── pages/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── login_page.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── inventory_page.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── cart_page.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── checkout_page.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── checkout_overview_page.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── test_login.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── test_checkout.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── conftest.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── user.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── pytest.ini
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="依赖安装">依赖安装
&lt;/h3>&lt;ol>
&lt;li>安装所需库：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install pytest playwright pyyaml pytest-playwright
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">playwright install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="文件实现">文件实现
&lt;/h3>&lt;h4 id="useryml">user.yml
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">users&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valid_user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">standard_user&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret_sauce&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">invalid_password_user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">standard_user&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">wrong_pass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">locked_user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">locked_out_user&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret_sauce&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">missing_username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">secret_sauce&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">missing_password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">standard_user&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pageslogin_pagepy">pages/login_page.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LoginPage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">username_input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;username&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">password_input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;password&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">login_button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;login-button&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error_message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;error&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">navigate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;导航到登录页&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://www.saucedemo.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;填充并提交登录表单&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">username_input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">password_input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">login_button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">click&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_error_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;获取错误提示文本&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error_message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inner_text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pagesinventory_pagepy">pages/inventory_page.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">InventoryPage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">add_product_to_cart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">product_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;将指定商品添加到购物车&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">product_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">product_name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;add-to-cart-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">product_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">click&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">go_to_cart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;进入购物车页面&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.shopping_cart_link&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">click&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">CartPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pagescart_pagepy">pages/cart_page.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CartPage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">checkout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;进入结算页面&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;checkout&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">click&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">CheckoutPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pagescheckout_pagepy">pages/checkout_page.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CheckoutPage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">first_name_input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;firstName&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_name_input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;lastName&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">postal_code_input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;postalCode&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">continue_button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;continue&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error_message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;error&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">fill_shipping_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">first_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">last_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">postal_code&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;填写配送信息&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">first_name_input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">last_name_input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">postal_code_input&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">postal_code&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">continue_to_overview&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;提交并进入订单概览&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">continue_button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">click&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_error_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;获取错误提示文本&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">error_message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inner_text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="pagescheckout_overview_pagepy">pages/checkout_overview_page.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CheckoutOverviewPage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">finish_button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;[data-test=&amp;#34;finish&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">confirmation_message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">locator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.complete-header&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">finish_checkout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;完成订单&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">finish_button&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">click&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_confirmation_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;获取订单完成确认信息&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">confirmation_message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inner_text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="conftestpy">conftest.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">playwright.sync_api&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tests.pages.login_page&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">LoginPage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tests.pages.inventory_page&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">InventoryPage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tests.pages.cart_page&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">CartPage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tests.pages.checkout_page&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">CheckoutPage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.fixture&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scope&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;session&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">users&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;user.yml&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">yaml&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">safe_load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.fixture&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">login_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">login_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoginPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">login_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">navigate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">login_page&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.fixture&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">inventory_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">login_page&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LoginPage&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">login_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">login&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;valid_user&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;valid_user&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">InventoryPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">login_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.fixture&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">cart_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inventory_page&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">InventoryPage&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">inventory_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">go_to_cart&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.fixture&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">checkout_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cart_page&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">CartPage&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">cart_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">checkout&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="test_loginpy">test_login.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.mark.parametrize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;user_key, expected_success, expected_error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;valid_user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;invalid_password_user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Epic sadface: Username and password do not match&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;locked_user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Epic sadface: Sorry, this user has been locked out.&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;missing_username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Epic sadface: Username is required&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;missing_password&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Epic sadface: Password is required&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_login&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">login_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user_key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expected_success&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expected_error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">user_key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">login_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">login&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;username&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">expected_success&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">login_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">url&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;https://www.saucedemo.com/inventory.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">login_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_error_message&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">expected_error&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="test_checkoutpy">test_checkout.py
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_successful_checkout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inventory_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">checkout_page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inventory_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_product_to_cart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sauce-labs-backpack&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">checkout_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill_shipping_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;12345&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">checkout_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">continue_to_overview&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">overview_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CheckoutOverviewPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">checkout_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">overview_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">finish_checkout&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">overview_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_confirmation_message&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;Thank you for your order!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@pytest.mark.parametrize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;first_name, last_name, postal_code, expected_error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;12345&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Error: First Name is required&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;12345&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Error: Last Name is required&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Error: Postal Code is required&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_checkout_errors&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">checkout_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">first_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">last_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">postal_code&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">expected_error&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">checkout_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fill_shipping_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">last_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">postal_code&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">checkout_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">continue_to_overview&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">checkout_page&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_error_message&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">expected_error&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="知识点和解释">知识点和解释
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>POM设计模式&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>每个页面（如登录页、商品页）被封装为一个类，页面元素和操作抽象为方法，从而提高代码复用性和可维护性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据驱动测试&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>用户数据与测试代码分离，存储在YAML文件中，提升了可维护性，方便添加新的测试场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>异常场景覆盖&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>通过参数化测试验证不同错误输入（如锁定用户、错误密码、缺失必填字段）是否会触发正确的错误提示。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Fixture管理&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>利用pytest的fixture管理浏览器和页面对象，确保每个测试用例的独立性，减少重复代码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Playwright自动等待机制&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Playwright内置的自动等待确保在操作元素前其已处于可交互状态，增强了测试的稳定性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>此方案覆盖了正常和异常的业务流程，确保核心功能点（登录、购物车、结算）的自动化验证，提高了软件质量。&lt;/p>
&lt;h3 id="结论">结论
&lt;/h3>&lt;p>参照给出的结果，基本不用做什么微调就可以执行成功，确实极大提升了我们进行自动化实现的效率。最难能可贵的是，deepseek给出的思考过程，对于我们代码实现和用例设计的要点也有极大的参考价值！&lt;/p></description></item><item><title>AI测试之TestGPT</title><link>https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_203935.png" alt="Featured image of post AI测试之TestGPT" />&lt;p>如今最火热的技术莫非OpenAI的ChatGPT莫属，AI技术也在很多方面得到广泛应用。今天我们来聊的TestGPT就是一个软件测试领域当红的应用。&lt;/p>
&lt;h3 id="testgpt是什么">TestGPT是什么？
&lt;/h3>&lt;p>TestGPT是一家总部位于以色列特拉维夫的初创公司 CodiumAI Ltd.，发布的一款用于测试领域的人工智能模型（AI model），由 OpenAI 的 GPT-4 大型语言模型驱动。&lt;/p>
&lt;p>官网地址： &lt;a class="link" href="http://www.codium.AI" target="_blank" rel="noopener"
>www.codium.ai&lt;/a>&lt;/p>
&lt;p>从官网的介绍可以看出，它是一个旨在协助开发人员测试他们的代码，为开发人员提供自动生成的软件测试套件建议，从而加快编码和错误扫描的AI工具。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_203935.png"
width="1833"
height="877"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_203935_hu_1cc7fb0cda2e11bc.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_203935_hu_ad7cccdf764a6dbf.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="501px"
>&lt;/p>
&lt;h3 id="如何使用">如何使用？
&lt;/h3>&lt;p>目前TestGPT提供了针对VsCode和JetBrains的插件支持
&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_205338.png"
width="321"
height="307"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_205338_hu_d13898428298dda8.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_205338_hu_6f268981ab1066c7.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>以VsCode为例，在vsCode的插件中心搜索CodiumAI即可安装&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_205457.png"
width="1419"
height="1065"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_205457_hu_59cf199073c22372.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_205457_hu_441554f848e20d9d.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>安装后可以Github账户直接登录连接。&lt;/p>
&lt;p>下面我们来用一段有问题的python排序算法代码来看看它是如何使用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">insert_sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lists&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 插入排序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lists&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1">#range区间有误，这里是bug，应为(1, count)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">lists&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>切换到CodiumAI插件，连接后可以看到代码部分已经有了生成测试的入口&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210014.png"
width="1131"
height="662"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210014_hu_7a4640a8833e2414.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210014_hu_61ef1b5e0873bea8.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="410px"
>&lt;/p>
&lt;p>尝试生成下看看效果，稍等片刻，就可以看到AI的成果了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210406.png"
width="996"
height="92"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210406_hu_3f266d52b9bef103.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210406_hu_6d01cccac75f5045.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="1082"
data-flex-basis="2598px"
>&lt;/p>
&lt;p>AI的辅助界面有三部分，分别是：&lt;/p>
&lt;ul>
&lt;li>Test Suite 测试用例&lt;/li>
&lt;li>Code Analysis 代码分析&lt;/li>
&lt;li>Code Suggestions 代码修改建议&lt;/li>
&lt;/ul>
&lt;p>在用例配置部分可以做测试的基本配置&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210858.png"
width="989"
height="355"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210858_hu_f2b70cfc047ec025.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_210858_hu_db5844884f8dfbcd.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="278"
data-flex-basis="668px"
>&lt;/p>
&lt;p>Coverage部分则可以看到AI生成的Case覆盖情况&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211029.png"
width="977"
height="710"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211029_hu_65ce07c8cf85f424.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211029_hu_7901c33048174ebe.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>Test部分则是具体的测试用例，本例中生成了6条用例&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211130.png"
width="990"
height="451"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211130_hu_1ca838f05ea8a0ca.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211130_hu_a104bab2a8bdfb3c.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>执行后可以看到用例的执行结果，但生成的测试代码都执行成功了，似乎没有通过测试代码测试出bug :(&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211250.png"
width="966"
height="872"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211250_hu_caf88c32a1bc4cdd.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211250_hu_9f31482a99433a94.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>Code Analysis则给出了代码的分析说明，可以&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211545.png"
width="788"
height="906"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211545_hu_d4e35646d0eded89.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211545_hu_85e2e6ba4767b99b.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/p>
&lt;p>代码建议部分则给出了修改建议，这里倒是准确地指出了代码中的问题。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211835.png"
width="770"
height="738"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211835_hu_bdf616c1b5339fc8.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_211835_hu_80ad6d5301e44d28.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>按照建议直接应用，可以看到代码已经修改并加了注释&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_212047.png"
width="1573"
height="407"
srcset="https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_212047_hu_146942125a516c39.png 480w, https://chengxiaqiucao.github.io/post/006-ai-testing-by-testgpt/20230626_212047_hu_f02eca26024ea82e.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="386"
data-flex-basis="927px"
>&lt;/p>
&lt;h3 id="总结">总结
&lt;/h3>&lt;p>所以可以看到TestGPT还是非常优秀的，准确地分析出了代码的作用并发现了代码中有问题的地方。也帮助设计了测试用例覆盖及相关单元测试脚本。
善用这个工具已经无疑可以给开发工程师提供非常大的辅助，但是从初步的使用来看，自行生成的测试用例对于问题代码的覆盖还有不足，短期内应该还不足以代替测试设计。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>团队管理 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/tags/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/</link><description>Recent content in 团队管理 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Wed, 09 Jul 2025 15:32:15 +0800</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/tags/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>软件测试团队应如何做好管理？</title><link>https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/</link><pubDate>Wed, 09 Jul 2025 15:32:15 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/team.png" alt="Featured image of post 软件测试团队应如何做好管理？" />&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/team.png"
width="1344"
height="810"
srcset="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/team_hu_82dc07425f110be3.png 480w, https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/team_hu_3dd52bd5606ec2cf.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="398px"
>&lt;/p>
&lt;p>虽然随着敏捷的推广和测试左移的实行，很多测试人员已经更多和开发人员融合到一个团队，但大部分的软件企业，通常还是会独立设立一个专门的测试部门或软件质量部门。&lt;/p>
&lt;p>那么管理这样一个独立的软件测试团队，我们通常要从哪些方面着手？当然团队管理，各种类型团队其实有很大共性，但针对测试这个职能，也会反映出一些自身的特点。本文将从以下几个方面进行探讨。&lt;/p>
&lt;h2 id="建立规范">建立规范
&lt;/h2>&lt;p>任何团队，要形成战斗力，必要的规章制度和流程是必不可少的。&lt;/p>
&lt;p>这其中既包含一些管理规范和制度，如：&lt;/p>
&lt;ul>
&lt;li>奖惩规范&lt;/li>
&lt;li>考勤规范&lt;/li>
&lt;li>培训规范&lt;/li>
&lt;li>工作汇报制度 等等&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>也包括制定一些和测试职能本身相关的技术规范和模板要求，如：&lt;/p>
&lt;ul>
&lt;li>测试计划&lt;/li>
&lt;li>测试方案&lt;/li>
&lt;li>测试用例&lt;/li>
&lt;li>测试执行&lt;/li>
&lt;li>测试报告&lt;/li>
&lt;li>故障管理&lt;/li>
&lt;li>环境管理&lt;/li>
&lt;li>对外测试&lt;/li>
&lt;li>资产管理&lt;/li>
&lt;li>质量分析 等等&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>当然也包括和测试相关的流程梳理，如：&lt;/p>
&lt;ul>
&lt;li>缺陷处理流程&lt;/li>
&lt;li>测试准入准出（提测、发布流程）&lt;/li>
&lt;li>质量分析流程 等等&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>规范和流程的梳理、制定，是部门工作的基础。但规范的形成和完善不是一朝一夕达成的，而是在日常管理和团队协作中逐渐沉淀形成的团队共识，是有形的行为指导。&lt;/p>
&lt;h2 id="打造能力">打造能力
&lt;/h2>&lt;p>一个团队是否成功，战斗力如何，是由团队能力决定的。&lt;/p>
&lt;p>而针对测试团队，如何建设这种能力呢？&lt;/p>
&lt;p>测试行业参照 &lt;strong>CMMI&lt;/strong> 模型，提出过 &lt;strong>TMMI&lt;/strong> 模型:
&lt;img src="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/TMMI.png"
width="1153"
height="750"
srcset="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/TMMI_hu_b29a718b165a022f.png 480w, https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/TMMI_hu_4a35e0275e7cac39.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>初始级&lt;/strong>
默认起始级别，组织还没有相关的测试能力，测试工作粗放随意，没有单独的测试环节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>已管理&lt;/strong>
测试工作是专门职能，有了基本的测试规范如方针、策略、计划、方案、设计、执行等等
还有像测试环境，会有单独的测试环境完成测试工作而不是在开发环境中进行相关的验证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>已定义&lt;/strong>
到这个级别一般才代表组织在测试工作中达到了基本的成熟度。
它典型的特点就是有了专门的测试组织、通过测试团队来负责测试工作的组织和实施。
除了基本的功能测试外，这个级别下会针对各种非功能测试建立相关能力，包括性能测试、兼容性测试、易用性测试、可靠性测试、无障碍测试等等丰富的测试类型。还有会重点进行面向质量的同行评审&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>已度量&lt;/strong>
可以对测试工作的成效从多个维度通过相关的度量指标和数据进行量化，能比较准确反映测试工作做得如何。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>已优化&lt;/strong>
可以做到不断地自我更新和持续优化。通过全流程的质量控制和前期分析手段，做到缺陷预防。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>除了这种业界标准，针对测试团队的能力建设，我总结下来，还可以从以下四方面重点打造：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>业务测试能力&lt;/strong>： 团队立身之本，发现问题的能力&lt;/li>
&lt;li>&lt;strong>快速测试能力&lt;/strong>： 提升效率，建立成本优势，及时建立质量信心&lt;/li>
&lt;li>&lt;strong>质量评估能力&lt;/strong>： 对质量的准确度量和监控&lt;/li>
&lt;li>&lt;strong>快速响应能力&lt;/strong>： 对质量问题和风险的快速反应&lt;/li>
&lt;/ul>
&lt;p>做好团队的能力建设，是建立团队护城河的根本。&lt;/p>
&lt;h2 id="绩效度量">绩效度量
&lt;/h2>&lt;p>人在职场，努力工作说到底还是为了个人的更好发展，获取当下或长期的长远利益。趋利避害，人之常情。&lt;/p>
&lt;p>而团队管理，针对绩效的度量，其实本质就是以绩效为锚，管理好利益的分配，驱动团队整体目标的达成。&lt;/p>
&lt;p>现在企业中比较常用的绩效管理框架，主要有两种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>KPI&lt;/strong>： 关键绩效指标&lt;/li>
&lt;li>&lt;strong>OKR&lt;/strong>：目标与关键结果&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/Pasted-20250710.png"
width="994"
height="590"
srcset="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/Pasted-20250710_hu_bd4c69b2f0bb10bb.png 480w, https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/Pasted-20250710_hu_bab5a31546673056.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;strong>KPI&lt;/strong> 属于结果导向，重点关注一些可量化的关键定量指标
&lt;strong>OKR&lt;/strong> 则是目标驱动，围绕目标展开，虽然它的关键结果通常也是定量的，但关注的更多还是达成目标的路径。&lt;/p>
&lt;p>而不管是 KPI 还是 OKR，团队针对绩效的管理，离不开各种绩效量化指标的制定。&lt;/p>
&lt;p>以一个测试团队来说，相关的指标主要又可以从三个不同维度来看：&lt;/p>
&lt;h3 id="质量维度">质量维度
&lt;/h3>&lt;p>测试团队面向质量，所以衡量绩效离不开对质量的评估。常用的一些关键指标比如：&lt;/p>
&lt;ul>
&lt;li>需求覆盖率&lt;/li>
&lt;li>故障泄露率&lt;/li>
&lt;li>提测打回率&lt;/li>
&lt;li>发布成功率&amp;hellip;. 等等&lt;/li>
&lt;/ul>
&lt;h3 id="效率维度">效率维度
&lt;/h3>&lt;p>测试部门作为成本部门，完成质量评估的效率直接影响发布节奏，也是产品成本中的重要构成。 因此测试部门的管理，必然会包含对工作效率的相关指标，常用指标如：&lt;/p>
&lt;ul>
&lt;li>测试周期&lt;/li>
&lt;li>自动化覆盖率&lt;/li>
&lt;li>CI 成功率&lt;/li>
&lt;li>发布效率&lt;/li>
&lt;li>响应效率 &amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;h3 id="成长维度">成长维度
&lt;/h3>&lt;p>除了上面反映部门本身目标的维度之外，任何团队离不开团队成员的逐渐成长和成熟，因此面向个人和团队成长的指标也是团队管理的重要维度，常用指标如：&lt;/p>
&lt;ul>
&lt;li>知识分享、培训&lt;/li>
&lt;li>技术创新、流程改进、工具开发&lt;/li>
&lt;li>学习总结、活动组织 &amp;hellip; 等等&lt;/li>
&lt;/ul>
&lt;p>从以上不同维度，我们在团队管理时，可以结合团队现状，细分出多种更详细的细分指标，并结合绩效数据的采集和分析技术，完成科学的度量。并进而和如加薪、奖金、职级等直接利益挂钩。&lt;/p>
&lt;h2 id="团队协作">团队协作
&lt;/h2>&lt;p>测试团队作为一个以测试职能为主的集体，同时也是和软件产品研发其他职能如开发、运维等需要充分合作的团队，测试团队管理中另一个重要的部分就是面向团队协作的管理。&lt;/p>
&lt;p>协作离不开沟通，这里可以充分利用我前面文章如【】中介绍的乔哈里窗沟通模型，或者【】中的冲突模型作为沟通协作的辅助工具。&lt;/p>
&lt;p>而站在测试团队这个视角，其实团队协作我们也可以从四个维度来考虑：&lt;/p>
&lt;h3 id="内部协作">内部协作
&lt;/h3>&lt;p>这里主要是要根据不同成员的能力和性格特质，合理地做好工作安排，人尽其才，互利互赢。&lt;/p>
&lt;h3 id="平级部门协作">平级部门协作
&lt;/h3>&lt;p>平级部门间的协作，包括和开发团队、运维团队、产品团队等的合作。重在以双赢互利思想处理和平级团队的合作，尽可能做到求同存异，完善流程，安排好接口，并在产生争议冲突时维护好团队利益。&lt;/p>
&lt;h3 id="向上协作">向上协作
&lt;/h3>&lt;p>和上级领导或上级部门的沟通协作，是任何中层必须做好的功课。同样，不同性格特质的领导会有不同的沟通技巧和沟通方式。做好向上管理，为团队良性发展赢得空间。&lt;/p>
&lt;p>总之，在企业中，一个优秀的中层，应该是一个 “&lt;strong>上能承压、下能服众、平级能协(si)作(bi)&lt;/strong>”的Leader。&lt;/p>
&lt;h3 id="对外协作">对外协作
&lt;/h3>&lt;p>除了企业内部的这些协作，测试团队其实也是一个比较会经常面向外部关系的部门，比如外包、售后支持、对外测试等等场景。&lt;/p>
&lt;p>这类协作中，团队管理要明确职权和责任范围，作为企业的代表还应维护好企业形象和利益，并维系好和外部组织的关系和建立信任。&lt;/p>
&lt;h2 id="团队文化">团队文化
&lt;/h2>&lt;p>最后，任何团队，如果要长期稳定和良性发展，离不开团队文化的加持。&lt;/p>
&lt;p>&lt;strong>流程、规范、制度是有形的，重在告诉大家如何正确地做事，行为是被动的。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>而团队文化形成后，大家会自觉地按共同的价值观去做事，行为是主动的。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/%E5%9B%A2%E9%98%9F.png"
width="1391"
height="806"
srcset="https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/%E5%9B%A2%E9%98%9F_hu_49cfee3276bd0519.png 480w, https://chengxiaqiucao.github.io/post/110-%E6%B5%8B%E8%AF%95%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/%E5%9B%A2%E9%98%9F_hu_1eac1a2dd604d19c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>文化的形成是长期的，团队管理者是文化形成的关键，一以贯之，“念念不忘，必有回响”。&lt;/p>
&lt;hr>
&lt;p>以上，就是本人关于测试团队管理五个重点维度的总体说明。 对于相关细节感兴趣的朋友，也可以关注我的测试技能系统提升课程中的管理部分，有关于这五个维度和实施的详细分析。回复 &lt;code>大纲&lt;/code> 可查看课程详细目录。&lt;/p></description></item><item><title>AI测试，测试团队的必由之路</title><link>https://chengxiaqiucao.github.io/post/083-ai%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link><pubDate>Sat, 26 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/083-ai%E6%B5%8B%E8%AF%95%E8%B7%AF%E7%BA%BF%E5%9B%BE/</guid><description>&lt;blockquote>
&lt;p>本文根据知名测试博客 &lt;a class="link" href="https://testguild.com/" target="_blank" rel="noopener"
>https://testguild.com/&lt;/a> 的最新博文翻译整理，谈到了在测试团队中系统实施、推进 AI 测试的路线图，很有参考价值，现分享给大家&lt;/p>&lt;/blockquote>
&lt;h2 id="ai-测试自动化不再是可选项">AI 测试自动化不再是可选项
&lt;/h2>&lt;p>在当今的软件测试领域，人工智能（AI）已不再仅仅是一种选择，而是一种重要的战略优势 。AI 驱动的测试工具能够将从测试用例生成到测试执行的各个环节实现自动化，从而使您的团队能够专注于交付更高质量的软件版本 。&lt;/p>
&lt;p>Blinq.io 首席执行官 Tal Barmeir 曾指出：“生成式 AI 的作用在于帮助我们真正解决大量测试需求积压且覆盖范围非常有限的问题——这是我们在所有行业中都普遍看到的现象。”&lt;/p>
&lt;p>AI 驱动的测试工具能自动化从测试用例创建到执行和维护的整个流程，将助力测试团队：&lt;/p>
&lt;ul>
&lt;li>将测试创建时间缩短高达 80%&lt;/li>
&lt;li>将测试维护成本降低 40-60%&lt;/li>
&lt;li>通过更快的发布周期加速产品上市时间&lt;/li>
&lt;li>提高跨浏览器、设备和环境的测试覆盖率&lt;/li>
&lt;li>释放宝贵的工程资源用于创新&lt;/li>
&lt;/ul>
&lt;p>本指南提供了一种结构化的方法来实施 AI 测试，旨在带来即时效益和长期的转型。&lt;/p>
&lt;h2 id="阶段一第-1-15-天制定您的-ai-测试策略">阶段一（第 1-15 天）：制定您的 AI 测试策略
&lt;/h2>&lt;p>在深入研究具体的工具之前，首先需要明确您希望如何应用 AI ：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>辅助式 AI&lt;/strong>：增强以人工为主导的测试流程。&lt;/li>
&lt;li>&lt;strong>自主式 AI&lt;/strong>：由 AI 完全驱动的测试自动化，并有人工监督。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“大多数组织从辅助式 AI 开始。但很快他们就会意识到其价值有限，并尝试转向完全由 AI 主导。这种转变需要不同的工具、结构和思维模式。”&lt;/p>&lt;/blockquote>
&lt;p>对于 测试团队决策Leader 而言，关键的战略决策包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>自动化范围&lt;/strong>：您的团队是自动化现有测试用例，还是允许 AI 全权负责测试脚本的创建、执行和维护？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>集成要求&lt;/strong>：AI 测试将如何与您现有的 CI/CD 管道和开发工作流程集成？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>成功指标&lt;/strong>：将使用哪些 KPI 来衡量成功？（如测试覆盖率、执行时间、缺陷检测等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>风险评估&lt;/strong>：哪些应用程序或功能最适合作为 AI 测试的初始实施对象？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>行动建议&lt;/strong>：在进行工具评估之前，请务必明确 AI 测试愿景、范围和成功标准 。&lt;/p>
&lt;h2 id="阶段二第-16-30-天重新定义-qa-角色和测试输入">阶段二（第 16-30 天）：重新定义 QA 角色和测试输入
&lt;/h2>&lt;p>AI 测试自动化并不会消除现有角色，而是会对其进行转型 。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>传统角色&lt;/strong>&lt;/th>
&lt;th>&lt;strong>AI 增强角色&lt;/strong>&lt;/th>
&lt;th>&lt;strong>主要职责&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>手工测试人员&lt;/td>
&lt;td>提示词工程师&lt;/td>
&lt;td>创建有效的测试提示，审查 AI 生成的测试&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自动化工程师&lt;/td>
&lt;td>AI 测试主管&lt;/td>
&lt;td>监督 AI 测试的生成、执行和维护&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>QA 经理&lt;/td>
&lt;td>AI 测试战略家&lt;/td>
&lt;td>定义 AI 测试策略，衡量投资回报率，优化流程&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>“人们常常认为 AI 意味着失业。这并非事实。它真正做的是重新利用测试人员——手动测试人员成为提示工程师，自动化工程师成为 AI 工作的监督者。”&lt;/p>&lt;/blockquote>
&lt;h3 id="扩展测试输入源">&lt;strong>扩展测试输入源&lt;/strong>
&lt;/h3>&lt;p>AI 测试平台能够从多种输入生成全面的测试用例 ，包括：&lt;/p>
&lt;ul>
&lt;li>Jira 工单和用户故事&lt;/li>
&lt;li>应用程序使用屏幕录像&lt;/li>
&lt;li>自然语言需求&lt;/li>
&lt;li>API 规范和文档&lt;/li>
&lt;li>现有手动测试用例&lt;/li>
&lt;/ul>
&lt;p>这种灵活性使得 AI 测试无需严格遵循 BDD 框架或特定的测试用例格式，从而使各种成熟度级别的团队都能够使用 AI 测试 。&lt;/p>
&lt;h2 id="阶段三第-31-45-天评估-ai-测试工具">阶段三（第 31-45 天）：评估 AI 测试工具
&lt;/h2>&lt;p>选择正确的 AI 测试工具，必须使其与您的基础设施、团队技能和长期愿景保持一致 。&lt;/p>
&lt;h3 id="企业级-ai-测试平台的基本功能">&lt;strong>企业级 AI 测试平台的基本功能&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>开源测试代码生成&lt;/strong>：以标准框架（如 Playwright、Selenium 等）生成可维护的代码。&lt;/li>
&lt;li>&lt;strong>自愈能力&lt;/strong>：无需人工干预即可自动适应用户界面（UI）变化。&lt;/li>
&lt;li>&lt;strong>全面测试支持&lt;/strong>：涵盖功能、视觉、性能和安全测试。&lt;/li>
&lt;li>&lt;strong>企业集成&lt;/strong>：与您的 CI/CD 管道、测试管理和缺陷跟踪系统协同工作。&lt;/li>
&lt;li>&lt;strong>跨平台测试&lt;/strong>：支持 Web、移动、API 和企业应用程序（如 Salesforce、SAP 等）。&lt;/li>
&lt;li>&lt;strong>视觉测试&lt;/strong>：AI 驱动的视觉比较和异常检测。&lt;/li>
&lt;li>&lt;strong>不稳定测试管理&lt;/strong>：自动识别和解决不一致的测试。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“即使您停止使用某个供应商，您仍然拥有一个可以维护的代码项目。没有黑盒，没有供应商锁定。”&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>决策框架&lt;/strong>：根据您的具体需求、现有基础设施和团队能力评估工具 。优先选择那些能够生成标准、可维护测试代码而非专有格式的平台 。&lt;/p>
&lt;h2 id="阶段四第-46-60-天为新的-ai-增强测试角色进行培训">阶段四（第 46-60 天）：为新的 AI 增强测试角色进行培训
&lt;/h2>&lt;p>测试自动化中引入 AI，将带来新的 AI 功能和职责，从而提升 QA 团队的角色 。&lt;/p>
&lt;h3 id="ai-测试时代的关键技能">&lt;strong>AI 测试时代的关键技能&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>提示工程&lt;/strong>：创建有效的测试提示，以生成全面的测试覆盖。&lt;/li>
&lt;li>&lt;strong>AI 测试审查&lt;/strong>：评估和完善 AI 生成的测试脚本。&lt;/li>
&lt;li>&lt;strong>测试维护管理&lt;/strong>：监督自愈能力和测试稳定性。&lt;/li>
&lt;li>&lt;strong>测试优先级排序&lt;/strong>：确定每次发布中哪些测试能带来最高价值。&lt;/li>
&lt;li>&lt;strong>探索性测试&lt;/strong>：将人类创造力集中于边缘情况和复杂场景。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“旧技能是脚本编写和调试。新技能呢？编写提示、审查 AI 建议以及大规模管理代码。”&lt;/p>&lt;/blockquote>
&lt;h3 id="qa-团队的培训资源">&lt;strong>QA 团队的培训资源&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>关于 AI 测试概念和提示工程的内部研讨会。&lt;/li>
&lt;li>供应商提供的特定 AI 测试平台培训。&lt;/li>
&lt;li>在实际应用程序测试场景中的动手实践。&lt;/li>
&lt;li>手动和自动化测试人员之间的交叉培训。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>领导力重点&lt;/strong>：鼓励实验并创造一个学习环境，让团队可以通过实际应用发展 AI 测试专业知识 。&lt;/p>
&lt;h2 id="阶段五第-61-75-天试点并扩展-ai-测试覆盖范围">阶段五（第 61-75 天）：试点并扩展 AI 测试覆盖范围
&lt;/h2>&lt;p>启动一个重点明确的试点项目，使用 10-20 个测试场景，以实现快速、可衡量的影响，并建立对 AI 测试能力的信心 。&lt;/p>
&lt;h3 id="理想的试点项目特征">&lt;strong>理想的试点项目特征&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>具有稳定 UI 的中等复杂性应用程序。&lt;/li>
&lt;li>用于比较的现有手动测试用例。&lt;/li>
&lt;li>定期发布周期以展示 CI/CD 集成。&lt;/li>
&lt;li>混合了回归、功能和视觉测试需求。&lt;/li>
&lt;li>利益相关者乐于创新和流程变革。&lt;/li>
&lt;/ul>
&lt;h3 id="实施清单">&lt;strong>实施清单&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>选择试点应用程序并定义测试范围。&lt;/li>
&lt;li>配置 AI 测试工具并与 CI/CD 集成。&lt;/li>
&lt;li>创建初始测试提示并生成基线测试。&lt;/li>
&lt;li>在多个环境中执行测试。&lt;/li>
&lt;li>根据传统测试方法衡量结果。&lt;/li>
&lt;li>记录经验教训和优化机会。&lt;/li>
&lt;/ul>
&lt;p>此阶段非常适合扩展跨浏览器、设备和语言的测试覆盖范围——利用 AI 模型的多语言能力高效测试国际应用程序 。&lt;/p>
&lt;h2 id="阶段六第-76-90-天衡量-kpi-并优化">阶段六（第 76-90 天）：衡量 KPI 并优化
&lt;/h2>&lt;p>跟踪关键绩效指标（KPIs），量化 AI 测试实施的影响并发现优化机会 。&lt;/p>
&lt;h3 id="关键-ai-测试指标-">&lt;strong>关键 AI 测试指标&lt;/strong> ：
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>发布时间&lt;/strong>：整体测试周期时间的缩短。&lt;/li>
&lt;li>&lt;strong>测试覆盖率&lt;/strong>：功能和平台覆盖率的提高。&lt;/li>
&lt;li>&lt;strong>维护工作量&lt;/strong>：测试脚本维护时间的减少。&lt;/li>
&lt;li>&lt;strong>缺陷检测&lt;/strong>：缺陷识别率的提高。&lt;/li>
&lt;li>&lt;strong>资源利用率&lt;/strong>：QA 团队将重心转移到更高价值的活动。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>“大多数领导者认为 AI 测试是为了削减成本。但最大的投资回报率实际上是更快的上市时间。”&lt;/p>&lt;/blockquote>
&lt;h3 id="持续改进框架">&lt;strong>持续改进框架&lt;/strong>：
&lt;/h3>&lt;ul>
&lt;li>每周审查 AI 测试性能和准确性。&lt;/li>
&lt;li>根据测试结果和遗漏场景完善提示。&lt;/li>
&lt;li>将 AI 测试扩展到其他应用程序和测试类型。&lt;/li>
&lt;li>记录最佳实践并在团队之间分享。&lt;/li>
&lt;li>建立 AI 测试卓越中心。&lt;/li>
&lt;/ul>
&lt;p>这些见解将支持您的团队就测试覆盖率、发布准备情况和质量改进做出数据驱动的决策 。&lt;/p>
&lt;h2 id="总结您的-90-天-ai-测试实施路线图">总结：您的 90 天 AI 测试实施路线图
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>阶段&lt;/strong>&lt;/th>
&lt;th>&lt;strong>时间线&lt;/strong>&lt;/th>
&lt;th>&lt;strong>重点&lt;/strong>&lt;/th>
&lt;th>&lt;strong>关键交付物&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>第 1-15 天&lt;/td>
&lt;td>策略定义&lt;/td>
&lt;td>AI 测试愿景、实施方法、成功指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>第 16-30 天&lt;/td>
&lt;td>角色转型&lt;/td>
&lt;td>更新的团队结构、技能要求、输入源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>第 31-45 天&lt;/td>
&lt;td>工具选择&lt;/td>
&lt;td>AI 测试平台评估、选择标准、概念验证&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>第 46-60 天&lt;/td>
&lt;td>团队培训&lt;/td>
&lt;td>技能发展计划、培训资源、知识共享&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>第 61-75 天&lt;/td>
&lt;td>试点实施&lt;/td>
&lt;td>初始 AI 测试套件、与 CI/CD 集成、基线指标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>第 76-90 天&lt;/td>
&lt;td>衡量与优化&lt;/td>
&lt;td>绩效分析、优化计划、扩展策略&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="qa-的未来ai-驱动的测试领导力">QA 的未来：AI 驱动的测试领导力
&lt;/h2>&lt;p>借助正确的 AI 测试策略，您的 QA 组织不仅能跟上行业步伐，更将引领向更快、更可靠的软件交付转型 。您不仅仅是在自动化测试，更是在赋能团队，以增强和简化整个测试生命周期，以前所未有的速度交付更高质量的软件，同时降低风险和技术债务 。现在就拥抱 AI 测试，您将使您的组织处于质量工程的前沿，通过卓越的软件质量和加速创新创造可持续的竞争优势 。&lt;/p></description></item><item><title>高效会议5P法，别让会议偷走你的时间</title><link>https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515.png" alt="Featured image of post 高效会议5P法，别让会议偷走你的时间" />&lt;h2 id="引言">引言
&lt;/h2>&lt;blockquote>
&lt;p>&amp;ldquo;每天都是开不完的会！一多半时间就是在听个别人争吵！&amp;rdquo;
“什么事都喜欢拉一大票人开会，真正发言的倒没几个！”
“一个需求改动，计划10分钟的会能聊上两小时！”&lt;/p>&lt;/blockquote>
&lt;p>在快节奏的软件研发工作中，会议是信息同步、决策制定、问题解决不可或缺的一环。但我们很多时候，感受到的却是会议的低效！据统计，一名软件工程师平均每周要花 &lt;strong>12小时&lt;/strong> 在各种会议上，但其中&lt;strong>60%的会议被证明低效甚至无效&lt;/strong> 。&lt;/p>
&lt;p>要如何让会议真正成为协作工具而非时间黑洞？本文，我们将通过介绍高效会议的5P法，拆解会议提效的核心逻辑，摆脱“会海”！&lt;/p>
&lt;h2 id="何为5p法">何为5P法？
&lt;/h2>&lt;p>会议5P法，其实就是我们在召开会议中，需要关注的5个主要方面。把这5方面处理好，那么会议就不会陷入漫无目的、冗长低效的泥潭中。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515.png"
width="969"
height="604"
srcset="https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515_hu_570525dede6fdf1c.png 480w, https://chengxiaqiucao.github.io/post/078-%E4%BC%9A%E8%AE%AE5p/snap_20250515_hu_c65ebbfe95f0e919.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;h2 id="people谁该来参会">People：谁该来参会？
&lt;/h2>&lt;blockquote>
&lt;p>案例： 需求澄清会上，只有产品经理和几个核心开发参与了，但测试人员和UI/UX设计师缺席。结果，开发过程中发现需求理解与测试预期不一致，UI/UX设计也与功能实现有偏差，导致后期大量返工。&lt;/p>&lt;/blockquote>
&lt;p>低效会议的常见问题之一就是 “该来的人没来，不该来的人坐一堆”。所以确保邀请了所有关键且必要的干系人，同时避免无关人员的参与，是会议成功的第一步。&lt;/p>
&lt;p>重点考虑如下几点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>必要性：&lt;/strong> 只邀请那些能提供关键信息、参与决策或受会议结果直接影响的人。&lt;/li>
&lt;li>&lt;strong>代表性：&lt;/strong> 如果团队较大，可以邀请各职能的代表参加。&lt;/li>
&lt;li>&lt;strong>角色清晰：&lt;/strong> 明确每个人的发言重点和责任。&lt;/li>
&lt;/ul>
&lt;p>比如上例需求澄清会中，我们可以确定以下People角色参会：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>产品负责人 (Product Owner):&lt;/strong> 阐述需求背景、用户故事、业务价值。&lt;/li>
&lt;li>&lt;strong>开发团队代表 (Development Team Lead/Members):&lt;/strong> 从技术实现角度提问，评估可行性。&lt;/li>
&lt;li>&lt;strong>测试团队代表 (Test Lead/QA Engineer):&lt;/strong> 从可测试性角度提问，思考测试场景。&lt;/li>
&lt;li>&lt;strong>UI/UX设计师 (UI/UX Designer):&lt;/strong> 明确用户交互和界面设计细节。&lt;/li>
&lt;li>&lt;strong>(可选) 架构师 (Architect):&lt;/strong> 若需求涉及复杂系统架构调整。&lt;/li>
&lt;/ul>
&lt;h2 id="purpose为什么开这个会">Purpose：为什么开这个会？
&lt;/h2>&lt;blockquote>
&lt;p>案例： 敏捷回顾会变成了“吐槽大会”或“表扬大会”，大家七嘴八舌，但没有聚焦于如何改进下一个迭代的工作流程和协作方式。会议是召开了，但到下一个迭代，存在的问题依旧没有改观。&lt;/p>&lt;/blockquote>
&lt;p>没有目标的会议，就像失去导航的海上孤舟，很容易迷失航向，难以保证最后驶向何方，最后不了了之。&lt;/p>
&lt;p>只有所有参会者都了解会议的目的，才能统一大家的认知，确保讨论不偏离主旨。&lt;/p>
&lt;p>而这里目标的设定，也应该注意：&lt;/p>
&lt;ul>
&lt;li>目标应具体、可衡量、可达成、相关性强且有时间限制 (&lt;strong>SMART原则&lt;/strong>)。&lt;/li>
&lt;li>一次会议尽量聚焦于1-2个核心目标，避免议题过多导致失焦。&lt;/li>
&lt;li>确保所有参会者对会议目标有共同的理解。&lt;/li>
&lt;/ul>
&lt;p>比如上面迭代的回顾会，我们就可以将目标进行明确：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>主要目标：&lt;/strong> 检视上一个迭代中哪些做得好，哪些方面存在问题，并为下一个迭代制定具体的改进措施。&lt;/li>
&lt;li>&lt;strong>具体子目标：&lt;/strong>
&lt;ul>
&lt;li>识别出影响团队效率最高的1-2个障碍点，并制定解决方案；&lt;/li>
&lt;li>确定一项需要继续保持的优秀实践。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="process会议应该怎么开">Process：会议应该怎么开？
&lt;/h2>&lt;blockquote>
&lt;p>案例：测试用例评审会。在会议开始后，大家才拿到厚厚一沓打印好的测试用例，逐条阅读，临时提问。主讲人讲解也缺乏重点，评审人员思路发散，导致会议超时严重，评审效果极差。&lt;/p>&lt;/blockquote>
&lt;p>如果Purpose是确保航向，那么Process就是会议这艘船的海图。一个清晰的流程能够引导会议有序进行，确保每个议题都得到充分讨论，并能在预定时间内达成目标。&lt;/p>
&lt;p>包括会议的议程、时间分配、讨论规则、决策方式等约定。&lt;/p>
&lt;p>还是以上面案例来说明，在会前我们就可以约定Process：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>结构化议程：&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>会前准备 (5-10分钟，或会前完成)：&lt;/strong> 主持人简述评审范围、目标和用例背景。强调测试用例已提前共享，默认参会者已预先阅读。&lt;/li>
&lt;li>&lt;strong>重点/疑点用例讨论 (30-40分钟)：&lt;/strong> 针对预先收集的疑问或标记的重点用例进行集中讨论。限定每个复杂用例的讨论时间。&lt;/li>
&lt;li>&lt;strong>总结与确认 (10-15分钟)：&lt;/strong> 汇总评审意见，明确修改负责人和截止日期。确认用例覆盖度是否达成共识。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>明确讨论规则：&lt;/strong> 例如，鼓励建设性意见，避免打断发言，意见不一时如何决策（如少数服从多数，或特定角色最终决定）。&lt;/li>
&lt;li>&lt;strong>时间控制：&lt;/strong> 为每个议程环节设定预估时间，并严格执行。&lt;/li>
&lt;/ul>
&lt;h2 id="product会议的成果是什么">Product：会议的成果是什么？
&lt;/h2>&lt;blockquote>
&lt;p>案例：版本发布计划会。在会议中，大家讨论了许多关于新版本的功能设想和潜在风险，但没有形成明确的发布范围、优先级和责任人。会后大家对“新版本到底要做哪些功能”依然模糊不清。&lt;/p>&lt;/blockquote>
&lt;p>首先澄清一个误区，并不是会议开完，产生了会议纪要就叫做会议有了输出。
一个会议真正的成果应该是可转化为下一步行动的共识，并且是可追溯的。它可以是决策、行动计划、解决方案、共识记录、更新的文档等。没有明确的产出，会议就等于白开。&lt;/p>
&lt;p>以上面案例来说，明确的交付物可以是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>确定的发布范围：&lt;/strong> 一份清晰的功能列表 (Features List) 或用户故事 (User Stories)，并且有优先级的区分。&lt;/li>
&lt;li>&lt;strong>初步的时间表：&lt;/strong> 关键里程碑和预计的发布日期。&lt;/li>
&lt;li>&lt;strong>明确的责任分工：&lt;/strong> 每个主要模块或任务的负责人。&lt;/li>
&lt;li>&lt;strong>已识别的风险及应对措施：&lt;/strong> 记录潜在风险和初步的缓解计划。&lt;/li>
&lt;li>&lt;strong>会议纪要：&lt;/strong> 包含以上所有内容，并明确后续的跟踪事项。 是会议成果的书面记录&lt;/li>
&lt;/ul>
&lt;h2 id="pitfall预计的风险是什么">Pitfall：预计的风险是什么？
&lt;/h2>&lt;p>&lt;strong>Pitfall&lt;/strong>指的是“在会议过程中，可能会遇到哪些潜在的问题或障碍？我们如何预防或应对？”&lt;/p>
&lt;h3 id="一些常见的会议风险点及应对思路">一些常见的会议风险点及应对思路
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>议题过于发散，讨论跑题：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 参会者可能对某个细节过度深究，或引入不相关的议题。&lt;/li>
&lt;li>&lt;strong>应对 (结合Purpose &amp;amp; Process):&lt;/strong> 主持人需时刻谨记会议核心目标，温和地将讨论拉回正轨。可以设置“停车场”（Parking Lot）机制，记录临时想到的但与当前议题无关的点，会后再讨论。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关键人物缺席或迟到：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 核心决策者或信息提供者未能按时参与，导致会议无法有效推进。&lt;/li>
&lt;li>&lt;strong>应对 (结合People):&lt;/strong> 提前与关键人物确认时间，发送会议提醒。若临时缺席，评估是否可以继续，或调整议程，或重新安排会议。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>少数人主导发言，其他人沉默：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 可能导致信息不全面，决策有偏。&lt;/li>
&lt;li>&lt;strong>应对 (结合Process):&lt;/strong> 主持人应有意识地邀请沉默的参会者发言，或采用轮流发言、匿名收集意见等方式，确保每个人都有贡献的机会。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>准备不足，信息不对称：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 参会者未提前阅读材料，导致会上花费大量时间同步基础信息。&lt;/li>
&lt;li>&lt;strong>应对 (结合Purpose &amp;amp; Product):&lt;/strong> 提前将会议材料（如需求文档、设计稿、待评审用例）清晰地发送给参会者，并明确要求他们会前阅读和准备。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>没有明确的行动计划和跟进：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pitfall:&lt;/strong> 会议讨论热烈，但没有落实到具体行动，最终不了了之。&lt;/li>
&lt;li>&lt;strong>应对 (结合Product):&lt;/strong> 会议结束前，务必总结行动项、责任人和截止日期，并明确后续如何跟踪进展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>总之，提前思考潜在的风险，并准备好应对策略，可以有效避免会议被意外情况打断或偏离轨道，确保会议顺利进行并达成预期目标。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>通过以上结合案例的5P法介绍，要高效地完成一个会议，通过5P法，可以有效避免会议失控。它的核心逻辑其实就是：&lt;/p>
&lt;p>&lt;strong>“用结构化的方法去对抗人性的随意”&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>People (合适的与会人)：&lt;/strong> 确保正确的人在场。&lt;/li>
&lt;li>&lt;strong>Purpose (明确的目标)：&lt;/strong> 清楚为何而来，去往何方。&lt;/li>
&lt;li>&lt;strong>Process (清晰的流程)：&lt;/strong> 规划好路径，有序前行。&lt;/li>
&lt;li>&lt;strong>Product (期望的产出)：&lt;/strong> 带着成果离开。&lt;/li>
&lt;li>&lt;strong>Pitfall (预估的风险点)：&lt;/strong> 规避障碍，顺利抵达。&lt;/li>
&lt;/ul>
&lt;p>我之前介绍敏捷四会的相关文章中，相关的实践也反映了5P法的核心逻辑，推荐大家可以参照阅读~&lt;/p></description></item><item><title>测试人员伤害质量的十大误区</title><link>https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/</link><pubDate>Fri, 28 Mar 2025 15:59:08 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA.png"
width="900"
height="383"
srcset="https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA_hu_588289c4d5a18079.png 480w, https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA_hu_97ec78e79daba015.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="563px"
>&lt;/p>
&lt;p>很多企业会把承担测试的工程师称为QA（quality assurance），但QA和Tester其实是两个不同的岗位，但不可否认，测试工程师的主要职责也是面向质量的，是通过评估质量状态来帮助团队进行质量改进的。&lt;/p>
&lt;p>但即便这样，测试工程师的工作就一定是对质量改进有帮助的吗？在实际工作中，有些误区反而会让测试人员的工作对质量产生负面影响。&lt;/p>
&lt;p>这里秋草梳理总结了测试人员可能伤害质量的十大误区，以及对应的正确做法。&lt;/p>
&lt;h2 id="1-测试的职责是发现并汇报bug但不是确认">1. 测试的职责是发现并汇报Bug，但不是确认
&lt;/h2>&lt;p>&lt;strong>误区：经常有开发同学和测试同学就某个问题是否应该报Bug进行争论， “需求中没要求”， “这个问题不影响用户使用” 等等是经常出现的理由。很多测试同学也确实会因为这些原因不再报这些问题，甚至在报Bug前会去和开发确认能不能报。&lt;/strong>&lt;/p>
&lt;p>这是一个对质量伤害极大的误区。测试的价值在于评估质量状态，而评估的关键在于独立性。质量没有对错，只有好坏。需求中没定义的行为，不代表就是不需要的；不影响用户使用也不代表就是好的实现。测试是站在评估质量的视角，指出缺陷或者提出优化建议都是分内工作。开发则负责分析、认定并解决缺陷。如果开发和测试在认定上有分歧，还有PO或业务分析师、CCB成员可以进行仲裁。&lt;/p>
&lt;p>但对于测试人员来说，汇报&lt;strong>一切&lt;/strong>觉得有问题或者质量不好的产品行为则是工作义务。有意或无意去隐瞒或掩盖缺陷，才是对产品质量真正的伤害。&lt;/p>
&lt;h2 id="2-发现bug只是开始还应为修复bug提供尽可能多的上下文">2. 发现Bug只是开始，还应为修复Bug提供尽可能多的上下文
&lt;/h2>&lt;p>&lt;strong>误区：有的测试同学会认为我发现了问题，并且也进行了报告，那么工作就已经完成，后续修复过程与我无关，只需修复后进行验证即可&lt;/strong>&lt;/p>
&lt;p>测试是整个软件产品研发生命周期中的一个环节，最终是为产品整体质量服务的。而Bug本身其实对产品是无价值的，因为只有解决掉的Bug才会对产品质量有帮助。 从这个角度来说，虽然报告Bug是测试人员的主要工作，但对产品来说，最终解决Bug才是目的。所以测试作为产品研发的一环，即便解决Bug不是测试直接负责，但我们也应该为解决Bug提供必要的支撑。&lt;/p>
&lt;p>这部分在之前地文章 【】中有详细探讨，大家有兴趣可以参阅&lt;/p>
&lt;h2 id="3-测试不只是验证需求">3. 测试不只是验证需求
&lt;/h2>&lt;p>&lt;strong>误区：测试只要将需求中明确定义的部分进行验证无误即可，未定义的部分无需测试&lt;/strong>&lt;/p>
&lt;p>这里和第一个误区有些关联，是很多开发和测试争论bug的前提。在前文 【】中我们对测试目标的认识误区中，也说过这一点。就是测试除了验证需求之外，还有更多探索性工作应该覆盖。测试并不止是检查。&lt;/p>
&lt;p>而除此之外，这里我还想更要强调产品的整体性、系统性。特别是在敏捷研发模式下，这个误区很容易被扩大。&lt;/p>
&lt;p>在敏捷中，敏捷迭代的输出是Increment（产品增量），这个对开发工作是成立的。但测试工作是面向整个产品系统的，并不能只覆盖增量部分。需求也是增量的，所以当然不能仅覆盖增量部分的需求，这就是为什么回归测试是测试中必须包含的范畴，也是自动化测试越来越受重视的根本原因。（关于敏捷相关的分析介绍可以参看之前敏捷系列）&lt;/p>
&lt;h2 id="4-测试无止境好钢用在刀刃上">4. 测试无止境，好钢用在刀刃上
&lt;/h2>&lt;p>&lt;strong>误区：要想更多发现Bug，尽量探索、发散，并利用Bug的集群效应，尽可能多地发现Bug&lt;/strong>&lt;/p>
&lt;p>还是在 【】一文中，我们也澄清过，测试的目标也并不是为了发现更多Bug。而且测试其实无止境的，测试最终的目的是对整个产品或系统提供一个可靠、完整的质量状态评估。而这个质量状态是否客观准确，跟Bug的多少其实并不一定是一个正相关的关系。&lt;/p>
&lt;p>测试在尽可能发现Bug的同时，还是认识到，我们是要系统地对质量进行评估，但测试又是无法穷尽的，所以必须要把有限的时间进行科学地分配，优先关注高优先的部分，比如新功能、代码出现变更、高风险模块这些都是应该优先进行测试并重点保证的部分。&lt;/p>
&lt;p>&lt;code>精准测试&lt;/code>、&lt;code>基于风险的测试RBT&lt;/code>等都是这种思路下，把我们的测试资源、时间优先放到高价值部分的实践。&lt;/p>
&lt;h2 id="5-测试工作不是提测才开展从产品需求讨论就已经开始">5. 测试工作不是提测才开展，从产品需求讨论就已经开始
&lt;/h2>&lt;p>&lt;strong>误区：测试应该在产品提测以后才能正式展开，Bug也应该在提测以后才应该报告&lt;/strong>&lt;/p>
&lt;p>在当今，以上误区当然是不正确的，因为不管是&lt;code>测试左移&lt;/code>还是各种测试理论都强调了测试早期参与的重要性。&lt;/p>
&lt;p>但理论归理论，实际实践中，测试通常还是在提测以后才真正开展工作。&lt;/p>
&lt;p>一方面是产品前期，测试的存在感低，参与度低，容易被忽视；&lt;/p>
&lt;p>另一方面，很多测试团队的考核重Bug数量，这其实更加消磨了测试早期参与的积极性，导致测试并不太愿意在早期协助团队暴露产品的问题。&lt;/p>
&lt;p>但从产品交付角度，越是后期，问题修复的成本就越高。所以从产品管理来说，摒弃以Bug考核的导向，引导测试前期的积极参与，测试可以发挥其对问题的敏感度，从需求讨论开始就能识别、考虑到很多异常场景，并帮助团队提前规避。&lt;/p>
&lt;h2 id="6-设计和架构讨论测试不应是小透明">6. 设计和架构讨论，测试不应是小透明
&lt;/h2>&lt;p>&lt;strong>误区：架构和系统设计、详细设计是开发团队的任务，测试无需了解或参与讨论，等待产品开发完成后根据需求进行测试即可&lt;/strong>&lt;/p>
&lt;p>和上一条类似，&lt;code>测试左移&lt;/code>并不只是说测试更多了解需求，同样也要求测试参与到设计、甚至编码环节。&lt;/p>
&lt;p>还是要谈测试的目标：是要尽可能准确评估出产品的质量状态。而质量必然是和产品的具体实现紧密相关的，对产品的实现细节了解得越清晰，那么在测试时就越能够有的放矢，也包括可以在设计、编码阶段就提前帮助团队规避质量问题。&lt;/p>
&lt;p>相反，如果对设计、代码完全是黑盒，很可能遗漏掉一些关键的测试场景导致问题泄露。&lt;/p>
&lt;ul>
&lt;li>不了解云应用的负载均衡机制实现，只在单节点上验证，就无法验证负载均衡失效导致的问题&lt;/li>
&lt;li>不了解系统的缓存实现机制，就难以针对性地去构建缓存命中场景&lt;/li>
&lt;li>不了解界面的响应式适配实现，就难以高效地进行完成兼容性测试&lt;/li>
&lt;li>不了解接口的校验机制，就难以构造有效的接口测试数据&lt;/li>
&lt;/ul>
&lt;p>以上种种，都是测试不应该游离于设计环节之外，认为产品设计不属于测试范畴而忽略对这个环节的参与&lt;/p>
&lt;h2 id="7-独立的测试环境是充分测试的前提">7. 独立的测试环境是充分测试的前提
&lt;/h2>&lt;p>&lt;strong>误区：测试执行只需要关注产品本身，可以在集成环境甚至开发环境上进行测试，并不影响测试效果&lt;/strong>&lt;/p>
&lt;p>确实，测试的对象是产品本身。但测试环境其实是能否对产品进行全面、高效测试的一个关键制约。&lt;/p>
&lt;p>软件测试和探索过程中，对产品的使用，通常是很多不同的操作、交互的相互叠加。而在发现产品问题时，对问题的判断，一个重要的前提就是产品本身的相关前置条件、关联因素是清晰、明确的。而要保证这一点，一个独立、无干扰的测试环境就尤为必要。如果使用开发环境来进行测试，在测试同时，开发人员同时也在环境上进行调测、变更，不仅会增加大量无效问题的出现，也是对测试、问题定位等资源的极大浪费。&lt;/p>
&lt;p>除此之外，测试中，不可避免还有各种异常场景的营造，而一个独立的测试环境，更便于测试人员调整不同的测试场景，比如：&lt;/p>
&lt;ul>
&lt;li>修改网络配置，营造代理访问、内外部IP、弱网等场景&lt;/li>
&lt;li>修改系统时间、定时任务触发、模拟不同时段数据等场景&lt;/li>
&lt;li>模拟资源不足、空间占满、海量或巨大文件等场景&lt;/li>
&lt;li>产品中的部分限制因素，开启Debug模式、不同的鉴权设定、各种配置变更&lt;/li>
&lt;/ul>
&lt;p>这些测试都是建立在一个独立、可控的测试环境基础上的。&lt;/p>
&lt;h2 id="8-自动化测试代码也是程序像对待产品一样对待测试代码">8. 自动化测试代码也是程序，像对待产品一样对待测试代码
&lt;/h2>&lt;p>&lt;strong>误区：编写自动化测试，就是为了替代部分手工测试的执行，完成自动化代码部分的编写，让它能执行并覆盖相关用例即可&lt;/strong>&lt;/p>
&lt;p>自动化测试的目的确实是为了代替很多人工测试工作，达到效率提升的目的。但自动化测试的实施并非一锤子买卖，它也是一个长期的过程。而且自动化测试，本身也是通过程序代码来实现，是程序就会有bug，因此对自动化测试脚本、工具本身的质量保证和维护也是测试人员的重要工作。&lt;/p>
&lt;p>并不是我们编写出一个可跑的自动化脚本就是进行了自动化。对自动化脚本同样要像软件产品一样经过需求分析、设计、编码、测试以及后续的维护这样的生命周期。&lt;/p>
&lt;p>所以自动化测试本身也是一个较大投入，要让相关脚本长期发挥作用并真正起到提升执行效率的目的，那么对自动化测试代码的良好设计和持续维护就必不可少。&lt;/p>
&lt;h2 id="9--cicd管道同样也是测试的职责">9. CI/CD管道同样也是测试的职责
&lt;/h2>&lt;p>&lt;strong>误区：CI/CD作为现在很多研发团队的基础设施，通常会有专门的DevOps工程师负责搭建、维护，作为测试人员，负责其中自动化测试部分脚本的编写即可&lt;/strong>&lt;/p>
&lt;p>诚然，整个CI/CD管道中，和测试直接相关的部分主要就是自动化测试。但还是那句话：测试作为整个研发过程的一分子，是不可能独立于研发过程之外的。特别是敏捷研发中，更加强调团队的整体性，团队整体对研发过程负责。&lt;/p>
&lt;p>所以CI/CD管道建立、运作和保持畅通的过程，并不存在明显的测试只需要负责自动化测试环节的说法。&lt;/p>
&lt;p>作为质量视角的专业人员，在CI/CD管道建设中，我们也可以发挥更多的作用：&lt;/p>
&lt;ul>
&lt;li>定义管道中各个环节流转的质量门禁，将测试左移反映到CI/CD管道中&lt;/li>
&lt;li>代码变更的管控和识别，这部分对于测试阶段的精准测试，意义重大&lt;/li>
&lt;li>包括开发环境、集成环境、测试环境以至线上生产环境的监控，特别是很多质量相关指标的收集实现&lt;/li>
&lt;li>可视化，包括自动化测试报告、各种数据跟踪的状态呈现等&lt;/li>
&lt;/ul>
&lt;h2 id="10-珍惜所有了解终端用户使用场景的机会">10. 珍惜所有了解终端用户使用场景的机会
&lt;/h2>&lt;p>&lt;strong>误区：作为研发团队成员，测试无须主动接触终端用户。和用户对接更多是销售、售后、客服团队的工作&lt;/strong>&lt;/p>
&lt;p>测试工作面向质量，而质量的最终判断，其实是终端用户。所以很多团队都强调，测试是终端用户的代言人，是要站在用户视角来使用、体验产品并提前发现问题的角色。&lt;/p>
&lt;p>因此，从这个意义上，测试其实应该更多地去接触用户，了解用户使用产品的不同场景，诉求以至偏好。&lt;/p>
&lt;p>所以，在有机会接触用户的场景下，测试应该是主动而非抗拒。作为测试，这方面的机会还是比较多的，充分利用和用户接触的机会，丰富我们对于产品所属行业的理解并应用到我们的测试工作中来。&lt;/p>
&lt;ul>
&lt;li>用户问题支持。在一些反馈到研发团队的客户问题，需要提供技术支持时，作为测试，是经常会要直接面向客户的，这时也是我们直观了解用户对产品使用场景和面临问题的地方。&lt;/li>
&lt;li>对外测试。很多用户在选择产品前，都会有针对产品的验收测试。这些测试往往在客户方进行，但产品测试人员往往会作为产品方来提供支持或实施测试，也就是外场测试。这也是一个很好的深入了解用户场景的窗口&lt;/li>
&lt;li>客户拜访。有的企业在产品研发初期或过程中，会安排和终端客户的拜访、访谈，有时也会邀请研发团队参与，虽然大多情况下是系统分析师、架构等角色参与更多，但测试也会参与到此类拜访中，这是在初期就深入了解产品应用场景的一个绝佳机会。&lt;/li>
&lt;li>行业报告。除了直接和终端客户的沟通外，关注产品所属行业的行业报告、资讯和趋势分析等资料，同样也是一个深入理解产品所处行业和用户的上佳渠道。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>以上就是对测试人员伤害质量十大误区的梳理总结，欢迎大家讨论补充。
另外秋草关于测试技能体系化提升的课程，可以回复 &lt;strong>“大纲”&lt;/strong> 或在公众号菜单中查看课程目录。&lt;/p></description></item><item><title>马斯克新政“what did you do last week”和发周报</title><link>https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/</link><pubDate>Fri, 28 Feb 2025 17:20:23 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1.png" alt="Featured image of post 马斯克新政“what did you do last week”和发周报" />&lt;h2 id="引子">引子
&lt;/h2>&lt;p>这两天外网极其热门的一个话题应该是马斯克DOGE新政，要求所有联邦雇员发周报，并列出自己上周做的5项工作，并抄送主管！连续两次不发视同辞职！&lt;/p>
&lt;p>然后目前已经有超100万美国公务员发送了这个周报！ 😂😂😂&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1.png"
width="764"
height="332"
srcset="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1_hu_8ba06be4da6dc8c7.png 480w, https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228-1_hu_e2365549fa5cf1cc.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>而作为公司牛马，我们对这档事实在再熟悉不过了，但话说回来，&lt;strong>为什么会有周报这个事呢&lt;/strong>？&lt;/p>
&lt;h2 id="周报日报的本质是什么">周报（日报）的本质是什么？
&lt;/h2>&lt;p>对于美国的这些公务员大爷们，写周报可能还比较新鲜，但碰上马斯克这个企业出身的大佬，对周报可是情有独钟，早在特斯拉和推特都执行过类似政策。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228.png"
width="861"
height="690"
srcset="https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228_hu_fc7aa7b647b34346.png 480w, https://chengxiaqiucao.github.io/post/062-%E9%A9%AC%E6%96%AF%E5%85%8B%E6%96%B0%E6%94%BF%E7%9C%8B%E5%91%A8%E6%8A%A5/Pasted-20250228_hu_f55d9114ecc9bac7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="299px"
>&lt;/p>
&lt;p>那么对企业或Boss来说，为什么期望看到员工的周报？&lt;/p>
&lt;p>拿软件测试部门举例，周报的作用主要体现再以下几方面：&lt;/p>
&lt;ol>
&lt;li>风险掌控&lt;/li>
&lt;/ol>
&lt;p>这应该是所有 Leader 关心周报中最核心的部分。通过周报，可以知道整个项目总体的进度，便于掌握整体的质量风险，比如测试延期、质量暴露不足等等风险，通过周报可以有一个毕竟清晰的掌握。而周报这个维度，也不会像日报这样过于细节，是一个掌控总体状态的较好输入。&lt;/p>
&lt;ol start="2">
&lt;li>资源优化&lt;/li>
&lt;/ol>
&lt;p>通过周报数据的汇总分析，也便于Leader能掌握所有成员的工作投入情况，便于测试资源的动态调配。&lt;/p>
&lt;p>而这也是这次马斯克新政广受关注的焦点，因为周报的结果指向就是工作不饱和的联邦雇员可能会遭到解雇🤪🤪&lt;/p>
&lt;ol start="3">
&lt;li>决策依据&lt;/li>
&lt;/ol>
&lt;p>周报中，通常会还会包含一些量化的指标，比如测试进展、故障数据、覆盖率、逃逸率、外部支持等等包含可抓取或主动上报的一些质量数据，这些数据是量化当前质量状态并可视化呈现，作为决策依据的重要支撑&lt;/p>
&lt;h2 id="测试人员周报怎么发">测试人员周报怎么发？
&lt;/h2>&lt;p>那么作为一个测试工程师，如果我们要发周报的话，通常应该包含什么内容呢？&lt;/p>
&lt;p>下面给出一个物联网软件（智能手环）员工的周报案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">一、本周工作概述
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 测试执行情况
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 完成心率监测模块V2.3迭代测试，覆盖10种运动场景，发现2个关键缺陷（数据延迟超阈值、低电量下监测失效）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 针对iOS/Android端APP同步功能进行兼容性测试，3款机型（含旧型号）出现数据丢失问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 回归测试通过率95%，剩余5%为低优先级UI显示问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 缺陷管理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 新增缺陷15个（紧急2个、高优先级5个），关闭缺陷8个，遗留缺陷中3个需硬件团队协同修复。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 专项测试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 完成OTA升级流程压力测试，模拟5次连续升级后出现1次固件校验失败。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 功耗测试中，睡眠监测功能待机功耗超标20%。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">二、核心问题与风险
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 阻塞性问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 心率监测数据延迟缺陷导致版本发布延期风险，需开发团队48小时内修复验证。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 资源依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 硬件团队对传感器问题的响应延迟，可能影响下周功耗测试计划。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">三、下周计划
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 执行V2.4版本功能测试（血氧监测、紧急呼叫）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 针对遗留缺陷进行复测，推动硬件团队联合调试。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 启动用户场景压力测试（模拟1000台设备并发数据上传）。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上这个周报，我们从对项目和对测试部门两方面来总结的，体现出的价值可以总结为下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>要素&lt;/th>
&lt;th>对项目的价值&lt;/th>
&lt;th>对测试部门的价值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>测试执行进展&lt;/strong>&lt;/td>
&lt;td>明确版本质量状态，帮助PM评估是否达到发布标准。&lt;/td>
&lt;td>量化团队产出，便于资源调配与效率优化（如调整测试用例优先级）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>缺陷分布与趋势&lt;/strong>&lt;/td>
&lt;td>暴露模块风险，推动开发聚焦核心问题（如心率模块缺陷率高需重构）。&lt;/td>
&lt;td>分析缺陷根源（代码/设计/环境），推动测试用例库补充和流程改进（如增加低电量场景）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>风险与依赖项&lt;/strong>&lt;/td>
&lt;td>预警延期风险，促进跨部门协作（如协调硬件团队介入）。&lt;/td>
&lt;td>向上级争取支持（如申请延长测试周期或增加设备资源）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>专项测试结果&lt;/strong>&lt;/td>
&lt;td>验证非功能需求（如功耗、稳定性），避免用户体验硬伤。&lt;/td>
&lt;td>积累性能基线数据，为后续版本对比提供依据（如功耗指标库）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>下周计划与目标&lt;/strong>&lt;/td>
&lt;td>对齐项目里程碑，确保测试与开发节奏同步（如血氧功能测试计划匹配迭代排期）。&lt;/td>
&lt;td>明确团队分工，避免任务重叠或遗漏。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>所以，作为一个企业员工，其实对于周报，没什么值得抗拒的，它是一个再正常不过的管理行为罢了。
对测试人来说，周报既是测试工作的“仪表盘”（实时反映质量状态），也是跨部门协作的“桥梁”（推动问题解决与资源协调），同时也可以为长期测试策略优化提供数据支撑。&lt;/p>
&lt;p>说到底，目的还是为了 &lt;strong>状态同步&lt;/strong>&lt;/p>
&lt;p>和敏捷站会、传统项目可能还有日报，他们的目的其实都是一样的，相关内容在我之前的文章中也有专门阐述，可参考。&lt;/p>
&lt;hr></description></item><item><title>怎么处理团队中开发和测试经常发生的矛盾冲突？</title><link>https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/</link><pubDate>Wed, 19 Feb 2025 12:28:00 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-2.png" alt="Featured image of post 怎么处理团队中开发和测试经常发生的矛盾冲突？" />&lt;blockquote>
&lt;p>有同学提问，在团队中，开发和测试经常会发生一些矛盾，产生冲突，怎么在团队中避免这样的冲突？&lt;/p>&lt;/blockquote>
&lt;h1 id="冲突的产生">冲突的产生
&lt;/h1>&lt;p>一个团队中，成员之间产生冲突其实是非常正常的，也很难完全杜绝。冲突的原因各种各样，只是糟糕的团队中冲突的情况更容易出现：双方不一致的目标和期望、缺乏信任、缺少沟通等都是常见的产生甚至升级冲突的原因。&lt;/p>
&lt;h1 id="冲突就一定需要避免吗">冲突就一定需要避免吗？
&lt;/h1>&lt;p>站在项目和产品维度来说，开发和测试之间得矛盾冲突也并不全然是坏事。我们也不应该想当然地认为冲突就一定应该是要避免的。&lt;/p>
&lt;p>很多研发项目管理中，会把开发和测试之间的冲突称之为建设性冲突，也就是这种冲突对促进产品质量是具有建设性的，在双方的针对具体问题的冲突讨论中，完成对产品质量的提升。&lt;/p>
&lt;p>这个思路其实和冲突管理中对冲突类型划分是吻合的&lt;/p>
&lt;p>在冲突管理理论中，从产生冲突的事务重要程度和人际关系两个维度，冲突的类型可以分为以下四类：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-1.png"
width="637"
height="489"
srcset="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-1_hu_d7f10d5d129731a4.png 480w, https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220-1_hu_935040e99fcc0b86.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="312px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>建设性冲突&lt;/strong>：冲突产生是事务性的，通常是为了解决问题，对双方的人际关系影响较小。这种冲突其实是良性的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>破坏性冲突&lt;/strong>：冲突也是为了解决问题，但烈度较高，对双方的关系有破坏性，会影响后续的友好合作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>失调性冲突&lt;/strong>：这种更糟糕，纯粹是双方的关系隔阂导致的冲突，跟事务本身的分歧反而关系不大，可以认为是为了冲突而冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>功能性冲突&lt;/strong>：这种是最容易发生的冲突，针对的是一些无关紧要的事务，通常表现为发发牢骚、开玩笑式的埋怨等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>针对不同的冲突类型，团队中，通常应该是鼓励建设性冲突，及时中断破坏性冲突，隔离失调性冲突，包容功能性冲突但避免累积。&lt;/p>
&lt;h1 id="thomas-kilmann冲突模型">Thomas-Kilmann冲突模型
&lt;/h1>&lt;p>对于个体来说，面对冲突时的处理方式，其实也有一个理论模型，就是Thomas-Kilmann冲突管理模型：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220.png"
width="1158"
height="651"
srcset="https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220_hu_71c3688233036cfa.png 480w, https://chengxiaqiucao.github.io/post/056-%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/Pasted-20250220_hu_eb5c205b639629e9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>从面对冲突时，自己对问题解决的个人自信程度和管控和对方的合作关系两方面，形成下面五种冲突处理策略：&lt;/p>
&lt;p>&lt;strong>竞争&lt;/strong>：个人强势，可以采取竞争策略。会造成非赢即输的局面，强势的一方强迫另一方接受自己的诉求。&lt;strong>Win-Lose&lt;/strong>&lt;/p>
&lt;p>&lt;strong>合作&lt;/strong>：这是最佳策略，通过双方团结协作，找到一个双赢的途径，1+1&amp;gt;2, &lt;strong>Win-Win&lt;/strong>&lt;/p>
&lt;p>&lt;strong>回避&lt;/strong>： 不能解决问题，冷处理，搁置问题。&lt;strong>Lose-Lose&lt;/strong>&lt;/p>
&lt;p>&lt;strong>让步&lt;/strong>：一方主动退让，以维系双方的关系。&lt;strong>Lose-Win&lt;/strong>&lt;/p>
&lt;p>&lt;strong>妥协&lt;/strong>：折中，双方各退一步，互有让步达成一个中间方案，形成妥协。 &lt;strong>Half-Half&lt;/strong>&lt;/p>
&lt;p>不同的个体，其实面对冲突时，都会有意无意地去用不同的策略来面对。理解这个模型以后，可以让我们更理智地对冲突进行评估并选择合适的应对方式。&lt;/p>
&lt;h1 id="团队怎么管控冲突">团队怎么管控冲突？
&lt;/h1>&lt;p>对于一个研发团队来说，做好冲突管理，根本还是要在健全的流程制度前提下，打造好团队文化，营造透明、信任的合作关系和环境。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>健全的制度，举例来说，对bug的争议，应该有仲裁机制，而不是让开发和测试一直在那自行争个面红耳赤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>团队文化，不应该把测试和开发的工作对立起来，而是大家共同面向质量目标的合作。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>是否要容忍品行不端但业绩优秀的员工</title><link>https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/</link><pubDate>Sat, 02 Nov 2024 18:03:14 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block.jpg" alt="Featured image of post 是否要容忍品行不端但业绩优秀的员工" />&lt;h2 id="问题是什么">问题是什么
&lt;/h2>&lt;p>老板是否会容忍平行不端的员工？ 这里品行不端，其实我们可以把它理解为违背纪律甚至法律，无视公序良俗等，也就是员工存在价值观上的问题。&lt;/p>
&lt;p>但这里其实还隐含着另一个前提，就是这个员工其实能力应该很强（不考虑背景之类，当然背景其实也算是某种能力）。否则就没有要讨论是否容忍的基础了。&lt;/p>
&lt;h2 id="理论上的正确做法">理论上的正确做法
&lt;/h2>&lt;p>因此，这里我们要讨论的就是管理中，对员工评估的问题。通常企业在评估员工时，都会综合业绩、价值观两个维度来看&lt;/p>
&lt;h3 id="ge人才九宫格">GE人才九宫格
&lt;/h3>&lt;p>比如GE评估员工，就会根据这两个维度，综合上、中、下三个级别综合得出一个9宫格。&lt;/p>
&lt;p>绿色：评估优秀&lt;/p>
&lt;p>蓝色：合格或可改进&lt;/p>
&lt;p>红色：应淘汰&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block.jpg"
width="1080"
height="605"
srcset="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block_hu_a9056f782a031f7a.jpg 480w, https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/GE-9block_hu_b3f9c494a6bf228c.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>而且，从这个9宫格上，价值观的权重比业绩其实是更看重的，即便业绩很好，也依然是偏红的，倾向淘汰。&lt;/p>
&lt;h3 id="阿里的五类员工模型">阿里的五类员工模型
&lt;/h3>&lt;p>类似的，据说阿里其实也有对员工的5种类型划分&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/ali-5%E7%B1%BB%E5%91%98%E5%B7%A5.png"
width="961"
height="758"
srcset="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/ali-5%E7%B1%BB%E5%91%98%E5%B7%A5_hu_ebe0fe80beb88a76.png 480w, https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/ali-5%E7%B1%BB%E5%91%98%E5%B7%A5_hu_b419d728a731546b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>明星：业绩亮眼，贡献突出，价值观正确，绩效重点倾斜&lt;/p>
&lt;/li>
&lt;li>
&lt;p>黄牛：兢兢业业，尽职尽责，是团队基本盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>野狼：能力出众，但价值观有问题。不能及时纠正，需要坚决汰换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>白兔：看上去工作勤恳，价值观很好，但能力不行。如无法提升，也要淘汰&lt;/p>
&lt;/li>
&lt;li>
&lt;p>土狗：能力和价值观都不行，坚决淘汰&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以从上面可看出，成熟企业对于价值观有问题的员工，其实态度都是比较明确的，即便你业绩再好，也应该是要淘汰的。即不会容忍品行不端。&lt;/p>
&lt;h2 id="现实中的可能情况">现实中的可能情况
&lt;/h2>&lt;p>以上，更多是理论上的正确做法。&lt;/p>
&lt;p>不过现实中，老板会作何选择，通常还是会根据所在企业所处的阶段，当然也包括老板个人的价值观所共同左右。&lt;/p>
&lt;p>马克思早就指出过，“资本来到世上，每个毛孔都滴着血和肮脏的东西”。当然这里更多指的是资本原始积累阶段，为了实现资本的增长，往往会不择手段。也就是说，品行不端，在资本积累的早期，往往极大概率不可避免。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/%E9%A9%AC%E5%85%8B%E6%80%9D-%E8%B5%84%E6%9C%AC%E5%87%BA%E7%94%9F.png"
width="1032"
height="515"
srcset="https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/%E9%A9%AC%E5%85%8B%E6%80%9D-%E8%B5%84%E6%9C%AC%E5%87%BA%E7%94%9F_hu_15e2a397b136a45d.png 480w, https://chengxiaqiucao.github.io/post/045-%E6%98%AF%E5%90%A6%E8%A6%81%E5%AE%B9%E5%BF%8D%E5%93%81%E8%A1%8C%E4%B8%8D%E7%AB%AF%E4%BD%86%E4%B8%9A%E7%BB%A9%E4%BC%98%E7%A7%80%E7%9A%84%E5%91%98%E5%B7%A5/%E9%A9%AC%E5%85%8B%E6%80%9D-%E8%B5%84%E6%9C%AC%E5%87%BA%E7%94%9F_hu_185ec1cd48f3173b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>所以，现实中，老板作何选择的逻辑，其实也很简单：&lt;/p>
&lt;p>如果企业的生存是第一需求，拿到业绩，先活下去往往对老板来说更重要，这时多半会对不择手段但业绩优秀的员工更多容忍。&lt;/p>
&lt;p>而一旦做大做强，继续容忍不端行为，可能会影响企业的健康和长远发展，那么自然就不可能再继续容忍。&lt;/p>
&lt;p>&lt;strong>当然，我们还是应该相信，确实存在有强大格局、人格的企业家从最初就坚持那些美好的价值观。只是，企业面临生死存亡时，会选择采用的做法会更有说服力。&lt;/strong>&lt;/p></description></item></channel></rss>
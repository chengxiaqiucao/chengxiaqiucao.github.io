<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>接口测试 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</link><description>Recent content in 接口测试 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Sun, 04 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>可以抛弃postman啦, API测试工具Bruno实用教程(二)：进阶篇</title><link>https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/</link><pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/</guid><description>&lt;p>在前文 【】和 【】中，我们分别对&lt;code>Bruno&lt;/code> 这个近来备受关注的接口测试工具的优缺点和基本使用方法进行了介绍，本文我们会继续在上一篇的基础上，介绍 &lt;strong>Bruno&lt;/strong> 和自动化测试相关的进阶用法&lt;/p>
&lt;h2 id="bruno的六层变量作用域">Bruno的六层变量作用域
&lt;/h2>&lt;p>和 &lt;strong>postman&lt;/strong> 类似，&lt;strong>Bruno&lt;/strong> 中也同样对接口测试中的变量使用提供了多层设计，可以通过不同层级的作用域区分，为接口测试和自动化提供了更多灵活性和应用场景。&lt;/p>
&lt;p>Bruno中提供了6类不同的变量，其作用范围次序如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250429.png"
width="954"
height="384"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250429_hu_8ec68d7d160bb425.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250429_hu_84c366fc5b3852f8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="596px"
>&lt;/p>
&lt;h3 id="全局变量">全局变量
&lt;/h3>&lt;p>全局变量是作用范围最大的变量类型。设置全局变量是通过 Bruno 的 &lt;code>global Environments&lt;/code> 设置，位置如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505.png"
width="793"
height="365"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505_hu_c2ba7aa86d26e494.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505_hu_7bb6ba58895c7433.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="521px"
>&lt;/p>
&lt;p>然后比如增加一个全局变量，配置并启用：
&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-1.png"
width="1271"
height="732"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-1_hu_b0464db4f96920e1.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-1_hu_1d7f1b2a1e370c94.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;p>这时我们获取Github API中的用户信息，可以获取&lt;code>userid = 1&lt;/code> 的用户&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-2.png"
width="1910"
height="787"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-2_hu_d0d136c3cb6c1581.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-2_hu_62e83964fba76922.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;h3 id="collection变量">Collection变量
&lt;/h3>&lt;p>在设置了全局变量后，再设置 collection 集合变量
&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-3.png"
width="1389"
height="613"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-3_hu_e44d8c7b1916b798.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-3_hu_99f2d49a198691af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;p>然后发送请求，此时生效的就是集合变量&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-4.png"
width="1896"
height="555"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-4_hu_5a3d4cee045cf674.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-4_hu_856871b559d49608.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="819px"
>&lt;/p>
&lt;h3 id="环境变量">环境变量
&lt;/h3>&lt;p>下一层是可以设置不同的环境，在如下位置配置：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-5.png"
width="1603"
height="706"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-5_hu_2c6a8b2bb0e09b94.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-5_hu_c691d1ff40f5c9b1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="544px"
>&lt;/p>
&lt;p>此时生效的是 &lt;code>userid = 3&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-6.png"
width="1917"
height="647"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-6_hu_efc797d954d9dc95.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-6_hu_e55b5a837cb08550.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/p>
&lt;h3 id="folder变量">Folder变量
&lt;/h3>&lt;p>在collection下一层，可以创建目录，这里设置变量， 生效的就是目录变量&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-7.png"
width="967"
height="619"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-7_hu_909d034f40238aad.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-7_hu_3f1f95d0e690a133.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-8.png"
width="1897"
height="728"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-8_hu_1d45c2196d2da54e.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-8_hu_197cda31de260b22.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="260"
data-flex-basis="625px"
>&lt;/p>
&lt;h3 id="请求变量">请求变量
&lt;/h3>&lt;p>再下一层，则是具体的请求当中设置的变量&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-9.png"
width="1913"
height="633"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-9_hu_2f6e319a18e77f1d.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-9_hu_4d415befcf26da98.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="725px"
>&lt;/p>
&lt;h3 id="运行时变量">运行时变量
&lt;/h3>&lt;p>除了预设变量的情况，Bruno也支持通过脚本，在执行时设置&lt;strong>运行时变量&lt;/strong>，使用如下代码设置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bru&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;userid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在执行请求后，查看当前runtime变量，还可以通过工具栏中的对应按钮进入显示界面查看。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-10.png"
width="1917"
height="553"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-10_hu_ab823dece5d2b358.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-10_hu_d3c59748e0c37f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="346"
data-flex-basis="831px"
>&lt;/p>
&lt;p>通过以上实例，可以看到，Bruno的多层变量体系及其作用范围，同样的变量名，生效优先次序依次为：&lt;/p>
&lt;p>&lt;strong>运行时变量 -&amp;gt; 请求变量 -&amp;gt; 目录变量 -&amp;gt; 环境变量 -&amp;gt; 集合变量 -&amp;gt; 全局变量&lt;/strong>&lt;/p>
&lt;h3 id="流程环境变量">流程环境变量
&lt;/h3>&lt;p>除了上面这些多层变量设计外，在我们处理接口时，像token、API Key或一些账号密码等比较敏感的数据变量，可能并不希望在接口及相关配置文件( *.bru )中体现。针对这类变量，Bruno 也提供了一个针对性的处理方式，就是通过 &lt;code>.env&lt;/code> 文件来存储。&lt;code>.env&lt;/code> 文件需放置在collection的根目录下，变量定义采用key-value 形式，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">userid = 7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时，我们在配置变量时就可以通过&lt;code>{{process.env.userid}}&lt;/code> 来实现引用，避免相关敏感数据，直接出现在接口定义文件中&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-11.png"
width="1624"
height="674"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-11_hu_eec7d6decd9cec18.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-11_hu_e4933bcc0d510a0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="578px"
>&lt;/p>
&lt;h2 id="bruno脚本及执行顺序">Bruno脚本及执行顺序
&lt;/h2>&lt;p>Bruno的脚本功能，使用的是标准JavaScript语法。可以在Collection、Folder、Request三个不同层级上定义请求前（Pre）和请求后（Post）要执行的脚本。并且Bruno提供了两种脚本执行顺序模型（主要区别是post脚本的执行顺序）&lt;/p>
&lt;h3 id="1-sandwich-flow-默认">1. Sandwich Flow （默认）
&lt;/h3>&lt;p>这种模式下，不同层级脚本的执行顺序如下&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Collection Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Request Pre Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Request Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Collection Post Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>和各类单元测试框架的分层执行顺序类似。&lt;/p>
&lt;h3 id="2-sequential-natural-flow">2. Sequential (Natural) Flow
&lt;/h3>&lt;p>这种执行顺序，和Postman的脚本执行顺序类似，完全按层级顺序来执行。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Collection Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Request Pre Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Collection Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Request Post Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>要采用这种顺序，需要在Bruno的配置文件 &lt;code>bruno.json&lt;/code> 中配置 &lt;code>flow&lt;/code> 参数，形如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filesystemAccess&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;allow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;flow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;sequential&amp;#34;&lt;/span> &lt;span class="c1">// Or &amp;#34;sandwich&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="执行示例">执行示例
&lt;/h3>&lt;p>在各个层级的脚本中分别添加对应的脚本日志，打开Bruno集成的Dev Tool控制台，可看到对应执行顺序的不同。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-12.png"
width="1907"
height="959"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-12_hu_1a46deb8aec95501.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-12_hu_b0096c7bac7c1381.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>修改 &lt;code>bruno.json&lt;/code>， 配置flow模式为 &lt;code>sequential&lt;/code>，可以看到post部分的输出顺序发生了变化。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-13.png"
width="1900"
height="959"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-13_hu_770e6918705a367f.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-13_hu_c881d4b8b6e3241d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;h2 id="流程依赖处理">流程依赖处理
&lt;/h2>&lt;p>在我们实际的接口测试时，一个经常遇到的场景，就是后续的请求，会需要依赖之前请求的返回数据，比如最常见的动态token获取等场景。&lt;/p>
&lt;p>而利用Bruno的变量和脚本，我们可以通过脚本实现这种接口的关联操作。&lt;/p>
&lt;p>在Bruno的官方文档中，他内置的bru对象，提供了 &lt;code>setNextRequest&lt;/code>， &lt;code>runRequest&lt;/code> 这样的方法，使我们可以根据自己的需要，确定在执行某个接口请求时，指定下一条需要执行的请求（不再按默认顺序执行），或者也可以直接在当前请求的脚本中，运行其他接口请求。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-2.png"
width="1799"
height="859"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-2_hu_dfaa9fd6e928ba6c.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-2_hu_7530ca08e3e55a12.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>通过这种方式，我们就可以通过设置变量，并将变量进行接口间的传递，以此完成流程依赖场景的实现。&lt;/p>
&lt;p>比如这里我们获取github用户下的repo清单，这个接口。 这里的 &lt;code>{{username}}&lt;/code> 变量，我们希望通过指定 &lt;code>userid&lt;/code> 来获取。也就是先执行前面的 &lt;code>getUserInfo&lt;/code> 这个接口，根据 &lt;code>userid&lt;/code> 来获取 &lt;code>username&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-3.png"
width="1133"
height="468"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-3_hu_3c1e92897aea7bb5.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-3_hu_1ef80bb2a9103da9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>这里我们定义getUserRepos，使用变量&lt;code>{{username}}&lt;/code>， 但此时该变量未定义，所以显示为红色&lt;/p>
&lt;p>然后在 &lt;code>getUserInfo&lt;/code> 这个接口中，我们定义脚本，提取当前响应的username，并进行变量赋值。然后直接调用 &lt;code>getUserRepos&lt;/code> 接口（注意这里调用的接口路径，应该以collection根路径进行定义）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bru&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">bru&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;variables/getUserRepos&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>getUserInfo&lt;/code>， 可以看到，执行成功，脚本中执行的 &lt;code>getUserRepos&lt;/code> 接口也成功得到了 &lt;code>200OK&lt;/code> 的响应状态&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-4.png"
width="1915"
height="959"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-4_hu_9a6d4480f9e77d22.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-4_hu_523668b12748d1de.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;h2 id="runner执行器">Runner执行器
&lt;/h2>&lt;p>除了在脚本中执行指定接口， Bruno其实也提供了一个Runner的执行器，从工具栏打开执行器，也可以批量地依次运行Collection中的所有接口&lt;/p>
&lt;p>比如上例，我们如果只是在 &lt;code>getUserInfo&lt;/code> 中获取并定义变量 username, 而不执行。 只要&lt;code>getUserRepos&lt;/code>在 &lt;code>getUserInfo&lt;/code> 之后执行，也同样可以执行成功。&lt;/p>
&lt;p>Runner运行效果如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507.png"
width="786"
height="739"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507_hu_e9749e6ff9e8c3d9.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507_hu_75c21443013e260a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>但这里Bruno默认的功能，是运行collection中的所有请求，且调整顺序的功能，虽然有提供，但只包含在付费的高级版中，包括基于csv或json的数据驱动功能，免费版本中也不包含。稍显鸡肋。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-1.png"
width="1908"
height="602"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-1_hu_53841b760253dcdf.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-1_hu_93ca7e915c00a747.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="760px"
>&lt;/p>
&lt;h3 id="bruno命令行-bruno-cli">Bruno命令行 Bruno CLI
&lt;/h3>&lt;p>上面 &lt;code>Runner执行器&lt;/code> 的功能因为受限，在我们要进行接口自动化时，比较鸡肋，基本无法使用。但Bruno这里的高级版本功能，其实只是针对界面上触发进行了限制。&lt;/p>
&lt;p>我们要执行自动化，也可以利用它提供的命令行功能来实现。&lt;/p>
&lt;p>这里的CLI程序，需要单独安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm install -g @usebruno/cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，能正确显示版本号表示安装成功， 如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">C:\qiucao&amp;gt;bru --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过命令行执行，我们就可以根据自己的需要，比如执行指定目录下的接口。&lt;/p>
&lt;p>这里携带的两个参数 &lt;code>--env&lt;/code> 指定需要使用的环境， &lt;code>--reporter-html&lt;/code> 会在完成执行后生成一个html格式的测试报告。（详细的参数，可参考文档 &lt;a class="link" href="https://docs.usebruno.com/bru-cli/commandOptions" target="_blank" rel="noopener"
>https://docs.usebruno.com/bru-cli/commandOptions&lt;/a>）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-5.png"
width="1073"
height="778"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-5_hu_892e0de1fbf09c4.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-5_hu_f986bea380a76775.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="331px"
>&lt;/p>
&lt;p>生成的测试报告：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-6.png"
width="1920"
height="904"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-6_hu_bb7cb51a71c4e95d.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-6_hu_4ca67f049a940f86.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于Bruno中使用脚本和自动化执行相关功能的进阶说明。欢迎继续关注后续文章。&lt;/p>
&lt;p>回复&lt;code>大纲&lt;/code> 可查看秋草测试技能全栈提升课详细目录。回复 &lt;code>进群&lt;/code>可进入测试交流群和小伙伴们分享测试技术、交换资讯。&lt;/p></description></item><item><title>Postman最佳平替, API测试工具Bruno实用教程(一)：基础篇</title><link>https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 02 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="序言">序言
&lt;/h2>&lt;p>在前文【】中，我们介绍了目前目前Github上广受关注的新锐接口测试工具Bruno，给厌倦了Postman必须在线使用限制的同学提供了一个很好的替代选择。&lt;/p>
&lt;p>Bruno的核心优势，官网重点给出了如下几点：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/089-bruno%e4%bb%8b%e7%bb%8d/snap_20250420-3.png"
loading="lazy"
>&lt;/p>
&lt;ol>
&lt;li>承诺开源和可扩展，并且专心做客户端，永不向“平台化”扩充产品。&lt;/li>
&lt;li>基于Git实现协作和版本管理&lt;/li>
&lt;li>离线使用，永不同步本地数据 😂😂😂&lt;/li>
&lt;/ol>
&lt;p>下面我们就通过一个系列，详细介绍通过Bruno来进行API接口测试的详细实战教程。本文是第一篇，重点介绍如下内容：&lt;/p>
&lt;ul>
&lt;li>Bruno的安装和界面说明&lt;/li>
&lt;li>结合Github API实现典型API操作的方法&lt;/li>
&lt;li>环境管理&lt;/li>
&lt;li>鉴权机制和加密&lt;/li>
&lt;/ul>
&lt;h2 id="bruno安装和界面概览">Bruno安装和界面概览
&lt;/h2>&lt;h3 id="安装">安装
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Mac (Homebrew)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install bruno
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Windows (Winget)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">winget install usebruno.bruno
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Linux (Snap)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap install bruno
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用界面">使用界面
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427.png"
width="1920"
height="1014"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427_hu_3d5f5b7dc3298405.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427_hu_ac819fb60e419176.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>左侧面板&lt;/strong>：Collection管理、导航（类似IDE的项目结构）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中央区域&lt;/strong>：请求编辑器（URL/Headers/Body配置）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>右侧面板&lt;/strong>：响应结果显示（内容、状态、断言等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工具栏&lt;/strong>：顶部主要是一些高级功能配置（付费版本）、变量管理（全局、环境）；底部工具栏是工具的系统级配置（界面、代理、鉴权等），cookies、license管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>快捷键体系&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl +E&lt;/code>：环境变量设置&lt;/li>
&lt;li>&lt;code>Ctrl + B&lt;/code>：新建请求&lt;/li>
&lt;li>&lt;code>Ctrl + Enter&lt;/code>：立即发送请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="典型http接口测试实现github-api">典型HTTP接口测试实现(Github API)
&lt;/h2>&lt;p>下面我们结合 &lt;code>Github&lt;/code> 的官方API接口，介绍在 &lt;code>Bruno&lt;/code> 中如何完成典型HTTP接口请求测试。&lt;/p>
&lt;h3 id="github-api简介">Github API简介
&lt;/h3>&lt;p>GitHub 是一个面向开源软件项目的托管平台，因为使用 Git 作为唯一的版本库格式进行托管，故名 GitHub。也是目前全球最大的代码托管平台，可以说是程序员的圣地，号称&lt;strong>全球最大的同性交友平台&lt;/strong>&lt;/p>
&lt;p>GitHub API目前有两个版本，一个是基于GraphQL的V4版本， 而更常用的主要还是之前的Restful API，它的Restful API定义长期以来被视作此类接口的典范。&lt;/p>
&lt;p>具体的接口说明文档：参见 &lt;a class="link" href="https://docs.github.com/zh/rest?apiVersion=2022-11-28" target="_blank" rel="noopener"
>https://docs.github.com/zh/rest?apiVersion=2022-11-28&lt;/a>&lt;/p>
&lt;h5 id="github-中的时间格式">github 中的时间格式
&lt;/h5>&lt;p>&lt;code>YYYY-MM-DDTHH:MM:SSZ&lt;/code>&lt;/p>
&lt;h5 id="github-限流规则">github 限流规则
&lt;/h5>&lt;p>github 为包含服务端负载压力，会对请求流量进行限制。在每个 github 的响应消息头中都会携带 github 的限流设置。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>头参数&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>X-RateLimit-Limit&lt;/td>
&lt;td>当前每小时最大请求限制，一般未鉴权请求60次，鉴权请求5000次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Remaining&lt;/td>
&lt;td>当前剩余请求次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Reset&lt;/td>
&lt;td>剩余限制重置时间，毫秒&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="请求参数与分页">请求参数与分页
&lt;/h5>&lt;p>请求中可以携带参数，一般包含两种参数: &lt;strong>路径参数&lt;/strong>和&lt;strong>查询参数&lt;/strong>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_121133.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>github API中默认支持两个分页参数：&lt;/p>
&lt;ul>
&lt;li>page 当前显示页数&lt;/li>
&lt;li>per_page 每页显示结果数&lt;/li>
&lt;/ul>
&lt;h5 id="github-请求token">github 请求Token
&lt;/h5>&lt;p>从Github账号设置页中，增加访问API的Token配置&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-2.png"
width="557"
height="515"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-2_hu_66cd2c75970aea79.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-2_hu_c171d685a2a59dfd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/p>
&lt;h3 id="配置token鉴权">配置Token鉴权
&lt;/h3>&lt;p>进入Bruno，新建一个Collection， 命名 &lt;code>github&lt;/code>，在其中的 &lt;code>Auth&lt;/code> 部分, 将之前设置的API token添加进来，这里的鉴权方式选择 &lt;code>bearer Token&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-3.png"
width="1327"
height="640"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-3_hu_67ad038071041bbd.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-3_hu_3640a8091675797f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;p>除了 &lt;code>bearer Token&lt;/code> 外， Bruno还支持其他多种鉴权方式，能基本覆盖到各种API接口的鉴权模式。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AWS Sig&lt;/strong>：针对亚马逊的AWS公有云用户签名的认证方式&lt;/li>
&lt;li>&lt;strong>Basic auth&lt;/strong>：基本鉴权，通过输入账号、密码&lt;/li>
&lt;li>&lt;strong>WSSE auth&lt;/strong>：Web Service安全用户认证&lt;/li>
&lt;li>&lt;strong>Bearer Token&lt;/strong>：基于加密文本的安全认证令牌&lt;/li>
&lt;li>&lt;strong>Digest auth&lt;/strong>：摘要式认证&lt;/li>
&lt;li>&lt;strong>NTLM auth&lt;/strong>：微软的局域网管理认证协议&lt;/li>
&lt;li>&lt;strong>Oauth 2.0&lt;/strong>：开放式授权协议，是第三方认证的常用协议&lt;/li>
&lt;li>&lt;strong>API Key&lt;/strong>：服务端自己定义的接入令牌&lt;/li>
&lt;li>&lt;strong>no Auth&lt;/strong>：不鉴权&lt;/li>
&lt;li>&lt;strong>inherit&lt;/strong>：继承上一级鉴权（Bruno中，下一级请求可以使用上一级的鉴权设置）&lt;/li>
&lt;/ul>
&lt;h3 id="接口测试中的增删改查">接口测试中的增删改查
&lt;/h3>&lt;h5 id="1-get请求获取制定项目最新release">1. GET请求：获取制定项目最新Release
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>GET /repos/{owner}/{repo}/releases/latest&lt;/code>&lt;/p>
&lt;p>Bruno中通过 &lt;code>{{var}}&lt;/code>，可以在请求中指定变量，变量配置如下。点击发送按钮后，成功获得响应。&lt;/p>
&lt;p>请求这里的鉴权方式使用&lt;code>inherit&lt;/code>， 继承collection中配置的 &lt;code>bearer token&lt;/code> 鉴权方式&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-4.png"
width="1617"
height="814"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-4_hu_49b1c8982cb7161c.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-4_hu_a67456c847fbe8b9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;h5 id="2--post请求创建issue">2. POST请求：创建Issue
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>POST /repos/{owner}/{repo}/issues&lt;/code>&lt;/p>
&lt;p>创建issue，对应 &lt;code>POST&lt;/code> 方法，Bruno中配置如下，&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428_hu_198f1d44ff29f7f2.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428_hu_841abc7470e6d15e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Body配置&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">{issue_title&lt;/span>&lt;span class="p">}}&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;发现一个测试问题&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;labels&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;bug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态变量注入&lt;/strong>：&lt;/p>
&lt;p>这里的issue标题，我们使用Bruno的内置动态变量 &lt;code>{{$timestamp}}&lt;/code>, Bruno提供了丰富的内置动态变量，对于我们动态模拟请求数据提供了极大方便。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 标题预置变量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">vars&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">issue_title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;测试问题_{{$timestamp}}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>到Github上查看，Issue已创建
&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-1.png"
width="1169"
height="519"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-1_hu_947698b84198e874.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-1_hu_42d86690cfeb564d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="225"
data-flex-basis="540px"
>&lt;/p>
&lt;h5 id="3-patch请求修改issue">3. PATCH请求：修改Issue
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>PATCH /repos/{owner}/{repo}/issues/3&lt;/code>&lt;/p>
&lt;p>关闭 issue_number 为 3 的问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;state&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-2.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-2_hu_e382084e5b009e8.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-2_hu_877e6911d3b1679f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;h5 id="4-delete请求删除issue-评论">4. DELETE请求：删除Issue 评论
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}&lt;/code>
&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-3.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-3_hu_ce61fb73f8a20e9b.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-3_hu_76c588046b52fd8d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;h3 id="基础测试断言">基础测试断言
&lt;/h3>&lt;h5 id="test脚本验证--状态码">Test脚本验证 状态码
&lt;/h5>&lt;p>Bruno 中可以类似Postman那样编写Test脚本来进行结果验证&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Status is 200&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="界面assert">界面Assert
&lt;/h5>&lt;p>对于一些常用的断言，Bruno中也可以直接在界面上通过添加 &lt;code>Assert&lt;/code> 来进行断言。&lt;/p>
&lt;p>以上Test和Assert 执行结果如下&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-4.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-4_hu_9483c4d456602b82.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-4_hu_a69021e548746a1c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于Bruno进行接口测试时，主要的基础功能用法介绍。后续会继续更新其他进阶用法更新。 也欢迎大家进入测试交流群和小伙伴们继续深入交流。回复 &lt;code>进群&lt;/code> 获取入群邀请。&lt;/p></description></item><item><title>github星标超3万！Postman最强平替Bruno你用了吗？</title><link>https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2.png" alt="Featured image of post github星标超3万！Postman最强平替Bruno你用了吗？" />&lt;h2 id="序言">序言
&lt;/h2>&lt;p>&lt;code>Postman&lt;/code>长期以来都是API测试领域居领先地位的测试工具。以其友好的工具界面，便捷的API接口请求编辑，强大的脚本支持和云端服务，以及丰富的生态，在接口开发和测试中，有极为广泛你的应用。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-1.png"
width="945"
height="386"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-1_hu_c775c982dd41f7e4.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-1_hu_70c0b86dbfcdd0f8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="587px"
>&lt;/p>
&lt;p>但作为一个商用工具，它的很多高级功能都依赖云端服务，且收费不菲。虽然免费的基础版本同样功能强大，能满足大部分使用需求，但随着工具本身和云端服务的整合以及更多向协作平台方向发展，基础版本也需要注册并登录云端服务后才可完全使用。&lt;/p>
&lt;p>但这却限制了很多脱离互联网环境的应用需求，而且频繁的同步机制和连接稳定性要求也颇受诟病。&lt;/p>
&lt;p>很多受Postman这些限制困扰的同学也一直在寻找和Postman类似的替代工具，本文我们向大家介绍一个API接口测试明日之星，开源接口测试工具 &lt;code>Bruno&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2.png"
width="571"
height="278"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2_hu_e6ba80a3f6c141e6.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2_hu_aec2d7d972778e76.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="492px"
>&lt;/p>
&lt;p>从github的star趋势可以看到，Bruno诞生不久，但从2024年开始，已经开始得到广泛关注，star数量一路飙升，潜力无限！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420.png"
width="1071"
height="712"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420_hu_8fae8cbfd8afc4be.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420_hu_a5efb08ab5765d06.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;h2 id="bruno简介">Bruno简介
&lt;/h2>&lt;p>可以说 &lt;code>Bruno&lt;/code> 从诞生之初针对的就是前述 &lt;strong>Postman&lt;/strong> 的痛点。官方首页上强调的 Bruno 主要特性也重点说明了这几点：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-3.png"
width="1834"
height="608"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-3_hu_a7ba358bf0654c21.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-3_hu_11183c2c62ac33b8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="723px"
>&lt;/p>
&lt;ol>
&lt;li>承诺开源和可扩展，并且专心做客户端，永不向“平台化”扩充产品。&lt;/li>
&lt;li>基于Git实现协作和版本管理&lt;/li>
&lt;li>离线使用，永不同步本地数据 😂😂😂&lt;/li>
&lt;/ol>
&lt;p>可以说，Bruno的出现，就是针对Postman作为一个客户端工具，过于强调平台化和云端功能的现状，提供的平替方案。&lt;/p>
&lt;h2 id="bruno的优势">Bruno的优势
&lt;/h2>&lt;p>Bruno在官方网站上，也是专门针对 Postman ，将Bruno和Postman进行了详细比对（当然一家之言，免不得自吹，大家辩证看待）网址如下：
&lt;a class="link" href="https://www.usebruno.com/compare/bruno-vs-postman" target="_blank" rel="noopener"
>https://www.usebruno.com/compare/bruno-vs-postman&lt;/a>&lt;/p>
&lt;p>我整理了一下，主要包含如下几个维度：&lt;/p>
&lt;h4 id="整体定位">整体定位
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>开源、本地优先、注重隐私&lt;/td>
&lt;td>最初是 API 客户端，现已发展为包含云协作功能的 API 平台&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="数据存储">数据存储
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>集合直接存储在本地文件系统，使用名为 Bru 的纯文本标记语言&lt;/td>
&lt;td>主要存储在 Postman 云端，需要账户登录（虽然可以导出，但核心工作流依赖云）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="开放源码">开放源码
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>完全开源 (MIT 许可证)&lt;/td>
&lt;td>部分开源，核心平台和云服务是专有的&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="离线支持">离线支持
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>完全支持离线工作，因为所有数据都在本地&lt;/td>
&lt;td>核心功能（尤其协作）严重依赖在线连接和账户登录&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="协作方式">协作方式
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>通过 Git 或任何版本控制系统进行协作，利用其文件存储特性&lt;/td>
&lt;td>通过 Postman 内置的云同步和团队协作功能（通常需要付费计划）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="cli命令行">CLI命令行
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>提供名为 &lt;code>bru&lt;/code> 的 CLI 工具，用于运行集合和测试&lt;/td>
&lt;td>提供名为 &lt;code>Newman&lt;/code> 的 CLI 工具，用于运行集合和集成到 CI/CD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="脚本支持">脚本支持
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>支持声明式脚本（Bru Lang）和 JavaScript 进行自动化测试和脚本编写&lt;/td>
&lt;td>支持 JavaScript 进行请求前脚本、测试脚本编写&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="交互界面">交互界面
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>界面和功能相对更简洁，专注于 API 请求和测试的核心任务&lt;/td>
&lt;td>功能更全面，但也可能更复杂，涵盖了 API 设计、文档、监控等更多方面&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="版本控制">版本控制
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>可直接利用 Git 进行精细的版本控制&lt;/td>
&lt;td>内置版本控制功能，但与 Git 的集成和灵活性不同&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>总体来说，Bruno针对Postman的主要痛点，都给出了对应的应对处理，如果使用Postman受限或更希望在非互联网线环境下进行接口测试，可以说Bruno就是最佳选择&lt;/p>&lt;/blockquote>
&lt;h2 id="bruno的局限性">Bruno的局限性
&lt;/h2>&lt;p>虽然Bruno已经受到了极大的关注，而且功能也足够丰富，但相比Postman这样老牌头部工具，功能上还是有一些局限性。这里总结起来，大致有如下几点：&lt;/p>
&lt;h4 id="云端协作和同步">云端协作和同步
&lt;/h4>&lt;p>完全本地化和简洁、轻量，是Bruno重点突出的优势，但换一个角度来说，也是它主要的局限。&lt;/p>
&lt;p>Bruno的团队协作以来Git来实现，对于熟悉Git使用的研发团队来说，当然足够强大，但如果团队对API的协作牵涉到混合团队时，比如包含客户、设计人员、产品经理等时，Git的使用门槛就相对更高了。Postman那样的基于云服务的团队功能则更易于接受，团队共享工作区、并可进行评论、共享。&lt;/p>
&lt;h4 id="在api全生命周期管理上的欠缺">在API全生命周期管理上的欠缺
&lt;/h4>&lt;p>还是因为纯本地客户端的原因，Bruno很难像Postman那样实现针对API的全生命周期管理和支持，包括接口设计（OpenAPI、swagger等接口设计的导入）、交互式文档（API Documentation）、接口模拟（Mock Server）、健康监测（monitor）等，Postman都有对应的功能可以覆盖，而Bruno则无法涵盖如此丰富的场景。&lt;/p>
&lt;h4 id="接口类型支持不如postman丰富">接口类型支持不如Postman丰富
&lt;/h4>&lt;p>虽然Bruno目前已经支持restful和GraphQL接口，已经能够满足我们绝大多数的接口测试协议要求。但相比Postman还有MQTT这样的物联网协议支持，在协议扩展上，还有待继续补充。&lt;/p>
&lt;h4 id="生态系统不如postman成熟">生态系统不如Postman成熟
&lt;/h4>&lt;ul>
&lt;li>Postman 经过多年发展，已经围绕其平台构建了一个庞大的生态系统，包括大量的第三方工具集成（如很多第三方的 APM 工具、API 网关、CI/CD 工具等）都对Postman支持良好）。&lt;/li>
&lt;li>经过多年积累，Postman社区繁荣，用户数量庞大，积累了海量的资源和教程。&lt;/li>
&lt;/ul>
&lt;p>Bruno 作为一个较新的工具，其原生集成和社区支持的插件相对较少&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421.png"
width="1432"
height="821"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421_hu_d4d56096d2ceaa52.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421_hu_92f83bab1b7a604b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;h4 id="ai测试能力的支持">AI测试能力的支持
&lt;/h4>&lt;p>Postman通过内置的 &lt;code>postbot&lt;/code> 助手，借助AI能力，可以实现接口测试用例的自动生成，优化建议等典型的AI增强。而随着AI应用的越来越广泛，对AI的支持也是Bruno还需要重点补充的部分。&lt;/p>
&lt;h2 id="bruno安装和应用基本示例">Bruno安装和应用基本示例
&lt;/h2>&lt;p>Bruno作为一个纯客户端，安装其实极为方便。访问官网，下载对应安装包即可(&lt;a class="link" href="https://www.usebruno.com/downloads" target="_blank" rel="noopener"
>https://www.usebruno.com/downloads&lt;/a>)。&lt;/p>
&lt;p>win11下也可以利用内建的winget命令直接下载安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">winget&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">bruno&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">bruno&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，桌面上会出一个bruno的小狗logo，类似Postman，双击就可打开Bruno客户端，界面其实和Postman颇为类似。下面我们以获取Github上一个开源项目的最近一次发布为例，看下Bruno中如何操作。&lt;/p>
&lt;ol>
&lt;li>首先建立一个collection，命名为 &amp;ldquo;github&amp;rdquo;, 并在其下创建一个目录，“repos”。 并可以在collection设置界面，添加github的访问Token。这里可以看到，Bruno支持的鉴权方式已经非常全面。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-3.png"
width="1275"
height="632"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-3_hu_69f110a17bf52e1b.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-3_hu_848368f0c6e68ee5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;ol start="2">
&lt;li>在 “repos” 目录下，新建一个Get请求，“getRelease”, 根据Github定义，对应请求接口 &amp;ldquo;&lt;a class="link" href="https://api.github.com/repos/%7b%7bowner%7d%7d/%7b%7brepo%7d%7d/releases/latest%22" target="_blank" rel="noopener"
>https://api.github.com/repos/{{owner}}/{{repo}}/releases/latest"&lt;/a>， 这里我们使用了两个变量，和Postman类似，这里设置的变量可以通过&lt;code>{{var}}&lt;/code> 来引用。 测试一下，成功获取了appium项目的最近一次发布信息&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-1.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-1_hu_9f7972931754a68b.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-1_hu_751fed8d55784404.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>作为一个本地客户端，这里Bruno所有的请求和配置信息，其实都保存在本地，&lt;code>.bru&lt;/code>文件中进行存储。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-2.png"
width="1543"
height="891"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-2_hu_44d52d790f131ac3.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-2_hu_3f4f9e6007ba73aa.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>以上就是关于Bruno的几个概要介绍，对于不希望受Postman在线限制的同学，Bruno就是最佳替代。&lt;/p>
&lt;p>欢迎继续关注秋草的后续博客文章，会陆续带来更多关于Bruno的深度使用总结和分享！&lt;/p></description></item><item><title>大话Https协议</title><link>https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/</link><pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1.png" alt="Featured image of post 大话Https协议" />&lt;p>大家现在访问网络，浏览网页，注意一下的话，网址前面基本上都是一个 &lt;code>https://&lt;/code> 的前缀，这里就是说明这个网址所采用的协议是 https 协议。那么具体应该怎么理解 https 呢？ 本文我们就力争能清楚地解释明白这个我们目前应该最广的协议。&lt;/p>
&lt;h2 id="理解http协议">理解HTTP协议
&lt;/h2>&lt;p>要解释 https 协议，当然首先应该知道 http 协议。http 协议可以说是现代互联网的基础。在现代网络的 OSI 七层模型中，http 是典型的第 7 层应用层协议。也就是它是基于网络通信的实际应用，比如浏览器呈现网页内容，这就是网络通信的具体应用。&lt;/p>
&lt;p>如下图分别是 http 协议的消息请求和响应报文的协议定义格式：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928.png"
width="466"
height="165"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928_hu_a08e1f59ab391875.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928_hu_d9059691b287935e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="677px"
>&lt;/p>
&lt;p>访问百度的请求解析如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET https://www.baidu.com/ HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求方法 URL HTTP协议版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求服务器地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#以下是消息头内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: keep-alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#连接方式：长连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: max-age=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求缓存控制，需确认请求内容是否有修改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Upgrade-Insecure-Requests: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持https协议
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#请求客户端，浏览器版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持的响应内容类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Encoding: gzip, deflate, br
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持的编码类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#支持的语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cookie: BAIDUID=C0A2...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#携带的cookie信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#未携带请求消息体，body为空
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928103246.png"
width="484"
height="325"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928103246_hu_ae75e69c12be897f.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928103246_hu_c66146f7ab6dea62.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>响应解析：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">HTTP/1.1 200 OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#协议版本 消息状态码 状态描述
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdpagetype: 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdqid: 0x8707d7d80001f34e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#自定义消息头
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: private
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#缓存控制策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: Keep-Alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#长连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Type: text/html;charset=utf-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#响应内容类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Sat, 22 Dec 2018 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#响应时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expires: Sat, 22 Dec 2018 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#过期失效时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: BWS/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#服务器系统及版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: BDSVRTM=372; path=/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: BD_HOME=1; path=/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: path=/; domain=.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置客户端cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Strict-Transport-Security: max-age=172800
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#严格安全传输，有效时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">X-Ua-Compatible: IE=Edge,chrome=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#兼容浏览器版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Length: 191722
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#消息体长度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#以下消息体内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;!Doctype html&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;html xmlns=http://www.w3.org/1999/xhtml&amp;gt;&amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于 http 协议的详细说明，可以参照我之前的博文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/01-postman%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank" rel="noopener"
>接口测试工具Postman-基础篇&lt;/a>中关于 http 协议基础的部分&lt;/p>
&lt;p>那这里其实请求的地址 Url 是 &lt;code>https://www.baidu.com&lt;/code>， 是https协议，为什么这里又说它是 http 协议呢？ 这两者到底是什么关系？&lt;/p>
&lt;h2 id="https协议和tlsssl">HTTPS协议和TLS、SSL
&lt;/h2>&lt;p>其实 https 协议是指 &lt;strong>HyperText Transfer Protocol over Secure Socket Layer&lt;/strong>，也就是基于SSL之上的HTTP协议。&lt;/p>
&lt;p>&lt;strong>SSL&lt;/strong>(Secure Socket Layer) 指安全套接字层，是互联网鼻祖公司网景（Netscape）提出的为网络通信提供安全性和隐私保护的标准协议。 发展到 SSL3.0版本后，标准组织 IETF 对 SSL 协议进行了标准化，并重新命名为 &lt;strong>TLS&lt;/strong>(Transport Layer Security，传输层安全)。目前更新到 TLS1.3 版本。&lt;/p>
&lt;p>所以说SSL和TLS其实是一脉相承的，可以认为二者其实是不同时期的同一个协议。而HTTPS协议其实就是：&lt;/p>
&lt;blockquote>
&lt;p>HTTPS = HTTP + SSL/TLS&lt;/p>&lt;/blockquote>
&lt;p>为什么需要 https 协议呢？ 因为http协议本身在传输过程中，传递的信息基本都是透明的，传输过程中的任何节点，其实都可以看到传输的消息体内容。&lt;/p>
&lt;p>因此为了安全起见，就有了对传输内容加密的需求，SSL/TLS 协议的作用，其实就是为了保护这个内容安全而推出的。&lt;/p>
&lt;p>从 TLS 协议的命名也可以看出，它其实是在 TCP 协议（传输控制协议）的基础上，增加了安全特性的一个协议。&lt;/p>
&lt;p>HTTPS 协议基于HTTP协议，所以它还是属于应用层协议，而TLS 是在第四层的TCP协议基础上，一般认为是属于第五层即会话层。&lt;/p>
&lt;p>通过TLS，可以实现网络通信传输过程中，通信数据的加密&lt;/p>
&lt;h2 id="关于加密">关于加密
&lt;/h2>&lt;p>那么理解 https 协议，这里也就是要搞清楚 TLS 是怎么对通信数据完成加密的。&lt;/p>
&lt;h3 id="对称加密">对称加密
&lt;/h3>&lt;p>我们正常理解加密，就是通过双方约定的一个规则，也就是通过加密算法，把原始字串变更为一个只有通信双方知道的密文，这样其他人即便知道通信内容，就并不能知道原始的信息。&lt;/p>
&lt;p>比如我们看谍战片，传递情报一般都有个重要的东西叫做 &lt;strong>密码本&lt;/strong>, 这里密码本其实就是加密算法，也就是&lt;strong>密钥&lt;/strong>。&lt;/p>
&lt;p>这种加密方式，双方是对等的，对通信内容加密和解密使用的是同一个密钥，因此叫 &lt;strong>对称加密&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1.png"
width="1054"
height="436"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1_hu_8e5135f3cf1994a9.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-1_hu_42498ea2d03dccc0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>但这种加密方式，有一个最大的问题，就是这里的密码本。谍战片中，情报人员舍生忘死也要保护密码本，否则一旦泄露，情报就存在泄露风险。&lt;/p>
&lt;p>网络通信也是一样，这里最大的问题，就是这里的密钥如何避免泄露。但只要密钥本身也需要通过网络通信来传输，那么依然不安全。&lt;/p>
&lt;p>这个过程好比：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">A: 跟你说个秘密，我下面的话你不要直接听，我全部说第几页第几行第几列，你去《红楼梦》找到对应的字连起来读。你回话也告诉我对应字的位置就行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">B: 好嘞，《红楼梦》已摆好，你说吧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">。。。。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C：我偷听到啦，赶快买本《红楼梦》去...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="非对称加密">非对称加密
&lt;/h3>&lt;p>而除了对称加密之外，还有一种加密方式是 &lt;strong>非对称加密&lt;/strong>， 这种方式会采用一些特殊的加密算法，生成两份密钥，分为 &lt;strong>公钥&lt;/strong> 和 &lt;strong>私钥&lt;/strong>, 通过其中一把钥匙加密的内容，只能通过另一把要是才能解密。并且这个算法是很难通过暴力破解逆向还原推导仿冒出另一把钥匙。&lt;/p>
&lt;p>类似古代调遣军队的虎符，只有双方严丝合缝对得上才能验证为真。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-2.png"
width="991"
height="560"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-2_hu_e74263285cddfe8c.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-2_hu_7adcb1b2fbe49700.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>有了这个机制，就可以把私钥保存在自己这里，并且绝不外传，而公钥可以公告天下，通过网络正常传递，谁都有可能拿到。这样，对方要给我发送加密信息，只要使用公钥加密，而解密只能在我自己这里才能完成。&lt;/p>
&lt;p>所以，非对称加密大致的过程就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> A: 我有点秘密想跟你说, 不能被其他人听到....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B：稍等，我给你个公钥，你上个锁以后再说给我听。拿到公钥先念下公钥上的字给我看看对不对
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A: 收到公钥，上面写着“我是王大锤”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B: 对，你收到的就是我给你的公钥，用它上锁吧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A：公钥加密上锁，打包发给B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B：取出私钥，打开包裹，阅读内容...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相比 &lt;strong>对称加密&lt;/strong>，&lt;strong>非对称加密&lt;/strong>明显更加安全，但这种方式的缺点是计算量比较大，加解密过程效率不高，速度较慢，所以实际应用中，通常是两种方式结合使用。&lt;/p>
&lt;p>也就是 TLS 加密过程：&lt;/p>
&lt;blockquote>
&lt;p>双方会首先通过非对称加密过程，协商出一个用于通信的对称密钥；这个对称密钥的生成都在各自的本地完成，而完成密钥协商后，后方各自都有了一个相同的对称密钥，就可以基于这个相同的密钥进行后续对称加密通信。&lt;/p>&lt;/blockquote>
&lt;p>因为这个对称密钥是通过非对称加密的方式得到的，所以并不会在双方的通信过程中传递。这样就兼顾了安全和效率。&lt;/p>
&lt;h2 id="签名和证书">签名和证书
&lt;/h2>&lt;p>不过用非对称加密，还是存在一个漏洞。&lt;/p>
&lt;p>就是在服务器和客户端通信的过程中，通信过程其实会通过大量中间环节，如果存在一个恶意的劫持者，它在收到服务端信息后，想自己假冒服务端，篡改信息后再发给客户端。&lt;/p>
&lt;p>这时它其实可以伪装成服务端，自己给客户端发放公钥，拿到客户端的信息后，用自己的私钥解密，再用真正的服务端公钥重新加密，发给服务端。&lt;/p>
&lt;p>这个风险其实就是安全领域中的 &lt;strong>中间人攻击&lt;/strong> 漏洞。&lt;/p>
&lt;p>而为了规避这个问题，需要服务端应该证明自己的身份，然后客户端还可以验证这个身份。因此就有了签名和证书。&lt;/p>
&lt;p>签名就是服务端表明自己的身份，拿到公钥的客户端就可以通过签名判断这个发送端是正确的服务器。这里的签名和公钥其实都保存在一个文件中，也就是服务端的签名证书。&lt;/p>
&lt;p>而为了防止中间人伪造证书，这时就引入了&lt;strong>CA（Certificate Authority)&lt;/strong>，也就是权威的第三方证书颁发机构。这些权威的第三方颁发机构会用私钥对服务端的签名进行加密，这样客户端就可以通过机构的公钥来验证这个签名是否是对应的服务端。验证无误，就可以用证书中携带的公钥来完成和服务端后续的通信协商。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-4.png"
width="698"
height="864"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-4_hu_2950ee2ea2f04dc6.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-4_hu_5b6d08632ce2d28c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="193px"
>&lt;/p>
&lt;h2 id="https协议交互过程">HTTPS协议交互过程
&lt;/h2>&lt;p>有了上面的基础，我们来具体看一下访问一个 https 网站的具体通信过程。&lt;/p>
&lt;p>TLS因为有不同的版本，并且支持多种不同密钥交换和加密算法，所以在通信前，首先要完成使用何种加密算法、用什么密钥生成方式等过程。而 TLS 是基于TCP协议之上的，所以在 TCP 典型的 3次握手完成建链之后，会进行 TLS 的握手建链过程：&lt;/p>
&lt;ul>
&lt;li>比如客户端从浏览器访问网站， 这时浏览器会首先发送&lt;code>Client Hello&lt;/code> 消息到服务器，这个消息中主要包含了客户端支持的&lt;code>加密套件ciphersuites&lt;/code>， TLS 版本信息和&lt;strong>客户端随机数&lt;/strong>。（明文传输）&lt;/li>
&lt;li>服务器接收到消息后，返回自己支持的&lt;code>ciphersuites&lt;/code>， TLS 版本，自己的数字证书和服务器端生成的随机数等几项内容。（明文传输）&lt;/li>
&lt;li>客户端对收到的数字证书进行验证。验证无误之后生成一个新的密钥，也就是&lt;code>预主密钥pre-master key&lt;/code>，并使用证书中携带的公钥来对&lt;code>pre-master key&lt;/code>进行加密，发送给服务器。（此时是非对称加密传输）&lt;/li>
&lt;li>服务器接收到客户端的密文，使用私钥进行解密，获得了&lt;code>pre-master key&lt;/code>。（非对称加密传输）&lt;/li>
&lt;li>到这里为止，服务器和客户端都有了三组数字，分别是&lt;strong>客户端的随机数、服务端的随机数和pre-master key&lt;/strong>。前两个随机数虽然是明文传输，有泄露风险，但 &lt;code>pre-master key&lt;/code>并没有在通信中传递，是计算而得到的安全密钥。 所以再将这三者结合，使用之前协商好的特定的加密算法再生成一个密钥，这个密钥称为&lt;code>shared secert&lt;/code>。也就是之后的会话密钥，这个密钥是后续对称加密的密钥。&lt;/li>
&lt;li>客户端在计算出对称加密的密钥之后，使用该密钥对通信内容进行对称加密，告知服务器之后都使用该密钥进行对称加密。（对称加密传输）&lt;/li>
&lt;li>服务器接收到密文后，使用之前计算出的密钥来进行对称解密，解密成功之后，同样再使用该密钥进行对称加密通信。并告知客户端密钥确认无误，可以使用该密钥进行通信。（对称加密传输）&lt;/li>
&lt;/ul>
&lt;p>至此，整个TLS的握手过程完整，之后就可以开始对称加密的通信了。&lt;/p>
&lt;p>通过 WireShark 抓包的话，通常是这样的一个过程：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-5.png"
width="1317"
height="315"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-5_hu_49d182a58ea91b45.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-5_hu_8e5d0d431298012.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="418"
data-flex-basis="1003px"
>&lt;/p>
&lt;p>具体的交互过程，参考下图 (图片来自网络&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-6.png"
width="1308"
height="946"
srcset="https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-6_hu_f82923a9e2715688.png 480w, https://chengxiaqiucao.github.io/post/021-%E5%82%BB%E7%93%9C%E5%BC%8F%E7%90%86%E8%A7%A3https%E5%8D%8F%E8%AE%AE/Pasted-20240928-6_hu_6089939db8ce688d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于 Https 协议通信过程的整体梳理，更多测试和技术相关文章，欢迎关注 &lt;a class="link" href="https://chengxiaqiucao.github.io/" target="_blank" rel="noopener"
>城下秋草的博客&lt;/a> 或公众号（秋草说测试）&lt;/p></description></item><item><title>PostmanV11更新便览</title><link>https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/</link><pubDate>Thu, 12 Sep 2024 14:57:14 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/v11-Launch-Blog.jpg" alt="Featured image of post PostmanV11更新便览" />&lt;h1 id="postman迎来v11大版本更新">Postman迎来V11大版本更新
&lt;/h1>&lt;p>Postman作为接口测试中，被广泛应用的一款主流工具，以其丰富的功能，灵活方便的使用方式，广受欢迎。最新发布的V11版本则在向协作平台转型的过程中一路狂奔，增加大量全新的协作支持。下面我们就一起来看看都有哪些变化吧&lt;/p>
&lt;h2 id="协作增强---comments评论入口更便捷">协作增强 - Comments评论入口更便捷
&lt;/h2>&lt;p>作为一个协作平台，在之前的版本中，Postman已经提供了评论功能。可以通过右侧边栏打开评论窗口，针对不同的接口添加评论，这样对于团队协作来开发调试同一个接口时，可以实现团队的交互
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-1.png"
width="1316"
height="527"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-1_hu_c73c9b33277ab3cf.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-1_hu_e4ba433319cb8cc0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>但这里的评论是针对接口层面的，但实际大家在协作时，往往更多是要针对具体的消息体，消息参数、包括接口脚本进行针对性的讨论，所以新版本的改进，就是在这些地方增加了评论入口，便于针对不同的对象直接添加评论，并进行关联&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915.png"
width="984"
height="405"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915_hu_46180f5c8b0a67c7.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915_hu_d7139f8185d763cd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="583px"
>
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-2.png"
width="920"
height="343"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-2_hu_cf53a6656ddb2f93.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-2_hu_963ed4a842cdccdf.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="268"
data-flex-basis="643px"
>
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-3.png"
width="840"
height="275"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-3_hu_dca23e2feec078f1.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-3_hu_168abb5e6c17d0ac.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="733px"
>
而评论窗口中也会现实具体评论关联的相关元素，便于团队成员针对具体的对象完成探讨
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-4.png"
width="667"
height="877"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-4_hu_f1c6e6d8638a6ae5.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-4_hu_c6fbb8d7cf605ff6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/p>
&lt;h2 id="代码复用引入package-library">代码复用，引入package library
&lt;/h2>&lt;p>另一个更新，是关于代码复用。Postman支持灵活的脚本功能，但是之前的版本，当我们想在不同的接口中，使用同一段脚本时，一般还是拷贝粘贴。为了解决这个问题，类似于JMeter中的测试片段，Postman这个版本中引入了一个新的功能模块，&lt;code>Package Library&lt;/code>，也就是可以把经常复用的脚本、函数保存为package，然后在任何需要使用的地方，引入这个packag而进行使用即可&lt;/p>
&lt;p>在Scripts（目前版本将原先的&lt;code>PreRequest&lt;/code>和&lt;code>Tests&lt;/code>脚本统一放到了&lt;code>scripts&lt;/code> tab页下了）中，原先右侧的代码辅助栏中增加了这个新入口
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915153627.png"
width="1241"
height="631"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915153627_hu_6d0e3ce068e615ed.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915153627_hu_8d2477380403dce0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>
在这个模块中，可以主动地将需要需要复用的代码添加为Package
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-5.png"
width="1318"
height="752"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-5_hu_9ebc7cfe042395ce.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-5_hu_5609aaa3d0c95616.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>
或者也可以从已有代码中，选中需要复用的代码，添加到package中
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-6.png"
width="1235"
height="357"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-6_hu_98aeb37afc654c0b.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-6_hu_126d1be145f4efe7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="345"
data-flex-basis="830px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-7.png"
width="1271"
height="448"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-7_hu_46cfca6cedf7446f.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-7_hu_ecc734183ddcb021.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="680px"
>
使用的话，直接在package 搜索框中检索需要复用的代码package，就会自动插入对应的代码，实现复用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">checkStatOk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@qiucao-testing/check_stat_ok&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="官方的vscode支持插件">官方的VSCode支持插件
&lt;/h2>&lt;p>另一个更新是这个版本官方正式推出了VsCode的官方插件。从插件中心，搜索安装以后，需要登录Postman账号，然后就可以在VsCode直接使用Postman完成接口调测了。和桌面端的功能基本类似。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-8.png"
width="1919"
height="989"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-8_hu_4dffbc2e2d6f36f3.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-8_hu_81984fcdca49eb59.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="465px"
>&lt;/p>
&lt;h2 id="workspace-update接口变更的分享">Workspace update，接口变更的分享
&lt;/h2>&lt;p>Postman在向协作平台转变的过程中，它的Workspace是核心概念。而对于团队协作来说，针对接口共同开发，团队成员能及时获知大家共同协作的这个空间中的相关变化非常关键。&lt;/p>
&lt;p>而新版本中提供的workspace update功能，其实比较类似代码管理中的commit 记录，可以记录空间中的接口变化、便于回溯历史，并及时知会到团队成员。&lt;/p>
&lt;p>当然这个update目前&lt;strong>只针对团队空间以及公共空间有效&lt;/strong>。
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-9.png"
width="1226"
height="758"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-9_hu_dfc46c7044277135.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-9_hu_a59d1ff67bf7e1c8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h2 id="postbot-接口ai机器人">PostBot， 接口AI机器人
&lt;/h2>&lt;p>新版中另一个比较重磅的更新是极大增强了Postman助手机器人的AI能力。&lt;/p>
&lt;p>比如可以通过postbot帮助我们生成一些对应的校验脚本
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/postbot.gif"
width="1322"
height="744"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/postbot_hu_7a827a91e511eb4c.gif 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/postbot_hu_c5c0b32173658232.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>或者，也可以针对collecion，通过呼出postbot，通过它提供的&lt;code>generate tests&lt;/code>功能自动帮助我们生成一系列针对接口定义的测试用例，非常的方便，极大节省了接口自动化用例的开发成本
&lt;img src="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-10.png"
width="1466"
height="983"
srcset="https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-10_hu_58d04116445e9c90.png 480w, https://chengxiaqiucao.github.io/post/015-postmanv11%E6%9B%B4%E6%96%B0%E4%BE%BF%E8%A7%88/Pasted-20240915-10_hu_26fc9adfd6484e66.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;/p>
&lt;p>随着AI的能力增强和测试工具和AI的集成，通过AI来辅助测试人员提升测试效率和提高产出已经越来越成为明显趋势。&lt;/p>
&lt;hr>
&lt;p>以上就是关于Postman最新发布版本相关新功能的分享。 欢迎关注~&lt;/p></description></item><item><title>Postman高级篇</title><link>https://chengxiaqiucao.github.io/post/004-postman-advanced/</link><pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/004-postman-advanced/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman高级篇" />&lt;h3 id="前言">前言
&lt;/h3>&lt;p>在之前的系列 中，我们从基础功能、脚本进阶和自动化实现几个方面向大家详细介绍了 Postman 工具在接口测试中使用的具体方法。而我们在工作中，除了这些通过本地工具实施的测试外，因为不同办公场所或团队协作的需要，还存在通过云端来统一管理接口用例以及依托云端来实现更多增值测试能力的需求。在本篇 Chat 中，我们就来学习 Postman 官方提供的 Cloud 高级功能服务。&lt;/p>
&lt;h3 id="postman-cloud-服务介绍">Postman cloud 服务介绍
&lt;/h3>&lt;p>使用 Postman Cloud 服务，首先我们需要注册一个官方的账号&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_084809.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>注册完成并登录以后，从官网主页面右上角的 dashboard 按钮即可进入 Cloud 云端管理页面。这里会显示自己的工作空间，除了自己的个人工作空间外，还可以创建用于团队共享的团队工作空间。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_085631.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="工作空间及云端功能总览">工作空间及云端功能总览
&lt;/h4>&lt;p>工作空间是 Postman Cloud 的一个管理单元，通过云端的工作空间同步，我们可以达到以下本地端无法实现的的一些优势：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以便于个人工作通过不同的地点和设备进行组织、管理。比如在工作单位未完成的工作，回到家里也可以继续&lt;/p>
&lt;/li>
&lt;li>
&lt;p>便于团队合作，通过将相关元数据共享以及团队工作空间，团队成员之间可以共同维护同一套接口，并共享工作成果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>统一的工作空间，还使得团队能工作在同一维度下，避免不同团队成员工作进度、数据的不一致导致的理解和沟通差异。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工作空间的历史记录功能，能帮助记录和回溯接口操作记录，便于保存工作过程和结果。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>下图是 Cloud 端进入工作空间后的界面，可以看到 Postman Cloud 云端能够提供的功能。默认显示当前空间中的 Collection 信息，其他的 Tab 页分别是接口操作历史、环境变量、监控任务、Mock 服务、API 集成能力、以及云空间相关的操作记录。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214612.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如下是 History 接口操作记录以及 Activity 工作空间操作记录：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214700.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_215018.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="账号体系及对应价格">账号体系及对应价格
&lt;/h4>&lt;p>在 Postman 官网注册账号后默认是免费账户，也可以升级到专业版或者企业版，目前对应的每月费用分别如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_091127.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>免费版本包含的功能如下，可以看到功能基本都支持，区别主要在使用次数上的区别，免费账户的在线文档调阅、 Mock 请求、API 调用、监控调用等都限制在每月 1000 次，还是能基本满足个人学习和基本的测试需要的。如果是比较大型的团队共用，最好还是升级到高级版本或选择其他替代方案。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190224_091536.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="本地端登录">本地端登录
&lt;/h4>&lt;p>在 Postman 工具端，我们也可以登录已注册的账号，登录后上方的 banner 即可显示登录后所在默认工作空间以及账户头像。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190226_211434.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>登录后，本地 App 端会和云端保存的信息自动进行同步，保持数据的一致性。下面我们就分别来看看 Postman cloud 提供的服务。&lt;/p>
&lt;h3 id="postman-cloud-的在线接口文档">Postman Cloud 的在线接口文档
&lt;/h3>&lt;p>功能强大、格式优美的在线文档是 Postman Cloud 的一个重要服务。它具备如下一些主要的优点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持私有文档及公开文档&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>当注册 Postman 账号后，默认其实已经开启了在线文档功能。登录 web 端工作空间后，点击 Collection 进入后，即可看到当前 Collection 的在线文档已同步生成。如图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_205118.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>上图是只有当前账号可以在工作空间中查看的私有文档。通过右上角的 Share 按钮还可以向其他工作空间或团队工作空间共享当前的文档。 而通过 Publish 按钮则可以将当前文档发布为公共文档让用户公开访问。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_205655.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在Postman App 端，也可以使用 Collection 菜单中的 &lt;code> Publish Docs&lt;/code> 按钮来进行公开文档的发布。发布后会生成一个公共的访问 URL，通过这个 URL 即可访问到这个文档。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_205746.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>文档自动生成&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>如上文所述，Postman 在线文档是自动生成的，省去了原来繁冗的文档编辑排版工作。它能够自动生成如下内容：&lt;/p>
&lt;ul>
&lt;li>请求示例，包括请求方法、uri、消息内容、消息头、参数等&lt;/li>
&lt;li>保存为 Example 的接口响应信息&lt;/li>
&lt;li>Collection、Folder、Request 上编写的 Description 描述。&lt;/li>
&lt;li>自动化生成的多种主流语言的代码片段&lt;/li>
&lt;/ul>
&lt;p>如下图是 Collection 的描述信息编辑界面
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_213343.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持 Markdown 语法&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>我们在编写 Description 时，是支持使用 Markdown 语法的，能进一步提升文档的阅读体验。如上面的图片就包含了 Markdown 中列表以及加粗的语法。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持基于 ID 的文档内链接&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>我们还可以利用 Postman 为每一个请求、folder 生成的唯一 ID 在文档内进行交叉引用。当我们点击右侧文档右侧导航栏对应元素，URL 中即可显示该元素的唯一 ID，如图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_211627.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;em>注：ID 信息我们也可以通过 Postman API 接口获取到。&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持自动生成主流语言代码片段&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Postman 在线文档另一个非常赞的特性是支持多种主流语言的代码片段，方便我们在使用相应语言进行代码调试时使用。如图：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_212622.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持评论功能&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在团队空间等私有文档中，我们还可以使用评论功能，通过对接口进行标注来和团队成员进行沟通和进行信息的确认。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_212944.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="postman-在线文档使用限制">Postman 在线文档使用限制
&lt;/h4>&lt;p>Postman Cloud 会限制私有文档和公开文档的被浏览次数。免费账号会分别有每月 1000 次的免费浏览限额。对于个人使用和学习还是勉强够用。如果是团队协作使用肯定是捉襟见肘，建议还是选择付费账号或者 Swagger 这样的开源免费替代方案。&lt;/p>
&lt;p>当前使用量可以在个人账号的 &lt;code>Resource Usage&lt;/code> 页面查看：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_214420.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="postman-的-mock-server-介绍">Postman 的 Mock Server 介绍
&lt;/h3>&lt;p>Postman Cloud 的另一个高级功能是提供了 Mock Server 的支持。&lt;/p>
&lt;p>在接口开发以及接口测试工作中，特别是多个团队并行研发的软件产品，比如前端、后端、APP 这些不同的团队共同来开发产品，经常出现的情况就是很多时候需要依赖其他团队的开发进度，比如 APP 要依赖后端接口来进行调试，或者依赖一些第三方团队提供的接口。如果接口还不具备联调条件，那么为了保证开发进度，按照一定的约定，进行接口的模拟就成为必然选择。&lt;/p>
&lt;p>Mock Server 就是提供这种服务的功能模块。在 Postman 中，我们可以将一些响应保存为Example，然后就可以根据这些 example 来方便地创建 Mock 服务脱离原始接口进行消息的响应模拟。&lt;/p>
&lt;p>如图是 Postman App 中保存的一个响应 Example，针对同一个接口请求，我们可以将不同的响应结果保存对为多个不同的 example。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_215753.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="创建-mock-server">创建 Mock Server
&lt;/h4>&lt;p>在 Postman 中创建 Mock Server 有如下几种方式：&lt;/p>
&lt;ul>
&lt;li>Postman App 中通过 New 按钮创建&lt;/li>
&lt;li>在打开 Postman App 时自动弹出的 launch window 中也可创建&lt;/li>
&lt;li>在 Collection 菜单中创建&lt;/li>
&lt;li>通过 Postman API 创建&lt;/li>
&lt;/ul>
&lt;p>这里以通过 Collection 菜单创建为例，选中 &lt;code>Mock Collection&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_220408.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>根据 Collection 信息设置 Mock Server：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_220340.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>创建成功，会生成一个在线的 Mock Servr 的访问 URL，本例中即 &lt;a class="link" href="https://b0fadee4-7560-4b14-a201-599985ce4f0f.mock.pstmn.io" target="_blank" rel="noopener"
>https://b0fadee4-7560-4b14-a201-599985ce4f0f.mock.pstmn.io&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_220205.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如此我们就完成了当前 Collection 的 Mock 服务创建。这里 Postman 会默认生成一个和当前 Collection 同名的 Environment 环境，在这个环境中默认添加了 url 变量，取值即刚才的 Mock 服务地址。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_220654.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="mock-server-的使用">Mock Server 的使用
&lt;/h4>&lt;p>完成 Mock 服务的创建以后，我们就可以通过之前生成的 Mock 服务地址来模拟接口的响应了。如图就是访问 Mock 服务已保存的接口，返回的是之前保存的响应 Example 内容。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190227_221022.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="mock-server-的匹配算法">Mock Server 的匹配算法
&lt;/h4>&lt;p>看到这里，大家一定会产生一个疑问，Mock Server 是如何根据请求来确定需要响应的内容的？特别是针对同一个请求，我们保存了多个 Example 的情况，模拟的时候响应的是哪一个呢？ 这就要向大家来介绍一下 Mock Server 的响应匹配算法了。&lt;/p>
&lt;p>如下图，是 Mock Server 用来进行响应匹配的算法顺序&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_211113.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先会根据需要响应的内容格式来筛选响应，比如是 json 格式还是 xml 格式 （根据请求的格式定义）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会根据请求的 HTTP 方法来匹配，会剔除不匹配请求 HTTP 方法的响应&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据请求的URL路径来匹配。优先匹配严格一致的路径，然后再匹配多层的带 &lt;code>/&lt;/code> 的路径，再然后匹配忽略大小写以及 id 信息的路径，如果都没有匹配的情况下则返回没有找到对应的响应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以通过在请求消息头中携带指定 header 值来确认响应消息。 Postman 支持在消息头中携带 &lt;code>x-mock-response-name&lt;/code>、 &lt;code>x-mock-response-id&lt;/code>、 &lt;code>x-mock-response-code&lt;/code> ,分别可以指定响应的名称（保存的 example 名称）、响应 Example 的 ID（唯一 ID，可通过 API 查询得到）、响应状态码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在剩余的响应中按保存顺序倒序排列，选择最高阈值的进行响应。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如图是创建 Repo 的 Mock 服务，存在多个响应的 Example。 这里匹配了请求方法和请求路径：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_213021.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>下图则是在请求中包含了指定的 Header，&lt;code>x-mock-response-code&lt;/code>， 指定返回状态码为 422 的响应。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_213345.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>可以看到，通过 Postman 的 Mock Server 服务，我们可以在脱离原接口环境的情况下，模拟接口的响应，来完成我们业务调测的需要。 目前免费账号每月通过 Mock Server 提供的调用次数限额为 1000 次&lt;/p>
&lt;h3 id="postman-的监控功能">Postman 的监控功能
&lt;/h3>&lt;p>下面再介绍 Postman Cloud 提供的监控服务。&lt;/p>
&lt;p>对于互联网应用，我们的业务是否能够正确的提供服务，是否会因为服务异常或者网络问题导致业务中断？&lt;/p>
&lt;p>在和外部团队协作的过程中，如果对方的接口出现变化，我们如何能够及时地获知避免大量的无用功？&lt;/p>
&lt;p>因为这些问题的存在，自然对接口进行监控的重要性就显而易见了。Postman 对于接口的监控功能，其实简单来说就是在 Cloud 端提供的一个接口测试任务的定时执行并记录、通知结果的功能。大家也许会说，通过 Jenkins 这样的 CI 集成工具定时调度不是也可以吗？&lt;/p>
&lt;p>确实通过 CI 调度也能达到这样的效果，但是通过 Cloud 监控，还可以提供不同访问区域的选择以及针对监控结果的趋势可视化呈现分析等增值能力。&lt;/p>
&lt;p>如下图是在 Postman App 的 Collection 菜单中选择新建监控：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_225554.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>下图是在 Postman web 工作空间中创建监控：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190228_225910.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>下图是创建好的监控以及监控结果界面：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190226_214421.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/monitor.gif"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>除了通过在 App 和 在 Cloud web 端创建监控外，我们还可以通过 Postman API 来创建监控。&lt;/p>
&lt;p>另外需要跟大家说明的是，Postman 的监控功能有以下几个限制需要了解：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>因为是在云端进行执行的监控，所以监控对象接口需要可以通过互联网访问，对于在内网开发的接口，需要暴露公网访问接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Postman 目前没有文件存储功能，所以不支持在接口请求中附加文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同上，也不支持使用 data file 提供 data 变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接口的执行记录不会记录请求和响应的消息体。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目前免费账号的 monitor 接口执行次数限额为每月 1000 次。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="postman-的开放-api">Postman 的开放 API
&lt;/h3>&lt;p>我们除了通过Postman App 以及 cloud 端的 web 界面来进行 Collection、Environment、Mock Server、Monitor 等的创建和管理外，Postman Cloud 也提供了自身的 API 接口，方便使用者从自研的工具或脚本中来调用，更加方便地对 Postman 提供的相关服务进行调度和管理。&lt;/p>
&lt;p>Postman 的 API 是通过云端的 Integration 来提供的。（对于专业版以上的账号，还可使用其他一些集成的第三方工具）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214835.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="获取鉴权码">获取鉴权码
&lt;/h4>&lt;p>要使用 Postman API，首先需要需要生成调用的鉴权码。从上图界面进入，选择 &lt;code>Get API Key&lt;/code>：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214910.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>生成以后，可以在 &lt;code>Existing API Keys&lt;/code> 中查看当前的 Key 值：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190225_214944.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Postman API 对于鉴权码的使用， 有两种方式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>是通过在请求消息的 header 中 增加一个 &lt;code>X-Api-Key&lt;/code> 的消息头来携带这个 key 值进行鉴权&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过在请求 url 中携带查询参数 &lt;code>apikey&lt;/code> 来携带，如：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://api.getpostman.com/collections?apikey={{postman_api_key}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果不携带鉴权码，则接口会返回如下报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;AuthenticationError&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Invalid API Key. Every request requires a valid API Key to be sent.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="访问频率限制">访问频率限制
&lt;/h4>&lt;p>和大部分 Restful API 服务类似， 为防止 DDOS 攻击，Postman API 对于接口的访问频次也进行了限制，每分钟访问不超过 60 次，在响应消息中可以通过 &lt;code>X-RateLimit-Limit&lt;/code> 、&lt;code>X-RateLimit-Remaining &lt;/code> 、&lt;code>X-RateLimit-Reset&lt;/code> 等几个自定义消息头来获知此限制以及剩余次数、重置时间。如下面获取所有 Collection 的接口：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_215758.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="调用实例">调用实例
&lt;/h4>&lt;p>下面再来看几个 Postman API 的调用实例：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>获取 Collection 信息&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在上一张频率限制的图片上，我们访问的获取当前账号下所有 Collection 的接口，响应如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;collections&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;7ea4592c-848a-4a76-a4e4-5b1b0d0594f7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;PostmanAPI&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508-7ea4592c-848a-4a76-a4e4-5b1b0d0594f7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;d6c64129-8c6c-48ec-968c-7f01a70a601b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Postman Echo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508-d6c64129-8c6c-48ec-968c-7f01a70a601b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;f2777cee-5d92-4a0d-896e-e00ad27ef5bd&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;GitHub&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;4793508-f2777cee-5d92-4a0d-896e-e00ad27ef5bd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过给定相关接口的 id，我们就可以获取单个 Collection 的详细信息，对应的接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://api.getpostman.com/collections/{{collectionID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比如这里可以利用 Postman 的 Pre-Script，先获取到指定名称如 PostmanAPI 的 Collection 的 id，再将 id 赋值给环境变量 {{collectionID}}, 代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.getpostman.com/collections?apikey=&amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;postman_api_key&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">collections&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">collections&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">collections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;PostmanAPI&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;collectionID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">collections&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如图
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_222437.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>获取 Environment 信息&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>类似的，我们也可以这样来获取单个的 environment 信息：&lt;/p>
&lt;p>pre-Script 代码如下；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.getpostman.com/environments?apikey=&amp;#39;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;postman_api_key&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">environments&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">environments&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">environments&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">environments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;PostAPI&amp;#34;&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;envID&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">environments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调用截图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_223118.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>运行指定 monitor&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>我们也可以通过接口来立刻执行指定的 Monitor,接口返回执行结果如图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190301_223742.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>除了上面的几个例子，关于Postman API 支持的详细接口说明可以参见 &lt;a class="link" href="https://docs.api.getpostman.com" target="_blank" rel="noopener"
>官方接口说明文档&lt;/a>，同样，目前针对免费账号的接口调用次数限制也是 1000 次。&lt;/p>
&lt;h3 id="结语">结语
&lt;/h3>&lt;p>以上就是对 Postman Cloud 提供的高级功能的介绍。可以看到，通过 Postman Cloud 我们可以借助云端的服务资源完成一些本地 App 不易实现的增值功能，更加方便在团队内进行共享和协作，增强便利性的同时加速我们接口开发或测试进度。Postman 的免费版对于这些增值的服务也是完全支持的，但使用额度上会有一定限制。而这些增值服务，我们其实也可以通过一些开源工具来自行实现，后续有机会再向大家分享。&lt;/p>
&lt;p>本系列关于 Postman 工具的系统介绍到此就结束了。欢迎大家在读者圈或者加入微信群继续共同交流测试技术、分享行业动态，共同成长！&lt;/p>
&lt;hr></description></item><item><title>Postman自动化篇</title><link>https://chengxiaqiucao.github.io/post/003-postman-automation/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/003-postman-automation/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman自动化篇" />&lt;h3 id="前言">前言
&lt;/h3>&lt;p>在前两篇 Chat《玩转Postman：基础篇》《玩转Postman：进阶篇》中，我们介绍了 Postman 作为一款专业接口测试工具在接口测试中的主要用法以及它强大的变量、脚本功能，给测试工作人员完成接口的手工测试带来了极大的便利。其实在自动化测试上，Postman 也能进行良好的支持。本篇我们就一起来了解如何利用 Postman 进行接口自动化测试。&lt;/p>
&lt;h3 id="自动化测试概述">自动化测试概述
&lt;/h3>&lt;p>在继续本篇内容前，我们还是首先温习一下和自动化测试相关的一些基本概念。
百度百科中给出的定义：&lt;/p>
&lt;blockquote>
&lt;p>自动化测试就是将人为驱动的测试行为转化为通过机器来执行的一种过程。&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>人为驱动的测试行为&lt;/code>，从&lt;code>广义&lt;/code>上理解可以包含从测试需求分析到测试设计、测试执行以及测试总结的全过程，而&lt;code>狭义&lt;/code>的理解一般就是将测试设计通过测试代码来体现并通过代码的执行来自动地完成测试的执行并输出执行结果。
现在我们谈到自动化测试，更多还是在狭义层面，通过自动化测试来提升测试执行效率，通过快速得到测试用例的执行结果来尽快得到被测产品状态，更多是起到&lt;code>质量指示器&lt;/code>的作用。&lt;/p>
&lt;p>在&lt;a class="link" href="https://gitbook.cn/gitchat/activity/5c373c316cf27775f39ee310" target="_blank" rel="noopener"
>《玩转Postman：基础篇》&lt;/a>中我们介绍了经典的自动化测试金字塔：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_161451.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>这里根据不同测试类型对软件测试进行了分层：&lt;/p>
&lt;ul>
&lt;li>底层是针对的代码层面的单元测试。&lt;/li>
&lt;li>中间层是 service 服务测试，现代软件的应用服务基本都是以接口 API 形式来体现，服务测试也可以理解就是接口 API 测试。&lt;/li>
&lt;li>上层则是针对用户界面的测试。&lt;/li>
&lt;/ul>
&lt;p>这个模型体现在自动化测试中，表示越底层的自动化测试所占比重应该越大，这样才有更好的投入产出比。而中间这一层的 Service 测试它既不像 UI 层那样维护成本巨大，很难跟得上快速迭代的要求，同时它又比单元测试更能在业务逻辑上进行质量验证。所以现在一般认为 API 测试是自动化测试实施上的优先选择。&lt;/p>
&lt;p>借助一些自动化测试工具或者自动化测试框架的帮助，我们可以在测试执行的用例组织、执行策略、测试数据管理、结果报告等方面更加方便地进行自动化测试的实施。下面我们就来看看 Postman 在自动化测试上提供的支持。&lt;/p>
&lt;h3 id="postman的批量执行工具-runner">Postman的批量执行工具 Runner
&lt;/h3>&lt;p>Runner 是 Postman 中用于批量执行接口用例的模块，我们可以通过 Runner 模块来完成已编写接口用例的自动化测试执行。&lt;/p>
&lt;h4 id="runner-功能介绍">Runner 功能介绍
&lt;/h4>&lt;p>在 Postman 主界面左上角，点击 Runner 按钮，即可打开 Runner 模块界面。如下图&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190210_213122.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>相关设置的作用如图上标注。选中待执行的 Collection 或 Folder 后，点击运行按钮，会开启如下运行页面，并显示执行结果。相关界面元素含义如图上标注&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190210_213740.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="接口的测试数据驱动">接口的测试数据驱动
&lt;/h4>&lt;p>Postman 通过 引入 data 变量来支持 Runner 运行时的测试数据加载和数据驱动。在上一篇 Chat&lt;a class="link" href="https://gitbook.cn/gitchat/activity/5c52a4f17ee79c049a27a6d7" target="_blank" rel="noopener"
>《玩转Postman：进阶篇》&lt;/a>中，我们简单介绍了 data 变量的使用方法。这里我们再结合一个 GitHub API 的例子回顾一下：&lt;/p>
&lt;p>&lt;em>数据文件中给出一组 Repositories 的信息（测试数据），我们运行一个和这组数据相关的接口：获取 repo、获取 repo 的 contributor、获取 repo 的 tag、获取 repo 的 topic，并分别进行相关校验&lt;/em>&lt;/p>
&lt;p>Postman 支持两种外部数据类型，json 格式或者 txt/csv 格式。这里我们假设将 repositories 数据以 json 格式保存在数据文件中，给出如下一些主流的开源自动化测试框架&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;junit-team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;junit5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;robotframework&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;robotframework&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;appium&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;appium&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SeleniumHQ&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;selenium&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Test 脚本中编写校验，在上一讲中我们提到一个技巧，对于重复使用的脚本我们可以把它们保存到 global 变量中，需要时执行这个变量内容即可。本例中我们需要执行的几个接口，都会用到是否正确返回成功响应的校验。
所以可以设置一个 global 变量 checkOK。变量值即需要执行的校验脚本&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_203908.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>不同的接口中均包含了相应 repo 信息作为路径参数，然后我们再添加对应的校验&lt;/p>
&lt;ul>
&lt;li>获取 repo 接口&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//判断是否存在 stargazers_count 字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;存在 Star 数据&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jsonBody&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;stargazers_count&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//获取 star 数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">stargazers_count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将Star数显示到Test Result中，并判断是否 超过 1000 Star
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;当前repo【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;】star数【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">star&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;】超 1000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">star&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>获取 Contributor 接口（因接口默认返回数量为 30， 这里用 &lt;code>per_page&lt;/code> 参数指定每页返回数量 100）&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo/contributors?per_page=100&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//遍历当前返回数组长度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">contributor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">contributor&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//判断贡献者是否超过5人
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;贡献者数量【&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">contributor&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;】超过 5 人&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">contributor&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>获取 Tag 接口（因接口默认返回数量为 30， 这里用 &lt;code>per_page&lt;/code> 参数指定每页返回数量 100）&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo/tags?per_page=100&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//遍历当前返回数组长度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">tag&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//判断标签是否超过5个
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;tag数量【&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">tag&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;】超过 5 个&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tag&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>获取 Topic 接口&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/repos/:owner/:repo/topics&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;checkOK&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//判断返回Topic names，并显示到Test Result
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;当前repo【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">variables&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;】Topic：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">names&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jsonBody&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;names&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Postman 中设置 Runner 配置并运行&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_213001.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>结果如图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_212907.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>从结果中我们可以看到，所有定义在 GithubRepos.json 这个文件中的 Repo 信息均按照上述流程进行了正确的执行。&lt;/p>
&lt;h4 id="接口的流程控制">接口的流程控制
&lt;/h4>&lt;p>除了这样按顺序的执行，在我们的实际测试工作中，很多情况下还会希望根据接口测试的执行结果来决定后续执行的测试用例，这就是接口的流程控制功能。Postman 的 Runner 模块也可以支持这种流程控制，它是借助 Postman 的脚本封装方法 &lt;code>postman.setNextRequest()&lt;/code>来实现的。&lt;/p>
&lt;p>比如上面介绍的数据迭代过程，在获取 repo 后，如果成功响应，我们继续执行 GetTag 接口，否则退出。
我们修改 GetRepo 这个接口的 Test 脚本如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">postman&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setNextRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;GetTag&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">postman&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setNextRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再修改测试数据，给出一个不存在的 Repo 信息模拟匹配不到返回错误的情况&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;junit-team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;junit5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;chengxiaqiucao&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;errorRepo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再次重新执行，我们可以看到：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>GetRepo这个接口，返回正常时，跳转到 GetTag 这个接口执行，这里跳过了按正常顺序应该执行的 GetContritutor;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而当执行到错误的 Repo, 得到 404 Not Found 响应，此时 Runner 中断了执行&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>执行结果如图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190215_215021.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;em>注意：&lt;/em>&lt;/p>
&lt;p>&lt;em>无论 postman.setNextRequest() 方法在脚本的什么位置，它总是在脚本的最后执行跳转操作&lt;/em>&lt;/p>
&lt;p>&lt;em>postman.setNextRequest() 方法有自己的作用域，当选择 collection 执行时，所选择的 request需要在当前collection中，当选择 Folder 执行时，所选的 request 需要在当前 folder中&lt;/em>&lt;/p>
&lt;h3 id="命令行自动化工具-newman">命令行自动化工具 NewMan
&lt;/h3>&lt;p>Newman 是 Postman 官方提供的专门用于自动化测试执行的命令行工具，使 Postman 具备了支持自动化测试扩展以及和第三方系统集成调度的能力。&lt;/p>
&lt;h4 id="newman-的安装">NewMan 的安装
&lt;/h4>&lt;p>因为 Newman 基于 Node.js，所以首先要保证机器上具备 Node.js 环境，此处不再另外介绍 Node.js 的安装。
Node 环境具备的话，运行如下命令能正确显示版本号即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">c:\&amp;gt;node --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">v6.9.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装 Newman 使用如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; npm i newman -g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成后检查版本，能正确显示即安装成功&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">c:\&amp;gt;newman -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4.3.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="newman-功能介绍">NewMan 功能介绍
&lt;/h4>&lt;p>Newman 命令行工具的主要命令是 newman run，命令格式如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; run [options] &amp;lt;collection&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 Collection 可以是从 Postman 中导出的 Collection 文件，也可以是通过 Postman 账号 share 出来的在线 Collection URL 地址。&lt;/p>
&lt;p>Collection 从 Postman 中导出方法如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190216_193545.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>此时会提示选择版本，建议选择推荐的Collection 2.1 版本。导出后会保存为一个 json 文件。&lt;/p>
&lt;p>下面介绍几个 newman 运行时常用的参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-e, &amp;ndash;environment &amp;lt;path&amp;gt;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>指定 environment 环境变量，这里环境变量需要导出为文件( json 格式)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-g, &amp;ndash;globals &amp;lt;path&amp;gt;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>指定 global 环境变量，这里环境变量需要导出为文件( json 格式)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-d, &amp;ndash;iteration-data &amp;lt;path&amp;gt;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>指定运行 Collection 时使用的 data file 文件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-n, &amp;ndash;iteration-count &amp;lt;n&amp;gt;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>指定 Collection run 时的迭代次数 n&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-r, &amp;ndash;reporters [reporters]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>指定运行完成后的结果报告类型，除默认命令行格式 cli外, 还支持 json, junit, progress 以及 emojitrain几种类型。&lt;/p>
&lt;p>如下是 newman 运行上文 Runner 中的 Collection 的输出示例：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/newman.gif"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>除了 newman 默认支持的几种报告格式， 我们还可以安装一个 html 格式的报告插件，安装命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; npm install -g newman-reporter-html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如上例中的 newman 执行命令，此时带上 &amp;ndash;reporter html 参数，即可在当前目录的 newman 目录下生成一个 html 格式的报告&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt;newman run GitHub.postman_collection.json -e GitChat.postman_environment.json --reporters html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>报告形如：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190216_202032.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>我们还可以在这个命令基础上增加&lt;code>--reporter-html-export&lt;/code> 参数指定生成的 html 文件路径，命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">newman&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="n">GitHub&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">postman_collection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="n">GitChat&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">postman_environment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">reporters&lt;/span> &lt;span class="n">html&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">reporter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">html&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">export&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>\&lt;span class="n">newman&lt;/span>\&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样我们就可以在指定目录下得到输出的 HTML 结果报告了。&lt;/p>
&lt;h3 id="和持续集成工具-jenkins-的集成">和持续集成工具 Jenkins 的集成
&lt;/h3>&lt;p>Jenkins 是目前最为流行的持续集成工具，在研发流程，特别是现今推崇 DevOps 的研发环境下，通过 Jenkins 将自动化测试纳入持续集成管道是其中的一项核心实践。下面我们就来具体看下如何结合 Jenkins 和 Newman 工具来完成持续集成中自动化测试任务的创建和调度执行。&lt;/p>
&lt;h4 id="jenkins-的安装">Jenkins 的安装
&lt;/h4>&lt;p>首先还是看下如何安装 Jenkins。企业中一般由研发配置或支撑部门来维护 Jenkins。这里我们以 window 版本为例看下安装过程&lt;/p>
&lt;ul>
&lt;li>首先来到 Jenkins 的官网 &lt;a class="link" href="https://jenkins.io/" target="_blank" rel="noopener"
>https://jenkins.io/&lt;/a> ，进入 download界面，选择长期支持版本，根据操作系统类型选择对应安装包，这里选择 windows 版本&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_215043.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>完成下载后的到一个 zip 文件，解压后执行 msi 安装文件，一路默认安装即可&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_215516.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>安装完成后，我们可以来到 windows 系统的服务管理器中，可以看到已经自动创建了一个名为 Jenkins 的服务，会随系统自动运行，我们也可以根据需要改成手动。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_215830.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>此时访问 http://localhost:8080，会等待 Jenkins 完成系统部署和初始化&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_220103.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>初始化完成，会要求输入初始密码，可以根据提示从初始密码文件中获取&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_220912.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>输入密码后需要进行插件的安装，一般选择推荐配置即可&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_221013.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>选择插件后，等待相关插件下载并完成安装&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_221310.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>完成后设置用户名和账号&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_221728.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>继续下一步，设置访问 URL 和端口，此处使用默认地址&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_221808.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>重启服务后再访问 Jenkins 服务地址，登录后进入主界面，至此安装完成。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_222312.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="jenkins-配置-newman-执行自动化">Jenkins 配置 Newman 执行自动化
&lt;/h4>&lt;p>进入 Jenkins 主页后，我们选择新建 Job，这里选择&lt;code>构建自由风格项目&lt;/code>，创建一个新的持续集成任务&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190218_222627.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>点击 OK 后会进入配置页面，来到 Build 配置，选择&lt;code>执行Windows批处理命令&lt;/code>, 如果是部署在其他操作系统如 Linux 系统，可以相应的选择&lt;code>执行shell&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_192925.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>输入前面我们执行自动化的 newman 命令，注意，因为 Jenkins 调度会从 Jenkins 工作空间目录执行，所以这里指定的 Collection 和 environment 文件需要给出绝对路径&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_193429.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>保存后即完成了一个最基本的自动化测试执行 Job 的创建。此时点击右侧的&lt;code>立即构建&lt;/code>可立刻触发任务的执行&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_193950.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>点击构建编号(此处为 &lt;code>#1&lt;/code>)，进入构建详情，通过打开右侧&lt;code>Console Output&lt;/code>可以查看具体执行的控制台输出&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_194726.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;strong>Tips 1：&lt;/strong> 在本例中，我们可以看到出现了&lt;code>newman 不是内部或外部命令&lt;/code>的错误，这是因为 NewMan 安装后，默认是将执行路径添加在当前用户的 Path 用户环境变量下，而通过 Jenkins 执行，没有路径访问权限，所以我们需要将 Newman 所在 npm 目录添加到系统环境变量 Path 中。如图&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_195441.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>修改变量后，通过 &lt;code>http://127.0.0.1:8080/restart&lt;/code> 地址重启 Jenkins 使变量生效，再次执行构建：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_200635.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>可以看到已经成功调度了自动化测试任务，但是控制台输出中存在乱码。如果你也出现这个问题，可按以下方法解决&lt;/p>
&lt;p>&lt;strong>Tips 2:&lt;/strong> 此处乱码是因为 Jenkins 使用的 jvm 环境未设置语言支持。我们同样方法添加如下 windows 系统环境变量，设置后重启 Jenkins 服务，再次执行即可正常看到执行结果了&lt;/p>
&lt;blockquote>
&lt;p>JAVA_TOOL_OPTIONS = -Dfile.encoding=UTF8&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_202344.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="生成测试报告">生成测试报告
&lt;/h4>&lt;p>要在 Jenkins 中展示测试报告，首先我们要生成测试报告。根据上面 NewMan 执行参数的介绍，可以添加相关报告参数&lt;code>--reporters junit,html --reporter-html-export .\newman\result.html&lt;/code>来生成。这里同时生成 junit 和 html 两种格式的报告到当前工作目录的 newman 目录下。完整命令如下&lt;/p>
&lt;blockquote>
&lt;p>newman run c:\GitHub.postman_collection.json -e c:\GitChat.postman_environment.json
&amp;ndash;reporters junit,html &amp;ndash;reporter-html-export .\newman\result.html&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_211051.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>而要在 Jenkins 中展示 HTML 报告，我们需要添加一个展示插件， 来到 &lt;code>Jenkins &amp;gt; 系统管理 &amp;gt; 插件管理&lt;/code> 界面下，在 Availble 中查询并安装 &lt;code>HTML Publisher&lt;/code>插件&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_203802.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>重启 Jenkins 后，我们就可以添加相关报告展示配置了。还是来到 &lt;code>Newman_Test&lt;/code>这个任务下，配置&lt;code>Post-build Actions&lt;/code>,分别添加 Junit 结果报告和 HTML 报告，如下图：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_210848.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_211026.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>完成报告配置后，我们再运行几次任务，这是在任务界面上就可以看到相关测试结果的报告链接以及执行趋势了（执行趋势为 Junit 报告产生）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_211300.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如图是 JUnit 报告:
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_211316.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如图是 HTML 报告；
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_211423.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="配置任务定时执行">配置任务定时执行
&lt;/h4>&lt;p>在持续集成中，自动化测试的自动触发是非常重要的，这是在任务配置的 &lt;code>Build Triggers&lt;/code> 中进行配置的，如图是配置定时触发的方法。这里的触发计划符合 Linux &lt;code>Crontab&lt;/code> 的语法。具体语法可以参照 Jenkins 给出的语法帮助&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190220_212943.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="自动发送测试结果邮件">自动发送测试结果邮件
&lt;/h4>&lt;p>同样，在持续集成中，及时将测试结果通知到相关人员非常重要。这里需要安装 Jenkins 的邮件通知扩展插件：&lt;code>Email Extension Plugin&lt;/code>，同样参照上文插件安装的方法在插件管理界面中完成安装。&lt;/p>
&lt;p>要使用邮件通知，需要接收邮箱支持 smtp 服务。以 QQ 邮箱为例，在邮箱账号的设置界面中，开启 SMTP 服务，并生成对应的授权码&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_220220.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>回到 Jenkins，安装完插件以后，需要对插件进行配置。来到系统管理 &amp;gt; 系统设置中，首先设置管理员邮箱地址。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_215412.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在 &lt;code>Extend E-Mail Notification&lt;/code> 配置中，如图进行配置，注意点开高级后，这里的用户密码是在 QQ 邮箱中生成的授权码&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_215856.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>同样 &lt;code>E-mail Notification&lt;/code> 配置中进行类似配置。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_220130.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>完成系统配置后，来到任务配置界面。在配置的最后添加 &lt;code>Post build Action&lt;/code>，选择 &lt;code>Editable Email Notification&lt;/code>，参见如图进行设置。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_223117.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_223508.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>保存后，触发构建。可以从 console output 中看到邮件是否有成功发送。发送后进入邮箱即可看到已经收到了对应的结果通知邮件。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190221_222143.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="附件结果邮件模板">附件：结果邮件模板
&lt;/h4>&lt;p>附上这里使用的邮件模板文件，邮件模板中可以使用 Jenkins 的一些默认变量，如：项目名称 &lt;strong>$PROJECT_NAME&lt;/strong>， 构建编号 &lt;strong>$BUILD_NUMBER&lt;/strong>，构建状态 &lt;strong>$BUILD_STATUS&lt;/strong> 等，大家可以参照模板内容对照看一下，也可以参考 Jenkins 官方给出的一些&lt;a class="link" href="https://wiki.jenkins.io/display/JENKINS/Building&amp;#43;a&amp;#43;software&amp;#43;project#Buildingasoftwareproject-belowJenkinsSetEnvironmentVariables" target="_blank" rel="noopener"
>说明&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-HTML" data-lang="HTML">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #5e9ca0; text-align: center;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>本邮件是 NewMan 自动化测试邮件，请勿回复！！！&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">table&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;editorDemoTable&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;height: 273px;&amp;#34;&lt;/span> &lt;span class="na">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;430&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;background-color: #3498db; text-align: center;&amp;#34;&lt;/span> &lt;span class="na">colspan&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #000000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>NewMan 自动化测试执行报告&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">thead&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目名称：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>$PROJECT_NAME&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>构建编号：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>$BUILD_NUMBER&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>构建状态：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>$BUILD_STATUS&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>触发原因：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>${CAUSE}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>构建日志地址：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="ni">&amp;amp;nbsp;&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span> &lt;span class="na">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;构建日志&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;${BUILD_URL}console&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>${BUILD_URL}console&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>构建地址：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="ni">&amp;amp;nbsp;&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span> &lt;span class="na">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;构建地址&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;$BUILD_URL&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>$BUILD_URL&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>测试报告地址：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span> &lt;span class="na">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;NewMan测试报告地址&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;${BUILD_URL}HTML_20Report/&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>${BUILD_URL}HTML_20Report/&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #808000;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Junit测试结果地址：&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span> &lt;span class="na">nowrap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;nowrap&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;border-color: gray;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="ni">&amp;amp;nbsp;&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;color: #00ccff;&amp;#34;&lt;/span> &lt;span class="na">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;测试结果地址&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;${BUILD_URL}testReport/&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>${BUILD_URL}testReport/&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tr&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">tbody&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">table&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="结语及预告">结语及预告
&lt;/h3>&lt;p>以上就是本篇 Postman 自动化测试相关内容的介绍，再简单总结下，在本篇 Chat 中，我们学习了：&lt;/p>
&lt;ul>
&lt;li>通过外部数据文件结合 Runner 模块完成数据驱动的自动化测试执行&lt;/li>
&lt;li>通过 Postman 的内建方法 &lt;strong>postman.setNextRequest()&lt;/strong> 来控制接口的流程走向&lt;/li>
&lt;li>命令行工具 Newman 的安装和使用实例&lt;/li>
&lt;li>持续集成工具 Jenkins 的安装配置以及如何与 newman 结合完成自动化测试脚本的触发，以及结果报告生成和通过邮件模板进行邮件通知。&lt;/li>
&lt;/ul>
&lt;p>通过本系列这三篇介绍，我们学习了 Postman 作为一个本地运行的接口测试工具的详细使用方法。但我们还知道使用 Postman 前还注册了一个官网账号，这个账号其实就关联了 Postman 的云端服务。而 Postman Cloud 向用户提供了很多高级增值功能，目前普通注册用户也能在一定限额下免费使用，完全可满足一般的测试、学习需要。在下一篇中我们就和大家再一起来学习 Postman 提供的云端增值高级功能。主要有：&lt;/p>
&lt;ul>
&lt;li>Postman 的在线文档功能&lt;/li>
&lt;li>Postman 的 Mock 服务&lt;/li>
&lt;li>Postman 的监控服务&lt;/li>
&lt;li>Postman 的开放 API&lt;/li>
&lt;/ul>
&lt;p>PS：欢迎大家到读者圈中共同讨论，携手进步。&lt;/p></description></item><item><title>Postman进阶篇</title><link>https://chengxiaqiucao.github.io/post/002-postman-middle/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/002-postman-middle/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman进阶篇" />&lt;h3 id="前言">前言
&lt;/h3>&lt;p>在上一篇 《玩转Postman：基础篇》中，我们介绍了 Postman 工具的主要功能和一些基本用法。 其实 Postman 作为目前使用最为广泛的接口测试工具，除了能提供交互良好的 UI 界面以及完成基本的http协议的鉴权、header、body 等的设置以及请求提交和响应解析这些基本功能外，它还提供了非常丰富的测试辅助能力。本篇我们就来为大家详细介绍 postman 的脚本进阶功能。&lt;/p>
&lt;h3 id="postman的变量">Postman的变量
&lt;/h3>&lt;p>在接口测试工具中，变量对于接口消息的重用和灵活匹配意义重大，作为一个专业的接口测试工具，对变量的支持是必须具备的。&lt;/p>
&lt;p>而 Postman 就提供了丰富的变量支持，在 Postman 中定义了5种不同作用范围的变量类型，在变量的使用和管理上更加地灵活和有针对性。下图是官方给出的不同类型变量的作用范围&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190113_142618.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>从外向内作用域逐渐变小，同时生效优先级越高，也就是当存在同一变量名时，内层变量类型的变量会优先生效。下面我们结合实例来具体说明一下这些变量类型的作用范围：&lt;/p>
&lt;h4 id="global-变量">global 变量
&lt;/h4>&lt;p>global 变量即全局变量，是作用范围最大的一种变量类型。设置好 global 变量后，可以在 Postman 工具中所有可以使用变量的地方生效。&lt;/p>
&lt;p>下面在 Postman 工具中看一下 global 变量的设置：
在工具右上角打开环境管理界面：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_223500.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>选择 global 变量管理：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_223538.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>添加 Global 变量：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_102808.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>此例中，我们设置一个 global 变量 name，取值为 1。
在 Postman 中，使用双花括号表示变量，形如 &lt;strong>{{ variable }}&lt;/strong>。以 Github API 为例，比如我们获取用户名为变量 name 取值的用户信息。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://api.github.com/users/%7b%7bname%7d%7d" target="_blank" rel="noopener"
>https://api.github.com/users/{{name}}&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>url中输入双花括号后会自动联想出我们需要的变量类型。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_102954.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>发送请求后，检查 Postman 响应区，可以看到我们获取了 username 为 1 的用户信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;login&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1825798&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;node_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;MDQ6VXNlcjE4MjU3OTg=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;avatar_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://avatars2.githubusercontent.com/u/1825798?v=4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gravatar_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;html_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://github.com/1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;followers_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/followers&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;following_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/following{/other_user}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gists_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/gists{/gist_id}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;starred_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/starred{/owner}{/repo}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;subscriptions_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/subscriptions&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;organizations_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/orgs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;repos_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/repos&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;events_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/events{/privacy}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;received_events_url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/users/1/received_events&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;User&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;site_admin&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Michael&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;company&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;blog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;location&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;San Francisco, CA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mbalaban1989@gmail.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;hireable&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;bio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;public_repos&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;public_gists&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;followers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;following&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;created_at&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2012-06-07T06:10:07Z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;updated_at&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2019-01-17T08:29:21Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="collection-与-collection-变量">Collection 与 Collection 变量
&lt;/h4>&lt;p>再来看另一个变量类型 Collection 变量。首先了解下 Collection 的概念。Collection 是 Postman 中组织接口的一个集合单位，Postman 中也主要以 Collection 为配置存储的一个基本单位。我们可以把 Collection 看作软件测试中测试用例集的概念。&lt;/p>
&lt;p>Collection 变量就是作用域在 Collection 上的变量类型，这种变量只会在设置变量的 Collection 上生效。
设置方法：选择 Edit Collection
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_223837.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在 variable 页中添加 Collection 变量，本例中我们在 Github 这个 Collection 添加一个同样命名为name 的变量
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_104130.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>将上例中获取用户的接口保存到 Github 这个 Collection 中（我们可以在 Collection 下再创建一层子目录，注意目录是不支持设置目录级别的变量的，Collection 变量在子目录下的接口依然会生效），我们再提交一下这个接口
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_104718.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>此时可以看到，我们设置的 Collection 变量已经生效，获取到的是 name 为 2 的用户信息。注意此时我们还设置了一个 name 为 1 的 global 变量，可以看到 Collection 变量的优先级高于 global变量。&lt;/p>
&lt;h4 id="环境和-environment-变量">环境和 environment 变量
&lt;/h4>&lt;p>环境是 Postman 中的一个非常有用的概念。做过软件测试的同学都了解，我们在实际工作中会接触到不同的软件环境。对应于我们被测试系统的不同运行场景。比如一般互联网企业在研发中会存在以下的一些不同环境：&lt;/p>
&lt;ul>
&lt;li>开发环境&lt;/li>
&lt;li>集成环境（联调环境）&lt;/li>
&lt;li>系统测试环境&lt;/li>
&lt;li>试生产环境&lt;/li>
&lt;li>生产环境&lt;/li>
&lt;li>性能测试环境&lt;/li>
&lt;li>安全测试环境&lt;/li>
&lt;/ul>
&lt;p>不同的环境在接入途径、网络拓扑、访问权限以及硬件配置上往往都有较大区别。Postman 中引入 Environment 这个概念，通过 Environment 变量来管理一组环境配置，便于我们来方便地在不同环境间进行切换。&lt;/p>
&lt;p>在环境管理界面中，可以添加环境，以及该环境对应的相关变量。本例我们添加一个 GitChat 环境，并且设置一个 name = 3 的环境变量。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_110446.png"
loading="lazy"
alt="image"
>
设置完环境后，我们再刚才的获取用户接口界面上，选择对应的 GitChat 环境，再重新提交请求。可以看到环境变量已经生效，获取了name为 3 的用户信息，同样可以看到，此时环境变量的优先级比 Collection 又要更高。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190120_110733.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="data-变量">data 变量
&lt;/h4>&lt;p>另一种 Postman 中的变量类型是 data 变量，data 变量只能在 Postman Runner 中使用，也就是会在 Runner 运行时才生效，data 变量可以提供多组测试数据供接口测试时调用，为 Postman 提供接口批量数据验证能力。要使用 data 变量，打开 Postman Runner， 如下图，选择 data 变量定义文件加载 data 变量文件。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_232538.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>data 变量支持json或者txt/csv数据格式，json 定义格式如下，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;11&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;user1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;user2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;13&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;user3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>txt/csv 格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">id,name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11,user1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12,user2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13,user3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 runner 界面上可以通过 preview 查看运行时不同迭代所加载的变量取值，如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_232629.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如本例，点击 Run variables 会执行 3 次不同的迭代，通过 Postman Console查看运行日志，可以看到每次均使用了 data 变量中定义的对应变量值。 同样，虽然我们选择 environment，但可以看到 data 变量在 runner 运行时优先级更高。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_233803.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="local-变量">local 变量
&lt;/h4>&lt;p>Local 变量在 Postman 官方文档中并没有给出明确的定义。一般可以理解成 Postman 脚本中支持的 JS 变量，它的作用域只会在脚本中生效， 此时 Postman 界面引用的 &lt;strong>{{variable}}&lt;/strong> 并不会取到 local 变量值。
脚本中直接引用的变量名会取local变量，其他数据类型则通过 Postman 对应的取值语句来获取。&lt;/p>
&lt;p>比如我们在 Pre-Request 中定义以下脚本并执行：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_234936.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在 Console 中查看结果如下，可以比较清楚地看到每次执行在预执行脚本中不同变量的当前取值
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_235036.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>通过以上实例，我们可以看到，Postman 针对不同的接口作用范围支持了丰富的变量类型，使我们在应用变量功能的时候可以更加的灵活&lt;/p>
&lt;h3 id="postman-脚本及其执行顺序">Postman 脚本及其执行顺序
&lt;/h3>&lt;p>除了支持丰富的变量功能，Postman 还支持强大的脚本功能，测试人员在进行接口测试时，可以通过脚本来动态地对接口测试逻辑进行定制，再结合变量，就可以实现一些复杂的场景。&lt;/p>
&lt;p>Postman 的脚本功能是基于 Node.js 语言，Node.js 成熟的语法和丰富的扩展库给 Postman 提供了巨大的灵活性和强力的扩展能力。&lt;/p>
&lt;p>在 Postman 中，测试脚本 可以在接口发送之前和收到响应之后执行，分别对应 Pre-request Script 和 Test Script，如下图：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_235928.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>比如我们前文介绍变量时的实例，其实就是一个 pre-request 脚本
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190127_000131.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>除了接口本身可以设置 pre-request 和 Test Script，我们在编辑 Collection 和 Collection 下的folder时，可以看到 Collection 和 Folder 也都支持设置 pre-request 和 test 脚本。 那这几种脚本的执行优先级或者说顺序是如何的呢？ 下图就是这几个不同位置脚本的调用执行顺序：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190126_235847.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>对TestNG 或者 Junit 等测试框架有所了解的同学，应该知道这些测试框架也有类似的运行时概念，也就是 Setup 和 teardown 方法，而且也有 case、class、suite 这样的层次。不过这些不同层次的方法都是成对出现的，即 case 的 setup 和 teardown 在 case 执行前和结束后会执行。 而 Postman 的 Script 执行顺序和这个稍有差别，是按层级顺序排列，而不是成对出现的。大家参照图片注意理解下差异。&lt;/p>
&lt;p>大家也可以自己验证下这个执行顺序，分别在Collection、folder 以及 folder 下的请求中定义相关脚本，如：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190129_205434.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>执行，查看 console 输出：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190129_205811.png"
loading="lazy"
alt="image"
>
可见 Postman 对不同脚本的执行顺序和前文所述一致。&lt;/p>
&lt;h3 id="postman脚本-prerequest">Postman脚本-PreRequest
&lt;/h3>&lt;p>Pre-request 脚本，顾名思义，其实就是在接口消息发送前，可以进行一些预处理动作，类似于 Junit 或 TestNG 等测试框架中的 Setup 方法。 利用 Pre-Script 脚本，我们就可以在发送接口请求前来完成一些需要动态处理的动作，比如调整变量取值，或者对一些动态参数进行一些特殊处理。&lt;/p>
&lt;p>下面我们就以 GitHub API 中的一个实例来看下 Pre-Script 脚本的主要作用。（关于GitHub API 的一些具体说明，大家可以先看下我在上一篇 Chat &lt;a class="link" href="https://gitbook.cn/gitchat/activity/5c373c316cf27775f39ee310" target="_blank" rel="noopener"
>《玩转Postman：基础篇》&lt;/a>中的介绍）&lt;/p>
&lt;p>GitHub API 中一个经常使用到的接口是查询接口&lt;/p>
&lt;p>根据 GitHub API 官网的定义说明，查询 repositories 的接口定义如下：&lt;/p>
&lt;blockquote>
&lt;p>GET /search/repositories&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190207_115633.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>其中参数 q 是主要的查询参数，具体定义参见
&lt;a class="link" href="https://help.github.com/articles/searching-for-repositories/" target="_blank" rel="noopener"
>https://help.github.com/articles/searching-for-repositories/&lt;/a>&lt;/p>
&lt;p>比如我们要查询包含在指定日期 2018-11-11 后创建且包含关键字 automation 的 repository 信息。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190207_120638.png"
loading="lazy"
alt="image"
>
可知 GitHub 上存在这样的 repo 数量有七千多个。&lt;/p>
&lt;p>在这个例子中，因为查询条件包含一个日期参数，而实际测试工作场景中，很多时候我们希望日期是动态生成的，比如根据当前日期取一年以前作为查询参数值，这时我们就需要对参数进行一些预处理，这就是 Pre-Script 的用武之地了。&lt;/p>
&lt;p>这时我们可以首先设置一个环境变量 created，再在 pre-script 脚本中动态预处理这个日期，来完成日期动态设置的目的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">getCreated&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">获取&amp;#34;YYYY-MM-DD&amp;#34;格式的日期
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">第一个入参为日期对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">第二个入参为年份偏移量，负数为向前偏移
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getCreated&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">yearOffset&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">seperator1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">yearOffset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">month&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getMonth&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">day&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">month&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">month&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">month&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">month&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">day&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">day&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">day&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">day&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">currentDate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">year&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">seperator1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">month&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">seperator1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">day&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">currentDate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">currentDate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Postman中执行如图，获取当前日期一年以来创建的 repositories 信息。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190207_145753.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在 Pre-Script中，主要是围绕 Postman 的变量来进行预处理，所以主要使用的就是 Postman 的变量域的一些封装方法。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.globals.has(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>是否存在某全局变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.globals.get(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>获取全局变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.globals.set(variableName:String, variableValue:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>设置全局变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.globals.unset(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>取消当前全局变量设置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.globals.clear()&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>清空全局变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.environment.has(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>是否存在某环境变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.environment.get(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>获取环境变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.environment.set(variableName:String, variableValue:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>设置环境变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.environment.unset(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>取消当前环境变量设置&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.environment.clear()&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>清空环境变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.variables.get(variableName:String)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>根据变量名获取变量&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.sendRequest()&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>发送请求&lt;/p>
&lt;h3 id="postman脚本-test脚本">Postman脚本-Test脚本
&lt;/h3>&lt;p>Postman 的 Test 脚本是 Postman 另一个值得称道的特色功能，在 Test 脚本中，Postman 封装了很多丰富的校验逻辑，并结合 JS 脚本本身语言的灵活性，给测试人员对接口的判断、校验和响应处理带来极大的便利性。&lt;/p>
&lt;p>下面我们重点介绍下 Test 脚本中封装一些主要的校验方法。&lt;/p>
&lt;h4 id="判断接口响应状态码">判断接口响应状态码
&lt;/h4>&lt;p>对接口响应状态码的校验，是接口测试校验的常用手段。关于状态码的详细说明也可参见我的上一篇 Chat &lt;a class="link" href="https://gitbook.cn/gitchat/activity/5c373c316cf27775f39ee310" target="_blank" rel="noopener"
>《玩转Postman：基础篇》&lt;/a> ， 下面看一个 Postman 中进行接口校验码校验的代码:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;判断返回成功状态码&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者也可以使用第三方校验库 chaijs 的expect 方法来进行校验。 Chaijs 对常用的校验方式按照行为驱动开发（BDD）的描述方式进行了封装，使校验判断的代码编写方便了很多。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;expect方法判断返回成功&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再或者我们还可以直接使用 Postman 对返回状态码的封装方法来进行判断&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Postman封装方法判断返回成功&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">be&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Postman 中直接封装了常见的返回状态校验方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.info&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验 1XX 信息状态码&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.success&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验 2XX 成功状态码&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.redirection&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验 3XX 重定向状态码&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.clientError&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验 4XX 客户端错误状态码&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.serverError&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验 5XX 服务端错误状态码&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.error&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验 4XX 或 5XX 错误状态码&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.ok&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>检验 200 的 OK 返回&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.accepted&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验状态码 202 的接受返回&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.badRequest&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验状态码 400 的请求消息错误&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.unauthorized&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验状态码 401 的认证错误&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.forbidden&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验状态码 403 的访问受限&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.notFound&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验状态码 404 的资源未见错误&lt;/p>
&lt;ul>
&lt;li>&lt;strong>pm.response.to.be.rateLimited&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>校验状态码 429 的访问频次限制错误&lt;/p>
&lt;h4 id="校验响应时间">校验响应时间
&lt;/h4>&lt;p>除了对于返回码的校验，我们还会经常校验的一个响应指标是响应时间。Postman 对于响应时间的校验也非常简单&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;响应时间小于1s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">responseTime&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">be&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">below&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="校验消息内容">校验消息内容
&lt;/h4>&lt;p>对接口返回内容的校验是我们判断业务逻辑正确性与否的必要手段。响应的消息头或者消息体内容我们可以通过 &lt;code>pm.response.header&lt;/code> 或者 &lt;code>pm.response.text&lt;/code> 、 &lt;code>pm.response.json&lt;/code> 来获取。在相应的校验代码中我们就可以根据获取到的内容来进一步判断响应的正确性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;校验消息头Content-Type&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postman&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getResponseHeader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">include&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;application/json&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;校验消息体返回数量大于1000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">jsonData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jsonData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">total_count&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Postman 中执行以上校验，可以在 Response 的 Test Results 中看到校验结果
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_170618.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="postman脚本-接口的关联">Postman脚本-接口的关联
&lt;/h3>&lt;p>在接口测试中，经常出现的一种情况是：我们需要从另一个接口的响应中获取某些值作为当前测试接口的输入来使用。结合 Postman 的 Pre-Script 脚本和 Test 脚本以及变量功能，我们可以方便地完成内容获取和参数传递的场景。&lt;/p>
&lt;p>以下面的场景为例：&lt;/p>
&lt;blockquote>
&lt;p>从 Junit5 这个 repo 的接口信息中，获取该 repo 的创建时间，再查询在这个时间之后创建的所有包含 Junit5 字样的 repo 信息，判断 repo 数量是否超过 1000&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>方法一：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>设置一个环境变量 created&lt;/li>
&lt;li>在获取 repo 接口 GetRepo 的 Test 脚本中获取 Junit5 这个 repo 的创建时间&lt;/li>
&lt;li>在 Test 脚本中将获取到的创建时间赋值给环境变量 created&lt;/li>
&lt;li>在查询 repo 接口中使用环境变量 created&lt;/li>
&lt;li>在查询 repo 接口中添加判断返回数量的校验代码&lt;/li>
&lt;li>通过 Runner 执行器按顺序执行这两个接口，完成关联执行&lt;/li>
&lt;/ol>
&lt;p>如图：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_195305.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_195403.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在 Runner 执行器中执行结果
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_195606.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;strong>方法二：&lt;/strong>&lt;/p>
&lt;p>在方法一中我们利用环境变量来传递参数，这种方法需要依赖 runner 执行器对接口的执行顺序来保证 GetRepo 接口在 SearchRepo 接口之前执行。&lt;/p>
&lt;p>我们也可以利用 Postman 提供的请求发送方法 &lt;code>pm.sendRequest &lt;/code>在 SearchRepo 的 pre-Script 脚本中直接完成前置请求的发送和参数获取。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://api.github.com/repos/junit-team/junit5&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">created_at&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时不需要利用 runner 执行器，直接执行 SearchRepo 接口，也可得到同样的结果
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_200927.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="postman脚本-代码复用">Postman脚本-代码复用
&lt;/h3>&lt;p>Postman 作为一个接口测试工具而不是专业的代码编辑 IDE， 并没有提供脚本的复用以及代码片、模块定义之类的功能。但借助 Postman 强大的变量和 js 语法的良好支持，我们可以变通地实现代码复用。&lt;/p>
&lt;p>我们可以将一些常用的代码片段保存到 global 变量中， 在需要使用的时候，直接调用这个 global 变量即可。&lt;/p>
&lt;p>比如上面判断返回 repo 数量是否超过 1000 这段校验代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;判断返回成功状态码&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">have&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;校验消息体返回数量大于1000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">jsonData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">jsonData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">total_count&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们将它设置在 global 变量 checkRepoCount 中，在需要调用的地方，以如下代码代替即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">globals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">checkRepoCount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Postman 中如图：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_203114.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="postman脚本-一个结合第三方库的复杂场景案例">Postman脚本-一个结合第三方库的复杂场景案例
&lt;/h3>&lt;p>Postman 为便于接口脚本的编写，内建支持了丰富的第三方库，官方文档中列出了详细清单
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_203727.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>除了前面提到的 BDD 校验库 chai, 下面我们再结合第三方时间处理库 moment 来完成一个相对复杂的场景案例实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">1. 获取最近 6 个月包含有 Junit5 字样且 Star 数 &amp;gt;1 的 repo 信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 判断返回 repo 数量是否 &amp;gt;0, 结果显示到 Test Result
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 如果数量 &amp;gt;0 , 获取 star 数最多的 repo 信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 判断自己是否已经 star 过这个repo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 如果没有 star 过，执行 star操作
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相关的接口如下：&lt;/p>
&lt;ul>
&lt;li>查询接口，查询关键字 junit5，star 数 &amp;gt;1 , 创建时间 6 月内， 按 star 数降序查询&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>/search/repositories?q=junit5+stars:&amp;gt;1+created:&amp;gt;{{created}}&amp;amp;sort=stars&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>查询是否 star 了某 repo&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>GET /user/starred/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;p>已 star 返回 204，未 star 返回 404&lt;/p>
&lt;ul>
&lt;li>执行 star repo 操作&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>PUT /user/starred/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;p>成功则返回 204&lt;/p>
&lt;p>在查询repo接口的 Pre-Script 脚本中引入事件处理库 moment，可以看到 moment 库相比 js 本身的 date 方法，对日期的处理更加方法灵活，利用 subtract 方法可简单获取半年前的日期，无需考虑日期补零、跨年等判断，代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;moment&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//利用 moment 库获取六个月前日期
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">createDate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="nx">subtract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;months&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;YYYY-MM-DD&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">environment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createDate&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在查询repo接口的 Test 脚本中编写校验和后续逻辑代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//获取符合条件repo总数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">total_count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;覆盖条件repo数量为 &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//保存repo的owner和repo名称，查询条件为按star排序，所以index为0的repo即star数最多
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">repoName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">owner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;当前star数最多的repo是【&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">full_name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;】&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//需要定义请求信息，指定header和执行方法。不指定的话直接在SendRequest中使用默认为GET方法，不携带Header
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">getStarReq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/user/starred/&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">owner&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">repoName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;GET&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//接口需要经过鉴权，代码中不能使用Postman界面设置，将鉴权信息携带在header中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">header&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s1">&amp;#39;Authorization:Bearer 84fb9e0706bab75f1d4b6f4e3586683d8c4605af&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">getStarReq&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">stared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;当前repo已star&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">code&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">starRequest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://api.github.com/user/starred/&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">owner&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">repoName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;PUT&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//接口需要经过鉴权，代码中不能使用Postman界面设置，将鉴权信息携带在header中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">header&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Authorization:Bearer 84fb9e0706bab75f1d4b6f4e3586683d8c4605af&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sendRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">starRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">starErr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">starRes&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">starErr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">starErr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;已star成功&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">starRes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">204&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">204&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Postman 中执行效果如图：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190208_232013.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="结语及预告">结语及预告
&lt;/h3>&lt;p>以上就是关于 Postman 的脚本进阶使用的介绍。简单总结一下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Postman 提供了 5 种不同的变量类型，且分别对应不同的作用域。灵活使用这些变量，可以帮助我们实现动态匹配、参数传递、代码复用等场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>postman 在 Collection、Folder、接口本身三层上都分别提供了两种脚本沙箱：Pre-Script、Test。Pre-Script是在接口请求之前执行，Test 是在接口响应之后执行。注意三层对象上不同的执行顺序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Postman 脚本基于 Node.js，内建支持了丰富的第三方库，并且 Postman 自身也封装了很多上层方法，可以参考 &lt;a class="link" href="https://learning.getpostman.com/docs/postman/scripts/postman_sandbox_api_reference" target="_blank" rel="noopener"
>Postman 官方沙箱方法参考&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以Postman 通过丰富的变量以及强大的 js 脚本支持，可以非常灵活地帮助我们更好地完成接口测试中一些复杂的场景。&lt;/p>
&lt;p>虽然目前两篇 Chat 主要介绍了 Postman 在接口手工测试中的主要功能和使用技巧，但 Postman 其实也能非常方便地应用在自动化测试中，欢迎大家继续关注下一篇 &lt;strong>《玩转Postman：自动化篇》&lt;/strong>，我们将一起来学习：&lt;/p>
&lt;ul>
&lt;li>Postman 的批量执行工具 Runner 详解&lt;/li>
&lt;li>Postman 实现接口的流程控制&lt;/li>
&lt;li>Postman 的命令行自动化工具 NewMan 详解&lt;/li>
&lt;li>结合持续集成工具 Jenkins 实现 Postman 接口脚本的自动调度和执行&lt;/li>
&lt;/ul></description></item><item><title>Postman基础篇</title><link>https://chengxiaqiucao.github.io/post/001-postman-basic/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/001-postman-basic/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png" alt="Featured image of post Postman基础篇" />&lt;h3 id="前言">前言
&lt;/h3>&lt;p>本教程将结合业界广为推崇和使用的RestAPI设计典范Github API，详细介绍Postman接口测试工具的使用方法和实战技巧。&lt;/p>
&lt;p>在开始这个教程之前，先聊一下为什么接口测试在现软件行业如此重要？ 为什么我们要学习Postman？&lt;/p>
&lt;p>现代软件行业已经从传统的万维网发展到移动互联网，云计算，如今更进入到万物互联时代。软件和网络会连接我们生活的方方面面，不同的设备，不同的软件系统之间存在各式各样的联系。而接口就是不同设备、系统之间联系的桥梁，所以接口在现今和未来的软硬件产业当中都具有越来越高的重要性和地位。&lt;/p>
&lt;h4 id="什么是接口">什么是接口？
&lt;/h4>&lt;p>IT行业从WWW&lt;strong>万维网时代&lt;/strong>的C/S，B/S架构，到&lt;strong>移动互联网时代&lt;/strong>的大前端时代，发展到&lt;strong>云计算时代&lt;/strong>以IaaS（基础架构即服务），PaaS（平台即服务），SaaS（软件即服务）为代表的云端架构，如今更是进入到万物互联的&lt;strong>物联网时代&lt;/strong>，网络连接着我们生活的方方面面，而承载这些连接的连接点，就是网络接口，&lt;strong>接口是不同网络应用之间联系、交互、相互作用的入口和桥梁&lt;/strong>。&lt;/p>
&lt;p>如下图，是接口在软件系统中所处位置的示意图
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_160134.png"
loading="lazy"
alt="image"
>
这里UI接口和API接口分别代表用户交互接口和应用程序接口&lt;/p>
&lt;h4 id="接口测试">接口测试
&lt;/h4>&lt;p>了解了接口的概念，我们再看什么是接口测试？&lt;/p>
&lt;p>以下是百度百科中给出的定义:&lt;/p>
&lt;blockquote>
&lt;p>接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。&lt;/p>&lt;/blockquote>
&lt;p>可以看到，针对接口定义阐述后，说明了接口测试的重点包括交互的数据、过程以及背后的业务逻辑。&lt;/p>
&lt;p>再进一步看更常用的API测试的定义，这个百度没有收录，可以看下Wiki百科的定义：&lt;/p>
&lt;blockquote>
&lt;p>API testing is a type of software testing that involves testing application programming interfaces (APIs) directly and as part of integration testing to determine if they meet expectations for functionality, reliability, performance, and security.[1] Since APIs lack a GUI, API testing is performed at the message layer.[2] API testing is now considered critical for automating testing because APIs now serve as the primary interface to application logic and because GUI tests are difficult to maintain with the short release cycles and frequent changes commonly used with Agile software development and DevOps.[3][4]&lt;/p>&lt;/blockquote>
&lt;p>它是直接针对API进行测试的一类集成测试，注意wiki把接口测试归类在集成测试阶段。也就是说它更多是在系统集成时实施。然后也说明了接口测试不单纯是功能测试，还需考虑可靠性、安全、性能等。API接口测试和GUI测试不同，更多体现在消息层，并且因为GUI层在自动化测试上的先天劣势，API自动化目前是自动化测试领域以及敏捷、DevOps等研发模式的关键实践。&lt;/p>
&lt;p>下图是著名的测试金字塔，它根据不同测试类型对软件测试进行了分层，底层是针对的代码层面的单元测试，中间是service服务测试，而现今的应用服务更多是API形式来体现，服务测试也可以理解为API的测试，上层则是针对用户界面的GUI测试。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_161451.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>这个模型体现出在自动化测试中，越底层的自动化测试所占比重应该越大，才有更好的投入产出比。中间这一层的API测试它既不像UI层那样维护成本巨大，很难跟上快速迭代的要求，同时它又比单元测试更能在业务逻辑上进行质量验证。所以现在一般认为API测试是自动化测试实施上的优先选择&lt;/p>
&lt;h3 id="http协议基础">HTTP协议基础
&lt;/h3>&lt;p>在正式开始Postman的功能介绍前，首先还是要介绍Postman的测试对象。Postman主要是针对HTTP协议接口的测试工具，所以本章首先介绍一下HTTP协议的基础知识。&lt;/p>
&lt;blockquote>
&lt;p>HTTP，即超文本传输协议（HyperText Transfer Protocol)，是互联网上应用最为广泛的一种网络协议，目前主要使用的1.1版本，基于TCP/IP通信协议来传递数据(HTML，文件、数据、API接口消息等)&lt;/p>&lt;/blockquote>
&lt;p>http协议工作于客户端-服务器即C/S架构上
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_163102.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h4 id="http消息组成">HTTP消息组成
&lt;/h4>&lt;p>客户端发送一个HTTP请求到服务器，请求消息包括以下格式：&lt;/p>
&lt;p>&lt;strong>请求行（request line）、请求头部（header）、空行和请求数据&lt;/strong>四个部分。如图&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_163224.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如下是一个请求百度首页的请求示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">GET https://www.baidu.com/ HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#请求方法 URL HTTP协议版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: www.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#请求服务器地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#以下是消息头内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: keep-alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#连接方式：长连接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: max-age&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#请求缓存控制，需确认请求内容是否有修改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Upgrade-Insecure-Requests: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#支持https协议&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">User-Agent: Mozilla/5.0 &lt;span class="o">(&lt;/span>Windows NT 10.0&lt;span class="p">;&lt;/span> Win64&lt;span class="p">;&lt;/span> x64&lt;span class="o">)&lt;/span> AppleWebKit/537.36 &lt;span class="o">(&lt;/span>KHTML, like Gecko&lt;span class="o">)&lt;/span> Chrome/71.0.3578.98 Safari/537.36
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#请求客户端，浏览器版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept: text/html,application/xhtml+xml,application/xml&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.9,image/webp,image/apng,*/*&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#支持的响应内容类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Encoding: gzip, deflate, br
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#支持的编码类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Accept-Language: zh-CN,zh&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.9,en&lt;span class="p">;&lt;/span>&lt;span class="nv">q&lt;/span>&lt;span class="o">=&lt;/span>0.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#支持的语言&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cookie: &lt;span class="nv">BAIDUID&lt;/span>&lt;span class="o">=&lt;/span>C0A2...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#携带的cookie信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#未携带请求消息体，body为空&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>服务器接收并处理客户端发过来的请求，返回一个HTTP的响应消息。也由四个部分组成，分别是：&lt;/p>
&lt;p>&lt;strong>响应状态行、消息报头、空行和响应正文&lt;/strong>。 如图&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181222_163802.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>如下是百度首页的响应示例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">HTTP/1.1 &lt;span class="m">200&lt;/span> OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#协议版本 消息状态码 状态描述&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdpagetype: &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bdqid: 0x8707d7d80001f34e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#自定义消息头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cache-Control: private
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#缓存控制策略&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connection: Keep-Alive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#长连接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Type: text/html&lt;span class="p">;&lt;/span>&lt;span class="nv">charset&lt;/span>&lt;span class="o">=&lt;/span>utf-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#响应内容类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Date: Sat, &lt;span class="m">22&lt;/span> Dec &lt;span class="m">2018&lt;/span> 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#响应时间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Expires: Sat, &lt;span class="m">22&lt;/span> Dec &lt;span class="m">2018&lt;/span> 08:54:51 GMT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#过期失效时间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: BWS/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#服务器系统及版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: &lt;span class="nv">BDSVRTM&lt;/span>&lt;span class="o">=&lt;/span>372&lt;span class="p">;&lt;/span> &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: &lt;span class="nv">BD_HOME&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span> &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Cookie: &lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>/&lt;span class="p">;&lt;/span> &lt;span class="nv">domain&lt;/span>&lt;span class="o">=&lt;/span>.baidu.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#设置客户端cookie&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Strict-Transport-Security: max-age&lt;span class="o">=&lt;/span>&lt;span class="m">172800&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#严格安全传输，有效时间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">X-Ua-Compatible: &lt;span class="nv">IE&lt;/span>&lt;span class="o">=&lt;/span>Edge,chrome&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#兼容浏览器版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Content-Length: &lt;span class="m">191722&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#消息体长度&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#以下消息体内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;!Doctype html&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;html &lt;span class="nv">xmlns&lt;/span>&lt;span class="o">=&lt;/span>http://www.w3.org/1999/xhtml&amp;gt;&amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="http方法">HTTP方法
&lt;/h4>&lt;p>HTTP方法是请求消息中携带的关键信息，告知服务器本次请求希望进行的操作类型。目前在HTTP1.1版本中常见以下方法&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">No.&lt;/th>
&lt;th style="text-align: center">方法&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">1&lt;/td>
&lt;td style="text-align: center">GET&lt;/td>
&lt;td>请求指定的页面信息，并返回实体主体。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">2&lt;/td>
&lt;td style="text-align: center">HEAD&lt;/td>
&lt;td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">3&lt;/td>
&lt;td style="text-align: center">POST&lt;/td>
&lt;td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">4&lt;/td>
&lt;td style="text-align: center">PUT&lt;/td>
&lt;td>从客户端向服务器传送的数据取代指定的文档的内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">5&lt;/td>
&lt;td style="text-align: center">DELETE&lt;/td>
&lt;td>请求服务器删除指定的页面。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">6&lt;/td>
&lt;td style="text-align: center">CONNECT&lt;/td>
&lt;td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">7&lt;/td>
&lt;td style="text-align: center">TRACE&lt;/td>
&lt;td>回显服务器收到的请求，主要用于测试或诊断。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">8&lt;/td>
&lt;td style="text-align: center">PATCH&lt;/td>
&lt;td>从客户端向服务器传送数据，取代指定文档的部分内容&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="http状态码">HTTP状态码
&lt;/h4>&lt;p>HTTP状态码定义了服务器端处理HTTP请求的结果信息，主要包含以下五类：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>状态码&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1XX&lt;/td>
&lt;td>已接收，待处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2XX&lt;/td>
&lt;td>请求处理成功&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3XX&lt;/td>
&lt;td>重定向，资源位置发生变化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4XX&lt;/td>
&lt;td>客户端请求信息错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5XX&lt;/td>
&lt;td>服务端处理发生错误&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="1xx-消息">&lt;strong>1xx 消息&lt;/strong>
&lt;/h5>&lt;p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[4] 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。&lt;/p>
&lt;h5 id="2xx-成功">&lt;strong>2xx 成功&lt;/strong>
&lt;/h5>&lt;p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。&lt;/p>
&lt;h5 id="3xx-重定向">&lt;strong>3xx 重定向&lt;/strong>
&lt;/h5>&lt;p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。&lt;/p>
&lt;h5 id="4xx-客户端错误">&lt;strong>4xx 客户端错误&lt;/strong>
&lt;/h5>&lt;p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容&lt;/p>
&lt;h5 id="5xx-服务器错误">&lt;strong>5xx 服务器错误&lt;/strong>
&lt;/h5>&lt;p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。&lt;/p>
&lt;p>&lt;em>详细的状态码清单可参见附录&lt;/em>&lt;/p>
&lt;h3 id="github-api">GitHub API
&lt;/h3>&lt;p>本教程后续将主要使用Github API作为实战介绍API。 本章会简要介绍Github网站以及Github API。&lt;/p>
&lt;p>GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。也是目前全球最大的代码托管平台，可以说是程序员的圣地，号称全球最大的同性交友平台:joy:
(Github 国内有时会间歇性无法访问，可能需要科学上网)&lt;/p>
&lt;h4 id="github-中的一些主要概念">github 中的一些主要概念
&lt;/h4>&lt;ol>
&lt;li>&lt;strong>提交（commit）&lt;/strong>：提交更改到仓库（本地Git仓库与GitHub仓库是两码事）。&lt;/li>
&lt;li>&lt;strong>提交信息（commit message）&lt;/strong>：每次提交的时候，需要提供一个信息，描述这次提交都做了什么。&lt;/li>
&lt;li>&lt;strong>分支（branch）&lt;/strong>：像树状图一样，每个独立的分支都是项目的一个版本，分支都可以与master合并。&lt;/li>
&lt;li>&lt;strong>主分支（master branch）&lt;/strong>：所有的Git项目在最初创建时，都会默认创建出一个分支，这就是主分支。在开发中，写一个新功能的时候，都是先建立一个分支，在该分支上完成功能并测试，通过后由项目leader将该分支merge到master上。&lt;/li>
&lt;li>&lt;strong>功能分支（feature branch）&lt;/strong>：没怎么用过&lt;/li>
&lt;li>&lt;strong>发布分支（release branch）&lt;/strong>：如果有一个手动QA（质量管理）流程，或者必须要支持旧版本的软件时，需要一个发布分支来存放必要的补丁与更新记录。功能分支和发布分支没技术区别，只是在团队间讨论的时候，有助于区分类别。&lt;/li>
&lt;li>&lt;strong>合并（merge）&lt;/strong>：merge可以将一个分支上的全部内容归并到另一个分支上，一般就是将分支merge到主分支。&lt;/li>
&lt;li>&lt;strong>标签（tag）&lt;/strong>：常用于记录发布版本，在版本发布的时候，给一个tag，这样就能够记录该版本的代码是何时生成的。&lt;/li>
&lt;li>&lt;strong>查看（check out）&lt;/strong>：一般就是查看某一个分支上操作的记录。&lt;/li>
&lt;li>&lt;strong>拉取（pull request）&lt;/strong>：一般用来从远程仓库拉取分支中的代码到本地，也可以从本地仓库中拉取分支代码到当前工程中。&lt;/li>
&lt;li>&lt;strong>提出问题（issue）&lt;/strong>：GitHub的提出问题的功能，一般遇到问题，可以将出现问题的场合，通过issue的方式记录。&lt;/li>
&lt;li>&lt;strong>维基（WIKI）&lt;/strong>：一个轻量级的Web页面创建方式，创建的Web页面之间可以通过链接互相联系。GitHub中的项目通常使用WIKi进行文档记录。&lt;/li>
&lt;li>&lt;strong>克隆（clone）&lt;/strong>：从GitHub上下载一个副本到本地，操作后可以pull上去。&lt;/li>
&lt;li>&lt;strong>分叉（fork）&lt;/strong>：A复制一个B的项目到自己的账户下，修改后再提交，B能看到A修改的内容，但是B原本的项目是不会有变动的。&lt;/li>
&lt;/ol>
&lt;h4 id="github-主界面功能">github 主界面功能
&lt;/h4>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_203928.png"
loading="lazy"
alt="image"
>
&lt;a class="link" href="http://blog.csdn.net/android_zyf/article/details/64175941" target="_blank" rel="noopener"
>图片转自george_zyf的博客&lt;/a>&lt;/p>
&lt;h4 id="github-api-1">Github API
&lt;/h4>&lt;p>目前Github API最新的V4版本是基于GraphQL的API，但常用的还是V3的&lt;a class="link" href="https://developer.github.com/v3/" target="_blank" rel="noopener"
>Restful API&lt;/a>&lt;/p>
&lt;h5 id="github-api中几类主要资源及对应操作">&lt;strong>github API中几类主要资源及对应操作&lt;/strong>
&lt;/h5>&lt;p>User 资源&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_200328.png"
loading="lazy"
alt="user"
>&lt;/p>
&lt;p>Repo 操作&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_200253.png"
loading="lazy"
alt="repos"
>&lt;/p>
&lt;p>issue 操作&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_200314.png"
loading="lazy"
alt="issues"
>&lt;/p>
&lt;p>&lt;em>图片来自&lt;a class="link" href="https://blog.csdn.net/woshinannan741/article/details/78541029" target="_blank" rel="noopener"
>网络&lt;/a>&lt;/em>&lt;/p>
&lt;h5 id="github-中的时间格式">&lt;strong>github 中的时间格式&lt;/strong>
&lt;/h5>&lt;p>github 中时间格式如下：&lt;/p>
&lt;blockquote>
&lt;p>YYYY-MM-DDTHH:MM:SSZ&lt;/p>&lt;/blockquote>
&lt;h5 id="github-限流规则">&lt;strong>github 限流规则&lt;/strong>
&lt;/h5>&lt;p>github 为包含服务端负载压力，会对请求流量进行限制。在每个 github 的响应消息头中都会携带 github 的限流设置。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>头参数&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>X-RateLimit-Limit&lt;/td>
&lt;td>当前每小时最大请求限制，一般未鉴权请求60次，鉴权请求5000次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Remaining&lt;/td>
&lt;td>当前剩余请求次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Reset&lt;/td>
&lt;td>剩余限制重置时间，毫秒&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="请求参数与分页">&lt;strong>请求参数与分页&lt;/strong>
&lt;/h5>&lt;p>请求中可以携带参数，一般包含两种参数: &lt;strong>路径参数&lt;/strong>和&lt;strong>查询参数&lt;/strong>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_121133.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>github API中默认支持两个分页参数：&lt;/p>
&lt;ul>
&lt;li>page 当前显示页数&lt;/li>
&lt;li>per_page 每页显示结果数&lt;/li>
&lt;/ul>
&lt;h3 id="postman-基础">Postman 基础
&lt;/h3>&lt;p>可以用于Rest接口测试的测试工具非常多，常见的有soapUI、Jmeter、fiddler等都经常用来做接口测试。但是目前在接口测试人员中最流行，最常见还是本章向大家介绍的Postman。&lt;/p>
&lt;h4 id="postman-的安装">Postman 的安装
&lt;/h4>&lt;p>Postman最早的版本，以及很长一段时间都是以Chrome插件的形式存在的。以至很多人甚至认为postman就是google的官方工具插件，我们目前能看到的大量资料也都是基于chrome的插件形式来进行介绍的。&lt;/p>
&lt;p>但是目前Postman其实已经推出了独立的本地App程序，并且官方已经宣布不再支持chrome的插件形式。虽然插件版本现在还能使用，可是毕竟相比Native版本，受限于chrome浏览器的功能，很多功能在插件版本中是欠缺的，比如cookie的内建支持，代理功能，控制台功能等等。所以此处就不再介绍插件版本的安装。&lt;/p>
&lt;p>本地版本的安装，其实也非常简单。从官网根据自己操作系统的类型选择相应的版本下载即可。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210709.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>这里还有一点要注意下，在postman的官网，我们最好注册一个账号，后续在使用postman的时候很多高级功能需要用这个账号登录后才可以使用。&lt;/p>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_210848.png" width = "320" height = "450" />
&lt;p>安装完成，在桌面上出现Postman那个pose很帅的小人图标&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_211842.png" width = "30" height = "33" />，则安装完成。&lt;/p>
&lt;h4 id="postman-主界面">Postman 主界面
&lt;/h4>&lt;p>打开Postman进入，首次会提示选择希望创建的任务类型。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_212729.png"
loading="lazy"
alt="image"
>
这里有六种任务类型，我们再下面的实战中都会详细讲解，这里先简单说明一下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Request&lt;/strong>是Postman软件的基础和核心，也就是通过这个功能来创建request请求，完成接口测试的核心工作。&lt;/li>
&lt;li>&lt;strong>Collection&lt;/strong>其实是个集合，我们可以认为是一批Request请求的集合，或者说测试集。它也是Postman一些进阶功能的基本单位&lt;/li>
&lt;li>&lt;strong>Environment&lt;/strong>，字面理解就是环境，其实可以认为是一些配置变量的集合，实际应用中可以起到通过不同配置区分不同测试环境的效果
后面这三个都是Postman的高级功能&lt;/li>
&lt;li>&lt;strong>API documention&lt;/strong>，是通过我们调试通过的request来自动生成接口文档，便于团队的共享和接口的交付。&lt;/li>
&lt;li>&lt;strong>Mock server&lt;/strong>
在我们进行接口测试或开发的时候，很多时候是需要模拟对端的接口服务器的，Mock server就起到的模拟服务器端的作用。&lt;/li>
&lt;li>&lt;strong>Monitor&lt;/strong>
这是个监控功能，通过monitor我可以监控我的接口是不是正常。说白了，这其实就是个定时的接口执行功能。&lt;/li>
&lt;/ul>
&lt;p>大致了解下几种不同的任务类型，我们先关掉这个界面，我们再来看看主界面的功能区间
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221026.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="banner-区域">&lt;strong>Banner 区域&lt;/strong>
&lt;/h5>&lt;p>首先是上面的菜单栏，对应功能区的各项功能，在菜单栏上都能找到对应的菜单。然后是下面的banner区域。
从左到右依次介绍：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213611.png"
loading="lazy"
alt="image"
>会打开启动时的创建窗口，用于创建六种类型的任务。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213722.png"
loading="lazy"
alt="image"
>按钮，可以用于导入外部文件，外部文件可以是postman的Collection格式文件，数据文件，以及其他的API定义文件&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213808.png"
loading="lazy"
alt="image"
>则会启动Collection runner，它是一个运行器，用于运行已经建立的测试任务。我们后面会有详细介绍&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_213839.png"
loading="lazy"
alt="image"
>第四个按钮，可以新建tab，或者多开一个postman程序，或者runer程序。&lt;/p>
&lt;p>中间&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_214059.png"
loading="lazy"
alt="image"
>是选择使用的workspace，但这个需要账号登录，会同步云端的workspace设置。每个账号会有一个默认的workspace，workspace它是一个工作空间，大家可以理解成类似项目或者工程。&lt;/p>
&lt;p>banner条右侧还有几个按钮&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_214216.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>第一个是同步，也是在有账号的情况下，可以在多个电脑间同步workspace内的相关接口测试设计。&lt;/li>
&lt;li>第二个proxy，则类似前面介绍过的fiddler，提供代理抓取API功能。当然这个功能postman不像Fiddler那样丰富&lt;/li>
&lt;li>第三个按钮包括setting以及文档指南。 setting里是软件的本地配置&lt;/li>
&lt;li>第四个按钮是消息通知，很好理解，会显示一些提醒信息&lt;/li>
&lt;li>然后是postman的twitter，在墙后面就不要去看了&lt;/li>
&lt;li>最后是登录，可以用postman的账号的登录&lt;/li>
&lt;/ul>
&lt;h5 id="setting-设置">&lt;strong>Setting 设置&lt;/strong>
&lt;/h5>&lt;p>Postman 工具的使用属性和应用设置我们可以在Setting 中国进行设置。以下分别说明：&lt;/p>
&lt;h6 id="general">&lt;strong>General&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_113726.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="themes">&lt;strong>Themes&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_113828.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="shortcuts">&lt;strong>Shortcuts&lt;/strong>
&lt;/h6>&lt;p>工具快捷键
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_113904.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="data">&lt;strong>Data&lt;/strong>
&lt;/h6>&lt;p>工具数据导入导出
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114000.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="add-ons">&lt;strong>add-ons&lt;/strong>
&lt;/h6>&lt;p>Newman 插件下载方法
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114231.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="sync">&lt;strong>Sync&lt;/strong>
&lt;/h6>&lt;p>同步设置
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114249.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="certificates">&lt;strong>certificates&lt;/strong>
&lt;/h6>&lt;p>本地证书设置
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114304.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="proxy">&lt;strong>Proxy&lt;/strong>
&lt;/h6>&lt;p>本地网络代理设置
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114316.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="update">&lt;strong>update&lt;/strong>
&lt;/h6>&lt;p>升级设置
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114330.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h6 id="about">&lt;strong>about&lt;/strong>
&lt;/h6>&lt;p>工具**关于&amp;hellip;**等版本信息
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_114343.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="左侧边栏">&lt;strong>左侧边栏&lt;/strong>
&lt;/h5>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215120.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>filter筛选栏，筛选显示不同的消息&lt;/li>
&lt;li>history是操作消息记录清单&lt;/li>
&lt;li>collection如前面介绍，显示请求集合&lt;/li>
&lt;/ul>
&lt;h5 id="底边状态栏">&lt;strong>底边状态栏&lt;/strong>
&lt;/h5>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215400.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>最左面，显示和关闭左侧边栏&lt;/li>
&lt;li>然后是搜索功能，这个容易理解&lt;/li>
&lt;li>第三个是控制台，可以在这里看到消息相互的详细信息&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215445.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>用户指南&lt;/li>
&lt;li>调整功能区显示样式&lt;/li>
&lt;li>快捷键清单参考&lt;/li>
&lt;li>帮助相关的连接&lt;/li>
&lt;/ul>
&lt;h5 id="主功能区">&lt;strong>主功能区&lt;/strong>
&lt;/h5>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_215313.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>主要包括上下两部分，上面是request区，下面是response区。也可以分成左右显示。&lt;/p>
&lt;h6 id="request区域">&lt;strong>Request区域&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221203.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>request部分默认开启了一个选项卡，可以新开多个选项卡便于同时编辑。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221316.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>默认使用的是GET方法，这也是使用最多的HTTP方法，下拉可以选择其他的方法，常用的还有哪些？ POST、PUT、Delete等。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221359.png"
loading="lazy"
alt="image"
>
URL部分输入请求的地址。比如我们输入GithubAPI的根地址。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221529.png"
loading="lazy"
alt="image"
>
param是参数管理界面，在这里我们可以添加参数（有key-value，块编辑模式）。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221557.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>Send发送请求，小箭头下send and download，会在发送以后把响应消息导出成json保存。旁边的save，保存功能，其实是把这个request作为一个case保存到collection里。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221704.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>鉴权部分，虽然request编辑器已经足够强大可以处理鉴权消息，但是很多时候鉴权是个使用频率很高的功能，所以Postman单独把鉴权部分抽取出来，并且封装了目前的绝大部分鉴权方式&lt;/p>
&lt;ul>
&lt;li>&lt;strong>继承&lt;/strong>，默认鉴权方式&lt;/li>
&lt;li>&lt;strong>不鉴权&lt;/strong>&lt;/li>
&lt;li>&lt;strong>bearer token&lt;/strong>鉴权，一般也叫Json web token，其实就是发送一个json格式的token令牌，服务端会针对token进行解密验证&lt;/li>
&lt;li>&lt;strong>Basic Auth&lt;/strong>基础验证，提供用户名密码验证，postman 会自动生成authorization，常用鉴权方式&lt;/li>
&lt;li>&lt;strong>digest auth&lt;/strong>，摘要式认证
在基本身份认证上面扩展了安全性，服务器为每一个连接生成一个唯一的随机数，客户端用这个随机数对密码进行MD5加密，然后返回服务器，服务器也用这个随机数对密码进行加密，然后和客户端传送过来的加密数据进行比较,如果一致就返回结果。
它是一个二次验证的过程，会有两次认证交互消息
客户端请求资源-&amp;gt;服务器返回认证标示-&amp;gt;客户端发送认证信息-&amp;gt;服务器查验认证&lt;/li>
&lt;li>&lt;strong>Oauth&lt;/strong>，一般用于第三方认证，有1,2两个版本，需要提供的信息不太一样。也是常用的鉴权方式&lt;/li>
&lt;li>&lt;strong>Hawk&lt;/strong> 认证，是另一种认证方案，采用的叫消息码认证算法，和Digest认证类似，它也是需要二次交互的&lt;/li>
&lt;li>&lt;strong>AWS签名&lt;/strong>认证，是针对亚马逊的AWS公有云用户签名的认证方式&lt;/li>
&lt;li>&lt;strong>NTLM&lt;/strong>是微软的局域网管理认证协议&lt;/li>
&lt;/ul>
&lt;p>大家有个基本了解即可，一般比较常用的就是basic以及OAuth2了。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221901.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>header就是消息头管理，可以定义头部信息。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_221935.png"
loading="lazy"
alt="image"
>
Body，请求消息体。一般Post、put、patch等会更新内容的请求才会携带消息体，&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222023.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>旁边pre-script，是指在请求发送前，可以做一些预处理的工作，类似junit等单元测试框架中的setup方法，支持js脚本语法&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222100.png"
loading="lazy"
alt="image"
>
Test则是在响应以后，对响应进行校验或其他处理的，类似junit框架中的teardown方法，同样支持js脚本语法&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222148.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>cookie管理postman本地cookie信息&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222218.png"
loading="lazy"
alt="image"
>
code是一个方便程序员的功能，可以自动将接口请求转化成相关语言编码，可以看到支持的语言非常丰富，基本涵盖了各种主流编程语言。&lt;/p>
&lt;h6 id="response区域">&lt;strong>Response区域&lt;/strong>
&lt;/h6>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20181225_222427.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>响应消息右上角是状态码，悬停可以看到详细解释。另外是响应时间（从发出请求到返回客户端接收的时间），以及消息大小（含消息头和消息体）。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190102_203757.png"
loading="lazy"
alt="image"
>
响应body部分，即消息体。包括以下几个按钮&lt;/p>
&lt;ul>
&lt;li>pretty，可以根据表现类型进行格式化显示，默认json，如果是其他格式类型，可以选择对应形式进行格式化。&lt;/li>
&lt;li>Raw则是未格式化的形式&lt;/li>
&lt;li>preview则是预览，就是在浏览器里渲染后呈现的样子，比如返回的是html就很直观。&lt;/li>
&lt;li>旁边是自动换行按钮。&lt;/li>
&lt;/ul>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190102_203931.png" width = "300" height = "83" />
&lt;p>右边是拷贝到剪切板和查询按钮（正则，大小写敏感、全词匹配）&lt;/p>
&lt;p>其他的几个tab：&lt;/p>
&lt;ul>
&lt;li>cookie：响应消息的cookie信息&lt;/li>
&lt;li>header：响应消息的header头部信息&lt;/li>
&lt;li>Test Results：在请求中添加test Script后，这里会显示测试脚本的校验结果&lt;/li>
&lt;/ul>
&lt;h4 id="postman中完成github鉴权">&lt;strong>Postman中完成Github鉴权&lt;/strong>
&lt;/h4>&lt;p>从Github API文档中，我们可以看到Github API支持多种鉴权方式&lt;/p>
&lt;ul>
&lt;li>Basic authentication&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl -u &amp;#34;username&amp;#34; https://api.github.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是基本鉴权方式&lt;/p>
&lt;ul>
&lt;li>OAuth2 token (sent in a header)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl -H &amp;#34;Authorization: token OAUTH-TOKEN&amp;#34; https://api.github.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也支持通过在Header中携带Oauth2的token进行鉴权。在github用户设置中可以生成这个token。&lt;/p>
&lt;p>&lt;strong>个人设置 &amp;gt; Settings &amp;gt; Developer settings &amp;gt; Personal access tokens&lt;/strong>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_221722.png"
loading="lazy"
alt="image"
>
生成后会获得一个token字串
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_221844.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;ul>
&lt;li>OAuth2 token (sent as a parameter)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">curl https://api.github.com/?access_token=OAUTH-TOKEN
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者通过在URL中携带token参数鉴权。&lt;/p>
&lt;p>Postman中，可以在Collection中设置鉴权
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_222236.png"
loading="lazy"
alt="image"
>
在具体的请求消息中，可以选择&lt;strong>Inherit auth from parent&lt;/strong>，即继承上一层的鉴权。发送请求后，可以看到已经在header中携带了鉴权的token信息
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_222500.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>根据&lt;a class="link" href="https://developer.github.com/v3/#rate-limiting" target="_blank" rel="noopener"
>Github API的定义&lt;/a>，对于请求有访问限制，即未鉴权的请求限制访问为每分钟60次，对于已鉴权的请求访问每分钟5000次。&lt;/p>
&lt;p>我们从响应消息的消息头中可以看到这个设置，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">X-RateLimit-Limit →5000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">X-RateLimit-Remaining →4999
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">X-RateLimit-Reset →1546528838
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="postman实现基本http方法">Postman实现基本HTTP方法
&lt;/h4>&lt;p>再来看如何在Postman中实现常用的HTTP方法。还是以GithubAPI为例：&lt;/p>
&lt;h5 id="get方法---获取repo信息">&lt;strong>GET方法 - 获取Repo信息&lt;/strong>
&lt;/h5>&lt;blockquote>
&lt;p>GET /repos/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;p>这里是&lt;a class="link" href="https://developer.github.com/v3/repos/#get" target="_blank" rel="noopener"
>获取Github上Repo信息的API&lt;/a>，这里有两个路径参数，owner代表用户账号，repo指需要获取的repo信息。
如图是在postman中设置路径参数的方法。
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_223645.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="post方法---创建repo">&lt;strong>POST方法 - 创建Repo&lt;/strong>
&lt;/h5>&lt;p>创建Repo的示例(&lt;a class="link" href="https://developer.github.com/v3/repos/#create" target="_blank" rel="noopener"
>https://developer.github.com/v3/repos/#create&lt;/a>)&lt;/p>
&lt;blockquote>
&lt;p>POST /user/repos&lt;/p>&lt;/blockquote>
&lt;p>这里是一个创建hello world的Repo的请求消息体示例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Hello-World&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;This is your first repository&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;homepage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;private&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;has_issues&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;has_projects&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;has_wiki&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里name是必填字段，其他是repo的属性设置。
在Postman中如图提交，返回状态码201 created，即可创建一个Hello world的Repo
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_225411.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>在Github中，可以看到账号下新增了一个hello world的repo，并且包含有已设置的issue、projects、wiki这几个栏目
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_225748.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="patch方法---修改repo">&lt;strong>PATCH方法 - 修改Repo&lt;/strong>
&lt;/h5>&lt;p>GitHub可以&lt;a class="link" href="https://developer.github.com/v3/repos/#edit" target="_blank" rel="noopener"
>通过PATCH方法来对Repo进行修改&lt;/a>.PATCH方法和PUT方法都是update的修改方法，但PATCH方法更多用在部分修改的场景下，PUT方法则更多是整体替换。&lt;/p>
&lt;blockquote>
&lt;p>PATCH /repos/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;p>比如上例中hello world这个repo修改Repo中的部分信息，可以去除projects和wiki这两个栏目
消息体：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Hello-World&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;This is your first repository&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;homepage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://github.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;has_projects&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;has_wiki&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Postman中如图：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_230702.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>回到Github，可以看到Repo中对应的栏目已经不见了
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190103_230752.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h5 id="put方法---设置或替换topic">&lt;strong>PUT方法 - 设置或替换Topic&lt;/strong>
&lt;/h5>&lt;p>Topic是Github上Repo的搜索关键字，便于用户进行repo查询。&lt;/p>
&lt;blockquote>
&lt;p>PUT /repos/:owner/:repo/topics&lt;/p>&lt;/blockquote>
&lt;p>Github API设置topic的api是使用put方法提交一个topic数组，如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;names&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;restapi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;atom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;chengxiaqiucao&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时在Postman中提交，会发现有如下报错：
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190106_151630.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>这是因为Github API要求设置topic时，需要在header中设置accept字段,取值：&lt;/p>
&lt;blockquote>
&lt;p>application/vnd.github.mercy-preview+json&lt;/p>&lt;/blockquote>
&lt;p>正确设置后，则可以看到设置成功,返回200 OK
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190106_151935.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190106_152005.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>大家可能会发现一个小bug，当设置的topic存在大写字符时，会出现格式报错。比如大家参照官方示例设置&amp;quot;API&amp;quot;这样的topic，会发现设置不成功。大家可以尝试一下。&lt;/p>
&lt;h5 id="delete方法---删除repo">&lt;strong>DELETE方法 - 删除Repo&lt;/strong>
&lt;/h5>&lt;p>Github API中，使用delete方法可以删除repo&lt;/p>
&lt;blockquote>
&lt;p>DELETE /repos/:owner/:repo&lt;/p>&lt;/blockquote>
&lt;p>删除成功后，返回204.
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190106_152302.png"
loading="lazy"
alt="image"
>
此时再查询账号，应该发现Hello-World这个repo已经被删除了&lt;/p>
&lt;h4 id="结语及预告">结语及预告
&lt;/h4>&lt;p>至此，我们通过Github API中几个实际的例子，学习了如何通过Postman来完成一些基本的HTTP方法的请求发送和响应查看，通过查看结果状态码或响应内容来判断结果正确性。&lt;/p>
&lt;p>当然Postman的功能远不止于此，API接口测试中也还有很多复杂的场景需要特别处理。
欢迎大家继续关注 &lt;strong>《玩转Postman - 进阶篇》&lt;/strong>。在进阶篇中我们将继续深入讲解Postman的进阶功能，并结合一些复杂的实例场景来学习：&lt;/p>
&lt;ul>
&lt;li>Postman 的变量类型及其作用域&lt;/li>
&lt;li>环境与 Collection;&lt;/li>
&lt;li>Postman 如何通过内建脚本实现接口预处理&lt;/li>
&lt;li>Postman 实现测试结果的脚本校验；&lt;/li>
&lt;li>如何实现接口的关联测试&lt;/li>
&lt;li>Postman 中的 JavaScript 扩展&lt;/li>
&lt;/ul>
&lt;h3 id="附录">附录
&lt;/h3>&lt;p>HTTP状态码详解（译自Wiki百科，目前所见最全面的解释）
&lt;img src="C:/Backup/Dan/Blog/blog_images/20230617_090217.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;h3 id="1xx-消息-1">1xx 消息
&lt;/h3>&lt;p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[4] 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。&lt;/p>
&lt;h6 id="100-continue">&lt;strong>100 Continue&lt;/strong>
&lt;/h6>&lt;p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。&lt;/p>
&lt;h5 id="101-switching-protocols">&lt;strong>101 Switching Protocols&lt;/strong>
&lt;/h5>&lt;p>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。
只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。&lt;/p>
&lt;h5 id="102-processingwebdavrfc-2518">&lt;strong>102 Processing（WebDAV；RFC 2518）&lt;/strong>
&lt;/h5>&lt;p>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。&lt;/p>
&lt;h4 id="2xx-成功-1">2xx 成功
&lt;/h4>&lt;p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。&lt;/p>
&lt;h5 id="200-ok">&lt;strong>200 OK&lt;/strong>
&lt;/h5>&lt;p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。&lt;/p>
&lt;h5 id="201-created">&lt;strong>201 Created&lt;/strong>
&lt;/h5>&lt;p>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回'202 Accepted&amp;rsquo;。&lt;/p>
&lt;h5 id="202-accepted">&lt;strong>202 Accepted&lt;/strong>
&lt;/h5>&lt;p>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。&lt;/p>
&lt;h5 id="203-non-authoritative-information自http--11起">&lt;strong>203 Non-Authoritative Information（自HTTP / 1.1起）&lt;/strong>
&lt;/h5>&lt;p>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。&lt;/p>
&lt;h5 id="204-no-content">&lt;strong>204 No Content&lt;/strong>
&lt;/h5>&lt;p>服务器成功处理了请求，没有返回任何内容。&lt;/p>
&lt;h5 id="205-reset-content">&lt;strong>205 Reset Content&lt;/strong>
&lt;/h5>&lt;p>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。&lt;/p>
&lt;h5 id="206-partial-contentrfc-7233">&lt;strong>206 Partial Content（RFC 7233）&lt;/strong>
&lt;/h5>&lt;p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。&lt;/p>
&lt;h5 id="207-multi-statuswebdavrfc-4918">&lt;strong>207 Multi-Status（WebDAV；RFC 4918）&lt;/strong>
&lt;/h5>&lt;p>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。&lt;/p>
&lt;h5 id="208-already-reported-webdavrfc-5842">&lt;strong>208 Already Reported （WebDAV；RFC 5842）&lt;/strong>
&lt;/h5>&lt;p>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。&lt;/p>
&lt;h5 id="226-im-used-rfc-3229">&lt;strong>226 IM Used （RFC 3229）&lt;/strong>
&lt;/h5>&lt;p>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。&lt;/p>
&lt;h4 id="3xx-重定向-1">3xx 重定向
&lt;/h4>&lt;p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。&lt;/p>
&lt;p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。&lt;/p>
&lt;h5 id="300-multiple-choices">&lt;strong>300 Multiple Choices&lt;/strong>
&lt;/h5>&lt;p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。
除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。
如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。&lt;/p>
&lt;h5 id="301-moved-permanently">&lt;strong>301 Moved Permanently&lt;/strong>
&lt;/h5>&lt;p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。
新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。
如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。
注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。&lt;/p>
&lt;h5 id="302-found">&lt;strong>302 Found&lt;/strong>
&lt;/h5>&lt;p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。
新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。
如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。
注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。&lt;/p>
&lt;h5 id="303-see-other">&lt;strong>303 See Other&lt;/strong>
&lt;/h5>&lt;p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。[23]这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。
新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。
注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。&lt;/p>
&lt;h5 id="304-not-modified">&lt;strong>304 Not Modified&lt;/strong>
&lt;/h5>&lt;p>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。&lt;/p>
&lt;h5 id="305-use-proxy">&lt;strong>305 Use Proxy&lt;/strong>
&lt;/h5>&lt;p>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。
注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。&lt;/p>
&lt;h5 id="306-switch-proxy">&lt;strong>306 Switch Proxy&lt;/strong>
&lt;/h5>&lt;p>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。&lt;/p>
&lt;h5 id="307-temporary-redirect">&lt;strong>307 Temporary Redirect&lt;/strong>
&lt;/h5>&lt;p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。&lt;/p>
&lt;h5 id="308-permanent-redirect-rfc-7538">&lt;strong>308 Permanent Redirect (RFC 7538)&lt;/strong>
&lt;/h5>&lt;p>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。&lt;/p>
&lt;h4 id="4xx-客户端错误-1">4xx 客户端错误
&lt;/h4>&lt;p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。[30]&lt;/p>
&lt;p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。&lt;/p>
&lt;h5 id="400-bad-request">&lt;strong>400 Bad Request&lt;/strong>
&lt;/h5>&lt;p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。&lt;/p>
&lt;h5 id="401-unauthorizedrfc-7235">&lt;strong>401 Unauthorized（RFC 7235）&lt;/strong>
&lt;/h5>&lt;p>参见：HTTP基本认证、HTTP摘要认证
类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。
注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。&lt;/p>
&lt;h5 id="402-payment-required">&lt;strong>402 Payment Required&lt;/strong>
&lt;/h5>&lt;p>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。&lt;/p>
&lt;h5 id="403-forbidden">&lt;strong>403 Forbidden&lt;/strong>
&lt;/h5>&lt;p>主条目：HTTP 403
服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。&lt;/p>
&lt;h5 id="404-not-found">&lt;strong>404 Not Found&lt;/strong>
&lt;/h5>&lt;p>主条目：HTTP 404
请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。[35]没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。&lt;/p>
&lt;h5 id="405-method-not-allowed">&lt;strong>405 Method Not Allowed&lt;/strong>
&lt;/h5>&lt;p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。
鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。&lt;/p>
&lt;h5 id="406-not-acceptable">&lt;strong>406 Not Acceptable&lt;/strong>
&lt;/h5>&lt;p>参见：内容协商
请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。[36]
除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。&lt;/p>
&lt;h5 id="407-proxy-authentication-requiredrfc-2617">&lt;strong>407 Proxy Authentication Required（RFC 2617）&lt;/strong>
&lt;/h5>&lt;p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。[37]代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。&lt;/p>
&lt;h5 id="408-request-timeout">&lt;strong>408 Request Timeout&lt;/strong>
&lt;/h5>&lt;p>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。&lt;/p>
&lt;h5 id="409-conflict">&lt;strong>409 Conflict&lt;/strong>
&lt;/h5>&lt;p>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。&lt;/p>
&lt;h5 id="410-gone">&lt;strong>410 Gone&lt;/strong>
&lt;/h5>&lt;p>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。&lt;/p>
&lt;h5 id="411-length-required">&lt;strong>411 Length Required&lt;/strong>
&lt;/h5>&lt;p>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。&lt;/p>
&lt;h5 id="412-precondition-failedrfc-7232">&lt;strong>412 Precondition Failed（RFC 7232）&lt;/strong>
&lt;/h5>&lt;p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。&lt;/p>
&lt;h5 id="413-request-entity-too-largerfc-7231">&lt;strong>413 Request Entity Too Large（RFC 7231）&lt;/strong>
&lt;/h5>&lt;p>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。
如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。&lt;/p>
&lt;h5 id="414-request-uri-too-longrfc-7231">&lt;strong>414 Request-URI Too Long（RFC 7231）&lt;/strong>
&lt;/h5>&lt;p>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：
本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。
重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。
客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。&lt;/p>
&lt;h5 id="415-unsupported-media-type">&lt;strong>415 Unsupported Media Type&lt;/strong>
&lt;/h5>&lt;p>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。&lt;/p>
&lt;h5 id="416-requested-range-not-satisfiablerfc-7233">&lt;strong>416 Requested Range Not Satisfiable（RFC 7233）&lt;/strong>
&lt;/h5>&lt;p>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。&lt;/p>
&lt;h5 id="417-expectation-failed">&lt;strong>417 Expectation Failed&lt;/strong>
&lt;/h5>&lt;p>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。&lt;/p>
&lt;h5 id="418-i">&lt;strong>418 I&amp;rsquo;m a teapot（RFC 2324）&lt;/strong>
&lt;/h5>&lt;p>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议&amp;rsquo;中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。&lt;/p>
&lt;h5 id="420-enhance-your-caim">&lt;strong>420 Enhance Your Caim&lt;/strong>
&lt;/h5>&lt;p>Twitter Search与Trends API在客户端被限速的情况下返回。&lt;/p>
&lt;h5 id="421-misdirected-request-rfc-7540">&lt;strong>421 Misdirected Request （RFC 7540）&lt;/strong>
&lt;/h5>&lt;p>该请求针对的是无法产生响应的服务器（例如因为连接重用）。&lt;/p>
&lt;h5 id="422-unprocessable-entitywebdavrfc-4918-">&lt;strong>422 Unprocessable Entity（WebDAV；RFC 4918 ）&lt;/strong>
&lt;/h5>&lt;p>请求格式正确，但是由于含有语义错误，无法响应。&lt;/p>
&lt;h5 id="423-lockedwebdavrfc-4918">&lt;strong>423 Locked（WebDAV；RFC 4918）&lt;/strong>
&lt;/h5>&lt;p>当前资源被锁定。&lt;/p>
&lt;h5 id="424-failed-dependencywebdavrfc-4918">&lt;strong>424 Failed Dependency（WebDAV；RFC 4918）&lt;/strong>
&lt;/h5>&lt;p>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。&lt;/p>
&lt;h5 id="425-unordered-collection">&lt;strong>425 Unordered Collection&lt;/strong>
&lt;/h5>&lt;p>在WebDAV Advanced Collections Protocol中定义，但Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol中并不存在。&lt;/p>
&lt;h5 id="426-upgrade-requiredrfc-2817">&lt;strong>426 Upgrade Required（RFC 2817）&lt;/strong>
&lt;/h5>&lt;p>客户端应当切换到TLS/1.0，并在HTTP/1.1 Upgrade header中给出。&lt;/p>
&lt;h5 id="428-precondition-required-rfc-6585">&lt;strong>428 Precondition Required (RFC 6585)&lt;/strong>
&lt;/h5>&lt;p>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”&lt;/p>
&lt;h5 id="429-too-many-requests-rfc-6585">&lt;strong>429 Too Many Requests （RFC 6585）&lt;/strong>
&lt;/h5>&lt;p>用户在给定的时间内发送了太多的请求。旨在用于网络限速。&lt;/p>
&lt;h5 id="431-request-header-fields-too-large-rfc-6585">&lt;strong>431 Request Header Fields Too Large （RFC 6585）&lt;/strong>
&lt;/h5>&lt;p>服务器不愿处理请求，因为一个或多个头字段过大。&lt;/p>
&lt;h5 id="444-no-response">&lt;strong>444 No Response&lt;/strong>
&lt;/h5>&lt;p>Nginx上HTTP服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。&lt;/p>
&lt;h5 id="450-blocked-by-windows-parental-controls">&lt;strong>450 Blocked by Windows Parental Controls&lt;/strong>
&lt;/h5>&lt;p>这是一个由Windows家庭控制（Microsoft）HTTP阻止的450状态代码的示例，用于信息和测试。&lt;/p>
&lt;h5 id="451-unavailable-for-legal-reasons">&lt;strong>451 Unavailable For Legal Reasons&lt;/strong>
&lt;/h5>&lt;p>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。&lt;/p>
&lt;h5 id="494-request-header-too-large">&lt;strong>494 Request Header Too Large&lt;/strong>
&lt;/h5>&lt;p>在错误代码431提出之前Nginx上使用的扩展HTTP代码。&lt;/p>
&lt;h4 id="5xx-服务器错误-1">5xx 服务器错误
&lt;/h4>&lt;p>表示服务器无法完成明显有效的请求。[56]这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。&lt;/p>
&lt;h5 id="500-internal-server-error">&lt;strong>500 Internal Server Error&lt;/strong>
&lt;/h5>&lt;p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。&lt;/p>
&lt;h5 id="501-not-implemented">&lt;strong>501 Not Implemented&lt;/strong>
&lt;/h5>&lt;p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）&lt;/p>
&lt;h5 id="502-bad-gateway">&lt;strong>502 Bad Gateway&lt;/strong>
&lt;/h5>&lt;p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。&lt;/p>
&lt;h5 id="503-service-unavailable">&lt;strong>503 Service Unavailable&lt;/strong>
&lt;/h5>&lt;p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。&lt;/p>
&lt;h5 id="504-gateway-timeout">&lt;strong>504 Gateway Timeout&lt;/strong>
&lt;/h5>&lt;p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。
注意：某些代理服务器在DNS查询超时时会返回400或者500错误。&lt;/p>
&lt;h5 id="505-http-version-not-supported">&lt;strong>505 HTTP Version Not Supported&lt;/strong>
&lt;/h5>&lt;p>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。[63]这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。&lt;/p>
&lt;h5 id="506-variant-also-negotiatesrfc-2295">&lt;strong>506 Variant Also Negotiates（RFC 2295）&lt;/strong>
&lt;/h5>&lt;p>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。&lt;/p>
&lt;h5 id="507-insufficient-storagewebdavrfc-4918">&lt;strong>507 Insufficient Storage（WebDAV；RFC 4918）&lt;/strong>
&lt;/h5>&lt;p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。&lt;/p>
&lt;h5 id="508-loop-detected-webdavrfc-5842">&lt;strong>508 Loop Detected （WebDAV；RFC 5842）&lt;/strong>
&lt;/h5>&lt;p>服务器在处理请求时陷入死循环。 （可代替 208状态码）&lt;/p>
&lt;h5 id="510-not-extendedrfc-2774">&lt;strong>510 Not Extended（RFC 2774）&lt;/strong>
&lt;/h5>&lt;p>获取资源所需要的策略并没有被满足。&lt;/p>
&lt;h5 id="511-network-authentication-required-rfc-6585">&lt;strong>511 Network Authentication Required （RFC 6585）&lt;/strong>
&lt;/h5>&lt;p>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）&lt;/p>
&lt;hr>
&lt;p>秋草的公众号，&lt;strong>秋草说测试&lt;/strong>， 欢迎关注&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/001-postman-basic/qrcode.jpg"
width="258"
height="258"
srcset="https://chengxiaqiucao.github.io/post/001-postman-basic/qrcode_hu_a56c1e278dd59a45.jpg 480w, https://chengxiaqiucao.github.io/post/001-postman-basic/qrcode_hu_96f8d0ff02838f9f.jpg 1024w"
loading="lazy"
alt="秋草说测试"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p></description></item></channel></rss>
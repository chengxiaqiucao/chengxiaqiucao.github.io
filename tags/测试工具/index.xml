<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试工具 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/tags/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><description>Recent content in 测试工具 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Fri, 30 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/tags/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>微软重磅发布Magentic UI，交互式AI Agent助手实测！</title><link>https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/</link><pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/magentic_logo.png" alt="Featured image of post 微软重磅发布Magentic UI，交互式AI Agent助手实测！" />&lt;h2 id="何为magentic-ui">何为Magentic UI？
&lt;/h2>&lt;p>&lt;code>Magentic UI&lt;/code> 是微软于5.19重磅发布的开源Agent助手，并于24日刚更新了第二个版本0.04版&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526.png"
width="437"
height="121"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526_hu_998ab8bc0c64b884.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526_hu_7362028b6e24293.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="361"
data-flex-basis="866px"
>&lt;/p>
&lt;p>从官方的介绍来看，目标是打造一款 &lt;strong>以人为中心&lt;/strong> 的智能助手，其底层由多个不同的智能体系统驱动，能够实现网页浏览与操作、代码生成与执行、文件生成与分析等功能。&lt;/p>
&lt;p>它区别于其他一些AI浏览器工具的主要区别在于其 &lt;strong>透明可控的交互界面&lt;/strong>，支持高效的人机协同参与。该系统基于微软的Agent构建框架 AutoGen 构建，目前还处在原型研究阶段。&lt;/p>
&lt;p>核心功能包括：&lt;/p>
&lt;p>🧑‍🤝‍🧑 &lt;strong>协同规划&lt;/strong>：用户和AI通过聊天和计划编辑器协作创建并修订分步执行计划。&lt;br>
🤝 &lt;strong>协同任务&lt;/strong>：用户可直接通过网页浏览器或聊天界面实时介入并指导任务执行。Magentic-UI 能在需要时主动确认或要求协助。&lt;br>
🛡️ &lt;strong>操作防护&lt;/strong>：敏感操作需经用户明确批准后方可执行。&lt;br>
🧠 &lt;strong>计划学习与检索&lt;/strong>：从过往任务中学习经验以优化未来自动化流程，并将优秀方案保存至计划库。在后续任务中可自动或手动调用已存储的计划。&lt;br>
🔀 &lt;strong>并行任务执行&lt;/strong>：支持多任务并行运行，会话状态指示器会实时提示 Magentic-UI 何时需要您的输入或任务已完成。&lt;/p>
&lt;h2 id="设计架构">设计架构
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-1.png"
width="1723"
height="1307"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-1_hu_427424952f587218.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-1_hu_5cfb5d6930358133.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>&lt;strong>Magentic-UI&lt;/strong> 的底层系统是由一组从 AutoGen 的 &lt;strong>Magentic-One&lt;/strong> 系统（如上图所示）改造而来的专业化 Agent 组构成，各Agent通过模块化协作实现不同功能：&lt;/p>
&lt;h3 id="agent功能说明">Agent功能说明
&lt;/h3>&lt;h4 id="总控代理orchestrator">&lt;strong>总控代理（Orchestrator）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：基于大语言模型（LLM）的主控智能体，负责与用户协同制定计划、决策何时请求用户反馈，并向其他智能体分配子任务。&lt;/li>
&lt;li>&lt;strong>协作流程&lt;/strong>：
&lt;ol>
&lt;li>与用户共同制定分步执行计划；&lt;/li>
&lt;li>动态判断需用户介入的节点；&lt;/li>
&lt;li>将子任务分派至其他智能体执行。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="网页浏览代理websurfer">&lt;strong>网页浏览代理（WebSurfer）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：配备网页浏览器的 LLM 智能体，支持多轮次网页交互操作。&lt;/li>
&lt;li>&lt;strong>核心能力&lt;/strong>：
&lt;ul>
&lt;li>根据总控代理的指令，执行点击、输入、滚动、页面跳转等操作；&lt;/li>
&lt;li>&lt;strong>超越 AutoGen 多模态网页浏览器&lt;/strong>：新增标签管理、选项选择、文件上传及多模态查询支持。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="代码执行代理coder">&lt;strong>代码执行代理（Coder）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：配备 Docker 代码执行容器的 LLM 智能体。&lt;/li>
&lt;li>&lt;strong>核心能力&lt;/strong>：
&lt;ul>
&lt;li>编写并执行 Python 和 Shell 命令；&lt;/li>
&lt;li>将执行结果反馈至总控代理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="文件处理代理filesurfer">**文件处理代理（FileSurfer）
&lt;/h4>&lt;p>**&lt;/p>
&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：集成 Docker 容器与 MarkItDown 包文件转换工具的 LLM 智能体。&lt;/li>
&lt;li>&lt;strong>核心能力&lt;/strong>：
&lt;ul>
&lt;li>定位 Magentic-UI 控制目录下的文件；&lt;/li>
&lt;li>将文件转换为 Markdown 格式并支持内容问答。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="用户代理userproxy">&lt;strong>用户代理（UserProxy）&lt;/strong>
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>功能定位&lt;/strong>：代表用户与系统交互的代理角色。&lt;/li>
&lt;li>&lt;strong>协作模式&lt;/strong>：总控代理可将任务直接委派给用户（而非其他智能体）完成。&lt;/li>
&lt;/ul>
&lt;h3 id="用户交互流程">用户交互流程
&lt;/h3>&lt;p>用户利用 Magentic UI 的交互流程可以用下图表示：
&lt;a class="link" href="https://mermaid.live/edit#pako:eNplVFtPGlEQ_ivkPKOyiCKYtGm9VFut9zbpwgPKqiSVNSsk2g2JNl5AUaCo0YgXLF7SVNCmliqif4Zzdvdf9OyZZcW6Tztzvm_mmzkzR0Zjol9AbjQh-aYnLcPtnqCFfq94ZfOcRIs4kVKvi2qhSK6-ei11dS8sr3n1Po2XTsj2Csn8bNB2F_HqEd67V2Ir3lYgv2bANrnXNyEEQ4GxupFui7J5SKJJHF0mFydqPouj3yIGuo2ijWMdsXrI2O2GAPVhjyYDhnK3rd6nlK24tn_sfc7GuSv19wnk5niSSCq5WwiirayT7UvQbRI5KIea4GiHSDoeEkFShuqQwUXS65Vypqq8Q2eQYok2oAFHj7TdXEPlIU82b2iN2o8c1FGLVbJ5NZ_D-ThVy047eTJfIhtnldJ3JbmML3bw13NI6zV1dTLkGx4nC3jVOCWxMzUbx3dbJL1RLegNw3XJJB7Tsrf4NgEg0BIxw3UxWLeMy2kcW4dT5aqED9ZeVuuaCY_CNOClYqWcBgxEA4D--QOSMBYKiEFLz-Cjt1sv86MwOhSWxgWJpXrLA1Upp7TsNXSwqtmktNEhBPg73rjNmz_A03tztPCM0Rn4LNRk6eFxbpH2kI5lpfTnGXpkRpD6JXF2joF7n0wHia3Rxj4VJgT91Ya9ZZT3stGGnQJOnsKgwkWabXsHQMPqeWL1mhbY79no7BSYu08msXmSiUEGvL-Ci7_-i83wNDHD9_Nq_hKXt7TNXbVQwBuHeO_ocV76GWZABqVaZl49XTAW4GyRzo4Zc6BWwyAPS25sXf4vThRqWdXGDIKQOFlMwKbV-snaN6W0z_xDvFKKkotjcr2gnK95a1NWyxgyJffVKhk2BoBk5mkIpZQmB-a19NXyu0z-MLNH6IqkjGcrFVU2Lp9yRxjoA6979w-9rchK37yAH7lDUliwoilBmvLpJpJ1vAeFJoUpwYPc9HdclISZkAd5ghHKmvYFP4niVJUoieGJSeQe932eoVZ42u8LCe0BH92gRwgdJ0FqE8PBEHJzLhYCuWU0i9yNLU31dpvLaWtq4Zycw95kRXPI7eDqHZzdaXM4XdTlbOQiVvSF5bTVu2wue6O92c412m0tDluzFQn-QEiUeuEdZ8955B-N54jD" target="_blank" rel="noopener"
>&lt;img src="https://mermaid.ink/img/pako:eNplVFtPGlEQ_ivkPKOyiCKYtGm9VFut9zbpwgPKqiSVNSsk2g2JNl5AUaCo0YgXLF7SVNCmliqif4Zzdvdf9OyZZcW6Tztzvm_mmzkzR0Zjol9AbjQh-aYnLcPtnqCFfq94ZfOcRIs4kVKvi2qhSK6-ei11dS8sr3n1Po2XTsj2Csn8bNB2F_HqEd67V2Ir3lYgv2bANrnXNyEEQ4GxupFui7J5SKJJHF0mFydqPouj3yIGuo2ijWMdsXrI2O2GAPVhjyYDhnK3rd6nlK24tn_sfc7GuSv19wnk5niSSCq5WwiirayT7UvQbRI5KIea4GiHSDoeEkFShuqQwUXS65Vypqq8Q2eQYok2oAFHj7TdXEPlIU82b2iN2o8c1FGLVbJ5NZ_D-ThVy047eTJfIhtnldJ3JbmML3bw13NI6zV1dTLkGx4nC3jVOCWxMzUbx3dbJL1RLegNw3XJJB7Tsrf4NgEg0BIxw3UxWLeMy2kcW4dT5aqED9ZeVuuaCY_CNOClYqWcBgxEA4D--QOSMBYKiEFLz-Cjt1sv86MwOhSWxgWJpXrLA1Upp7TsNXSwqtmktNEhBPg73rjNmz_A03tztPCM0Rn4LNRk6eFxbpH2kI5lpfTnGXpkRpD6JXF2joF7n0wHia3Rxj4VJgT91Ya9ZZT3stGGnQJOnsKgwkWabXsHQMPqeWL1mhbY79no7BSYu08msXmSiUEGvL-Ci7_-i83wNDHD9_Nq_hKXt7TNXbVQwBuHeO_ocV76GWZABqVaZl49XTAW4GyRzo4Zc6BWwyAPS25sXf4vThRqWdXGDIKQOFlMwKbV-snaN6W0z_xDvFKKkotjcr2gnK95a1NWyxgyJffVKhk2BoBk5mkIpZQmB-a19NXyu0z-MLNH6IqkjGcrFVU2Lp9yRxjoA6979w-9rchK37yAH7lDUliwoilBmvLpJpJ1vAeFJoUpwYPc9HdclISZkAd5ghHKmvYFP4niVJUoieGJSeQe932eoVZ42u8LCe0BH92gRwgdJ0FqE8PBEHJzLhYCuWU0i9yNLU31dpvLaWtq4Zycw95kRXPI7eDqHZzdaXM4XdTlbOQiVvSF5bTVu2wue6O92c412m0tDluzFQn-QEiUeuEdZ8955B-N54jD?type=png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">graph TD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    A[用户发起请求] --&amp;gt; B[输入文本/附加图片];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    B --&amp;gt; C{Magentic-UI 生成分步计划};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    C -- 生成成功 --&amp;gt; D[用户进入计划编辑界面];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    C -- 生成失败 --&amp;gt; C1[提示用户重新输入];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    C1 --&amp;gt; B;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    D -- 用户编辑计划 --&amp;gt; E{编辑操作};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    E -- 添加/删除/修改步骤 --&amp;gt; D;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    E -- 确认完成 --&amp;gt; F[总控代理存储计划];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    F --&amp;gt; G[启动计划执行引擎];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    G --&amp;gt; H{按顺序执行步骤};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    H --&amp;gt; I{当前步骤类型?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    subgraph 具体步骤执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        direction LR
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- WebSurfer --&amp;gt; J[执行网页操作];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- Coder --&amp;gt; K[生成并执行代码];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- FileSurfer --&amp;gt; L[处理文件];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        I -- UserProxy --&amp;gt; M[提示用户手动操作];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    J --&amp;gt; N{步骤是否成功完成?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    K --&amp;gt; N;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    L --&amp;gt; N;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    M --&amp;gt; N;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    N -- 是 --&amp;gt; O{所有步骤均已完成?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    N -- 否 --&amp;gt; P[记录错误原因];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    P --&amp;gt; Q{是否需要重新规划?};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Q -- 是 --&amp;gt; R[请求用户许可重新规划];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    R -- 同意 --&amp;gt; C;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    R -- 拒绝 --&amp;gt; S[终止流程];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Q -- 否 --&amp;gt; S;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    O -- 是 --&amp;gt; T[生成最终结果];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    O -- 否 --&amp;gt; H;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    T --&amp;gt; U[向用户呈现结果];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    U --&amp;gt; V[结束];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>输入与计划生成&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用户通过文本/图片触发流程，系统生成初始计划。若失败则提示用户重新输入。&lt;/li>
&lt;li>用户通过编辑界面迭代优化计划，确认后进入执行阶段。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>计划执行逻辑&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>总控代理按步骤分配任务至对应智能体（WebSurfer/Coder/FileSurfer）或用户。&lt;/li>
&lt;li>每个步骤完成后验证状态，若失败则判断是否需要重新规划（需用户授权）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态控制与终止&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用户可随时干预：暂停执行、修改计划或终止流程。&lt;/li>
&lt;li>所有步骤完成后交付最终结果，异常情况下提供透明错误反馈。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="工具部署">工具部署
&lt;/h2>&lt;p>&lt;strong>Magentic AI&lt;/strong> 主要基于Python 开发，Web部分基于FastAPI。而它的AI控制主要通过 Playwright 控制 &lt;strong>Docker&lt;/strong> 容器中的一个虚拟浏览器，且可以实时显示给用户。而背后的大模型则主要基于各个开放大模型的API接入方式使用。&lt;/p>
&lt;p>所以要部署Magentic UI，需要先确认相关前置条件：&lt;/p>
&lt;ul>
&lt;li>Docker已安装，如果是Window系统，安装Docker Desktop，且和WSL集成&lt;/li>
&lt;li>提供大模型的接入&lt;strong>API KEY&lt;/strong>，默认使用的是 &lt;strong>OPENAI&lt;/strong> 的API KEY&lt;/li>
&lt;li>Python运行环境且 &lt;strong>&amp;gt;3.10&lt;/strong> 版本&lt;/li>
&lt;/ul>
&lt;p>是在WSL中部署的这个工具， 首先创建python虚拟环境，然后安装Magentic AI及相关依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python3 -m venv .venv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> .venv/bin/activate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip3 install magentic-ui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>确保Docker已启动, 运行Magentic UI前应该没有相关容器在运行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker ps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大模型这里可以使用微软Azure AI上的OPENAI, ， 完成配置后，将对应api key设置为环境变量 &lt;code>OPENAI_API_KEY&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENAI_API_KEY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外Magentic UI本身需要对大模型进行配置，Azure AI的配置模板如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-YAML" data-lang="YAML">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">model_config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">&amp;amp;client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">  &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">AzureOpenAIChatCompletionClient&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">  &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">model&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gpt-4o&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">azure_endpoint&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;YOUR ENDPOINT&amp;gt;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">azure_deployment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;YOUR DEPLOYMENT&amp;gt;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">api_version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2024-10-21&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">azure_ad_token_provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">      &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">autogen_ext.auth.azure.AzureTokenProvider&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">      &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">        &lt;/span>&lt;span class="nt">provider_kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DefaultAzureCredential&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">        &lt;/span>&lt;span class="nt">scopes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">          &lt;/span>- &lt;span class="l">https://cognitiveservices.azure.com/.default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">    &lt;/span>&lt;span class="nt">max_retries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">orchestrator_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">coder_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">web_surfer_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">file_surfer_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">action_guard_client&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="运行">运行
&lt;/h2>&lt;p>然后运行Magentic ui, 默认使用8081端口，首次运行会下载多个不同docker镜像及相关依赖，时间较长，等待安装完成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">magentic ui --port &lt;span class="m">8081&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等运行log中出现如下信息，则启动成功&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">| INFO | magentic_ui.backend.web.app:lifespan:59 - Application startup complete. Navigate to http://127.0.0.1:8081
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>浏览器访问 &lt;code>http://localhost:8081&lt;/code>&lt;/p>
&lt;p>会看到如下界面
&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-3.png"
width="1799"
height="762"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-3_hu_fe26cb204b45df8c.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-3_hu_d4b7548936aad01a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="566px"
>&lt;/p>
&lt;p>启动一个会话后，比如让AI协助我们完成一个测试&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">请测试saucedemo.com网站的不同用户登录功能是否正常，并汇总问题为markdown格式
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如安装正确，大模型调用正常，那么Magentic UI 就会规划相关任务计划，并让用户确认&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-5.png"
width="1830"
height="825"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-5_hu_e4f7b711cc461b62.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-5_hu_5dc9845a629c1a17.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;p>用户也可以根据相关反馈，对计划进行调整，在计划执行过程中，也可以和AI交互，变更它的执行路径。具体的执行演示，可参看下方视频。&lt;/p>
&lt;p>这时查看WSL中的docker 运行信息，可以看到运行了3个容器，其中两个是mangenti UI的&lt;code>coder&lt;/code> 和 &lt;code>file surfer&lt;/code> 智能体，另一个是可远程查看的 &lt;code>vnc_browser&lt;/code> 容器&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-2.png"
width="795"
height="189"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-2_hu_4b1b4977de39e810.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-2_hu_bf1e193fd2bb5b12.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="420"
data-flex-basis="1009px"
>&lt;/p>
&lt;p>一系列步骤执行完成，Magentic UI根据最开始的指令，得到了如下markdown格式结果汇总。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">以下是对saucedemo.com网站不同用户登录功能测试的结果汇总：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">1.&lt;/span> &lt;span class="gs">**标准用户**&lt;/span> (&lt;span class="sb">`standard_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录成功。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 无问题，用户可以正常访问库存页面并浏览产品。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">2.&lt;/span> &lt;span class="gs">**被锁定用户**&lt;/span> (&lt;span class="sb">`locked_out_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录失败。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 显示错误消息 &amp;#34;Epic sadface: Sorry, this user has been locked out.&amp;#34; 账户已被锁定，无法访问。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">3.&lt;/span> &lt;span class="gs">**问题用户**&lt;/span> (&lt;span class="sb">`problem_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录成功。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 产品图像存在不匹配的问题，图像错误是已知问题。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">4.&lt;/span> &lt;span class="gs">**性能故障用户**&lt;/span> (&lt;span class="sb">`performance_glitch_user`&lt;/span>):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 登录成功。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">-&lt;/span> 无明显系统减慢或异常，用户可以正常导航。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些结果表明网站能够正确处理不同账户类型的登录场景。如果您想亲自测试，可以访问 [&lt;span class="nt">saucedemo.com&lt;/span>](&lt;span class="na">https://www.saucedemo.com/&lt;/span>)。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用体会">使用体会
&lt;/h2>&lt;p>总体应用下来，把AI重新定位为辅助者角色，显然更贴合当前AI应用的实际，而且通过容器实时显示AI的操作过程，使AI执行任务不再像个黑盒，确实友好了很多。&lt;/p>
&lt;p>不过应用中感觉还是实用性不是太好，虽然官方已声明现阶段还是研究性质，但尚有较大改进空间。&lt;/p>
&lt;ol>
&lt;li>安装和配置比较复杂，各种依赖包众多，耗时较久&lt;/li>
&lt;li>大模型本身能力对执行过程，包括是否能正常完成交互都有较大影响。调用失败和异常较多。&lt;/li>
&lt;li>大模型的token消耗比较可观，完成一个任务，其实会分解多数十个不同请求，而每个请求的token消耗也是数千计，实用付费模型的话，成本高昂&lt;/li>
&lt;/ol>
&lt;p>下图是Azure后台查看的我试验期间的token消耗，比较可观。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-4.png"
width="1524"
height="388"
srcset="https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-4_hu_e0d7e868c2da13d7.png 480w, https://chengxiaqiucao.github.io/post/097-magenticui%E8%AF%84%E6%B5%8B/snap_20250526-4_hu_5ac4275b5ccc0967.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>&lt;/p>
&lt;p>总之，Magentic UI 的发展方向值得期待，但当下还需要多等待它的进一步完善。&lt;/p>
&lt;hr></description></item><item><title>可以抛弃postman啦, API测试工具Bruno实用教程(二)：进阶篇</title><link>https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/</link><pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/</guid><description>&lt;p>在前文 【】和 【】中，我们分别对&lt;code>Bruno&lt;/code> 这个近来备受关注的接口测试工具的优缺点和基本使用方法进行了介绍，本文我们会继续在上一篇的基础上，介绍 &lt;strong>Bruno&lt;/strong> 和自动化测试相关的进阶用法&lt;/p>
&lt;h2 id="bruno的六层变量作用域">Bruno的六层变量作用域
&lt;/h2>&lt;p>和 &lt;strong>postman&lt;/strong> 类似，&lt;strong>Bruno&lt;/strong> 中也同样对接口测试中的变量使用提供了多层设计，可以通过不同层级的作用域区分，为接口测试和自动化提供了更多灵活性和应用场景。&lt;/p>
&lt;p>Bruno中提供了6类不同的变量，其作用范围次序如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250429.png"
width="954"
height="384"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250429_hu_8ec68d7d160bb425.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250429_hu_84c366fc5b3852f8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="596px"
>&lt;/p>
&lt;h3 id="全局变量">全局变量
&lt;/h3>&lt;p>全局变量是作用范围最大的变量类型。设置全局变量是通过 Bruno 的 &lt;code>global Environments&lt;/code> 设置，位置如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505.png"
width="793"
height="365"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505_hu_c2ba7aa86d26e494.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505_hu_7bb6ba58895c7433.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="521px"
>&lt;/p>
&lt;p>然后比如增加一个全局变量，配置并启用：
&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-1.png"
width="1271"
height="732"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-1_hu_b0464db4f96920e1.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-1_hu_1d7f1b2a1e370c94.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;p>这时我们获取Github API中的用户信息，可以获取&lt;code>userid = 1&lt;/code> 的用户&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-2.png"
width="1910"
height="787"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-2_hu_d0d136c3cb6c1581.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-2_hu_62e83964fba76922.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;h3 id="collection变量">Collection变量
&lt;/h3>&lt;p>在设置了全局变量后，再设置 collection 集合变量
&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-3.png"
width="1389"
height="613"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-3_hu_e44d8c7b1916b798.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-3_hu_99f2d49a198691af.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="226"
data-flex-basis="543px"
>&lt;/p>
&lt;p>然后发送请求，此时生效的就是集合变量&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-4.png"
width="1896"
height="555"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-4_hu_5a3d4cee045cf674.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-4_hu_856871b559d49608.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="819px"
>&lt;/p>
&lt;h3 id="环境变量">环境变量
&lt;/h3>&lt;p>下一层是可以设置不同的环境，在如下位置配置：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-5.png"
width="1603"
height="706"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-5_hu_2c6a8b2bb0e09b94.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-5_hu_c691d1ff40f5c9b1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="544px"
>&lt;/p>
&lt;p>此时生效的是 &lt;code>userid = 3&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-6.png"
width="1917"
height="647"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-6_hu_efc797d954d9dc95.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-6_hu_e55b5a837cb08550.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/p>
&lt;h3 id="folder变量">Folder变量
&lt;/h3>&lt;p>在collection下一层，可以创建目录，这里设置变量， 生效的就是目录变量&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-7.png"
width="967"
height="619"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-7_hu_909d034f40238aad.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-7_hu_3f1f95d0e690a133.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-8.png"
width="1897"
height="728"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-8_hu_1d45c2196d2da54e.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-8_hu_197cda31de260b22.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="260"
data-flex-basis="625px"
>&lt;/p>
&lt;h3 id="请求变量">请求变量
&lt;/h3>&lt;p>再下一层，则是具体的请求当中设置的变量&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-9.png"
width="1913"
height="633"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-9_hu_2f6e319a18e77f1d.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-9_hu_4d415befcf26da98.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="302"
data-flex-basis="725px"
>&lt;/p>
&lt;h3 id="运行时变量">运行时变量
&lt;/h3>&lt;p>除了预设变量的情况，Bruno也支持通过脚本，在执行时设置&lt;strong>运行时变量&lt;/strong>，使用如下代码设置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bru&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;userid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在执行请求后，查看当前runtime变量，还可以通过工具栏中的对应按钮进入显示界面查看。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-10.png"
width="1917"
height="553"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-10_hu_ab823dece5d2b358.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-10_hu_d3c59748e0c37f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="346"
data-flex-basis="831px"
>&lt;/p>
&lt;p>通过以上实例，可以看到，Bruno的多层变量体系及其作用范围，同样的变量名，生效优先次序依次为：&lt;/p>
&lt;p>&lt;strong>运行时变量 -&amp;gt; 请求变量 -&amp;gt; 目录变量 -&amp;gt; 环境变量 -&amp;gt; 集合变量 -&amp;gt; 全局变量&lt;/strong>&lt;/p>
&lt;h3 id="流程环境变量">流程环境变量
&lt;/h3>&lt;p>除了上面这些多层变量设计外，在我们处理接口时，像token、API Key或一些账号密码等比较敏感的数据变量，可能并不希望在接口及相关配置文件( *.bru )中体现。针对这类变量，Bruno 也提供了一个针对性的处理方式，就是通过 &lt;code>.env&lt;/code> 文件来存储。&lt;code>.env&lt;/code> 文件需放置在collection的根目录下，变量定义采用key-value 形式，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">userid = 7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时，我们在配置变量时就可以通过&lt;code>{{process.env.userid}}&lt;/code> 来实现引用，避免相关敏感数据，直接出现在接口定义文件中&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-11.png"
width="1624"
height="674"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-11_hu_eec7d6decd9cec18.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-11_hu_e4933bcc0d510a0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="578px"
>&lt;/p>
&lt;h2 id="bruno脚本及执行顺序">Bruno脚本及执行顺序
&lt;/h2>&lt;p>Bruno的脚本功能，使用的是标准JavaScript语法。可以在Collection、Folder、Request三个不同层级上定义请求前（Pre）和请求后（Post）要执行的脚本。并且Bruno提供了两种脚本执行顺序模型（主要区别是post脚本的执行顺序）&lt;/p>
&lt;h3 id="1-sandwich-flow-默认">1. Sandwich Flow （默认）
&lt;/h3>&lt;p>这种模式下，不同层级脚本的执行顺序如下&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Collection Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Request Pre Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Request Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Collection Post Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>和各类单元测试框架的分层执行顺序类似。&lt;/p>
&lt;h3 id="2-sequential-natural-flow">2. Sequential (Natural) Flow
&lt;/h3>&lt;p>这种执行顺序，和Postman的脚本执行顺序类似，完全按层级顺序来执行。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Collection Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Pre Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Request Pre Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Collection Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Folder Post Script&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>Request Post Script&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>要采用这种顺序，需要在Bruno的配置文件 &lt;code>bruno.json&lt;/code> 中配置 &lt;code>flow&lt;/code> 参数，形如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filesystemAccess&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;allow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;flow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;sequential&amp;#34;&lt;/span> &lt;span class="c1">// Or &amp;#34;sandwich&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="执行示例">执行示例
&lt;/h3>&lt;p>在各个层级的脚本中分别添加对应的脚本日志，打开Bruno集成的Dev Tool控制台，可看到对应执行顺序的不同。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-12.png"
width="1907"
height="959"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-12_hu_1a46deb8aec95501.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-12_hu_b0096c7bac7c1381.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>修改 &lt;code>bruno.json&lt;/code>， 配置flow模式为 &lt;code>sequential&lt;/code>，可以看到post部分的输出顺序发生了变化。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-13.png"
width="1900"
height="959"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-13_hu_770e6918705a367f.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250505-13_hu_c881d4b8b6e3241d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;h2 id="流程依赖处理">流程依赖处理
&lt;/h2>&lt;p>在我们实际的接口测试时，一个经常遇到的场景，就是后续的请求，会需要依赖之前请求的返回数据，比如最常见的动态token获取等场景。&lt;/p>
&lt;p>而利用Bruno的变量和脚本，我们可以通过脚本实现这种接口的关联操作。&lt;/p>
&lt;p>在Bruno的官方文档中，他内置的bru对象，提供了 &lt;code>setNextRequest&lt;/code>， &lt;code>runRequest&lt;/code> 这样的方法，使我们可以根据自己的需要，确定在执行某个接口请求时，指定下一条需要执行的请求（不再按默认顺序执行），或者也可以直接在当前请求的脚本中，运行其他接口请求。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-2.png"
width="1799"
height="859"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-2_hu_dfaa9fd6e928ba6c.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-2_hu_7530ca08e3e55a12.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>通过这种方式，我们就可以通过设置变量，并将变量进行接口间的传递，以此完成流程依赖场景的实现。&lt;/p>
&lt;p>比如这里我们获取github用户下的repo清单，这个接口。 这里的 &lt;code>{{username}}&lt;/code> 变量，我们希望通过指定 &lt;code>userid&lt;/code> 来获取。也就是先执行前面的 &lt;code>getUserInfo&lt;/code> 这个接口，根据 &lt;code>userid&lt;/code> 来获取 &lt;code>username&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-3.png"
width="1133"
height="468"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-3_hu_3c1e92897aea7bb5.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-3_hu_1ef80bb2a9103da9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>这里我们定义getUserRepos，使用变量&lt;code>{{username}}&lt;/code>， 但此时该变量未定义，所以显示为红色&lt;/p>
&lt;p>然后在 &lt;code>getUserInfo&lt;/code> 这个接口中，我们定义脚本，提取当前响应的username，并进行变量赋值。然后直接调用 &lt;code>getUserRepos&lt;/code> 接口（注意这里调用的接口路径，应该以collection根路径进行定义）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bru&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">login&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">bru&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">runRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;variables/getUserRepos&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>getUserInfo&lt;/code>， 可以看到，执行成功，脚本中执行的 &lt;code>getUserRepos&lt;/code> 接口也成功得到了 &lt;code>200OK&lt;/code> 的响应状态&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-4.png"
width="1915"
height="959"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-4_hu_9a6d4480f9e77d22.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-4_hu_523668b12748d1de.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;h2 id="runner执行器">Runner执行器
&lt;/h2>&lt;p>除了在脚本中执行指定接口， Bruno其实也提供了一个Runner的执行器，从工具栏打开执行器，也可以批量地依次运行Collection中的所有接口&lt;/p>
&lt;p>比如上例，我们如果只是在 &lt;code>getUserInfo&lt;/code> 中获取并定义变量 username, 而不执行。 只要&lt;code>getUserRepos&lt;/code>在 &lt;code>getUserInfo&lt;/code> 之后执行，也同样可以执行成功。&lt;/p>
&lt;p>Runner运行效果如下：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507.png"
width="786"
height="739"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507_hu_e9749e6ff9e8c3d9.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507_hu_75c21443013e260a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="255px"
>&lt;/p>
&lt;p>但这里Bruno默认的功能，是运行collection中的所有请求，且调整顺序的功能，虽然有提供，但只包含在付费的高级版中，包括基于csv或json的数据驱动功能，免费版本中也不包含。稍显鸡肋。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-1.png"
width="1908"
height="602"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-1_hu_53841b760253dcdf.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-1_hu_93ca7e915c00a747.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="316"
data-flex-basis="760px"
>&lt;/p>
&lt;h3 id="bruno命令行-bruno-cli">Bruno命令行 Bruno CLI
&lt;/h3>&lt;p>上面 &lt;code>Runner执行器&lt;/code> 的功能因为受限，在我们要进行接口自动化时，比较鸡肋，基本无法使用。但Bruno这里的高级版本功能，其实只是针对界面上触发进行了限制。&lt;/p>
&lt;p>我们要执行自动化，也可以利用它提供的命令行功能来实现。&lt;/p>
&lt;p>这里的CLI程序，需要单独安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm install -g @usebruno/cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，能正确显示版本号表示安装成功， 如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">C:\qiucao&amp;gt;bru --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过命令行执行，我们就可以根据自己的需要，比如执行指定目录下的接口。&lt;/p>
&lt;p>这里携带的两个参数 &lt;code>--env&lt;/code> 指定需要使用的环境， &lt;code>--reporter-html&lt;/code> 会在完成执行后生成一个html格式的测试报告。（详细的参数，可参考文档 &lt;a class="link" href="https://docs.usebruno.com/bru-cli/commandOptions" target="_blank" rel="noopener"
>https://docs.usebruno.com/bru-cli/commandOptions&lt;/a>）&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-5.png"
width="1073"
height="778"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-5_hu_892e0de1fbf09c4.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-5_hu_f986bea380a76775.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="331px"
>&lt;/p>
&lt;p>生成的测试报告：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-6.png"
width="1920"
height="904"
srcset="https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-6_hu_bb7cb51a71c4e95d.png 480w, https://chengxiaqiucao.github.io/post/090-bruno%E8%BF%9B%E9%98%B6/snap_20250507-6_hu_4ca67f049a940f86.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="509px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于Bruno中使用脚本和自动化执行相关功能的进阶说明。欢迎继续关注后续文章。&lt;/p>
&lt;p>回复&lt;code>大纲&lt;/code> 可查看秋草测试技能全栈提升课详细目录。回复 &lt;code>进群&lt;/code>可进入测试交流群和小伙伴们分享测试技术、交换资讯。&lt;/p></description></item><item><title>Postman最佳平替, API测试工具Bruno实用教程(一)：基础篇</title><link>https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 02 May 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="序言">序言
&lt;/h2>&lt;p>在前文【】中，我们介绍了目前目前Github上广受关注的新锐接口测试工具Bruno，给厌倦了Postman必须在线使用限制的同学提供了一个很好的替代选择。&lt;/p>
&lt;p>Bruno的核心优势，官网重点给出了如下几点：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/089-bruno%e4%bb%8b%e7%bb%8d/snap_20250420-3.png"
loading="lazy"
>&lt;/p>
&lt;ol>
&lt;li>承诺开源和可扩展，并且专心做客户端，永不向“平台化”扩充产品。&lt;/li>
&lt;li>基于Git实现协作和版本管理&lt;/li>
&lt;li>离线使用，永不同步本地数据 😂😂😂&lt;/li>
&lt;/ol>
&lt;p>下面我们就通过一个系列，详细介绍通过Bruno来进行API接口测试的详细实战教程。本文是第一篇，重点介绍如下内容：&lt;/p>
&lt;ul>
&lt;li>Bruno的安装和界面说明&lt;/li>
&lt;li>结合Github API实现典型API操作的方法&lt;/li>
&lt;li>环境管理&lt;/li>
&lt;li>鉴权机制和加密&lt;/li>
&lt;/ul>
&lt;h2 id="bruno安装和界面概览">Bruno安装和界面概览
&lt;/h2>&lt;h3 id="安装">安装
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Mac (Homebrew)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install bruno
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Windows (Winget)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">winget install usebruno.bruno
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Linux (Snap)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap install bruno
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用界面">使用界面
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427.png"
width="1920"
height="1014"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427_hu_3d5f5b7dc3298405.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427_hu_ac819fb60e419176.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>左侧面板&lt;/strong>：Collection管理、导航（类似IDE的项目结构）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>中央区域&lt;/strong>：请求编辑器（URL/Headers/Body配置）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>右侧面板&lt;/strong>：响应结果显示（内容、状态、断言等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工具栏&lt;/strong>：顶部主要是一些高级功能配置（付费版本）、变量管理（全局、环境）；底部工具栏是工具的系统级配置（界面、代理、鉴权等），cookies、license管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>快捷键体系&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl +E&lt;/code>：环境变量设置&lt;/li>
&lt;li>&lt;code>Ctrl + B&lt;/code>：新建请求&lt;/li>
&lt;li>&lt;code>Ctrl + Enter&lt;/code>：立即发送请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="典型http接口测试实现github-api">典型HTTP接口测试实现(Github API)
&lt;/h2>&lt;p>下面我们结合 &lt;code>Github&lt;/code> 的官方API接口，介绍在 &lt;code>Bruno&lt;/code> 中如何完成典型HTTP接口请求测试。&lt;/p>
&lt;h3 id="github-api简介">Github API简介
&lt;/h3>&lt;p>GitHub 是一个面向开源软件项目的托管平台，因为使用 Git 作为唯一的版本库格式进行托管，故名 GitHub。也是目前全球最大的代码托管平台，可以说是程序员的圣地，号称&lt;strong>全球最大的同性交友平台&lt;/strong>&lt;/p>
&lt;p>GitHub API目前有两个版本，一个是基于GraphQL的V4版本， 而更常用的主要还是之前的Restful API，它的Restful API定义长期以来被视作此类接口的典范。&lt;/p>
&lt;p>具体的接口说明文档：参见 &lt;a class="link" href="https://docs.github.com/zh/rest?apiVersion=2022-11-28" target="_blank" rel="noopener"
>https://docs.github.com/zh/rest?apiVersion=2022-11-28&lt;/a>&lt;/p>
&lt;h5 id="github-中的时间格式">github 中的时间格式
&lt;/h5>&lt;p>&lt;code>YYYY-MM-DDTHH:MM:SSZ&lt;/code>&lt;/p>
&lt;h5 id="github-限流规则">github 限流规则
&lt;/h5>&lt;p>github 为包含服务端负载压力，会对请求流量进行限制。在每个 github 的响应消息头中都会携带 github 的限流设置。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>头参数&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>X-RateLimit-Limit&lt;/td>
&lt;td>当前每小时最大请求限制，一般未鉴权请求60次，鉴权请求5000次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Remaining&lt;/td>
&lt;td>当前剩余请求次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X-RateLimit-Reset&lt;/td>
&lt;td>剩余限制重置时间，毫秒&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="请求参数与分页">请求参数与分页
&lt;/h5>&lt;p>请求中可以携带参数，一般包含两种参数: &lt;strong>路径参数&lt;/strong>和&lt;strong>查询参数&lt;/strong>
&lt;img src="https://chengxiaqiucao.github.io/frontEndDemo/images/20190119_121133.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>github API中默认支持两个分页参数：&lt;/p>
&lt;ul>
&lt;li>page 当前显示页数&lt;/li>
&lt;li>per_page 每页显示结果数&lt;/li>
&lt;/ul>
&lt;h5 id="github-请求token">github 请求Token
&lt;/h5>&lt;p>从Github账号设置页中，增加访问API的Token配置&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-2.png"
width="557"
height="515"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-2_hu_66cd2c75970aea79.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-2_hu_c171d685a2a59dfd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/p>
&lt;h3 id="配置token鉴权">配置Token鉴权
&lt;/h3>&lt;p>进入Bruno，新建一个Collection， 命名 &lt;code>github&lt;/code>，在其中的 &lt;code>Auth&lt;/code> 部分, 将之前设置的API token添加进来，这里的鉴权方式选择 &lt;code>bearer Token&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-3.png"
width="1327"
height="640"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-3_hu_67ad038071041bbd.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-3_hu_3640a8091675797f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;p>除了 &lt;code>bearer Token&lt;/code> 外， Bruno还支持其他多种鉴权方式，能基本覆盖到各种API接口的鉴权模式。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AWS Sig&lt;/strong>：针对亚马逊的AWS公有云用户签名的认证方式&lt;/li>
&lt;li>&lt;strong>Basic auth&lt;/strong>：基本鉴权，通过输入账号、密码&lt;/li>
&lt;li>&lt;strong>WSSE auth&lt;/strong>：Web Service安全用户认证&lt;/li>
&lt;li>&lt;strong>Bearer Token&lt;/strong>：基于加密文本的安全认证令牌&lt;/li>
&lt;li>&lt;strong>Digest auth&lt;/strong>：摘要式认证&lt;/li>
&lt;li>&lt;strong>NTLM auth&lt;/strong>：微软的局域网管理认证协议&lt;/li>
&lt;li>&lt;strong>Oauth 2.0&lt;/strong>：开放式授权协议，是第三方认证的常用协议&lt;/li>
&lt;li>&lt;strong>API Key&lt;/strong>：服务端自己定义的接入令牌&lt;/li>
&lt;li>&lt;strong>no Auth&lt;/strong>：不鉴权&lt;/li>
&lt;li>&lt;strong>inherit&lt;/strong>：继承上一级鉴权（Bruno中，下一级请求可以使用上一级的鉴权设置）&lt;/li>
&lt;/ul>
&lt;h3 id="接口测试中的增删改查">接口测试中的增删改查
&lt;/h3>&lt;h5 id="1-get请求获取制定项目最新release">1. GET请求：获取制定项目最新Release
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>GET /repos/{owner}/{repo}/releases/latest&lt;/code>&lt;/p>
&lt;p>Bruno中通过 &lt;code>{{var}}&lt;/code>，可以在请求中指定变量，变量配置如下。点击发送按钮后，成功获得响应。&lt;/p>
&lt;p>请求这里的鉴权方式使用&lt;code>inherit&lt;/code>， 继承collection中配置的 &lt;code>bearer token&lt;/code> 鉴权方式&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-4.png"
width="1617"
height="814"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-4_hu_49b1c8982cb7161c.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250427-4_hu_a67456c847fbe8b9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;h5 id="2--post请求创建issue">2. POST请求：创建Issue
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>POST /repos/{owner}/{repo}/issues&lt;/code>&lt;/p>
&lt;p>创建issue，对应 &lt;code>POST&lt;/code> 方法，Bruno中配置如下，&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428_hu_198f1d44ff29f7f2.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428_hu_841abc7470e6d15e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Body配置&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">{issue_title&lt;/span>&lt;span class="p">}}&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;发现一个测试问题&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;labels&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;bug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>动态变量注入&lt;/strong>：&lt;/p>
&lt;p>这里的issue标题，我们使用Bruno的内置动态变量 &lt;code>{{$timestamp}}&lt;/code>, Bruno提供了丰富的内置动态变量，对于我们动态模拟请求数据提供了极大方便。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 标题预置变量&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">vars&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">issue_title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;测试问题_{{$timestamp}}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>到Github上查看，Issue已创建
&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-1.png"
width="1169"
height="519"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-1_hu_947698b84198e874.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-1_hu_42d86690cfeb564d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="225"
data-flex-basis="540px"
>&lt;/p>
&lt;h5 id="3-patch请求修改issue">3. PATCH请求：修改Issue
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>PATCH /repos/{owner}/{repo}/issues/3&lt;/code>&lt;/p>
&lt;p>关闭 issue_number 为 3 的问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;state&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-2.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-2_hu_e382084e5b009e8.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-2_hu_877e6911d3b1679f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;h5 id="4-delete请求删除issue-评论">4. DELETE请求：删除Issue 评论
&lt;/h5>&lt;p>&lt;strong>目标接口&lt;/strong>：&lt;code>DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}&lt;/code>
&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-3.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-3_hu_ce61fb73f8a20e9b.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-3_hu_76c588046b52fd8d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;h3 id="基础测试断言">基础测试断言
&lt;/h3>&lt;h5 id="test脚本验证--状态码">Test脚本验证 状态码
&lt;/h5>&lt;p>Bruno 中可以类似Postman那样编写Test脚本来进行结果验证&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Status is 200&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">to&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="界面assert">界面Assert
&lt;/h5>&lt;p>对于一些常用的断言，Bruno中也可以直接在界面上通过添加 &lt;code>Assert&lt;/code> 来进行断言。&lt;/p>
&lt;p>以上Test和Assert 执行结果如下&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-4.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-4_hu_9483c4d456602b82.png 480w, https://chengxiaqiucao.github.io/post/088-bruno%E5%9F%BA%E7%A1%80/snap_20250428-4_hu_a69021e548746a1c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;hr>
&lt;p>以上就是关于Bruno进行接口测试时，主要的基础功能用法介绍。后续会继续更新其他进阶用法更新。 也欢迎大家进入测试交流群和小伙伴们继续深入交流。回复 &lt;code>进群&lt;/code> 获取入群邀请。&lt;/p></description></item><item><title>AI智能驱动浏览器工具Browser Use详解</title><link>https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-1.png" alt="Featured image of post AI智能驱动浏览器工具Browser Use详解" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在之前关于 AI 测试相关的几篇文章中，我们分别介绍了通过 &lt;code>playwright-mcp&lt;/code>，以及 &lt;code>midscene.js&lt;/code>、&lt;code>magentic ui&lt;/code> 等几个不同的 AI 浏览器工具，实现 AI 驱动自动化测试的方法介绍。而其实在这些不断涌现的新工具出现之前，还有一个更早推出（2024.11），也同样还在不断完善的AI浏览器驱动工具 &lt;code>Browser Use&lt;/code>，其工具实现思路，为后来的相关工具提供了很多借鉴。 而经过半年多40多个版本的迭代，目前最新版本 &lt;code>0.2.5&lt;/code>，工具功能也日臻完善。&lt;/p>
&lt;p>本文，我们就再来对这个 AI 浏览器做一个系统的介绍。&lt;/p>
&lt;h2 id="browser-use简介">browser-use简介
&lt;/h2>&lt;p>browser-use 的定位是提供一个简易且功能强大的，将不同AI Agent和浏览器连接起来的方案，实现基于AI的智能化浏览器自动化。&lt;/p>
&lt;p>它是一个基于Python的开源库，在github上已有超过 &lt;strong>61K&lt;/strong> 的Stars，可以说是备受关注。&lt;/p>
&lt;p>主要依托 &lt;strong>Playwright/Puppeteer&lt;/strong> 的浏览器控制能力和 AI 大模型的推理分析能力，完成让 AI 从资讯助手向辅助执行的转变。在其之后，mcp大行其道，包括后续的其他各种浏览器AI驱动，也都能看到 browser-use 方案的影子。&lt;/p>
&lt;h2 id="实现原理">实现原理
&lt;/h2>&lt;p>&lt;strong>browser-use&lt;/strong> 的实现，其实是通过 &lt;strong>Langchain&lt;/strong> 和 &lt;strong>LLM 大语言模型&lt;/strong>实现的一个 &lt;strong>AI Agent&lt;/strong> 智能体，来理解网页内容并进一步生成操作指令。项目底层依赖 &lt;strong>Playwright&lt;/strong> 框架实现浏览器自动化操作，支持多浏览器（如 Chromium、Firefox 等），能够模拟真实用户的点击、输入、导航等行为。&lt;/p>
&lt;p>基于 AI 能力，系统能够自动识别网页中的可交互元素（如按钮、输入框等），并结合上下文的理解生成对应的交互逻辑，提升自动化效率，实现基于 AI 的浏览器智能。&lt;/p>
&lt;h2 id="核心架构解析">核心架构解析
&lt;/h2>&lt;p>browser-use 通过分层架构实现 AI Agent 与浏览器的深度集成，其核心架构不同分层的主要作用如下：&lt;/p>
&lt;h3 id="agent-层决策中枢">&lt;strong>Agent 层&lt;/strong>（决策中枢）
&lt;/h3>&lt;p>这一层，主要负责任务流程编排与决策制定。通过实现小型状态机管理任务流程， 并与 LLM（如 OpenAI）进行交互获取决策指令。&lt;/p>
&lt;h3 id="controller-层指令转换器">&lt;strong>Controller 层&lt;/strong>（指令转换器）
&lt;/h3>&lt;p>这一层负责将高级决策转化为具体浏览器操作指令， 支持 DOM 操作、页面导航等基础动作，也提供对多标签页交互逻辑的管理。&lt;/p>
&lt;h3 id="dom-解析引擎">&lt;strong>DOM 解析引擎&lt;/strong>
&lt;/h3>&lt;p>在这一层对网页结构与内容实时解析，包括提供视觉识别能力（OCR 支持），完成对可操作的网页元素映射关系的构建。&lt;/p>
&lt;h3 id="browser-接口层">&lt;strong>Browser 接口层&lt;/strong>
&lt;/h3>&lt;p>在这一层，基于Playwright框架实际驱动浏览器行为，除了内置的无头模式控制，也可以通过指定浏览器路径和用户浏览器进行交互。&lt;/p>
&lt;h3 id="架构图">架构图
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529.png"
width="761"
height="638"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529_hu_12b6a65ba38f36d8.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529_hu_e32f6c65fd498b79.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;h2 id="部署安装">部署安装
&lt;/h2>&lt;p>建议使用 python 包管理工具 &lt;strong>uv&lt;/strong> 进行安装部署&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span> &lt;span class="n">venv&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-python&lt;/span> &lt;span class="mf">3.11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">venv&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Scripts&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">activate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span> &lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="nb">browser-use&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">playwright&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-with-deps&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>工具需要使用对应大模型的API KEY, 定义在&lt;code>.env&lt;/code> 环境配置文件中, 支持各大主流LLM:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">OPENAI_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ANTHROPIC_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AZURE_OPENAI_ENDPOINT=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">AZURE_OPENAI_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GOOGLE_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DEEPSEEK_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GROK_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NOVITA_API_KEY=
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="通过web界面使用">通过web界面使用
&lt;/h2>&lt;p>browser-use 本身也提供了一个 Web UI 界面来直接调用，它也需要单独安装， 在 venv下继续执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="p">//&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">browser-use&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="nb">web-ui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">git&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd web-ui&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span> &lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">-r&lt;/span> &lt;span class="n">requirements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">python&lt;/span> &lt;span class="n">webui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">py&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-ip&lt;/span> &lt;span class="mf">127.0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">1&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-port&lt;/span> &lt;span class="mf">7788&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="启动界面">启动界面
&lt;/h3>&lt;p>运行成功后，会看到如下 web-ui 的界面，&lt;code>Agent Settings&lt;/code> 可以在界面上配置使用的LLM，&lt;code>Browser Settings&lt;/code> 配置浏览器的交互方式，&lt;code>Run Agent&lt;/code> 是实际调用大模型和浏览器完成自动化任务的交互界面和结果记录
&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-3.png"
width="1446"
height="731"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-3_hu_62263a26fba44e16.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-3_hu_14e2c77e39afdc04.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;h3 id="llm配置">LLM配置
&lt;/h3>&lt;p>这里使用的是本地部署的Ollama+Deepseek-r1:14b&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-4.png"
width="1238"
height="775"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-4_hu_ea62e7ead95668ac.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-4_hu_1bec7f4e2b18ab45.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;h3 id="运行过程">运行过程
&lt;/h3>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-5.png"
width="1257"
height="826"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-5_hu_197e74af798b61b1.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-5_hu_91ab40dd48765c25.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>实际调用的浏览器和运行日志：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-2.png"
width="1896"
height="1015"
srcset="https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-2_hu_d336a8b779971127.png 480w, https://chengxiaqiucao.github.io/post/086-browser-use%E7%9A%84%E4%BD%BF%E7%94%A8/snap_20250529-2_hu_1a928ad7d8ee6553.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>&lt;/p>
&lt;p>整个执行过程还会生成一个 gif 图：
&lt;img src="https://chengxiaqiucao.github.io/browseruse-web-ui.gif"
loading="lazy"
>&lt;/p>
&lt;h2 id="python脚本调用">Python脚本调用
&lt;/h2>&lt;p>除了通过 Web-UI 来完成任务，当然更多的情况下是通过代码调用，比如如下代码通过 Deepseek的官方API调用，包括了输出格式的定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">langchain_deepseek&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ChatDeepSeek&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">browser_use&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Agent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pydantic&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SecretStr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BaseModel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ValidationError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">field_validator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ConfigDict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Field&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dotenv&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">load_dotenv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">browser_use&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 统一模型输出定义&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PostItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseModel&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model_config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConfigDict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">extra&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ignore&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post_title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post_url&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num_comments&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hours_since_post&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@field_validator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;num_comments&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;hours_since_post&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;before&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">convert_numbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">cls&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;确保数值字段转换为整数&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isdigit&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Posts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BaseModel&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">posts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PostItem&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 结果解析函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">parse_result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Posts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;安全解析结果数据&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Parsed data:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Posts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model_validate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONDecodeError&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ValidationError&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;解析错误: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 非json格式，直接返回结果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">controller&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Controller&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output_model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">Posts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">load_dotenv&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">api_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;DEEPSEEK_API_KEY&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Initialize the model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">llm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ChatDeepSeek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">base_url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;https://api.deepseek.com/v1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;deepseek-reasoner&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">api_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">SecretStr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">api_key&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Create agent with the model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Agent&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;测试saucedemo.com网站standard_user的登录功能, 使用不同密码(secret_sauce,空密码)，登录成功则验证完成，否则需要输出错误信息。测试结果需要包含以下信息：&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">1. 登录是否成功&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">2. 如果登录失败，错误信息是什么&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">llm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">llm&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">use_vision&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">history&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">agent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">history&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">final_result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parsed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parse_result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">parsed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">post&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">parsed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s1">--------------------------------&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;Title: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post_title&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;URL: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post_url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;Comments: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">num_comments&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;Hours since post: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hours_since_post&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 异步主函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;程序运行时出错: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行也是通过playwright打开浏览器，效果和web-ui类似。&lt;/p>
&lt;p>程序输出如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">C:\qiucao\AI\browser_use&amp;gt;python app.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING [agent] ⚠️ DeepSeek models do not support use_vision=True yet. Setting use_vision=False for now...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Starting an agent with main_model=deepseek-reasoner +rawtools +memory, planner_model=None, extraction_model=deepseek-reasoner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [mem0.vector_stores.faiss] Loaded FAISS index from /tmp/mem0_384_faiss/mem0.faiss with 0 vectors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [mem0.vector_stores.faiss] Loaded FAISS index from C:\Users\weiwe\.mem0\migrations_faiss/mem0_migrations.faiss with 1 vectors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🚀 Starting task: 测试saucedemo.com网站standard_user的登录功能, 使用不同密码(secret_sauce,空密码)，登录成功则验证完成，否则需要输出错误信息。测试结果需要包含以下信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 登录是否成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 如果登录失败，错误信息是什么
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🤷 Eval: Unknown - Just started the task. No previous actions taken.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: Starting task: Test login functionality on saucedemo.com for user &amp;#39;standard_user&amp;#39; with two password cases. 0 out of 2 password tests completed. First need to navigate to login page.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Navigate to saucedemo.com login page to begin testing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/1: {&amp;#34;go_to_url&amp;#34;:{&amp;#34;url&amp;#34;:&amp;#34;https://www.saucedemo.com&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🔗 Navigated to https://www.saucedemo.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Navigation to saucedemo.com completed successfully. Login page is loaded with required input fields visible.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 0 out of 2 password tests completed. Starting first test case: username &amp;#39;standard_user&amp;#39; with valid password &amp;#39;secret_sauce&amp;#39;. Will verify login success by checking URL change to /inventory.html after submission.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Execute first login test with valid credentials and verify success
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:0,&amp;#34;text&amp;#34;:&amp;#34;standard_user&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 2/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:1,&amp;#34;text&amp;#34;:&amp;#34;secret_sauce&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 3/3: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input standard_user into index 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input secret_sauce into index 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 2:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING [message_manager] Failed to parse model output: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;current_state&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;evaluation_previous_goal&amp;#34;: &amp;#34;Success - First test case completed: Login with username &amp;#39;standard_user&amp;#39; and password &amp;#39;secret_sauce&amp;#39; was successful. Verified by URL change to /inventory.html and presence of product listings.&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;memory&amp;#34;: &amp;#34;1 out of 2 password tests completed. First test successful. Next: Test with empty password. Need to logout before second test.&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;next_goal&amp;#34;: &amp;#34;Logout to return to login page for second test case&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;action&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 0}}, // Open menu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;wait&amp;#34;: {&amp;#34;seconds&amp;#34;: 2}}, // Wait for menu animation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 34}} // Logout (assuming logout appears at index 34 after menu opens)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">} Expecting value: line 8 column 48 (char 532)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING [agent] Failed to parse model output: content=&amp;#39;{\n &amp;#34;current_state&amp;#34;: {\n &amp;#34;evaluation_previous_goal&amp;#34;: &amp;#34;Success - First test case completed: Login with username \&amp;#39;standard_user\&amp;#39; and password \&amp;#39;secret_sauce\&amp;#39; was successful. Verified by URL change to /inventory.html and presence of product listings.&amp;#34;,\n &amp;#34;memory&amp;#34;: &amp;#34;1 out of 2 password tests completed. First test successful. Next: Test with empty password. Need to logout before second test.&amp;#34;,\n &amp;#34;next_goal&amp;#34;: &amp;#34;Logout to return to login page for second test case&amp;#34;\n },\n &amp;#34;action&amp;#34;: [\n {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 0}}, // Open menu\n {&amp;#34;wait&amp;#34;: {&amp;#34;seconds&amp;#34;: 2}}, // Wait for menu animation\n {&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 34}} // Logout (assuming logout appears at index 34 after menu opens)\n ]\n}&amp;#39; additional_kwargs={&amp;#39;refusal&amp;#39;: None, &amp;#39;reasoning_content&amp;#39;: &amp;#39;We are on the inventory page after successful login with the first password (secret_sauce). This indicates that the first test case (valid password) was successful.\n Now, we need to test the second case: empty password. \n However, we are currently logged in. We must first log out to return to the login page.\n\n Steps:\n 1. Open the menu (index 0: button with text &amp;#34;Open Menu&amp;#34;)\n 2. In the menu, there should be a logout option. We need to find the logout link.\n\n But note: the interactive elements provided are only for the current viewport. The menu is not open, so the logout link is not visible yet.\n\n After clicking the menu button, the menu will open and we can see the logout link. Then we can click it.\n\n However, the current action sequence can only include actions that are based on the current state (before opening the menu). So we can only plan to click the menu button now, and then in the next step we will see the updated elements including the logout link.\n\n Alternatively, we could use a longer sequence? But the problem is that after clicking the menu, the page changes (menu opens) so the state updates and we get new interactive elements. Therefore, we should only click the menu now and then in the next step we will see the logout link.\n\n But note: the task requires testing two cases. We have done one (with valid password) and now we need to do the second (empty password). We must log out first.\n\n Plan:\n Step 1: Click the menu button (index 0)\n Step 2: After the menu opens, we expect to see a logout link. Then click that logout link to return to the login page.\n\n However, the current response can only include one step because the state will change after clicking the menu. So we do:\n\n Action: [{&amp;#34;click_element_by_index&amp;#34;: {&amp;#34;index&amp;#34;: 0}}]\n\n Then in the next step, we will see the menu and the logout link, and then we can click logout.\n\n But note: the task history memory is now at step 3/100. We have to remember that we are in the middle of the second test case.\n\n We have to update the memory: \n First test case: valid password -&amp;gt; successful login (we are on inventory page)\n Now we are going to log out to test the second case.\n\n Let\&amp;#39;s write the state accordingly.&amp;#39;} response_metadata={&amp;#39;token_usage&amp;#39;: {&amp;#39;completion_tokens&amp;#39;: 678, &amp;#39;prompt_tokens&amp;#39;: 4236, &amp;#39;total_tokens&amp;#39;: 4914, &amp;#39;completion_tokens_details&amp;#39;: {&amp;#39;accepted_prediction_tokens&amp;#39;: None, &amp;#39;audio_tokens&amp;#39;: None, &amp;#39;reasoning_tokens&amp;#39;: 495, &amp;#39;rejected_prediction_tokens&amp;#39;: None}, &amp;#39;prompt_tokens_details&amp;#39;: {&amp;#39;audio_tokens&amp;#39;: None, &amp;#39;cached_tokens&amp;#39;: 3072}, &amp;#39;prompt_cache_hit_tokens&amp;#39;: 3072, &amp;#39;prompt_cache_miss_tokens&amp;#39;: 1164}, &amp;#39;model_name&amp;#39;: &amp;#39;deepseek-reasoner&amp;#39;, &amp;#39;system_fingerprint&amp;#39;: &amp;#39;fp_393bca965e_prod0425fp8&amp;#39;, &amp;#39;id&amp;#39;: &amp;#39;68127967-53c3-4329-a9fe-01feb6090fc4&amp;#39;, &amp;#39;finish_reason&amp;#39;: &amp;#39;stop&amp;#39;, &amp;#39;logprobs&amp;#39;: None} id=&amp;#39;run-c6f0d672-4dd5-4ea7-b269-9c908f5aef4e-0&amp;#39; usage_metadata={&amp;#39;input_tokens&amp;#39;: 4236, &amp;#39;output_tokens&amp;#39;: 678, &amp;#39;total_tokens&amp;#39;: 4914, &amp;#39;input_token_details&amp;#39;: {&amp;#39;cache_read&amp;#39;: 3072}, &amp;#39;output_token_details&amp;#39;: {&amp;#39;reasoning&amp;#39;: 495}} Could not parse response.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ERROR [agent] ❌ Result failed 1/3 times:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Could not parse response.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - First test case completed successfully. Login with valid password &amp;#39;secret_sauce&amp;#39; succeeded as confirmed by URL change to /inventory.html and visible product listings.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 1 out of 2 password tests completed (valid password successful). Remaining: test with empty password. Need to logout before next test.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Logout to return to login page for second test case
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/2: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:0}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 2/2: {&amp;#34;wait&amp;#34;:{&amp;#34;seconds&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 0: Open Menu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🕒 Waiting for 2 seconds
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Menu opened successfully after login. Logout option is visible at index 2.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 1 out of 2 password tests completed (valid password successful). Need to logout for second test with empty password. Next: click logout button.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Logout to return to login page for second password test case
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/1: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 2: Logout
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Successfully logged out and returned to login page. All interactive elements for testing are available.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 1 out of 2 password tests completed (valid password successful). Remaining test: username &amp;#39;standard_user&amp;#39; with empty password. After submission, need to capture error message if login fails.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Execute second test case with empty password and capture results
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:0,&amp;#34;text&amp;#34;:&amp;#34;standard_user&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 2/3: {&amp;#34;input_text&amp;#34;:{&amp;#34;index&amp;#34;:1,&amp;#34;text&amp;#34;:&amp;#34;&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 3/3: {&amp;#34;click_element_by_index&amp;#34;:{&amp;#34;index&amp;#34;:2}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input standard_user into index 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] ⌨️ Input into index 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [controller] 🖱️ Clicked button with index 2:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📍 Step 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 👍 Eval: Success - Second test case completed: Login failed as expected with empty password. Error message &amp;#39;Epic sadface: Password is required&amp;#39; is visible on page.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🧠 Memory: 2 out of 2 password tests completed: 1) Valid password &amp;#39;secret_sauce&amp;#39; - login succeeded 2) Empty password - login failed with error. No remaining tests.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🎯 Next goal: Compile final test results and complete task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 🛠️ Action 1/1: {&amp;#34;done&amp;#34;:{&amp;#34;text&amp;#34;:&amp;#34;测试结果：\n1. 测试用例1 (密码: secret_sauce):\n - 登录成功: 是\n - 错误信息: 无\n\n2. 测试用例2 (密码: 空):\n - 登录成功: 否\n - 错误信息: \&amp;#34;Epic sadface: Password is required\&amp;#34;&amp;#34;,&amp;#34;success&amp;#34;:true}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📄 Result: 测试结果：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 测试用例1 (密码: secret_sauce):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 登录成功: 是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 错误信息: 无
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 测试用例2 (密码: 空):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 登录成功: 否
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 错误信息: &amp;#34;Epic sadface: Password is required&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] ✅ Task completed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] ✅ Successfully
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] 📝 Total input tokens used (approximate): 33168
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INFO [agent] Agent run telemetry logged.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从以上输出，可见Browser-Use 将任务分解为了6步：&lt;/p>
&lt;ol>
&lt;li>开始任务，访问网站 &lt;a class="link" href="https://www.saucedemo.com" target="_blank" rel="noopener"
>https://www.saucedemo.com&lt;/a>&lt;/li>
&lt;li>输入正常用户 standard_user/secret_sauce，点击登录按钮&lt;/li>
&lt;li>点击登出（未发现登出按钮，重试）&lt;/li>
&lt;li>点击菜单后登出&lt;/li>
&lt;li>使用空密码重新登录&lt;/li>
&lt;li>测试完成，获取输出结果&lt;/li>
&lt;/ol>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>通过以上案例，可以看到，&lt;strong>Browser-Use&lt;/strong> 可以有效借助 LLM根据我们输入的提示词，分解任务，实现对页面的有效解析并完成执行，获取结果。&lt;/p>
&lt;p>执行效率上来说，API调用相对还是比较慢，对于复杂任务，会耗时较长。而在任务开始后，我们并无法干预后续执行路径（除非强制中断），这也是后续如 &lt;strong>Magentic UI&lt;/strong> 这样工具的重点优化方向。&lt;/p>
&lt;p>但 Browser-Use 的优点是已经较为成熟，对本地大模型和多种在线大模型都有良好支持，社区实践也较多，利用它辅助完成自动化测试也已有较多实践，包括系统提示词的优化。是我们利用AI辅助自动化测试的一个较好方向。&lt;/p>
&lt;hr>
&lt;h2 id="mermaid-架构图">Mermaid 架构图
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">graph TD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A[AI Agent] --&amp;gt;|决策指令| B(Controller)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B --&amp;gt;|DOM操作指令| C[DOM 解析引擎]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> C --&amp;gt;|网页内容| D[Browser 接口]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> D --&amp;gt;|浏览器交互| E[Chrome/Edge]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subgraph 功能模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B --&amp;gt; 多标签管理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> C --&amp;gt; 视觉识别(OCR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> D --&amp;gt; 真实用户行为模拟
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style A fill:#FFE4B5,stroke:#333
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style E fill:#98FB98,stroke:#333
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>github星标超3万！Postman最强平替Bruno你用了吗？</title><link>https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2.png" alt="Featured image of post github星标超3万！Postman最强平替Bruno你用了吗？" />&lt;h2 id="序言">序言
&lt;/h2>&lt;p>&lt;code>Postman&lt;/code>长期以来都是API测试领域居领先地位的测试工具。以其友好的工具界面，便捷的API接口请求编辑，强大的脚本支持和云端服务，以及丰富的生态，在接口开发和测试中，有极为广泛你的应用。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-1.png"
width="945"
height="386"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-1_hu_c775c982dd41f7e4.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-1_hu_70c0b86dbfcdd0f8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="244"
data-flex-basis="587px"
>&lt;/p>
&lt;p>但作为一个商用工具，它的很多高级功能都依赖云端服务，且收费不菲。虽然免费的基础版本同样功能强大，能满足大部分使用需求，但随着工具本身和云端服务的整合以及更多向协作平台方向发展，基础版本也需要注册并登录云端服务后才可完全使用。&lt;/p>
&lt;p>但这却限制了很多脱离互联网环境的应用需求，而且频繁的同步机制和连接稳定性要求也颇受诟病。&lt;/p>
&lt;p>很多受Postman这些限制困扰的同学也一直在寻找和Postman类似的替代工具，本文我们向大家介绍一个API接口测试明日之星，开源接口测试工具 &lt;code>Bruno&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2.png"
width="571"
height="278"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2_hu_e6ba80a3f6c141e6.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-2_hu_aec2d7d972778e76.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="205"
data-flex-basis="492px"
>&lt;/p>
&lt;p>从github的star趋势可以看到，Bruno诞生不久，但从2024年开始，已经开始得到广泛关注，star数量一路飙升，潜力无限！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420.png"
width="1071"
height="712"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420_hu_8fae8cbfd8afc4be.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420_hu_a5efb08ab5765d06.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;h2 id="bruno简介">Bruno简介
&lt;/h2>&lt;p>可以说 &lt;code>Bruno&lt;/code> 从诞生之初针对的就是前述 &lt;strong>Postman&lt;/strong> 的痛点。官方首页上强调的 Bruno 主要特性也重点说明了这几点：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-3.png"
width="1834"
height="608"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-3_hu_a7ba358bf0654c21.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250420-3_hu_11183c2c62ac33b8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="723px"
>&lt;/p>
&lt;ol>
&lt;li>承诺开源和可扩展，并且专心做客户端，永不向“平台化”扩充产品。&lt;/li>
&lt;li>基于Git实现协作和版本管理&lt;/li>
&lt;li>离线使用，永不同步本地数据 😂😂😂&lt;/li>
&lt;/ol>
&lt;p>可以说，Bruno的出现，就是针对Postman作为一个客户端工具，过于强调平台化和云端功能的现状，提供的平替方案。&lt;/p>
&lt;h2 id="bruno的优势">Bruno的优势
&lt;/h2>&lt;p>Bruno在官方网站上，也是专门针对 Postman ，将Bruno和Postman进行了详细比对（当然一家之言，免不得自吹，大家辩证看待）网址如下：
&lt;a class="link" href="https://www.usebruno.com/compare/bruno-vs-postman" target="_blank" rel="noopener"
>https://www.usebruno.com/compare/bruno-vs-postman&lt;/a>&lt;/p>
&lt;p>我整理了一下，主要包含如下几个维度：&lt;/p>
&lt;h4 id="整体定位">整体定位
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>开源、本地优先、注重隐私&lt;/td>
&lt;td>最初是 API 客户端，现已发展为包含云协作功能的 API 平台&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="数据存储">数据存储
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>集合直接存储在本地文件系统，使用名为 Bru 的纯文本标记语言&lt;/td>
&lt;td>主要存储在 Postman 云端，需要账户登录（虽然可以导出，但核心工作流依赖云）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="开放源码">开放源码
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>完全开源 (MIT 许可证)&lt;/td>
&lt;td>部分开源，核心平台和云服务是专有的&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="离线支持">离线支持
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>完全支持离线工作，因为所有数据都在本地&lt;/td>
&lt;td>核心功能（尤其协作）严重依赖在线连接和账户登录&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="协作方式">协作方式
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>通过 Git 或任何版本控制系统进行协作，利用其文件存储特性&lt;/td>
&lt;td>通过 Postman 内置的云同步和团队协作功能（通常需要付费计划）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="cli命令行">CLI命令行
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>提供名为 &lt;code>bru&lt;/code> 的 CLI 工具，用于运行集合和测试&lt;/td>
&lt;td>提供名为 &lt;code>Newman&lt;/code> 的 CLI 工具，用于运行集合和集成到 CI/CD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="脚本支持">脚本支持
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>支持声明式脚本（Bru Lang）和 JavaScript 进行自动化测试和脚本编写&lt;/td>
&lt;td>支持 JavaScript 进行请求前脚本、测试脚本编写&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="交互界面">交互界面
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>界面和功能相对更简洁，专注于 API 请求和测试的核心任务&lt;/td>
&lt;td>功能更全面，但也可能更复杂，涵盖了 API 设计、文档、监控等更多方面&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="版本控制">版本控制
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Bruno&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Postman&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>可直接利用 Git 进行精细的版本控制&lt;/td>
&lt;td>内置版本控制功能，但与 Git 的集成和灵活性不同&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>总体来说，Bruno针对Postman的主要痛点，都给出了对应的应对处理，如果使用Postman受限或更希望在非互联网线环境下进行接口测试，可以说Bruno就是最佳选择&lt;/p>&lt;/blockquote>
&lt;h2 id="bruno的局限性">Bruno的局限性
&lt;/h2>&lt;p>虽然Bruno已经受到了极大的关注，而且功能也足够丰富，但相比Postman这样老牌头部工具，功能上还是有一些局限性。这里总结起来，大致有如下几点：&lt;/p>
&lt;h4 id="云端协作和同步">云端协作和同步
&lt;/h4>&lt;p>完全本地化和简洁、轻量，是Bruno重点突出的优势，但换一个角度来说，也是它主要的局限。&lt;/p>
&lt;p>Bruno的团队协作以来Git来实现，对于熟悉Git使用的研发团队来说，当然足够强大，但如果团队对API的协作牵涉到混合团队时，比如包含客户、设计人员、产品经理等时，Git的使用门槛就相对更高了。Postman那样的基于云服务的团队功能则更易于接受，团队共享工作区、并可进行评论、共享。&lt;/p>
&lt;h4 id="在api全生命周期管理上的欠缺">在API全生命周期管理上的欠缺
&lt;/h4>&lt;p>还是因为纯本地客户端的原因，Bruno很难像Postman那样实现针对API的全生命周期管理和支持，包括接口设计（OpenAPI、swagger等接口设计的导入）、交互式文档（API Documentation）、接口模拟（Mock Server）、健康监测（monitor）等，Postman都有对应的功能可以覆盖，而Bruno则无法涵盖如此丰富的场景。&lt;/p>
&lt;h4 id="接口类型支持不如postman丰富">接口类型支持不如Postman丰富
&lt;/h4>&lt;p>虽然Bruno目前已经支持restful和GraphQL接口，已经能够满足我们绝大多数的接口测试协议要求。但相比Postman还有MQTT这样的物联网协议支持，在协议扩展上，还有待继续补充。&lt;/p>
&lt;h4 id="生态系统不如postman成熟">生态系统不如Postman成熟
&lt;/h4>&lt;ul>
&lt;li>Postman 经过多年发展，已经围绕其平台构建了一个庞大的生态系统，包括大量的第三方工具集成（如很多第三方的 APM 工具、API 网关、CI/CD 工具等）都对Postman支持良好）。&lt;/li>
&lt;li>经过多年积累，Postman社区繁荣，用户数量庞大，积累了海量的资源和教程。&lt;/li>
&lt;/ul>
&lt;p>Bruno 作为一个较新的工具，其原生集成和社区支持的插件相对较少&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421.png"
width="1432"
height="821"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421_hu_d4d56096d2ceaa52.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421_hu_92f83bab1b7a604b.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="418px"
>&lt;/p>
&lt;h4 id="ai测试能力的支持">AI测试能力的支持
&lt;/h4>&lt;p>Postman通过内置的 &lt;code>postbot&lt;/code> 助手，借助AI能力，可以实现接口测试用例的自动生成，优化建议等典型的AI增强。而随着AI应用的越来越广泛，对AI的支持也是Bruno还需要重点补充的部分。&lt;/p>
&lt;h2 id="bruno安装和应用基本示例">Bruno安装和应用基本示例
&lt;/h2>&lt;p>Bruno作为一个纯客户端，安装其实极为方便。访问官网，下载对应安装包即可(&lt;a class="link" href="https://www.usebruno.com/downloads" target="_blank" rel="noopener"
>https://www.usebruno.com/downloads&lt;/a>)。&lt;/p>
&lt;p>win11下也可以利用内建的winget命令直接下载安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="n">winget&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">bruno&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">bruno&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，桌面上会出一个bruno的小狗logo，类似Postman，双击就可打开Bruno客户端，界面其实和Postman颇为类似。下面我们以获取Github上一个开源项目的最近一次发布为例，看下Bruno中如何操作。&lt;/p>
&lt;ol>
&lt;li>首先建立一个collection，命名为 &amp;ldquo;github&amp;rdquo;, 并在其下创建一个目录，“repos”。 并可以在collection设置界面，添加github的访问Token。这里可以看到，Bruno支持的鉴权方式已经非常全面。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-3.png"
width="1275"
height="632"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-3_hu_69f110a17bf52e1b.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-3_hu_848368f0c6e68ee5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;ol start="2">
&lt;li>在 “repos” 目录下，新建一个Get请求，“getRelease”, 根据Github定义，对应请求接口 &amp;ldquo;&lt;a class="link" href="https://api.github.com/repos/%7b%7bowner%7d%7d/%7b%7brepo%7d%7d/releases/latest%22" target="_blank" rel="noopener"
>https://api.github.com/repos/{{owner}}/{{repo}}/releases/latest"&lt;/a>， 这里我们使用了两个变量，和Postman类似，这里设置的变量可以通过&lt;code>{{var}}&lt;/code> 来引用。 测试一下，成功获取了appium项目的最近一次发布信息&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-1.png"
width="1920"
height="959"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-1_hu_9f7972931754a68b.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-1_hu_751fed8d55784404.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>作为一个本地客户端，这里Bruno所有的请求和配置信息，其实都保存在本地，&lt;code>.bru&lt;/code>文件中进行存储。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-2.png"
width="1543"
height="891"
srcset="https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-2_hu_44d52d790f131ac3.png 480w, https://chengxiaqiucao.github.io/post/089-bruno%E4%BB%8B%E7%BB%8D/snap_20250421-2_hu_3f4f9e6007ba73aa.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>以上就是关于Bruno的几个概要介绍，对于不希望受Postman在线限制的同学，Bruno就是最佳替代。&lt;/p>
&lt;p>欢迎继续关注秋草的后续博客文章，会陆续带来更多关于Bruno的深度使用总结和分享！&lt;/p></description></item><item><title>AutoHotKey：让效率倍增的桌面自动化利器</title><link>https://chengxiaqiucao.github.io/post/085-autohotkey/</link><pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/085-autohotkey/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>之前在介绍Markdown文档中图片处理方法的文章 【&lt;a class="link" href="https://mp.weixin.qq.com/s/Mom021usUHUFwE8aGXVtVg" target="_blank" rel="noopener"
>本地Markdown编写的文档，发布到网上如何处理图片？&lt;/a>】 中，介绍了可以使用 &lt;strong>AutoHotKey&lt;/strong> 来辅助完成截图和链接的自动生成。有小伙伴私信问这个工具的具体用法。&lt;/p>
&lt;p>下文我们就比较系统地介绍下这个工具，了解通过ahk的脚本魔法，如何让重复操作一键完成！&lt;/p>
&lt;h2 id="ahk简介">AHK简介
&lt;/h2>&lt;p>在追求效率的软件开发与技术工作中，&lt;strong>重复性操作&lt;/strong>往往吞噬宝贵时间。AutoHotkey（AHK）作为一款轻量级、开源的&lt;strong>Windows桌面自动化工具&lt;/strong>。可以通过编写简洁的脚本，将用户从繁琐、重复的键盘鼠标操作中解放出来，显著提升工作效率。&lt;/p>
&lt;p>理解AHK的关键在于其&lt;strong>脚本语言&lt;/strong>。核心功能包括模拟键盘输入（&lt;code>Send&lt;/code>）、鼠标操作（&lt;code>Click&lt;/code>）、程序运行（&lt;code>Run&lt;/code>）、条件判断（&lt;code>If&lt;/code>）和循环控制（&lt;code>Loop&lt;/code>）等。用户无需编译环境，脚本文件（&lt;code>.ahk&lt;/code>）可直接运行，资源占用极低。&lt;/p>
&lt;p>AHK的应用场景极为广泛。简单如自动填写表单、快捷输入预设短语；进阶如批量重命名文件、自动化软件测试、定制专属工作流；甚至可开发带有图形界面（GUI）的小工具。其强大之处在于&lt;strong>深度集成Windows系统&lt;/strong>，能够操作窗口、读写注册表、访问文件系统，实现高度的定制化自动化。&lt;/p>
&lt;p>简单来说，AutoHotKey 赋予了用户&lt;strong>用脚本指挥电脑&lt;/strong>的能力。无论是开发者、办公人员还是追求效率的普通用户，都能通过它定制专属的“快捷键魔法”，将重复劳动转化为瞬间完成的自动化操作。&lt;/p>
&lt;h2 id="ahk-核心语法与常用函数">AHK 核心语法与常用函数
&lt;/h2>&lt;h3 id="基础热键">**基础热键
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>热键定义&lt;/strong>：由一个热键后跟双冒号组成.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">^&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="c1"> ; Ctrl+J 热键&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Hello&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="c1"> ; 发送文本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果只有一行执行的操作， &lt;code>return&lt;/code> 也可省略&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符号&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>&lt;code>#&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Win 键 (Windows 徽标键)&lt;br>- 等待 Win 释放后发送文本（Vista+）&lt;br>- 可能导致额外模拟击键（详见 &lt;code>#MenuMaskKey&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>!&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Alt 键&lt;br>- 可能导致额外模拟击键（详见 &lt;code>#MenuMaskKey&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>^&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Ctrl 键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>+&lt;/code>&lt;/strong>&lt;/td>
&lt;td>Shift 键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;amp;&lt;/code>&lt;/strong>&lt;/td>
&lt;td>组合任意两个按键/鼠标按钮创建自定义热键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;lt;&lt;/code>&lt;/strong>&lt;/td>
&lt;td>使用成对按键中的左侧键（如 &lt;code>&amp;lt;!a&lt;/code> 仅左 Alt 触发）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;gt;&lt;/code>&lt;/strong>&lt;/td>
&lt;td>使用成对按键中的右侧键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>&amp;lt;^&amp;gt;!&lt;/code>&lt;/strong>&lt;/td>
&lt;td>AltGr 键（替代图形键）&lt;br>- 表示 AltGr 组合键（如 &lt;code>&amp;lt;^&amp;gt;!m&lt;/code>）&lt;br>- 单独使用：&lt;code>LControl &amp;amp; RAlt&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>*&lt;/code>&lt;/strong>&lt;/td>
&lt;td>通配符：即使附加修饰键按住也能触发&lt;br>- 示例：&lt;code>*#c&lt;/code>（Win+C/Shift+Win+C 等均触发）&lt;br>- 强制使用键盘钩子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>~&lt;/code>&lt;/strong>&lt;/td>
&lt;td>保留按键原生功能（不屏蔽操作系统事件）&lt;br>- 示例：&lt;code>~RButton&lt;/code>（右键点击仍发送到窗口）&lt;br>- 影响所有组合行为&lt;br>- 强制使用键盘钩子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$&lt;/code>&lt;/strong>&lt;/td>
&lt;td>强制使用键盘钩子，避免 Send 命令触发自身&lt;br>- 对鼠标热键无效&lt;br>- 替代方案：&lt;code>#InputLevel&lt;/code>/&lt;code>SendLevel&lt;/code> (v1.1.06+)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>UP&lt;/code>&lt;/strong>&lt;/td>
&lt;td>在按键释放时触发（非按下时）&lt;br>- 示例：&lt;code>^!r Up::&lt;/code>（释放 Ctrl+Alt+R 触发）&lt;br>- 限制：&lt;br> 1) 不适用于控制器按钮&lt;br> 2) 需配合普通热键避免卡键&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>示例&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">#a::&lt;/span>&lt;span class="n">Run&lt;/span> &lt;span class="n">Calculator&lt;/span>&lt;span class="c1"> ; Win+A 启动计算器&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">^!+&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Send&lt;/span> &lt;span class="n">Hello&lt;/span> &lt;span class="n">World&lt;/span>&lt;span class="c1"> ; Ctrl+Alt+Shift+S 发送文本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">RButton&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MsgBox&lt;/span> &lt;span class="n">Right&lt;/span> &lt;span class="n">Click&lt;/span>&lt;span class="c1"> ; 保留右键原生功能的弹窗&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="n">LWin&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Reload&lt;/span>&lt;span class="c1"> ; 左Win+R 重载脚本&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">#c&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Run&lt;/span> &lt;span class="n">cmd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="c1"> ; 任何修饰键+Win+C 启动命令提示符&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="o">^!&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="n">Up&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MsgBox&lt;/span> &lt;span class="n">Released&lt;/span>&lt;span class="c1"> ; 释放组合键时触发&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="热字串">热字串
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>热字串&lt;/strong>：由一个冒号, 零个或多个选项, 另一个冒号, 缩写字符和双冒号组成.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">:*:&lt;/span>&lt;span class="n">btw&lt;/span>&lt;span class="o">::&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">way&lt;/span>&lt;span class="c1"> ; 输入btw后按空格/回车替换&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者也可以通过热字串执行复杂些的操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">:*:&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="c1"> ; 此热字串通过后面的命令把 &amp;#34;]d&amp;#34; 替换成当前日期和时间.&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">FormatTime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CurrentDateTime&lt;/span>&lt;span class="p">,,&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">yyyy&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">mm&lt;/span> &lt;span class="n">tt&lt;/span>&lt;span class="c1"> ; &lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">SendInput&lt;/span> &lt;span class="nv">%CurrentDateTime%&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="核心命令函数">&lt;strong>核心命令函数&lt;/strong>
&lt;/h3>&lt;p>常用的一些核心函数包括：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数名&lt;/th>
&lt;th>类别&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>&lt;code>FileExist&lt;/code>&lt;/strong>&lt;/td>
&lt;td>文件操作&lt;/td>
&lt;td>检查文件/文件夹是否存在并返回属性（如 &amp;ldquo;D&amp;rdquo; 表示目录）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>GetKeyState&lt;/code>&lt;/strong>&lt;/td>
&lt;td>输入检测&lt;/td>
&lt;td>检测键盘/鼠标按键状态，返回 1（按下）或 0（松开）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>InStr&lt;/code>&lt;/strong>&lt;/td>
&lt;td>字符串处理&lt;/td>
&lt;td>查找子串在字符串中的位置，支持从左/右搜索&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>StrLen&lt;/code>&lt;/strong>&lt;/td>
&lt;td>字符串处理&lt;/td>
&lt;td>获取字符串长度（字节数或字符数）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>SubStr&lt;/code>&lt;/strong>&lt;/td>
&lt;td>字符串处理&lt;/td>
&lt;td>截取字符串指定位置开始的子串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>WinActive&lt;/code>&lt;/strong>&lt;/td>
&lt;td>窗口控制&lt;/td>
&lt;td>检测指定窗口是否活动，返回窗口句柄（HWND）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>WinExist&lt;/code>&lt;/strong>&lt;/td>
&lt;td>窗口控制&lt;/td>
&lt;td>检测指定窗口是否存在，返回首个匹配窗口句柄&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>Format&lt;/code>&lt;/strong>&lt;/td>
&lt;td>数据处理&lt;/td>
&lt;td>格式化字符串（类似 sprintf 功能）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>DllCall&lt;/code>&lt;/strong>&lt;/td>
&lt;td>系统交互&lt;/td>
&lt;td>调用 Windows API 等外部 DLL 函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>Run&lt;/code>&lt;/strong>&lt;/td>
&lt;td>进程控制&lt;/td>
&lt;td>启动程序/执行命令（已在初稿列出，此处补充完整描述）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>示例:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 组合使用示例&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">if &lt;/span>&lt;span class="nf">WinActive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ahk_exe chrome.exe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nf">GetKeyState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Ctrl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;P&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">FileAppend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="n">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;[%time%] Ctrl pressed in Chrome`n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">Send&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="c1"> ; 在Chrome中新建标签页&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量与表达式">&lt;strong>变量与表达式&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>变量无需声明，直接赋值（如 &lt;code>count := 10&lt;/code>）&lt;/li>
&lt;li>支持字符串拼接（&lt;code>.&lt;/code> 运算符）与数学运算&lt;/li>
&lt;/ul>
&lt;h2 id="实用案例说明">实用案例说明
&lt;/h2>&lt;h3 id="案例-1截图自动生成-markdown-图片链接">案例 1：截图自动生成 Markdown 图片链接
&lt;/h3>&lt;p>&lt;strong>痛点&lt;/strong>：手动截图→保存→复制路径→插入 Markdown 繁琐
&lt;strong>解决方案&lt;/strong>：一键完成截图并生成标准链接&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">#s::&lt;/span>&lt;span class="c1"> ; Win+S 快捷键&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Run&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%A_WinDir%&lt;/span>\&lt;span class="n">System32&lt;/span>\&lt;span class="n">SnippingTool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="c1"> ; 启动截图工具&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Snip&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Sketch&lt;/span>&lt;span class="c1"> ; 等待窗口激活&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^+&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="c1"> ; 模拟新建截图快捷键（Ctrl+Shift+N）&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ahk_class&lt;/span> &lt;span class="n">Microsoft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ScreenSketch&lt;/span>&lt;span class="c1"> ; 等待截图完成&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="c1"> ; 保存截图&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Save&lt;/span> &lt;span class="n">As&lt;/span>&lt;span class="c1"> ; 等待保存对话框&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">FormatTime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CurrentTime&lt;/span>&lt;span class="p">,,&lt;/span> &lt;span class="n">yyyyMMdd_HHmmss&lt;/span>&lt;span class="c1"> ; 生成时间戳文件名&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">SendInput&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%CurrentTime%&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">png&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="c1"> ; 输入文件名&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="c1"> ; 等待保存完成&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nv">clipboard&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;![](&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">A_Desktop&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s">&amp;#34;\&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="n">CurrentTime&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s">&amp;#34;.png)&amp;#34;&lt;/span>&lt;span class="c1"> ; 生成MD链接&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">MsgBox&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Markdown截图链接已复制到剪贴板&lt;/span>&lt;span class="err">！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>效果&lt;/strong>：按 Win+S → 截图 → 自动保存为带时间戳的 PNG → 剪贴板生成 &lt;code>![](路径)&lt;/code> 格式链接。&lt;/p>
&lt;h3 id="案例-2一键执行复杂命令序列">案例 2：一键执行复杂命令序列
&lt;/h3>&lt;p>&lt;strong>痛点&lt;/strong>：部署环境需重复输入多条命令
&lt;strong>解决方案&lt;/strong>：单键触发命令组合&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="o">^!&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="c1"> ; Ctrl+Alt+D&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Run&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cmd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">:&lt;/span>\&lt;span class="n">MyProject&lt;/span>&lt;span class="c1"> ; 打开CMD并进入项目目录&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">WinWaitActive&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ahk_class&lt;/span> &lt;span class="n">ConsoleWindowClass&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">git&lt;/span> &lt;span class="n">pull&lt;/span> &lt;span class="n">origin&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="c1"> ; 等待git pull完成&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mvn&lt;/span> &lt;span class="n">clean&lt;/span> &lt;span class="n">install&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Sleep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5000&lt;/span>&lt;span class="c1"> ; 等待Maven构建&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Send&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">docker&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">compose&lt;/span> &lt;span class="n">up&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Enter&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">MsgBox&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">环境部署命令已执行！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>效果&lt;/strong>：一键完成代码拉取、项目构建、容器启动。&lt;/p>
&lt;h3 id="案例-3自动化测试数据生成">案例 3：自动化测试数据生成
&lt;/h3>&lt;p>&lt;strong>痛点&lt;/strong>：手动创建大量测试数据效率低下
&lt;strong>解决方案&lt;/strong>：脚本批量生成结构化数据&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-autohotkey" data-lang="autohotkey">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">F9::&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">testData&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Loop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1"> ; 生成100条数据&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;User&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">A_Index&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;user&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="nv">A_Index&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="s">&amp;#34;@test.com&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="n">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1"> ; 自定义Random函数生成随机数&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">testData&lt;/span> &lt;span class="o">.=&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">`n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="c1"> ; 拼接CSV格式&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">FileAppend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%testData%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">:&lt;/span>\&lt;span class="n">TestData&lt;/span>\&lt;span class="n">users&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">csv&lt;/span>&lt;span class="c1"> ; 写入文件&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Run&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">notepad&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exe&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="o">:&lt;/span>\&lt;span class="n">TestData&lt;/span>\&lt;span class="n">users&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">csv&lt;/span>&lt;span class="c1"> ; 打开查看&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="nb">return&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Random&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">Random&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rand&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="nb">return&lt;/span> &lt;span class="n">rand&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>效果&lt;/strong>：按 F9 自动生成含用户名、邮箱、年龄的 100 条 CSV 测试数据。&lt;/p>
&lt;hr>
&lt;h2 id="总结为什么使用autohotkey">总结：为什么使用AutoHotKey？
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>极简入门&lt;/strong>：语法接近自然语言，无需编译环境&lt;/li>
&lt;li>&lt;strong>资源友好&lt;/strong>：轻量级（安装包 &amp;lt; 3MB），后台占用可忽略&lt;/li>
&lt;li>&lt;strong>深度集成&lt;/strong>：无缝操作窗口、注册表、文件系统&lt;/li>
&lt;li>&lt;strong>生态丰富&lt;/strong>：官方论坛提供海量脚本库与插件支持&lt;/li>
&lt;li>&lt;strong>跨场景适用&lt;/strong>：从文本处理到 GUI 自动化全覆盖&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>进一步学习：&lt;/p>
&lt;ul>
&lt;li>官方文档：&lt;a class="link" href="https://www.autohotkey.com/docs/" target="_blank" rel="noopener"
>https://www.autohotkey.com/docs/&lt;/a>&lt;/li>
&lt;li>脚本仓库：&lt;a class="link" href="https://github.com/AutoHotkey" target="_blank" rel="noopener"
>https://github.com/AutoHotkey&lt;/a>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>&lt;strong>你的下一个自动化脚本，准备解决哪个痛点？&lt;/strong>&lt;/p></description></item><item><title>微软已发布Playwright Mcp</title><link>https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/</link><pubDate>Wed, 02 Apr 2025 16:38:33 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402.png" alt="Featured image of post 微软已发布Playwright Mcp" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>&lt;code>MCP协议&lt;/code>是由AI公司 Anthropic（claude的母公司）于2024年11月推出的一个针对AI能力的开放协议，旨在标准化大语言模型（LLM）与外部数据源、工具之间的交互接口。其核心设计目标：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>解耦与标准化&lt;/strong>：将LLM与外部系统的集成从定制化开发转变为基于统一协议的通用连接，类似硬件领域的USB-C接口。&lt;/li>
&lt;li>&lt;strong>去中心化&lt;/strong>：通过允许开发者自主构建MCP Server，分散AI能力，避免单一厂商垄断知识和服务。&lt;/li>
&lt;li>&lt;strong>安全可控&lt;/strong>：通过权限验证和本地化部署，确保数据隐私与操作安全。&lt;/li>
&lt;/ul>
&lt;p>而 &lt;code>MCP Server&lt;/code> 则是MCP的关键组件，提供如下三种功能：&lt;/p>
&lt;ul>
&lt;li>资源（Resources）：类似文件的数据，可以被客户端读取，如 API 响应或文件内容。&lt;/li>
&lt;li>工具（Tools）：可以被 LLM 调用的函数（需要用户批准）。&lt;/li>
&lt;li>提示（Prompts）：预先编写的模板，帮助用户完成特定任务。&lt;/li>
&lt;/ul>
&lt;p>通过这些能力，MCP Server可以为AI应用提供更加丰富的上下文操作私有数据或特定应用的能力，从而增强 LLM 的实用性。&lt;/p>
&lt;p>在上一篇文章 【】中，我们已经对 MCP Server有了基本认识，并且提供了一个基本的查询本地桌面的案例，并利用AI编辑器&lt;code>Cursor&lt;/code>实现了这个MCP server的调用。&lt;/p>
&lt;h1 id="微软官方推出playwright-mcp">微软官方推出Playwright-mcp
&lt;/h1>&lt;p>MCP Server目前的很多应用中，调度浏览器操作是一个极为高频的场景，基于Playwright这个新锐浏览器工具，也已经有第三方先行推出了MCP Server&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402.png"
width="1812"
height="972"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402_hu_dcfee7661167b616.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402_hu_eb9eb089cb2c9e93.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;/p>
&lt;p>而现在，微软官方也终于推出了Playwright-mcp，可以和Vscode copilot无缝结合使用&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-1.png"
width="1727"
height="969"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-1_hu_f83931781b693850.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-1_hu_f4937900ada6a48f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;h1 id="playwright-mcp-部署">Playwright-mcp 部署
&lt;/h1>&lt;p>因为Playwright-mcp刚刚推出，目前 vscode中对它的集成主要还是在vscode的先览版vscode insider中。所以我们可以从vscode官网先下载一个vscode insider
&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-2.png"
width="1051"
height="542"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-2_hu_5de3b2f34b5084a9.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-2_hu_dfa42d4ead8ed82c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/p>
&lt;p>安装好vscode insider后，在github项目主页上，直接点击对应按钮即可进行安装&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-3.png"
width="1315"
height="891"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-3_hu_5c4449d9135f39e8.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-3_hu_f010a4faa2d88b64.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;p>打开vscode 后，选择 install server，这时会自动配置好mcp server的配置文件，点击start，将mcp server运行起来，这样其实就完成了部署&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-4.png"
width="2167"
height="1282"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-4_hu_10322492c1fa97d1.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-4_hu_bc963d7464a1b201.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="405px"
>&lt;/p>
&lt;p>点击copilot对话框中，显示的tools按钮，可以看到目前集成的tools，主要对应playwright的15种主要操作行为&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-5.png"
width="1534"
height="1147"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-5_hu_bade8d3df695395a.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-5_hu_8ce9e42f6fe87c4a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;h1 id="用playwright-mcp无代码完成浏览器操作和验证">用playwright-mcp无代码完成浏览器操作和验证
&lt;/h1>&lt;p>下面我们就看看效果吧。&lt;/p>
&lt;p>打开copilot，输入指令：&lt;/p>
&lt;blockquote>
&lt;p>导航到&lt;a class="link" href="vscode-file://vscode-app/c:/Users/Administrator/AppData/Local/Programs/Microsoft%20VS%20Code%20Insiders/resources/app/out/vs/code/electron-sandbox/workbench/workbench.html" >https://www.saucedemo.com&lt;/a>, 用账号standard_user和密码secret_sauce登录，并确认登录成功，product页面正常显示&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-6.png"
width="2157"
height="1260"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-6_hu_8fe494e7a59ad5b8.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-6_hu_254210cae61ea493.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;p>继续执行，得出结果，用例执行成功&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-7.png"
width="2126"
height="1155"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-7_hu_21781221ab7518e2.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250402-7_hu_6c9cb4820d181e78.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="441px"
>&lt;/p>
&lt;p>可以看到，这里我们没有编写任何代码，就利用Playwright的mcp完成了对登录用例的执行。&lt;/p>
&lt;p>当然实际工作中，通过mcp server的集成，更多是为了我们方便地调用浏览器完成任务执行提供了更多便利！&lt;/p>
&lt;p>基于MCP-Server，相信还有更多、更丰富的实践可以帮助到我们！&lt;/p>
&lt;hr>
&lt;p>上一篇文章中，我们介绍了通过vscode insiders 集成微软官方的playwright mcp并执行测试的一个基本效果。&lt;/p>
&lt;p>有小伙伴提问是否能在 &lt;code>Cursor&lt;/code> 中使用？这里我也进行了尝试，答案是可以成功集成，但有点小坑。 这里就跟大家分享下配置过程，以及Cursor中集成mcp以后的强大能力。让 AI 帮助我们完成大部分基本的功能测试已经不再遥远&lt;/p>
&lt;h2 id="在cursor中启用playwright-mcp">在Cursor中启用playwright-mcp
&lt;/h2>&lt;h3 id="预置安装">预置安装
&lt;/h3>&lt;p>首先，当然要先安装mcp server以及对应的依赖，这里mcp和playwright都是基于nodejs的。所以通过下面命令先安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">npm install -g @playwright/mcp@latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm install -g @playwright@latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npx playwright install --with-deps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cursor配置">Cursor配置
&lt;/h3>&lt;p>完成安装后，进入 Cursor 的设置页面，在其MCP部分，添加 MCP server配置，参照Playwright官网的介绍，
添加mcp sever配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;playwright&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;npx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;@playwright/mcp@latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但这时，cursor中的mcp server实际并不能正常运行，会显示 &lt;code>Clint closed&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/-20250404.png"
width="1915"
height="746"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/-20250404_hu_39c9f769da6c86aa.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/-20250404_hu_e2be4efa3972eade.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="616px"
>&lt;/p>
&lt;h3 id="windows系统安装要规避两个坑">windows系统安装，要规避两个坑
&lt;/h3>&lt;p>&lt;strong>第一个坑：npx 包加载路径应该加入搜索路径&lt;/strong>&lt;/p>
&lt;p>也就是要将全局安装的相关包，放到nodejs的搜索路径中。做法是在windows系统的环境变量中，把npm包目录加入path中，并放到nodejs之前&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250404.png"
width="719"
height="794"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250404_hu_90aeece056371733.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250404_hu_1985853fae73d10.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>&lt;strong>第二个坑：修改mcp命令行调用命令&lt;/strong>&lt;/p>
&lt;p>cursor中调用npx，其实是通过命令行调用的，但windows系统下，直接通过命令行调用npx，cursor本身并不能拿到调用状态，所以这里要用 &lt;code>cmd /c&lt;/code> 命令调用, 获取命令句柄&lt;/p>
&lt;p>也就是上面的配置文件，修改成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mcpServers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;playwright&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cmd /c npx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;@playwright/mcp@latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改以上配置后，重新加载cursor，这时会启动一个命令行窗口，其实就是playwright-mcp，不要关闭，然后可以看到 Cursor中mcp也正常启动了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250403.png"
width="1327"
height="968"
srcset="https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250403_hu_376d11e59d74c973.png 480w, https://chengxiaqiucao.github.io/post/072-%E5%BE%AE%E8%BD%AF%E5%B7%B2%E5%8F%91%E5%B8%83playwright-mcp/Pasted-20250403_hu_ab054adcc69cab03.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;h2 id="让-playwright-mcp-代替我们执行测试">让 playwright-mcp 代替我们执行测试
&lt;/h2>&lt;p>我们在Cursor中输入一个基本的任务指令：&lt;/p>
&lt;blockquote>
&lt;p>访问www.saucedemo.com网站，使用problem_user登录，验证该网站完整流程并记录发现的问题&lt;/p>&lt;/blockquote>
&lt;p>以下是完整执行过程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我将帮您访问 Sauce Demo 网站并使用 problem_user 账号进行完整测试流程验证。让我们开始吧。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">首先，让我访问网站：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_navigate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我使用 problem_user 账号登录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在输入密码：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击登录按钮：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们开始测试并记录问题。首先我注意到以下问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 商品图片问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">所有商品的图片都显示相同的图片（狗的图片），这明显是一个bug，因为每个商品应该显示其独特的产品图片。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我尝试添加商品到购物车：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我点击购物车图标查看购物车：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们返回商品列表并尝试使用排序功能：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我尝试使用排序功能：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_select_option
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">基于测试过程，我发现了以下问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 图片显示问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 所有商品的图片都显示为相同的狗图片，而不是各自的产品图片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这影响了用户对产品的视觉识别
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 购物车功能问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品图片或标题时，没有正确跳转到商品详情页，而是直接跳转到了一个固定的商品页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这影响了用户浏览和选择商品的体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 排序功能问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选择不同的排序选项（如按价格从低到高）后，商品列表顺序没有发生变化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 排序功能完全失效
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 导航问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品时总是跳转到同一个商品页面，而不是所点击的具体商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这严重影响了用户的购物体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 按钮状态问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 某些商品的&amp;#34;Add to cart&amp;#34;和&amp;#34;Remove&amp;#34;按钮状态显示不一致
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这可能导致用户对购物车中的商品状态产生混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题严重影响了网站的基本功能和用户体验。problem_user 账号确实展示了多个需要修复的问题，这些问题涵盖了UI显示、功能操作和用户体验等多个方面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">是否需要我继续测试其他功能，比如结账流程？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">请继续测试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">好的，我将继续测试结账流程。首先让我们添加一些商品到购物车，然后进行结账：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在让我们点击购物车图标进入购物车页面：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我发现点击购物车图标又出现了一个问题 - 它把我们带到了商品详情页而不是购物车页面。让我们尝试点击页面右上角的购物车图标：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_navigate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们继续结账流程，点击Checkout按钮：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">让我们填写个人信息：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">点击Continue继续：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我发现了一个新的问题：虽然我们输入了姓氏，但系统显示&amp;#34;Last Name is required&amp;#34;的错误。这说明在输入字段上存在问题。让我们再次尝试输入姓氏：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">基于测试过程，我发现了以下新的问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 购物车导航问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品列表页面的购物车图标会错误地导航到商品详情页
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 必须手动输入购物车URL才能访问购物车页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 结账表单问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 姓氏（Last Name）输入框存在严重问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 即使输入了姓氏，系统仍然显示&amp;#34;Last Name is required&amp;#34;错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这个问题阻止了用户完成结账流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1. 购物车商品显示问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 购物车中显示的商品数量与实际添加的商品数量不一致
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 一些未添加的商品也出现在购物车中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题与之前发现的问题一起，严重影响了整个购物流程：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 用户无法正常浏览商品（图片问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法正确添加商品到购物车（购物车功能问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法使用排序功能（排序失效）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法正常访问购物车（导航问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法完成结账流程（表单验证问题）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题使得 problem_user 账号几乎无法完成正常的购物流程。每个主要功能都存在不同程度的问题，这可能是为了测试目的而特意设置的。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">是否需要我继续测试其他功能，比如菜单栏的功能？
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">完成测试，请退出登录并汇总发现的问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">好的，让我们先点击菜单按钮然后退出登录：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Called MCP toolbrowser_click
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">现在我来汇总使用 problem_user 账号测试发现的所有问题：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 1. 商品展示问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 所有商品图片显示为相同的狗图片，而不是各自的产品图片
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这严重影响了用户对产品的视觉识别和购物体验
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 2. 导航问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击商品图片或标题时，总是跳转到固定的商品页面，而不是所点击的具体商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 点击购物车图标错误地导航到商品详情页，而不是购物车页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 必须手动输入购物车URL才能正确访问购物车页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 3. 商品排序功能问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 选择不同的排序选项（如按价格从低到高）后，商品列表顺序没有任何变化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 排序功能完全失效，无法帮助用户按需要的方式浏览商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 4. 购物车功能问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 购物车中显示的商品与实际添加的商品不一致
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 一些未添加的商品也出现在购物车中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- &amp;#34;Add to cart&amp;#34;和&amp;#34;Remove&amp;#34;按钮状态显示不一致，造成用户混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 5. 结账流程问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 姓氏（Last Name）输入框存在严重问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 即使输入了姓氏，系统仍然显示&amp;#34;Last Name is required&amp;#34;错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这个验证问题完全阻止了用户完成结账流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 6. 用户体验影响
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 以上问题的综合效果导致：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 用户无法正确浏览和选择商品
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法管理购物车内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 无法完成购物流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 整体购物体验严重受损
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">### 7. 功能可用性评估
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 基本功能几乎都存在问题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 用户无法完成正常的购物流程
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 这个账号可能是专门用于测试目的，展示了各种可能的问题场景
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">这些问题涵盖了电子商务网站的核心功能，包括商品展示、导航、购物车管理和结账流程。每个环节都存在不同程度的问题，使得整个购物体验变得极其困难和令人沮丧。这些问题的存在可能是为了测试目的，帮助开发人员和测试人员理解各种可能的错误场景。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，通过 Cursor + Playwright-mcp ，AI 已经可以通过我们交代的基本指令，主动帮助我们去覆盖主要的功能测试场景并发现和记录问题。假以时日，完全可以很大程度上替代掉比较基础功能测试任务，而测试人员则可以更关注在高价值的深度问题挖掘上。当然，另一方面，基础功能测试人员，确实也要有相当的危机意识，技能提升和扩展边界刻不容缓。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/qrcode_for_gh_e12c318badb4_258%20%281%29.jpg"
loading="lazy"
>&lt;/p>
&lt;p>欢迎关注秋草的测试技能体系化进阶提升课程，公众号回复 &lt;code>大纲&lt;/code> 了解课程详细目录&lt;/p></description></item><item><title>代码中集成deepseekAPI执行测试</title><link>https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/</link><pubDate>Wed, 19 Mar 2025 14:05:03 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>在之前的文章&lt;/p>
&lt;p>&lt;a class="link" href="https://chengxiaqiucao.github.io/post/52-%E7%94%A8deepseek&amp;#43;vscode%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/" target="_blank" rel="noopener"
>用deepseek+vscode自动完成测试脚本&lt;/a>&lt;/p>
&lt;p>我们介绍了vscode的AI插件，可以帮助我们完成自动化测试用例的生成。&lt;/p>
&lt;p>而目前Deepseek 官方的API其实也重新开放，对于我们深度利用Deepseek等大模型打造贴合实际工作应用的场景，提供了更多可能性。&lt;/p>
&lt;p>下面我们就以 Deepseek 官方API的集成为例，完成在代码中通过调用大模型，实现测试用例自动生成，并完成执行的实践。&lt;/p>
&lt;p>首先从Deepseek官网进入它的API开放平台&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319.png"
width="1640"
height="850"
srcset="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319_hu_d4f3554457c1966e.png 480w, https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319_hu_67db4896ac5d966c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="463px"
>&lt;/p>
&lt;p>进入以后，申请一个APIkey，目前Deepseek的定价还是比较低的，而且特定时段还有较大折扣&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319-1.png"
width="1074"
height="758"
srcset="https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319-1_hu_56ae016408b1a041.png 480w, https://chengxiaqiucao.github.io/post/068-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%9B%86%E6%88%90deepseekapi%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95/Pasted-20250319-1_hu_1e36cd156d004cf8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>有了这个API Key以后，我们就可以在代码中进行调用了&lt;/p>
&lt;p>目前Deepseek API 是兼容了openai 的 api 接口&lt;/p>
&lt;p>通过以下代码，结合Python标准库inspect，我们可以直接让deepseek针对我们的被测代码，实现用例的生成。&lt;/p>
&lt;p>当然我们也可以将对应的需求文本传输给deepseek，原理类似&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">inspect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">openai&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">OpenAI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 引入deepseek api&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OpenAI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">api_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;your_deepseek_api_key&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">base_url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://api.deepseek.com&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 被测函数，计算BMI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_bmi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;身高、体重必须大于0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bmi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">weight&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">bmi&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">18.5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;竹竿！&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="mf">18.5&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">bmi&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">24.9&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;正常人&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="mi">25&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">bmi&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mf">29.9&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;壮士！&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;肥宅！&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过inspect获取函数源代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inspect&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">calculate_bmi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据获取的代码，定义提示词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">the_prompt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">请针对以下代码生成基于pytest框架的测试用例：&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">function_code&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">尽可能使用参数化测试，包含各种异常场景
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 调用deepseek api 使用V3模型，获取返回&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">chat&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">completions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;deepseek-chat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">messages&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;system&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;You are a python testing assistant&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">the_prompt&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">max_tokens&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temperature&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">0.7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stream&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">choices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过以上代码，我们可以获取deepseek V3 返回的结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为了测试 &lt;span class="sb">`calculate_bmi`&lt;/span> 函数，我们可以使用 &lt;span class="sb">`pytest`&lt;/span> 框架，并结合 &lt;span class="sb">`pytest.mark.parametrize`&lt;/span> 来实现参数化测试。以下是一个完整的测试用例，涵盖了正常情况和异常情况。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ``&lt;span class="sb">`python
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">import pytest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"># 导入要测试的函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">from your_module import calculate_bmi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"># 正常情况的测试用例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">@pytest.mark.parametrize(&amp;#34;weight, height, expected&amp;#34;, [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (60, 1.75, &amp;#34;正常人&amp;#34;), # 正常BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (50, 1.75, &amp;#34;竹竿！&amp;#34;), # 低BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (80, 1.75, &amp;#34;壮士！&amp;#34;), # 高BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (100, 1.75, &amp;#34;肥宅！&amp;#34;), # 超高BMI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">])
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">def test_calculate_bmi_normal(weight, height, expected):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> assert calculate_bmi(weight, height) == expected
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"># 异常情况的测试用例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">@pytest.mark.parametrize(&amp;#34;weight, height, expected_exception&amp;#34;, [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (0, 1.75, ValueError), # 体重为0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (60, 0, ValueError), # 身高为0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (-10, 1.75, ValueError), # 体重为负数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> (60, -1.75, ValueError), # 身高为负数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">])
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">def test_calculate_bmi_exceptions(weight, height, expected_exception):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> with pytest.raises(expected_exception):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> calculate_bmi(weight, height)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span> `&lt;span class="sb">`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">### 解释：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">1. **正常情况测试**：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 使用 `&lt;/span>pytest.mark.parametrize&lt;span class="sb">` 来测试不同的体重和身高组合，验证函数返回的BMI分类是否正确。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 测试用例包括正常BMI、低BMI、高BMI和超高BMI的情况。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">2. **异常情况测试**：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 测试函数在输入无效值（如体重或身高为0或负数）时是否抛出 `&lt;/span>ValueError&lt;span class="sb">` 异常。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> - 使用 `&lt;/span>pytest.raises&lt;span class="sb">` 来捕获预期的异常。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">### 运行测试：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">确保你已经安装了 `&lt;/span>pytest&lt;span class="sb">`，然后在终端中运行以下命令来执行测试：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>`&lt;span class="sb">`bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">pytest test_bmi.py
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span> `&lt;span class="sb">`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">### 注意：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">- `&lt;/span>your_module&lt;span class="sb">` 是包含 `&lt;/span>calculate_bmi&lt;span class="sb">` 函数的模块名，请根据实际情况替换。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">- 测试文件通常命名为 `&lt;/span>test_*.py&lt;span class="sb">` 或 `&lt;/span>*_test.py&lt;span class="sb">`，以便 `&lt;/span>pytest` 自动识别并运行测试。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而为了进一步直接利用生成的结果，我们其实可以针对这里的输出，提取出markdown格式文本中的代码，写入一个测试文件，然后调用执行即可&lt;/p>
&lt;p>具体代码如下，利用正则表达式（正则表达式详细介绍，可参见前文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/58-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener"
>搞定正则表达式，告别新手村！&lt;/a>）提取代码部分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 用户配置 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">run_tests&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span> &lt;span class="c1"># 配置是否运行测试 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果需要运行测试，则将测试用例写入文件并执行 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">run_tests&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 创建测试文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;test_calculate_bmi.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_file_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">test_file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;import pytest&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;from ai_test import calculate_bmi&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">r&lt;/span>&lt;span class="s1">&amp;#39;```python([\s\S]*?)```\n&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_cases&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DOTALL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_code&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 使用pytest执行测试 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">subprocess&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;pytest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_file_name&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">capture_output&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 输出测试结果 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;测试结果:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;错误信息:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 可选：删除测试文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># os.remove(test_file_name)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过这种方式，我们就完成了通过deepseek自动生成用例并立即执行，输出结果的尝试。&lt;/p>
&lt;p>当然，案例比较简单，只是一个通过AI全自动完成单元测试的初步试验，具体应用还须更进一步地深入探索！&lt;/p></description></item><item><title>Playwright新版本筛选功能</title><link>https://chengxiaqiucao.github.io/post/066-playwright%E6%96%B0%E7%89%88%E6%9C%AC%E7%AD%9B%E9%80%89%E5%8A%9F%E8%83%BD/</link><pubDate>Sun, 16 Mar 2025 13:32:58 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/066-playwright%E6%96%B0%E7%89%88%E6%9C%AC%E7%AD%9B%E9%80%89%E5%8A%9F%E8%83%BD/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/066-playwright%E6%96%B0%E7%89%88%E6%9C%AC%E7%AD%9B%E9%80%89%E5%8A%9F%E8%83%BD/playwright_logo.png" alt="Featured image of post Playwright新版本筛选功能" />&lt;hr>
&lt;h3 id="前言">前言
&lt;/h3>&lt;p>在进行软件测试，比如针对一个电商网站，你是否遇到过这些问题？&lt;/p>
&lt;ul>
&lt;li>&lt;strong>动态加载的商品列表&lt;/strong>：部分商品因缺货、促销结束或未登录状态被隐藏。&lt;/li>
&lt;li>&lt;strong>悬浮显示的促销标签&lt;/strong>：仅当用户鼠标悬停时才会展示优惠信息。&lt;/li>
&lt;li>&lt;strong>广告弹窗干扰&lt;/strong>：某些弹窗可能遮挡核心功能，但测试时需要确保主流程不受影响。&lt;/li>
&lt;/ul>
&lt;p>这些场景的共同点是：&lt;strong>页面元素可能存在于DOM中，但用户实际不可见&lt;/strong>， 比如设置CSS属性（&lt;code>display: none&lt;/code>、&lt;code>visibility: hidden&lt;/code>）。传统测试方法需要手动判断元素可见性，遍历或预先这对具体对象进行分支判断，比较复杂。&lt;/p>
&lt;hr>
&lt;h3 id="playwright-最新版本提供了一个简化方法">Playwright 最新版本提供了一个简化方法
&lt;/h3>&lt;p>在最新更新的 Playwright V1.5.1 版本更新中，针对&lt;code>locator.filter()&lt;/code>方法新增了&lt;code>visible&lt;/code>选项，可以极大简化这部分操作。（&lt;em>目前针对node.js有此更新，Python语言尚未支持&lt;/em>）&lt;/p>
&lt;p>其核心作用是：&lt;br>
&lt;strong>仅筛选页面上用户实际可见的元素&lt;/strong>，自动忽略因CSS（如&lt;code>display: none&lt;/code>）或布局原因隐藏的元素。&lt;/p>
&lt;p>&lt;strong>技术原理&lt;/strong>：&lt;br>
Playwright通过计算元素的布局边界、透明度、层叠上下文等属性，判断元素是否在视口内且对用户可见。这与真实用户视角完全一致，避免因操作隐藏元素导致测试失败。&lt;/p>
&lt;hr>
&lt;h3 id="场景实战过滤可见商品">场景实战：过滤可见商品
&lt;/h3>&lt;p>假设我们测试一个中文电商平台的**“限时秒杀”页面**，其HTML结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>限时秒杀&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;seckill-list&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!-- 可见商品 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">data-testid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product-item&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>【爆款】无线蓝牙耳机&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;price&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>促销价: ¥199&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>立即抢购&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">data-testid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product-item&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>智能手环&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;price&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>促销价: ¥299&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>立即抢购&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!-- 隐藏商品（已抢光或未开始） --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">data-testid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product-item&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;display: none;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>家用投影仪&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;price&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>促销价: ¥899&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>已售罄&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">data-testid&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product-item&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;product&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;opacity: 0;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>空气炸锅&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h3&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;price&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>促销价: ¥399&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>未开始&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="需求场景">&lt;strong>需求场景&lt;/strong>
&lt;/h4>&lt;p>用户访问“限时秒杀”页面时，&lt;strong>仅展示可抢购的商品&lt;/strong>（前两项），隐藏已售罄或未开始的商品。我们需要验证：&lt;/p>
&lt;ol>
&lt;li>页面中用户可见的商品数量是否正确。&lt;/li>
&lt;li>“立即抢购”按钮仅对可见商品生效。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="新旧方案对比">&lt;strong>新旧方案对比&lt;/strong>
&lt;/h3>&lt;h4 id="旧方法手动遍历可见性检查">旧方法：手动遍历+可见性检查
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 旧方案示例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expect&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;@playwright/test&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;验证可见商品数量&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://mall.example.com/seckill&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">allProducts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByTestId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;product-item&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">all&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">visibleCount&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">product&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">allProducts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">await&lt;/span> &lt;span class="nx">product&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isVisible&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">visibleCount&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">visibleCount&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 断言可见商品为2个
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>痛点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>需要手动遍历所有元素，代码冗余。&lt;/li>
&lt;li>若商品数量动态变化（如分页加载），维护成本高。&lt;/li>
&lt;/ul>
&lt;h4 id="新方案一行代码过滤可见元素">&lt;strong>新方案：一行代码过滤可见元素&lt;/strong>
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 新方案示例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">test&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expect&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;@playwright/test&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;验证可见商品数量&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://mall.example.com/seckill&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">visibleProducts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByTestId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;product-item&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">visible&lt;/span>: &lt;span class="kt">true&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 断言可见商品数量为2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">visibleProducts&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 断言所有可见商品均可点击“立即抢购”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">visibleProducts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;立即抢购&amp;#39;&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toHaveCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>优势&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>代码简洁&lt;/strong>：无需循环，直接通过链式调用过滤。&lt;/li>
&lt;li>&lt;strong>实时匹配&lt;/strong>：自动响应页面动态变化（如AJAX加载新商品）。&lt;/li>
&lt;li>&lt;strong>精准断言&lt;/strong>：结合Playwright的软断言（Soft Assertions），可同时验证多个条件。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="扩展应用电商测试中的常见场景">&lt;strong>扩展应用：电商测试中的常见场景&lt;/strong>
&lt;/h3>&lt;h4 id="场景1验证悬浮显示的促销标签">&lt;strong>场景1：验证悬浮显示的促销标签&lt;/strong>
&lt;/h4>&lt;p>某些商品的“限时折扣”标签仅在鼠标悬停时显示。通过&lt;code>visible: true&lt;/code>可确保仅操作实际可见的元素：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 鼠标悬停后，验证促销标签可见
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">productCard&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByTestId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;product-card&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">visible&lt;/span>: &lt;span class="kt">true&lt;/span> &lt;span class="p">}).&lt;/span>&lt;span class="nx">first&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">await&lt;/span> &lt;span class="nx">productCard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hover&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">discountTag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">productCard&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;限时5折&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">await&lt;/span> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">discountTag&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBeVisible&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="场景2过滤弹窗干扰">&lt;strong>场景2：过滤弹窗干扰&lt;/strong>
&lt;/h4>&lt;p>若页面存在广告弹窗，可通过&lt;code>visible: true&lt;/code>跳过隐藏的弹窗元素：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 关闭可见的弹窗（忽略已隐藏的）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">activePopup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByTestId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;popup&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">visible&lt;/span>: &lt;span class="kt">true&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">await&lt;/span> &lt;span class="nx">activePopup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isVisible&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="nx">activePopup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getByText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;关闭&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">click&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="结语">结语
&lt;/h3>&lt;p>通过这个 &lt;code>Playwright&lt;/code> 更新的实用功能，可以较大简化我们在进行自动化测试时编写的复杂度，也可以看到，作为势头正劲的新一代web测试工具，Playwright的不断升级优化还是很贴合实际且社区活跃，值得重点关注！&lt;/p>
&lt;p>秋草也推出了一个 基于Pytest+Playwright的自动化框架实战课程，有兴趣的同学可关注：&lt;/p></description></item><item><title>Pytest_mock详解</title><link>https://chengxiaqiucao.github.io/post/057-pytest_mock%E8%AF%A6%E8%A7%A3/</link><pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/057-pytest_mock%E8%AF%A6%E8%A7%A3/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/057-pytest_mock%E8%AF%A6%E8%A7%A3/pytest-mock.png" alt="Featured image of post Pytest_mock详解" />&lt;hr>
&lt;h1 id="使用-pytest-mock-进行-python-高级单元测试与模拟">使用 pytest-mock 进行 Python 高级单元测试与模拟
&lt;/h1>&lt;h2 id="一单元测试与模拟的意义">一、单元测试与模拟的意义
&lt;/h2>&lt;p>在软件开发中，单元测试用于验证代码逻辑的正确性。但实际项目中，代码常依赖外部服务（如数据库、API、文件系统）。直接测试这些依赖会导致：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>测试速度变慢&lt;/strong>&lt;/li>
&lt;li>&lt;strong>测试结果不可控&lt;/strong>&lt;/li>
&lt;li>&lt;strong>产生副作用&lt;/strong>（如真实发送邮件）&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>模拟（Mocking）&lt;/strong> 技术通过创建虚拟对象替代真实依赖，使测试聚焦于当前单元的逻辑。&lt;/p>
&lt;hr>
&lt;h2 id="二环境安装">二、环境安装
&lt;/h2>&lt;p>使用 &lt;code>pytest&lt;/code> 和 &lt;code>pytest-mock&lt;/code> 插件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install pytest pytest-mock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="三基础用法示例">三、基础用法示例
&lt;/h2>&lt;h3 id="场景邮件发送服务">场景：邮件发送服务
&lt;/h3>&lt;p>假设我们有一个邮件发送类 &lt;code>EmailSender&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># email_sender.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">EmailSender&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">body&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 真实发送邮件的逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试时不应实际发送邮件。使用 &lt;code>pytest-mock&lt;/code> 模拟 &lt;code>send&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test_email_sender.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_send_email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mocker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_send&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;email_sender.EmailSender.send&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">EmailSender&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;user@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Test email&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_send&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_once_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;user@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Test email&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>代码解析：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>mocker.patch&lt;/code> 替换了 &lt;code>EmailSender.send&lt;/code> 方法&lt;/li>
&lt;li>验证方法是否以正确参数被调用&lt;/li>
&lt;li>断言返回值为 &lt;code>True&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="四高级模拟技巧">四、高级模拟技巧
&lt;/h2>&lt;h3 id="1-模拟返回值">1. 模拟返回值
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_mock_return_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mocker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;module.Class.method&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">return_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;mocked_response&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;mocked_response&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-模拟抛出异常">2. 模拟抛出异常
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_mock_exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mocker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;module.Class.method&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">side_effect&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="ne">Exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;DB Error&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="n">pytest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">raises&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">Exception&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">match&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;DB Error&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-模拟连续调用">3. 模拟连续调用
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_multiple_returns&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mocker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_method&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;module.Class.method&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">side_effect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-模拟属性与方法链">4. 模拟属性与方法链
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_chained_methods&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mocker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MagicMock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method1&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method2&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">return_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;final&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">mock_instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method1&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method2&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;final&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">method1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_once&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="五模拟复杂场景">五、模拟复杂场景
&lt;/h2>&lt;h3 id="场景api-客户端测试">场景：API 客户端测试
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># api_client.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">APIClient&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_user_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;https://api.example.com/users/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试时模拟 &lt;code>requests.get&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_api_client&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mocker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MagicMock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">return_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_get&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;requests.get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">return_value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">mock_response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">APIClient&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_user_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_get&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_once_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https://api.example.com/users/1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="六最佳实践与注意事项">六、最佳实践与注意事项
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>精确断言&lt;/strong>：不仅要验证是否调用，还要检查参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mock_method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">expected_value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用 &lt;code>autospec&lt;/code>&lt;/strong>：保持模拟对象与原对象接口一致&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mocker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;module.Class&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">autospec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>避免过度模拟&lt;/strong>：核心业务逻辑尽量使用真实对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>清理模拟&lt;/strong>：使用 &lt;code>mocker&lt;/code> Fixture 自动清理，避免测试污染&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="七总结">七、总结
&lt;/h2>&lt;p>通过 &lt;code>pytest-mock&lt;/code> 我们可以：&lt;/p>
&lt;ul>
&lt;li>✅ 隔离测试环境&lt;/li>
&lt;li>✅ 模拟各种边界条件&lt;/li>
&lt;li>✅ 验证对象交互行为&lt;/li>
&lt;li>✅ 提升测试执行速度&lt;/li>
&lt;/ul>
&lt;p>掌握模拟技术能显著提高测试覆盖率与代码质量。建议结合 &lt;a class="link" href="https://pytest-mock.readthedocs.io/" target="_blank" rel="noopener"
>官方文档&lt;/a> 深入学习更复杂的使用场景。&lt;/p>
&lt;hr></description></item><item><title>自动化好帮手_chrome浏览器的录制器</title><link>https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218.png" alt="Featured image of post 自动化好帮手_chrome浏览器的录制器" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>入门自动化测试，录制回放通常是小白测试首先用到的功能。而录制回放工具也一直是各大Web自动化测试必然会着重提供的一块功能。&lt;/p>
&lt;p>早期WinRunner、QTP这样的工具，自动化测试可以说是围绕录制回放开展的。近年像Selenium也提供有录制工具 &lt;strong>Selenium IDE&lt;/strong>，Playwright也包含有 &lt;strong>codegen&lt;/strong> 这样的功能。&lt;/p>
&lt;p>而这些针对Web页面的自动化录制工具，其实本质都是通过在浏览器操作时记录操作行为完成的，说到底还是通过浏览器行为记录来实现。&lt;/p>
&lt;p>本文，我们要介绍的则是Chrome浏览器，官方提供的一个针对自动化测试录制的功能，也就是它的&lt;strong>Recorder&lt;/strong>。&lt;/p>
&lt;h2 id="chrome-recorder-用法">Chrome Recorder 用法
&lt;/h2>&lt;p>Chrome Recorder是 Chrome从 97 版本以后才提供的一个比较新的功能，很多同学可能还不太了解。但因为是浏览器自带的功能，无需额外安装其他工具，而且从操作记录的准确性和易用性上也能有更好的表现。&lt;/p>
&lt;h3 id="启用">启用
&lt;/h3>&lt;p>打开chrome浏览器的Dev tool， 从它的功能Tab页中，如果发现有 &lt;strong>记录器&lt;/strong> 这个tab，表示当前浏览器已经支持这个录制功能。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218.png"
width="2224"
height="1142"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218_hu_80dc866d18e1332c.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218_hu_2f42702a6e656bca.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>进入 &lt;strong>记录器&lt;/strong>，点击 &lt;code>创建新录制&lt;/code> 即可开启一个脚本录制&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-1.png"
width="805"
height="880"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-1_hu_b68b4bf9bbc09331.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-1_hu_ecb09354aaf054cb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>进行一些录制设置，包括当前录制的命名，还有优先使用的元素识别手段，这里 &lt;code>选择器属性&lt;/code>, 通常是根据自动化测试的最佳时间，项目一般会为页面元素，包含一个用于测试的属性（通常如 &lt;code>date-testid&lt;/code>），比如我们这里示例的 SauceDemo.com 这个网站，也包含一个测试id属性，这里是 &lt;code>data-test&lt;/code>，所以这里可以进行指定。 然后点击 &lt;code>开始录制&lt;/code> 就可以启动录制了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-2.png"
width="1900"
height="922"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-2_hu_7b31a428321bff7e.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-2_hu_4984f70638f90867.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="494px"
>&lt;/p>
&lt;h3 id="录制">录制
&lt;/h3>&lt;p>录制过程中，我们只需要正常进行页面操作，录制器就会自动对我们的操作进行记录，如果录制过程中，我们需要添加一些校验点，可以在录制记录树中选择 &lt;code>添加断言&lt;/code>，默认是&lt;code>等待元素&lt;/code> 这个校验。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-3.png"
width="1892"
height="924"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-3_hu_e6f7542a1b98995b.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-3_hu_762b0c012fe40c27.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>选择selectors这里的选择器，然后到页面中点击我们希望校验出现的元素，就会自动把对应的元素属性添加为校验点，这里有一个比较好的地方，就是 recorder 会自动添加多种元素的描述方式，实际回放是，会按照顺序依次进行匹配，为录制的脚本适配提供了更好的灵活性。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-4.png"
width="1885"
height="895"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-4_hu_25a191228a702845.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-4_hu_d8c4b0e71e2603c9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;p>在操作记录树的右侧，我们还可以点击 &lt;code>显示代码&lt;/code>, 会把操作记录自动体现为自动化测试脚本，这里目前支持的脚本类型主要还是 Google 自家的puppeteer，但从官方介绍上也提到，更多工具类型也在计划补充中。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-5.png"
width="819"
height="802"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-5_hu_b11cff1502450bbd.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-5_hu_bfed07ad5bbe8e76.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/p>
&lt;p>点击&lt;code>结束录制&lt;/code>，就可以完成一个简单脚本的生成了。&lt;/p>
&lt;h3 id="回放">回放
&lt;/h3>&lt;p>完成录制后，当然也可以在这里进行回放，点击 &lt;code>重放&lt;/code> 进行回放测试。&lt;/p>
&lt;p>这里在&lt;code>重放设置&lt;/code>中，我们还可以模拟指定回放测试时的网络条件，如 &lt;code>3G&lt;/code>， &lt;code>低速4G&lt;/code>等。回放过程也可以通过性能面板，生成运行过程中的前端交互性能报表（会生成到&lt;code>性能&lt;/code>页面中）&lt;/p>
&lt;p>当然也可以通过&lt;code>导出&lt;/code>功能，将录制的内容直接导出为puppeteer脚本，通过puppeteer来完成自动化执行。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-6.png"
width="1241"
height="890"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-6_hu_5b4596dae1fc0d0b.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-6_hu_9cdb24e76aebd8e4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;h3 id="脚本编辑">脚本编辑
&lt;/h3>&lt;p>除了通过录制生成步骤外，我们也可以手工在相应步骤的前后，添加和编辑步骤&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-8.png"
width="1068"
height="708"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-8_hu_adf67a3f7e71049c.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-8_hu_785833f842084839.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="362px"
>&lt;/p>
&lt;p>指定 操作的类型&lt;code>type&lt;/code>，可以看到，这里会包含页面操作时各种操作事件，再通过元素选择器和相关属性的设置，也可以手动地完成步骤行为的编辑&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-7.png"
width="1051"
height="838"
srcset="https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-7_hu_700a38c59b4484f4.png 480w, https://chengxiaqiucao.github.io/post/050-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A5%BD%E5%B8%AE%E6%89%8B_chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%BD%95%E5%88%B6%E5%99%A8/Pasted-20250218-7_hu_b7abec2b7cd8025e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>可以看到，通过recorder这个chrome自带的录制器，我们已经可以非常方便和灵活地完成web页面自动化脚本的录制生成。相比Selenium IDE和Playwright codegen，因为是chrome本身内置，灵活性和准确性更好。不足之处，主要是目前对于测试脚本的支持，主要还是 google 的puppeteer，对于不使用puppeteer作为主要工具的团队，可能还需要有puppeteer转换到其他工具脚本的工作。&lt;/p></description></item><item><title>我的pytest+playwright实战课程上线了</title><link>https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest+playwright%E6%A1%86%E6%9E%B6/</link><pubDate>Sun, 19 Jan 2025 11:07:57 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest+playwright%E6%A1%86%E6%9E%B6/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest+playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-1.png" alt="Featured image of post 我的pytest+playwright实战课程上线了" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>很久没有更新博客，是因为在梳理制作Playwright测试框架实战相关的课程内容。现在课程已经完结，开个帖子介绍下这门课程（硬广, 哈哈）&lt;/p>
&lt;p>课程放在CSDN学习频道， 欢迎关注~&lt;/p>
&lt;p>&lt;a class="link" href="https://edu.csdn.net/course/detail/39983" target="_blank" rel="noopener"
>PyTest+PlayWright自动化测试框架实战&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-1.png"
width="1082"
height="425"
srcset="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-1_hu_377038cf9452478a.png 480w, https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-1_hu_9c8f3d16bd66b6ba.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="611px"
>&lt;/p>
&lt;h2 id="为什么是playwright">为什么是Playwright？
&lt;/h2>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-2.png"
width="1775"
height="761"
srcset="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-2_hu_8864768a4c1cfaa3.png 480w, https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-2_hu_4be3aebdb6fef9a2.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="559px"
>&lt;/p>
&lt;p>&lt;strong>Playwright&lt;/strong>，相比一些老牌的工具，它的诞生时间并不长，2020年才发布了第一个正式版本，当然在这之前已经有beta版推出。正因为工具比较新，所以也就有了后发优势。
而且Playwright出自微软，背靠大厂，各方面支持力度也很强，所以目前在web自动化测试工具中，上升的势头非常强劲，普遍被认为是能代替传统的web自动化霸主Selenium的新生代自动化测试工具。&lt;/p>
&lt;p>当然，这个工具能受到欢迎，除了因为它是大厂出品，自然也离不开其自身的一些显著的明显优点。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Playwright的开发团队，是来自另一款工具puppeteer（Google基于chrome推出的web自动化工具）的核心成员。可以说Playwright是建立在puppeteer基础上的。而puppeteer，本身一度被认为是后selenium时代的web自动化三驾马车之一，所以Playwright可以说是站在巨人肩膀上，它不仅兼容了puppeteer的很多优点，还优化了puppeteer本身的一些不足，更加完善。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>puppeteer有一个很大的约束就是它只支持chrome浏览器，而playwright则内建了对多种主流浏览器的支持，除了chrome、edge，也支持firefox、safari，能满足web自动化的主流浏览器覆盖&lt;/p>
&lt;/li>
&lt;li>
&lt;p>playwright支持不同的编程语言实现，除了像puppeteer原先支持的node.js之外，也可以支持java、python, 当然还有微软自己的.net。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Palywright还支持更多的一些扩充高级功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="官网对playwright优势的介绍">官网对playwright优势的介绍
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>多浏览器、跨平台、多语言、以及对移动端web的支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>弹性框架，能主动规避很多导致UI自动化不够稳定的问题。包括自动等待、动态校验、过程跟踪这样一些特性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更匹配现代浏览器的架构，是进程级的隔离，使用上线文的概念区分不同的测试场景，且互不干扰。还有像强化对Frame、shadow dom这样一些比较特殊的前端自动化处理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更充分的隔离以及更快的执行速度，Playwright的上下文机制可以保证浏览器进程基本的隔离以及毫秒级的创建速度。执行速度的优势也得益于playwright基于websocket协议这种长连接、全双工、双向通信的通信协议。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各种辅助工具，包括代码的自动化生成、录制，页面元素的定位辅助以及强大的信息跟踪工具。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="工作原理">工作原理
&lt;/h4>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-3.png"
width="1274"
height="603"
srcset="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-3_hu_a3d677c42194ff2e.png 480w, https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-3_hu_72deb87d71b36323.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>Playwright是基于Puppeteer之上的优化产物，它的实现原理可以说是puppeteer跟Selenium优点的综合。Playwright内建了一个基于Node.js实现的server模块，这个模块和基于各种不同语言的客户端程序之间，通过websocket协议来进行连接，通信，可以发挥websocket长连接、双向工作的优势。&lt;/p>
&lt;p>然后再通过CDP协议对chromium内核的浏览器进行控制和自动化驱动，这里Playwright也支持firefox和webkit（其实是Playwright本身实现了针对这两款浏览器的CDP协议，这里叫CDP plus协议）。&lt;/p>
&lt;p>还有个区别，Playwright其实是把浏览器版本内建在工具之中，这样就屏蔽了因浏览器版本不同导致的差异性。&lt;/p>
&lt;h2 id="测试框架在自动化测试工具体系中处于什么位置">测试框架在自动化测试工具体系中处于什么位置？
&lt;/h2>&lt;p>我们说到自动化，经常提到测试脚本、自动化工具、框架、平台，那么这些不同的概念到底有什么不一样，我们要介绍的&lt;strong>框架&lt;/strong>，在整个自动化测试体系中，实际是处于什么位置呢？&lt;/p>
&lt;p>可以用下面这个分层图来概括：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-4.png"
width="1155"
height="912"
srcset="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-4_hu_4b97bebd0a8d68ce.png 480w, https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120-4_hu_f57338f39227d14e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>脚本层面&lt;/strong>。 更多是可以通过一些测试脚本，来完成一些自动化测试任务或测试辅助工具。包括我们使用各种编程语言编写出来的测试代码，或者操作系统的一些shell、批处理脚本等，都属于脚本层面。脚本是自动化测试测试逻辑的直接体现。包括很多自动化测试录制回放工具，把手工操作，转换为测试脚本，完成的都是这个层面的工作。是自动化测试最基础的部分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工具层面&lt;/strong>。 这一层完成的是对脚本的驱动，脚本具体怎么驱动程序执行，怎么进行测试动作和结果的判断？ 这些是自动化测试工具要完成的工作。不同类型的测试通常有不同的工具。我们经常说到的Selenium， Appium，Postman，QTP、Jmeter等等，包括Playwright，主要都可以理解为测试工具。可以做Web、移动应用，接口，性能等等不同类型的自动化测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>框架层面&lt;/strong>，它解决的是自动化测试的组织，把一整套自动化测试用例组织起来。包括用例的选择，执行过程的控制，结果的汇总呈现等。框架层面，最主要的是会支持不同的测试工具，可以对不同类型的自动化测试进行整合。比较常见的测试框架，比如Pytest、Junit、Robotframework等，都属于优秀的自动化测试框架。 像Junit、Pytest，开始是面向单元测试的测试框架，PyTest是借鉴Junit发展而来，但并不是说他们的应用范围就是单元测试，集成测试、系统测试也同样应用。就像自动化测试不属于某一个具体的测试阶段一样，我们也不要把某个测试工具或测试框架和测试的阶段混淆，这是两个不同维度的概念。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>平台层面&lt;/strong>。自动化测试平台是在更高层面来组织自动化测试。要实现测试任务的调度、测试环境的管理，测试数据、测试脚本等测试资产的管理和分配，包括和其他的研发流程实现互通，比如bug的管理、代码管理、文档管理、配置管理等与各种其他研发工具的互通和整合。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="课程大纲">课程大纲
&lt;/h2>&lt;p>我的这门课程主要是结合Pytest和Playwright工具的系统介绍，学习如何搭建起一个可落地使用的自动化测试框架，包括和持续集成系统的集成。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120.png"
width="1650"
height="3161"
srcset="https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120_hu_2cb77b476320e752.png 480w, https://chengxiaqiucao.github.io/post/051-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0pytest&amp;#43;playwright%E6%A1%86%E6%9E%B6/Pasted-20250120_hu_fe8f1a4feecf086e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="52"
data-flex-basis="125px"
>&lt;/p>
&lt;p>感兴趣的小伙伴，可以关注哈，链接如下：&lt;/p>
&lt;p>&lt;a class="link" href="https://edu.csdn.net/course/detail/39983" target="_blank" rel="noopener"
>PyTest+PlayWright自动化测试框架实战&lt;/a>&lt;/p>
&lt;p>目前上新期，八折优惠哦~~&lt;/p></description></item><item><title>WebDriver将退出历史？BIDI登场</title><link>https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi.png"
width="1039"
height="325"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_34ef2d91df9bc5c2.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_190c71a116613266.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;h2 id="前言">前言
&lt;/h2>&lt;p>web自动化测试领域，最核心的其实是浏览器的驱动方法。现在最流行的是已经被W3C标准化的webDriver，而占据浏览器垄断地位的Chrome其实也有自己的一个标准协议，也就是CDP（chrome devTools protocol），它可以提供更比WebDriver更底层的对浏览器的控制。google 自己的自动化测试工具 puppeteer 其实就是基于 CDP 进行的自动化实现。&lt;/p>
&lt;h2 id="webdriver的发展历程">WebDriver的发展历程
&lt;/h2>&lt;p>跟随 Selenium 发展起来的 webDriver 协议是目前 Web 自动化测试领域的事实标准。而这一历程也是逐步发展而来的。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003.png"
width="1200"
height="353"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003_hu_3684508c9e245657.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003_hu_fba1de2c28e3762e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="339"
data-flex-basis="815px"
>&lt;/p>
&lt;ul>
&lt;li>2004 Selenium 诞生&lt;/li>
&lt;li>2006 WebDriver 作为一款工具诞生&lt;/li>
&lt;li>2009 google自动化测试大会，Seleium 和 WebDriver 合并为一个项目，发布Selenium 2.0&lt;/li>
&lt;li>2016 Selenium3 发布，彻底抛弃1.0中的Selenium RC&lt;/li>
&lt;li>2018 W3C标准组织吸纳了WebDriver为标准协议&lt;/li>
&lt;li>2021 Selnium 4.0发布，取消了WebDriver原先的Json Wire协议，全面采用W3C webDriver&lt;/li>
&lt;/ul>
&lt;h2 id="javascript和nodejs壮大-自动化测试百花齐放">JavaScript和Node.js壮大， 自动化测试百花齐放
&lt;/h2>&lt;p>而随着 Web 页面的前端开发越来越依赖 JavaScript，一批新的自动化测试工作也逐渐推出，包括WebdriverIO、Appium、Nightwatch、Protractor（已废弃）、Testcafe、Cypress、Puppeteer 和 Playwright 等新的自动化解决方案应运而生。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-1.png"
width="1200"
height="370"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-1_hu_40718d6e3355324.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-1_hu_19a0763a5a01d543.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="324"
data-flex-basis="778px"
>&lt;/p>
&lt;h2 id="自动化工具的两大流派">自动化工具的两大流派
&lt;/h2>&lt;p>以上这些自动化工具，根据它们运行的层级，可以分为下面两大流派&lt;/p>
&lt;ul>
&lt;li>&lt;strong>上层控制&lt;/strong>：&lt;strong>在浏览器中&lt;/strong>执行 JavaScript 的工具。例如，&lt;a class="link" href="https://bit.ly/cypress-architecture" target="_blank" rel="noopener"
>Cypress&lt;/a> 和 &lt;a class="link" href="https://bit.ly/testcafe-architecture" target="_blank" rel="noopener"
>TestCafe&lt;/a> 利用 Web API 和 Node.js 来直接在浏览器中运行测试。&lt;/li>
&lt;li>&lt;strong>底层控制&lt;/strong>：通过在&lt;strong>浏览器之外&lt;/strong>执行远程命令的工具。当工具需要更强的控制力时（例如打开多个标签页或模拟设备模式），此时它们需要执行远程命令，以通过协议控制浏览器。 两种主要的自动化协议为 &lt;strong>WebDriver（W3C）&lt;/strong> 和 &lt;strong>Chrome 开发者工具协议 (CDP)&lt;/strong>。分别以 &lt;code>Selenium&lt;/code> 和 &lt;code>puppeteer&lt;/code> 为代表&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-2.png"
width="1200"
height="682"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-2_hu_7a00d56fbd310c05.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-2_hu_8b44ea3387cf4ac8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>&lt;/p>
&lt;h2 id="webdriver-和-cdp-的对比">WebDriver 和 CDP 的对比
&lt;/h2>&lt;h3 id="webdriver-工作原理">webDriver 工作原理
&lt;/h3>&lt;p>基于 WebDriver 协议的自动化测试工具，需要一个专门的浏览器驱动，通过浏览器驱动来实现跨不同浏览器的标准协议。工具和驱动之间通过 http 协议交互。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-3.png"
width="1200"
height="516"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-3_hu_4474f70a6867d39c.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-3_hu_d71d07da545bacaa.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/p>
&lt;p>也就是说，我们在web页面上完成的相关操作，实际上是自动化工具将其转换为了一个符合 webDriver 协议的 http 请求，再通过具体的driver驱动浏览器完成动作。&lt;/p>
&lt;p>比如一个页面点击操作，实际是向对应浏览器驱动发出如下请求：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># WebDriver: Click on a coffee element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">curl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">X&lt;/span> &lt;span class="n">POST&lt;/span> &lt;span class="n">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="mf">127.0.0.1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4444&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">element_id&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">element&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">click&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">H&lt;/span> &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但对于一些底层的控制，如浏览器本身的一些事件如新开窗口等，因为 webDriver 协议基于 http 请求，就很难处理。&lt;/p>
&lt;h3 id="cdp工作原理">CDP工作原理
&lt;/h3>&lt;p>而 CDP，它原先并不是专门应用于自动化测试目的，是为 chrome 浏览器的开发者工具的调试功能设计，只是后来被 &lt;strong>puppeteer&lt;/strong> 用于了自动化测试。相比 Webdriver ，它是基于 WebSocket 直接和基于 chromium 的浏览器实现底层通信，可以双向传递，能提供更快速和更底层的控制。完成一些 webDriver协议 无法处理的动作。&lt;/p>
&lt;p>&lt;strong>底层控制：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>捕获控制台消息&lt;/li>
&lt;li>拦截网络请求&lt;/li>
&lt;li>模拟 Device Mode&lt;/li>
&lt;li>模拟地理定位&lt;/li>
&lt;li>&amp;hellip;..&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-4.png"
width="1200"
height="366"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-4_hu_67295a57aa91e8de.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-4_hu_513ba702af1adfd5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="327"
data-flex-basis="786px"
>&lt;/p>
&lt;p>页面操作，实际上是转换为了一系列 CDP 命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">CDP&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Click&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">coffee&lt;/span> &lt;span class="n">element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">Mouse&lt;/span> &lt;span class="n">pressed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Input.dispatchMouseEvent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parameters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;mousePressed&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">10.34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">27.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clickCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span> &lt;span class="n">Mouse&lt;/span> &lt;span class="n">released&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">command&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Input.dispatchMouseEvent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parameters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;mouseReleased&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">10.34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">27.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">clickCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是，虽然提供了底层支持，但 CDP 协议最大的问题就是只能支持 Chromium 内核浏览器，并不是一个开放标准。 此外 CDP 协议也设计的比较复杂，不太适合直接从编码层面调用。&lt;/p>
&lt;h2 id="何为webdriver-bidi">何为WebDriver BiDi？
&lt;/h2>&lt;p>基于 WebDriver 协议和 CDP 协议各自的优缺点，自动化测试领域目前正在讨论推出全新的标准。也就是 WebDriver BiDi。&lt;/p>
&lt;p>这个协议的目标是兼顾 WebDriver 和 CDP 协议的优点，提供如下特性（愿景）：&lt;/p>
&lt;ul>
&lt;li>跨浏览器支持&lt;/li>
&lt;li>双向信息传递&lt;/li>
&lt;li>作为通用标准，纳入W3C&lt;/li>
&lt;li>提供底层控制&lt;/li>
&lt;li>以自动化测试为目的，更简洁方便地通过API调用&lt;/li>
&lt;li>支持各种工具和浏览器&lt;/li>
&lt;/ul>
&lt;p>目前这个协议还在协商、开发阶段。但已经引入了各大主流浏览器厂商、测试工具和服务提供商的参与，可以预见，将会是 Web 自动化测试领域下一个重大更新！&lt;/p>
&lt;p>参与厂商：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi.png"
width="1039"
height="325"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_34ef2d91df9bc5c2.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/BiDi_hu_190c71a116613266.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;p>目前的最新的进展是 2024-09-23 推出的草案版本。
&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-6.png"
width="1471"
height="208"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-6_hu_97219f094a70612.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-6_hu_487e7d80184905ac.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="707"
data-flex-basis="1697px"
>&lt;/p>
&lt;p>从草案内容来看，目前还处于相对早期阶段，短期内应该不会正式推出，所以相当长时间内， WebDriver 依然会是web自动化测试工具的事实标准，但相信BiDi将会是后续的主要发展方向。&lt;/p>
&lt;p>其实从 近期 Selenium 4的更新源码中，已经可以看到对BiDi协议的支持扩展方法了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-7.png"
width="1540"
height="819"
srcset="https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-7_hu_31dc3360f905dd9a.png 480w, https://chengxiaqiucao.github.io/post/026-%E5%A4%A7%E8%AF%9Dchrom%E5%BC%80%E5%8F%91%E8%80%85%E5%8D%8F%E8%AE%AEcdp/Pasted-20241003-7_hu_61ac338f18915c83.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>我们将长期关注这一标准的发展趋势和对目前自动化测试技术的影响。&lt;/p></description></item><item><title>自动化测试奇技淫巧之保存网页为PDF</title><link>https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/</link><pubDate>Thu, 03 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-3.png"
width="734"
height="369"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-3_hu_32bf543762afb175.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-3_hu_2258d9e590022671.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="477px"
>&lt;/p>
&lt;p>我们浏览网站资料的时候，发现有价值的文档，经常需要把材料保存下来。直接复制其实比较麻烦，况且有的网站还做了限制，不方便直接保存。这时将页面直接保存为 PDF 格式的文件是一个很好的需求。&lt;/p>
&lt;p>通常的做法是需要借助一些浏览器插件或者打印扩展来实现，这里我们学习自动化的话，其实利用 puppeteer 就可以方便地实现这个目的。再加上工具的自动化加持，绝对是爬取并保存重要资料的利器。&lt;/p>
&lt;h2 id="puppeteer用法">Puppeteer用法
&lt;/h2>&lt;p>关于 Puppeteer 工具的基本用法，在我之前的博文 &lt;a class="link" href="https://chengxiaqiucao.github.io/post/28-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7puppeteer%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener"
>自动化测试工具Puppeteer简介&lt;/a> 中已有较全面介绍，大家可以参考。&lt;/p>
&lt;h2 id="pdf-的基本用法">pdf() 的基本用法
&lt;/h2>&lt;p>在 Puppeteer 中保存 pdf 文件其实非常简单，通过调用 puppeteer 内置的 pdf() 方法就可以将当前页面保存为一个pdf文件&lt;/p>
&lt;p>官方给的案例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">browser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">puppeteer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">launch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newPage&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://news.ycombinator.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitUntil&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;networkidle2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pdf&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;hn.pdf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;letter&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用来访问一个技术新闻聚合网站，并将页面保存到 &lt;code>hn.pdf&lt;/code> 文件中&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003.png"
width="650"
height="848"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003_hu_17f7098ace28a6ed.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003_hu_33da3eb23c1a1c2e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="183px"
>&lt;/p>
&lt;h3 id="paperformat">PaperFormat
&lt;/h3>&lt;p>上面的例子中有个参数 &lt;code>format&lt;/code>， 这个参数其实是指定保存的页面大小，可以取值为一些默认的打印页面大小，取值清单和对应的大小如下(单位英寸)：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Letter&lt;/code>: 8.5in x 11in&lt;/li>
&lt;li>&lt;code>Legal&lt;/code>: 8.5in x 14in&lt;/li>
&lt;li>&lt;code>Tabloid&lt;/code>: 11in x 17in&lt;/li>
&lt;li>&lt;code>Ledger&lt;/code>: 17in x 11in&lt;/li>
&lt;li>&lt;code>A0&lt;/code>: 33.1102in x 46.811in&lt;/li>
&lt;li>&lt;code>A1&lt;/code>: 23.3858in x 33.1102in&lt;/li>
&lt;li>&lt;code>A2&lt;/code>: 16.5354in x 23.3858in&lt;/li>
&lt;li>&lt;code>A3&lt;/code>: 11.6929in x 16.5354in&lt;/li>
&lt;li>&lt;code>A4&lt;/code>: 8.2677in x 11.6929in&lt;/li>
&lt;li>&lt;code>A5&lt;/code>: 5.8268in x 8.2677in&lt;/li>
&lt;li>&lt;code>A6&lt;/code>: 4.1339in x 5.8268in&lt;/li>
&lt;/ul>
&lt;h3 id="pdfmargin">PDFMargin
&lt;/h3>&lt;p>除了 &lt;code>format&lt;/code>， 还可以像打印时设置页边距，设置 &lt;code>margin&lt;/code> 属性, 对应取值&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Modifiers&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bottom&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>left&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>right&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>top&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>上面的代码加上页边距设置：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">  &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pdf&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;hn.pdf&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;A4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nx">margin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;left&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;top&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到页边距也进行了调整
&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-1.png"
width="657"
height="843"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-1_hu_12841432f85ae97b.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-1_hu_5baf4ee454c3e930.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="187px"
>&lt;/p>
&lt;h3 id="pdfoption">PDFOption
&lt;/h3>&lt;p>除了上面两个常用的调整参数外，这个方法其实也提供了其他更丰富的设置，基本可以实现我们保存 pdf 文档时的各种样式设置需要。&lt;/p>
&lt;p>比如 &lt;code>scale&lt;/code> 参数可以设置页面缩放，取值为0.1 ~ 2:&lt;/p>
&lt;p>&lt;code>scale: 0.5,&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-2.png"
width="1050"
height="817"
srcset="https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-2_hu_9c1850f78a230a8.png 480w, https://chengxiaqiucao.github.io/post/029-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%E4%B9%8B%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5%E4%B8%BApdf/Pasted-20241003-2_hu_3798a25d5fbc7136.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>其更多的设置参数，这里不再验证，清单如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Property&lt;/th>
&lt;th>Modifiers&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>displayHeaderFooter&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Whether to show the header and footer.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>footerTemplate&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>HTML template for the print footer. Has the same constraints and support for special classes as &lt;a class="link" href="https://pptr.dev/api/puppeteer.pdfoptions#headertemplate" target="_blank" rel="noopener"
>PDFOptions.headerTemplate&lt;/a>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>format&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>&lt;a class="link" href="https://pptr.dev/api/puppeteer.paperformat" target="_blank" rel="noopener"
>PaperFormat&lt;/a>&lt;/td>
&lt;td>&lt;strong>Remarks:&lt;/strong>&lt;br>&lt;br>If set, this takes priority over the &lt;code>width&lt;/code> and &lt;code>height&lt;/code> options.&lt;/td>
&lt;td>&lt;code>letter&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>headerTemplate&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>HTML template for the print header. Should be valid HTML with the following classes used to inject values into them:&lt;br>&lt;br>- &lt;code>date&lt;/code> formatted print date&lt;br> &lt;br>- &lt;code>title&lt;/code> document title&lt;br> &lt;br>- &lt;code>url&lt;/code> document location&lt;br> &lt;br>- &lt;code>pageNumber&lt;/code> current page number&lt;br> &lt;br>- &lt;code>totalPages&lt;/code> total pages in the document&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>height&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;td>Sets the height of paper. You can pass in a number or a string with a unit.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>landscape&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Whether to print in landscape orientation.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>margin&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>&lt;a class="link" href="https://pptr.dev/api/puppeteer.pdfmargin" target="_blank" rel="noopener"
>PDFMargin&lt;/a>&lt;/td>
&lt;td>Set the PDF margins.&lt;/td>
&lt;td>&lt;code>undefined&lt;/code> no margins are set.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>omitBackground&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Hides default white background and allows generating pdfs with transparency.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>outline&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;strong>&lt;em>(Experimental)&lt;/em>&lt;/strong> Generate document outline.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pageRanges&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>Paper ranges to print, e.g. &lt;code>1-5, 8, 11-13&lt;/code>.&lt;/td>
&lt;td>The empty string, which means all pages are printed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>path&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string&lt;/td>
&lt;td>The path to save the file to.&lt;br>&lt;br>&lt;strong>Remarks:&lt;/strong>&lt;br>&lt;br>If the path is relative, it&amp;rsquo;s resolved relative to the current working directory.&lt;/td>
&lt;td>&lt;code>undefined&lt;/code>, which means the PDF will not be written to disk.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>preferCSSPageSize&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Give any CSS &lt;code>@page&lt;/code> size declared in the page priority over what is declared in the &lt;code>width&lt;/code> or &lt;code>height&lt;/code> or &lt;code>format&lt;/code> option.&lt;/td>
&lt;td>&lt;code>false&lt;/code>, which will scale the content to fit the paper size.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>printBackground&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>Set to &lt;code>true&lt;/code> to print background graphics.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scale&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>number&lt;/td>
&lt;td>Scales the rendering of the web page. Amount must be between &lt;code>0.1&lt;/code> and &lt;code>2&lt;/code>.&lt;/td>
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tagged&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>&lt;strong>&lt;em>(Experimental)&lt;/em>&lt;/strong> Generate tagged (accessible) PDF.&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>timeout&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>number&lt;/td>
&lt;td>Timeout in milliseconds. Pass &lt;code>0&lt;/code> to disable timeout.&lt;br>&lt;br>The default value can be changed by using &lt;a class="link" href="https://pptr.dev/api/puppeteer.page.setdefaulttimeout" target="_blank" rel="noopener"
>Page.setDefaultTimeout()&lt;/a>&lt;/td>
&lt;td>&lt;code>30_000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>waitForFonts&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>boolean&lt;/td>
&lt;td>If true, waits for &lt;code>document.fonts.ready&lt;/code> to resolve. This might require activating the page using &lt;a class="link" href="https://pptr.dev/api/puppeteer.page.bringtofront" target="_blank" rel="noopener"
>Page.bringToFront()&lt;/a> if the page is in the background.&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>width&lt;/td>
&lt;td>&lt;code>optional&lt;/code>&lt;/td>
&lt;td>string | number&lt;/td>
&lt;td>Sets the width of paper. You can pass in a number or a string with a unit.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>如何及时掌握各种常用框架的最新变化？</title><link>https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/</link><pubDate>Sat, 31 Aug 2024 14:27:02 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831-1.png" alt="Featured image of post 如何及时掌握各种常用框架的最新变化？" />&lt;p>现今我们的自动化测试、测试工具、各种框架其实会依赖很多知名的开源框架，比如Pytest、Junit，Selenium、Appium、JMeter等等都是应用非常广泛的开源框架。而正因为用户广泛，社区繁荣，所以这些开源项目本身的更新迭代也是极为频繁的，不定期地会引入一些新功能，同时也会对一些历史版本中的原有功能进行调整或者废弃。&lt;/p>
&lt;p>这些频繁更新，在推动开源项目不断发展的同时，也为我们使用这些项目带来了一些困扰，就是不知道什么时候可能原来用的功能在新版本中就发生了变化，为我们及时应用新版本带来不少挑战。&lt;/p>
&lt;p>针对这个问题，通常的做法，其实就是去查看项目的发布记录，了解每个版本发布的主要变化，也了解相关项目本身的发展趋势。&lt;/p>
&lt;p>而测试工作牵涉到的各种主流开源项目又比较多，所以这里就有了自动收集各种主流版本发布记录并集中汇总的想法。&lt;/p>
&lt;p>下面就是我利用Github接口自动收集一些主流测试相关开源项目的版本更新记录，转化为网页放到&lt;a class="link" href="https://chengxiaqiucao.github.io/" target="_blank" rel="noopener"
>个人博客&lt;/a> 上的呈现效果，对于我们一站掌握各种主流开源框架的变更趋势带来一些便利。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>主页&lt;/strong>：
&lt;img src="https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831.png"
width="2240"
height="1147"
srcset="https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831_hu_b365e5ca5e2b43b6.png 480w, https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831_hu_46805b295aa0bfc9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目更新记录详情（目前保留最近10次更新）&lt;/strong>
&lt;img src="https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831-1.png"
width="2240"
height="1147"
srcset="https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831-1_hu_be680823225e30ff.png 480w, https://chengxiaqiucao.github.io/post/011-%E5%A6%82%E4%BD%95%E5%8F%8A%E6%97%B6%E6%8E%8C%E6%8F%A1%E5%90%84%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9C%80%E6%96%B0%E5%8F%98%E5%8C%96/Pasted-20240831-1_hu_8fad71d14ff80d81.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>核心方法其实就是下面这段，通过预定义的项目清单，获取对应项目的历史发布记录。分享如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">update_release_list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 获取项目release清单并更新以保持清单列表文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> :return:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">project&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">projects&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">project&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">baseUrl&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;/repos/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">project&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;repo&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">/releases&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 获取项目总页数 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pages&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">APIs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">github_page_count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pages&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;last&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;last&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pages&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 已保存的release清单，作为当前清单基准 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">.json&amp;#39;&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">old_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">.json&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">old_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">release_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">old_list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 去除原清单中的状态字段, 用于比对 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">old_list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">old_list&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 首页已获取，生成清单，默认状态False(未获取detail) &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;content-type&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">release&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;date&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;created_at&amp;#39;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">old_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">record&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">release_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;got release &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">, 1-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">total&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;release &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> exist!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 获取后续页面清单 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="s1">&amp;#39;last&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pages&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="s1">&amp;#39;next&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pages&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pages&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;next&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">page_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;?page=&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page_url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;content-type&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">release&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">record&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;date&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;created_at&amp;#39;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">record&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">old_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">record&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">release_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;got release &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">, &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">total&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;release &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">-&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> exist!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 按id排序 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">release_list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">reverse&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 更新清单文件 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">.json&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dumps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">release_list&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再结合具体release的id获取详情信息，组装md文档直接用hugo生成页面文件就可以了.&lt;/p></description></item><item><title>AI测试之TestGPT</title><link>https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_203935.png" alt="Featured image of post AI测试之TestGPT" />&lt;p>如今最火热的技术莫非OpenAI的ChatGPT莫属，AI技术也在很多方面得到广泛应用。今天我们来聊的TestGPT就是一个软件测试领域当红的应用。&lt;/p>
&lt;h3 id="testgpt是什么">TestGPT是什么？
&lt;/h3>&lt;p>TestGPT是一家总部位于以色列特拉维夫的初创公司 CodiumAI Ltd.，发布的一款用于测试领域的人工智能模型（AI model），由 OpenAI 的 GPT-4 大型语言模型驱动。&lt;/p>
&lt;p>官网地址： &lt;a class="link" href="http://www.codium.AI" target="_blank" rel="noopener"
>www.codium.ai&lt;/a>&lt;/p>
&lt;p>从官网的介绍可以看出，它是一个旨在协助开发人员测试他们的代码，为开发人员提供自动生成的软件测试套件建议，从而加快编码和错误扫描的AI工具。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_203935.png"
width="1833"
height="877"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_203935_hu_1cc7fb0cda2e11bc.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_203935_hu_ad7cccdf764a6dbf.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="501px"
>&lt;/p>
&lt;h3 id="如何使用">如何使用？
&lt;/h3>&lt;p>目前TestGPT提供了针对VsCode和JetBrains的插件支持
&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_205338.png"
width="321"
height="307"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_205338_hu_d13898428298dda8.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_205338_hu_6f268981ab1066c7.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>以VsCode为例，在vsCode的插件中心搜索CodiumAI即可安装&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_205457.png"
width="1419"
height="1065"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_205457_hu_59cf199073c22372.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_205457_hu_441554f848e20d9d.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>安装后可以Github账户直接登录连接。&lt;/p>
&lt;p>下面我们来用一段有问题的python排序算法代码来看看它是如何使用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">insert_sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lists&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 插入排序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lists&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1">#range区间有误，这里是bug，应为(1, count)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lists&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">lists&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>切换到CodiumAI插件，连接后可以看到代码部分已经有了生成测试的入口&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210014.png"
width="1131"
height="662"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210014_hu_7a4640a8833e2414.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210014_hu_61ef1b5e0873bea8.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="410px"
>&lt;/p>
&lt;p>尝试生成下看看效果，稍等片刻，就可以看到AI的成果了&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210406.png"
width="996"
height="92"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210406_hu_3f266d52b9bef103.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210406_hu_6d01cccac75f5045.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="1082"
data-flex-basis="2598px"
>&lt;/p>
&lt;p>AI的辅助界面有三部分，分别是：&lt;/p>
&lt;ul>
&lt;li>Test Suite 测试用例&lt;/li>
&lt;li>Code Analysis 代码分析&lt;/li>
&lt;li>Code Suggestions 代码修改建议&lt;/li>
&lt;/ul>
&lt;p>在用例配置部分可以做测试的基本配置&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210858.png"
width="989"
height="355"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210858_hu_f2b70cfc047ec025.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_210858_hu_db5844884f8dfbcd.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="278"
data-flex-basis="668px"
>&lt;/p>
&lt;p>Coverage部分则可以看到AI生成的Case覆盖情况&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211029.png"
width="977"
height="710"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211029_hu_65ce07c8cf85f424.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211029_hu_7901c33048174ebe.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>Test部分则是具体的测试用例，本例中生成了6条用例&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211130.png"
width="990"
height="451"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211130_hu_1ca838f05ea8a0ca.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211130_hu_a104bab2a8bdfb3c.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>执行后可以看到用例的执行结果，但生成的测试代码都执行成功了，似乎没有通过测试代码测试出bug :(&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211250.png"
width="966"
height="872"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211250_hu_caf88c32a1bc4cdd.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211250_hu_9f31482a99433a94.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>Code Analysis则给出了代码的分析说明，可以&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211545.png"
width="788"
height="906"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211545_hu_d4e35646d0eded89.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211545_hu_85e2e6ba4767b99b.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/p>
&lt;p>代码建议部分则给出了修改建议，这里倒是准确地指出了代码中的问题。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211835.png"
width="770"
height="738"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211835_hu_bdf616c1b5339fc8.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_211835_hu_80ad6d5301e44d28.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>按照建议直接应用，可以看到代码已经修改并加了注释&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_212047.png"
width="1573"
height="407"
srcset="https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_212047_hu_146942125a516c39.png 480w, https://chengxiaqiucao.github.io/post/006-ai%E6%B5%8B%E8%AF%95%E4%B9%8Btestgpt/20230626_212047_hu_f02eca26024ea82e.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="386"
data-flex-basis="927px"
>&lt;/p>
&lt;h3 id="总结">总结
&lt;/h3>&lt;p>所以可以看到TestGPT还是非常优秀的，准确地分析出了代码的作用并发现了代码中有问题的地方。也帮助设计了测试用例覆盖及相关单元测试脚本。
善用这个工具已经无疑可以给开发工程师提供非常大的辅助，但是从初步的使用来看，自行生成的测试用例对于问题代码的覆盖还有不足，短期内应该还不足以代替测试设计。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>质量管理 on 秋 草 观 “测” 台</title><link>https://chengxiaqiucao.github.io/tags/%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/</link><description>Recent content in 质量管理 on 秋 草 观 “测” 台</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>|by 城下秋草（公众号： 秋草说测试）</copyright><lastBuildDate>Fri, 28 Mar 2025 15:59:08 +0800</lastBuildDate><atom:link href="https://chengxiaqiucao.github.io/tags/%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>测试人员伤害质量的十大误区</title><link>https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/</link><pubDate>Fri, 28 Mar 2025 15:59:08 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/</guid><description>&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA.png"
width="900"
height="383"
srcset="https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA_hu_588289c4d5a18079.png 480w, https://chengxiaqiucao.github.io/post/071-%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8D%81%E5%A4%A7%E8%AF%AF%E5%8C%BA/%E4%BC%A4%E5%AE%B3%E8%B4%A8%E9%87%8F10%E5%A4%A7%E8%AF%AF%E5%8C%BA_hu_97ec78e79daba015.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="563px"
>&lt;/p>
&lt;p>很多企业会把承担测试的工程师称为QA（quality assurance），但QA和Tester其实是两个不同的岗位，但不可否认，测试工程师的主要职责也是面向质量的，是通过评估质量状态来帮助团队进行质量改进的。&lt;/p>
&lt;p>但即便这样，测试工程师的工作就一定是对质量改进有帮助的吗？在实际工作中，有些误区反而会让测试人员的工作对质量产生负面影响。&lt;/p>
&lt;p>这里秋草梳理总结了测试人员可能伤害质量的十大误区，以及对应的正确做法。&lt;/p>
&lt;h2 id="1-测试的职责是发现并汇报bug但不是确认">1. 测试的职责是发现并汇报Bug，但不是确认
&lt;/h2>&lt;p>&lt;strong>误区：经常有开发同学和测试同学就某个问题是否应该报Bug进行争论， “需求中没要求”， “这个问题不影响用户使用” 等等是经常出现的理由。很多测试同学也确实会因为这些原因不再报这些问题，甚至在报Bug前会去和开发确认能不能报。&lt;/strong>&lt;/p>
&lt;p>这是一个对质量伤害极大的误区。测试的价值在于评估质量状态，而评估的关键在于独立性。质量没有对错，只有好坏。需求中没定义的行为，不代表就是不需要的；不影响用户使用也不代表就是好的实现。测试是站在评估质量的视角，指出缺陷或者提出优化建议都是分内工作。开发则负责分析、认定并解决缺陷。如果开发和测试在认定上有分歧，还有PO或业务分析师、CCB成员可以进行仲裁。&lt;/p>
&lt;p>但对于测试人员来说，汇报&lt;strong>一切&lt;/strong>觉得有问题或者质量不好的产品行为则是工作义务。有意或无意去隐瞒或掩盖缺陷，才是对产品质量真正的伤害。&lt;/p>
&lt;h2 id="2-发现bug只是开始还应为修复bug提供尽可能多的上下文">2. 发现Bug只是开始，还应为修复Bug提供尽可能多的上下文
&lt;/h2>&lt;p>&lt;strong>误区：有的测试同学会认为我发现了问题，并且也进行了报告，那么工作就已经完成，后续修复过程与我无关，只需修复后进行验证即可&lt;/strong>&lt;/p>
&lt;p>测试是整个软件产品研发生命周期中的一个环节，最终是为产品整体质量服务的。而Bug本身其实对产品是无价值的，因为只有解决掉的Bug才会对产品质量有帮助。 从这个角度来说，虽然报告Bug是测试人员的主要工作，但对产品来说，最终解决Bug才是目的。所以测试作为产品研发的一环，即便解决Bug不是测试直接负责，但我们也应该为解决Bug提供必要的支撑。&lt;/p>
&lt;p>这部分在之前地文章 【】中有详细探讨，大家有兴趣可以参阅&lt;/p>
&lt;h2 id="3-测试不只是验证需求">3. 测试不只是验证需求
&lt;/h2>&lt;p>&lt;strong>误区：测试只要将需求中明确定义的部分进行验证无误即可，未定义的部分无需测试&lt;/strong>&lt;/p>
&lt;p>这里和第一个误区有些关联，是很多开发和测试争论bug的前提。在前文 【】中我们对测试目标的认识误区中，也说过这一点。就是测试除了验证需求之外，还有更多探索性工作应该覆盖。测试并不止是检查。&lt;/p>
&lt;p>而除此之外，这里我还想更要强调产品的整体性、系统性。特别是在敏捷研发模式下，这个误区很容易被扩大。&lt;/p>
&lt;p>在敏捷中，敏捷迭代的输出是Increment（产品增量），这个对开发工作是成立的。但测试工作是面向整个产品系统的，并不能只覆盖增量部分。需求也是增量的，所以当然不能仅覆盖增量部分的需求，这就是为什么回归测试是测试中必须包含的范畴，也是自动化测试越来越受重视的根本原因。（关于敏捷相关的分析介绍可以参看之前敏捷系列）&lt;/p>
&lt;h2 id="4-测试无止境好钢用在刀刃上">4. 测试无止境，好钢用在刀刃上
&lt;/h2>&lt;p>&lt;strong>误区：要想更多发现Bug，尽量探索、发散，并利用Bug的集群效应，尽可能多地发现Bug&lt;/strong>&lt;/p>
&lt;p>还是在 【】一文中，我们也澄清过，测试的目标也并不是为了发现更多Bug。而且测试其实无止境的，测试最终的目的是对整个产品或系统提供一个可靠、完整的质量状态评估。而这个质量状态是否客观准确，跟Bug的多少其实并不一定是一个正相关的关系。&lt;/p>
&lt;p>测试在尽可能发现Bug的同时，还是认识到，我们是要系统地对质量进行评估，但测试又是无法穷尽的，所以必须要把有限的时间进行科学地分配，优先关注高优先的部分，比如新功能、代码出现变更、高风险模块这些都是应该优先进行测试并重点保证的部分。&lt;/p>
&lt;p>&lt;code>精准测试&lt;/code>、&lt;code>基于风险的测试RBT&lt;/code>等都是这种思路下，把我们的测试资源、时间优先放到高价值部分的实践。&lt;/p>
&lt;h2 id="5-测试工作不是提测才开展从产品需求讨论就已经开始">5. 测试工作不是提测才开展，从产品需求讨论就已经开始
&lt;/h2>&lt;p>&lt;strong>误区：测试应该在产品提测以后才能正式展开，Bug也应该在提测以后才应该报告&lt;/strong>&lt;/p>
&lt;p>在当今，以上误区当然是不正确的，因为不管是&lt;code>测试左移&lt;/code>还是各种测试理论都强调了测试早期参与的重要性。&lt;/p>
&lt;p>但理论归理论，实际实践中，测试通常还是在提测以后才真正开展工作。&lt;/p>
&lt;p>一方面是产品前期，测试的存在感低，参与度低，容易被忽视；&lt;/p>
&lt;p>另一方面，很多测试团队的考核重Bug数量，这其实更加消磨了测试早期参与的积极性，导致测试并不太愿意在早期协助团队暴露产品的问题。&lt;/p>
&lt;p>但从产品交付角度，越是后期，问题修复的成本就越高。所以从产品管理来说，摒弃以Bug考核的导向，引导测试前期的积极参与，测试可以发挥其对问题的敏感度，从需求讨论开始就能识别、考虑到很多异常场景，并帮助团队提前规避。&lt;/p>
&lt;h2 id="6-设计和架构讨论测试不应是小透明">6. 设计和架构讨论，测试不应是小透明
&lt;/h2>&lt;p>&lt;strong>误区：架构和系统设计、详细设计是开发团队的任务，测试无需了解或参与讨论，等待产品开发完成后根据需求进行测试即可&lt;/strong>&lt;/p>
&lt;p>和上一条类似，&lt;code>测试左移&lt;/code>并不只是说测试更多了解需求，同样也要求测试参与到设计、甚至编码环节。&lt;/p>
&lt;p>还是要谈测试的目标：是要尽可能准确评估出产品的质量状态。而质量必然是和产品的具体实现紧密相关的，对产品的实现细节了解得越清晰，那么在测试时就越能够有的放矢，也包括可以在设计、编码阶段就提前帮助团队规避质量问题。&lt;/p>
&lt;p>相反，如果对设计、代码完全是黑盒，很可能遗漏掉一些关键的测试场景导致问题泄露。&lt;/p>
&lt;ul>
&lt;li>不了解云应用的负载均衡机制实现，只在单节点上验证，就无法验证负载均衡失效导致的问题&lt;/li>
&lt;li>不了解系统的缓存实现机制，就难以针对性地去构建缓存命中场景&lt;/li>
&lt;li>不了解界面的响应式适配实现，就难以高效地进行完成兼容性测试&lt;/li>
&lt;li>不了解接口的校验机制，就难以构造有效的接口测试数据&lt;/li>
&lt;/ul>
&lt;p>以上种种，都是测试不应该游离于设计环节之外，认为产品设计不属于测试范畴而忽略对这个环节的参与&lt;/p>
&lt;h2 id="7-独立的测试环境是充分测试的前提">7. 独立的测试环境是充分测试的前提
&lt;/h2>&lt;p>&lt;strong>误区：测试执行只需要关注产品本身，可以在集成环境甚至开发环境上进行测试，并不影响测试效果&lt;/strong>&lt;/p>
&lt;p>确实，测试的对象是产品本身。但测试环境其实是能否对产品进行全面、高效测试的一个关键制约。&lt;/p>
&lt;p>软件测试和探索过程中，对产品的使用，通常是很多不同的操作、交互的相互叠加。而在发现产品问题时，对问题的判断，一个重要的前提就是产品本身的相关前置条件、关联因素是清晰、明确的。而要保证这一点，一个独立、无干扰的测试环境就尤为必要。如果使用开发环境来进行测试，在测试同时，开发人员同时也在环境上进行调测、变更，不仅会增加大量无效问题的出现，也是对测试、问题定位等资源的极大浪费。&lt;/p>
&lt;p>除此之外，测试中，不可避免还有各种异常场景的营造，而一个独立的测试环境，更便于测试人员调整不同的测试场景，比如：&lt;/p>
&lt;ul>
&lt;li>修改网络配置，营造代理访问、内外部IP、弱网等场景&lt;/li>
&lt;li>修改系统时间、定时任务触发、模拟不同时段数据等场景&lt;/li>
&lt;li>模拟资源不足、空间占满、海量或巨大文件等场景&lt;/li>
&lt;li>产品中的部分限制因素，开启Debug模式、不同的鉴权设定、各种配置变更&lt;/li>
&lt;/ul>
&lt;p>这些测试都是建立在一个独立、可控的测试环境基础上的。&lt;/p>
&lt;h2 id="8-自动化测试代码也是程序像对待产品一样对待测试代码">8. 自动化测试代码也是程序，像对待产品一样对待测试代码
&lt;/h2>&lt;p>&lt;strong>误区：编写自动化测试，就是为了替代部分手工测试的执行，完成自动化代码部分的编写，让它能执行并覆盖相关用例即可&lt;/strong>&lt;/p>
&lt;p>自动化测试的目的确实是为了代替很多人工测试工作，达到效率提升的目的。但自动化测试的实施并非一锤子买卖，它也是一个长期的过程。而且自动化测试，本身也是通过程序代码来实现，是程序就会有bug，因此对自动化测试脚本、工具本身的质量保证和维护也是测试人员的重要工作。&lt;/p>
&lt;p>并不是我们编写出一个可跑的自动化脚本就是进行了自动化。对自动化脚本同样要像软件产品一样经过需求分析、设计、编码、测试以及后续的维护这样的生命周期。&lt;/p>
&lt;p>所以自动化测试本身也是一个较大投入，要让相关脚本长期发挥作用并真正起到提升执行效率的目的，那么对自动化测试代码的良好设计和持续维护就必不可少。&lt;/p>
&lt;h2 id="9--cicd管道同样也是测试的职责">9. CI/CD管道同样也是测试的职责
&lt;/h2>&lt;p>&lt;strong>误区：CI/CD作为现在很多研发团队的基础设施，通常会有专门的DevOps工程师负责搭建、维护，作为测试人员，负责其中自动化测试部分脚本的编写即可&lt;/strong>&lt;/p>
&lt;p>诚然，整个CI/CD管道中，和测试直接相关的部分主要就是自动化测试。但还是那句话：测试作为整个研发过程的一分子，是不可能独立于研发过程之外的。特别是敏捷研发中，更加强调团队的整体性，团队整体对研发过程负责。&lt;/p>
&lt;p>所以CI/CD管道建立、运作和保持畅通的过程，并不存在明显的测试只需要负责自动化测试环节的说法。&lt;/p>
&lt;p>作为质量视角的专业人员，在CI/CD管道建设中，我们也可以发挥更多的作用：&lt;/p>
&lt;ul>
&lt;li>定义管道中各个环节流转的质量门禁，将测试左移反映到CI/CD管道中&lt;/li>
&lt;li>代码变更的管控和识别，这部分对于测试阶段的精准测试，意义重大&lt;/li>
&lt;li>包括开发环境、集成环境、测试环境以至线上生产环境的监控，特别是很多质量相关指标的收集实现&lt;/li>
&lt;li>可视化，包括自动化测试报告、各种数据跟踪的状态呈现等&lt;/li>
&lt;/ul>
&lt;h2 id="10-珍惜所有了解终端用户使用场景的机会">10. 珍惜所有了解终端用户使用场景的机会
&lt;/h2>&lt;p>&lt;strong>误区：作为研发团队成员，测试无须主动接触终端用户。和用户对接更多是销售、售后、客服团队的工作&lt;/strong>&lt;/p>
&lt;p>测试工作面向质量，而质量的最终判断，其实是终端用户。所以很多团队都强调，测试是终端用户的代言人，是要站在用户视角来使用、体验产品并提前发现问题的角色。&lt;/p>
&lt;p>因此，从这个意义上，测试其实应该更多地去接触用户，了解用户使用产品的不同场景，诉求以至偏好。&lt;/p>
&lt;p>所以，在有机会接触用户的场景下，测试应该是主动而非抗拒。作为测试，这方面的机会还是比较多的，充分利用和用户接触的机会，丰富我们对于产品所属行业的理解并应用到我们的测试工作中来。&lt;/p>
&lt;ul>
&lt;li>用户问题支持。在一些反馈到研发团队的客户问题，需要提供技术支持时，作为测试，是经常会要直接面向客户的，这时也是我们直观了解用户对产品使用场景和面临问题的地方。&lt;/li>
&lt;li>对外测试。很多用户在选择产品前，都会有针对产品的验收测试。这些测试往往在客户方进行，但产品测试人员往往会作为产品方来提供支持或实施测试，也就是外场测试。这也是一个很好的深入了解用户场景的窗口&lt;/li>
&lt;li>客户拜访。有的企业在产品研发初期或过程中，会安排和终端客户的拜访、访谈，有时也会邀请研发团队参与，虽然大多情况下是系统分析师、架构等角色参与更多，但测试也会参与到此类拜访中，这是在初期就深入了解产品应用场景的一个绝佳机会。&lt;/li>
&lt;li>行业报告。除了直接和终端客户的沟通外，关注产品所属行业的行业报告、资讯和趋势分析等资料，同样也是一个深入理解产品所处行业和用户的上佳渠道。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>以上就是对测试人员伤害质量十大误区的梳理总结，欢迎大家讨论补充。
另外秋草关于测试技能体系化提升的课程，可以回复 &lt;strong>“大纲”&lt;/strong> 或在公众号菜单中查看课程目录。&lt;/p></description></item><item><title>Deepseek提示词框架助力团队改进现状，效能提升</title><link>https://chengxiaqiucao.github.io/post/069-%E4%BC%98%E5%8C%96ai%E6%8F%90%E7%A4%BA%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%9B%A2%E9%98%9F%E6%8F%90%E5%8D%87/</link><pubDate>Wed, 19 Mar 2025 22:44:42 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/069-%E4%BC%98%E5%8C%96ai%E6%8F%90%E7%A4%BA%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%9B%A2%E9%98%9F%E6%8F%90%E5%8D%87/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/069-%E4%BC%98%E5%8C%96ai%E6%8F%90%E7%A4%BA%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%9B%A2%E9%98%9F%E6%8F%90%E5%8D%87/%E6%8F%90%E7%A4%BA%E8%AF%8D%E6%A1%86%E6%9E%B6.png" alt="Featured image of post Deepseek提示词框架助力团队改进现状，效能提升" />&lt;p>随着 AI 技术的快速发展，从 ChatGPT 到 Deepseek 的爆发，AI已经可以切实起到辅助我们日常工作的作用。&lt;/p>
&lt;p>除了在具体的像辅助编程、文案编写等方面，我们也可以充分利用 AI 的强大逻辑能力和海量基础数据，帮助我们针对工作中的一些困境，提出切实可行的改进方案。&lt;/p>
&lt;p>但要想 AI 帮助我们给出有可操作性的解决方案，提示词的框架设计和提供给AI的上下文信息是极为关键的。一个良好的提示词框架，可以帮助我们快速得到极为有价值的参考。&lt;/p>
&lt;h2 id="面对的困境案例">面对的困境案例
&lt;/h2>&lt;p>这里以一个比较普遍的敏捷团队质量困境的案例来说明：&lt;/p>
&lt;blockquote>
&lt;p>作为一个测试工程师，在一个运行Scrum框架的敏捷团队中负责质量保障，团队成员还包括SM、PO、2个Android开发（其中小李负责了App的整体系统设计），1个后端开发，1个非全职的视觉设计。团队产品是一个物联网智能手环产品的配套Android App。但因为存在和硬件团队的配合、需求经常变化、视觉设计不及时、提测不及时、Bug积压等问题，导致产品质量不乐观。目前App已经运行了多个迭代，按计划上线时间越来越近，如何针对当前的质量困境提出改进方案？&lt;/p>&lt;/blockquote>
&lt;h3 id="设计提示词框架">设计提示词框架
&lt;/h3>&lt;p>要 AI 帮助我们给出有可行性的改进方案，首先我们要合理地设计提示词框架，以便最终给出的方案更贴合团队现状以及具备可操作性。&lt;/p>
&lt;p>那么设计的提示词框架要点：&lt;/p>
&lt;ul>
&lt;li>给定的角色，让 AI 确定从什么角度去提出改进方案&lt;/li>
&lt;li>当前的现状，也就是充分的背景信息上下文&lt;/li>
&lt;li>AI 应该具体分析的内容或它的任务应该是什么&lt;/li>
&lt;li>希望 AI 提供的具体输出，包括格式要求，应包含的要素等&lt;/li>
&lt;li>相关的一些制约因素，这对方案是否可行会有重要影响&lt;/li>
&lt;/ul>
&lt;p>现在针对上述困境，希望AI 能帮助我提供一份针对团队的整体质量提升方案，可以在回顾会上进行讨论。基于以上思路，通过向 Deepseek输入提示词框架，得到如下输出：&lt;/p>
&lt;h3 id="质量改进方案面向迭代回顾会">质量改进方案（面向迭代回顾会）
&lt;/h3>&lt;hr>
&lt;h4 id="1-总体质量目标">&lt;strong>1. 总体质量目标&lt;/strong>
&lt;/h4>&lt;p>&lt;strong>&amp;ldquo;在2个迭代内将自动化测试覆盖率提升至40%，缺陷修复响应时间缩短50%，回归测试时间压缩30%，建立需求变更与测试联动的质量防线&amp;rdquo;&lt;/strong>&lt;/p>
&lt;hr>
&lt;h4 id="2-具体改进举措">&lt;strong>2. 具体改进举措&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>举措&lt;/th>
&lt;th>执行人&lt;/th>
&lt;th>执行计划&lt;/th>
&lt;th>效果评估方法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>需求冻结机制&lt;/strong>&lt;br>- 每个迭代前3天锁定核心功能需求&lt;br>- 硬件对接需求由PO与硬件团队联合评审后形成接口文档&lt;/td>
&lt;td>PO、硬件团队负责人&lt;/td>
&lt;td>迭代计划会签署需求基线文档&lt;br>硬件接口文档通过Confluence共享&lt;/td>
&lt;td>需求变更次数减少50%&lt;br>接口文档版本变更记录可追溯&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>自动化用例分级策略&lt;/strong>&lt;br>- L0级（核心业务流）：强制全自动化&lt;br>- L1级（高频使用场景）：优先自动化&lt;br>- L2级（边缘场景）：手动验证&lt;/td>
&lt;td>测试工程师&lt;br>（主导）&lt;br>Android开发工程师&lt;br>（辅助）&lt;/td>
&lt;td>使用Allure标记用例等级&lt;br>每日构建优先执行L0用例&lt;/td>
&lt;td>L0用例100%通过率作为提测准出条件&lt;br>自动化执行时间减少40%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>开发自测责任制&lt;/strong>&lt;br>- 开发提交代码需附带单元测试（覆盖率≥60%）&lt;br>- 接口测试由后端工程师在Swagger维护&lt;/td>
&lt;td>Android开发工程师&lt;br>后端工程师&lt;/td>
&lt;td>单元测试纳入代码评审检查项&lt;br>Postman接口用例与代码库联动&lt;/td>
&lt;td>提测版本冒烟测试通过率提升至80%&lt;br>接口缺陷率下降30%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>硬件兼容性Mock服务&lt;/strong>&lt;br>- 基于硬件协议开发模拟器&lt;br>- 自动化测试与真实设备解耦&lt;/td>
&lt;td>测试工程师&lt;br>（主导）&lt;br>硬件团队提供协议文档&lt;/td>
&lt;td>使用Python开发蓝牙协议模拟器&lt;br>Jenkins构建时自动启动Mock服务&lt;/td>
&lt;td>硬件依赖导致测试阻塞次数清零&lt;br>自动化稳定性提升至95%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>缺陷分级管理&lt;/strong>&lt;br>- P0级缺陷：2小时内响应&lt;br>- P1级缺陷：当前迭代必须修复&lt;br>- 遗留缺陷需PO签字确认风险&lt;/td>
&lt;td>测试工程师&lt;br>（分类）&lt;br>开发工程师&lt;br>（修复）&lt;/td>
&lt;td>Jira配置自动化缺陷流转规则&lt;br>每日站会同步TOP3缺陷进展&lt;/td>
&lt;td>缺陷平均修复周期缩短至8小时&lt;br>积压缺陷数量下降60%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h4 id="3-风险及应对">&lt;strong>3. 风险及应对&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>风险&lt;/th>
&lt;th>应对方案&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>开发人员抵触单元测试&lt;/td>
&lt;td>- 由小李（系统设计师）示范编写单元测试&lt;br>- 将测试覆盖率纳入DoD完成标准&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>硬件协议频繁变更&lt;/td>
&lt;td>- 要求硬件团队提前3天通知协议变更&lt;br>- Mock服务设计版本兼容机制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UE设计延迟影响UI测试&lt;/td>
&lt;td>- 与UE设计师约定：视觉稿交付同时提供UI元素ID规范&lt;br>- 使用截图对比工具容差10%像素差异&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h4 id="4-外部支持需求">&lt;strong>4. 外部支持需求&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>具体需求&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>工具&lt;/td>
&lt;td>- 申请BrowserStack移动云测试平台license&lt;br>- 采购Xray测试用例管理插件License&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>人员&lt;/td>
&lt;td>- 硬件团队指定协议对接接口人&lt;br>- DevOps工程师优化CI/CD流水线&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>培训&lt;/td>
&lt;td>- 邀请单元测试专家开展TDD工作坊&lt;br>- Appium高级用法内部培训&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h4 id="5-效果评估节点">&lt;strong>5. 效果评估节点&lt;/strong>
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>节点&lt;/th>
&lt;th>检验标准&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>迭代5中期&lt;/td>
&lt;td>- L0级自动化用例覆盖所有核心业务流程&lt;br>- 单元测试覆盖率≥40%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>迭代5结束&lt;/td>
&lt;td>- 自动化覆盖率≥25%&lt;br>- 回归测试时间≤8小时/次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>迭代6结束&lt;/td>
&lt;td>- 自动化覆盖率≥40%&lt;br>- 生产环境致命缺陷数为0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>&lt;strong>执行要点说明：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>每日质量看板&lt;/strong>：在团队作战室悬挂自动化执行率/缺陷趋势图&lt;/li>
&lt;li>&lt;strong>质量门禁机制&lt;/strong>：代码合并请求必须通过L0用例+SonarQube检测&lt;/li>
&lt;li>&lt;strong>测试左移实践&lt;/strong>：测试工程师参与需求评审时即输出测试要点矩阵&lt;/li>
&lt;/ol>
&lt;p>该方案需团队全员签署质量承诺书，建议在迭代回顾会上通过&amp;quot;5Why分析法&amp;quot;就当前质量问题达成改进共识。&lt;/p>
&lt;p>可以看到，得到了一份极有针对性且有相当可行性的改进方案。我们根据目前的团队现状，进行微调其实就可以纳入实施。&lt;/p>
&lt;p>所以善用 AI 提示词框架，不仅可以帮助我们在具体事务上获取帮助，对于这种整体改进方面的举措，AI 也能提供巨大助力。&lt;/p>
&lt;p>回复 “提示词框架” 可获取上文的提示词完整示例。关于 AI 在工作中的更多应用实践，也欢迎大家留言或入群探讨！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/qrcode_for_gh_e12c318badb4_258%20%281%29.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>软件测试中"可做但不应做"的一些陷阱</title><link>https://chengxiaqiucao.github.io/post/067-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%8F%AF%E5%81%9A%E4%BD%86%E4%B8%8D%E5%BA%94%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1/</link><pubDate>Tue, 18 Mar 2025 16:49:04 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/067-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%8F%AF%E5%81%9A%E4%BD%86%E4%B8%8D%E5%BA%94%E5%81%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1/</guid><description>&lt;h2 id="软件测试中8-种-能做但不应该做-的工作">软件测试中，8 种 &lt;strong>”能做，但不应该做“&lt;/strong> 的工作
&lt;/h2>&lt;p>在软件测试中，我们常常会面临一个问题：很多工作确实是我们可以去做到的，似乎做这些事也理所当然，但很多时候，这些事情往往收效甚微。从过度自动化到频繁运行不必要的回归测试，不一而足。&lt;/p>
&lt;p>随着技术发展，测试人员手中拥有的工具让我们可以完成更多事情，但并不意味每个选择都是明智的。有些工作，盲目地去做，往往会影响真正重要的产出、效率、可维护性等要求。&lt;/p>
&lt;p>本文列举了在测试工作中八个“能做，但不应做”的工作。有时候，退一步可能是更聪明的选择。&lt;/p>
&lt;h3 id="1-自动化所有测试">1. 自动化所有测试
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 现代的测试自动化工具让我们几乎可以自动化任何测试用例，从用户界面的每一次点击到API的每一次调用，技术上来说，都可以通过自动化来进行驱动。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 仅仅因为可以实现自动化测试，却并不意味它是最佳选择。比如：&lt;/p>
&lt;blockquote>
&lt;p>某个产品的用户界面非常动态，设计师每周都会进行调整。如果你选择将所有测试都自动化，每次UI改动后，相关的自动化测试都可能面临失效的风险。&lt;/p>&lt;/blockquote>
&lt;p>这种情况下，&lt;strong>手动测试可能更有效&lt;/strong>。&lt;/p>
&lt;h3 id="2-自动化脚本中使用过于复杂的定位器">2. 自动化脚本中使用过于复杂的定位器
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> Selenium, Playwright 等自动化工具中，借助XPath和CSS选择器，我们能够精确定位到页面中最深层的元素。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 过于复杂的定位器往往会让测试变得脆弱。比如：&lt;/p>
&lt;blockquote>
&lt;p>使用复杂的XPath去定位一个菜单，但当开发团队重构HTML结构后，往往导致多个测试失败，团队不得不花费大量时间修复。&lt;/p>&lt;/blockquote>
&lt;p>这时，其他方法可能对自动化用例的稳定性更为有效，比如和开发团队&lt;strong>约定增加元素的 &lt;code>test-id&lt;/code> 属性&lt;/strong>。&lt;/p>
&lt;h3 id="3-每次提交都运行完整的回归测试">3. 每次提交都运行完整的回归测试
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 在现代CI/CD管道中，每次代码提交都可以轻松触发完整的回归测试。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 但实际上，这种做法往往是过度的。想象一下，一个小的代码修复导致整个回归测试运行，而这个过程可能需要几个小时，甚至更长时间。&lt;/p>
&lt;p>如果在没有将自动化覆盖率提升到一定程度的团队，这种提交后进行完整回归更是噩梦。更好的做法，其实还是及时掌握变更内容，并根据变更和影响实现&lt;strong>精准测试&lt;/strong>。&lt;/p>
&lt;h3 id="4-在api测试中过度模拟">4. 在API测试中过度模拟
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 模拟API响应可以大幅提高测试速度，消除对外部服务的依赖。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 然而，过度模拟会让我们失去与真实环境的连接。大量的Mock API 确实可以提升调试和验证效率，但却背离了真正的测试需要。&lt;strong>真实场景下的测试是不可或缺&lt;/strong>的，就像我们不能预知所有的异常一样&lt;/p>
&lt;h3 id="5-为琐碎问题撰写极其详细的缺陷报告">5. 为琐碎问题撰写极其详细的缺陷报告
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 借助辅助测试工具，我们可以捕捉到类似很多细小的UI层、提示信息等缺陷，也可以按照用例规范编写极为详尽的缺陷报告。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 并不是每个小问题都值得进行事无巨细地全面报告。发现Bug的目的最终是为了解决bug而不是bug本身，况且Bug的价值也有高下主次之分。我在 【】中其实对好的缺陷报告进行过分析，缺陷报告的价值是作为和开发沟通的渠道，报告八股文本身并无价值。&lt;/p>
&lt;h3 id="6-在没有人工监督的情况下使用ai生成测试用例">6. 在没有人工监督的情况下使用AI生成测试用例
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> AI的发展，其实已经可以做到，利用AI工具，基于需求文档快速生成大量测试用例，覆盖大量场景。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 然而，现阶段的AI，特别是针对特定的业务，缺乏人类的上下文理解以及各种内部沟通获取的综合信息，因而可能导致用例冗余或遗漏关键测试用例。&lt;/p>
&lt;h3 id="7-在测试中过多地使用断言">7. 在测试中过多地使用断言
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 结合自动化工具和AI，我们确实可以做到在一个测试中验证大量字段、属性和UI元素。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 然而，过多的断言只会让测试变得巨大且复杂，难以调试。当部分断言失败，往往需要耗费大量的精力去排查&lt;/p>
&lt;h3 id="8-在每个可能的设备和浏览器组合上执行测试">8. 在每个可能的设备和浏览器组合上执行测试
&lt;/h3>&lt;p>&lt;strong>可以做到：&lt;/strong> 针对兼容性测试，现代的跨浏览器和跨设备测试工具让我们能够在许多操作系统和设备上运行测试。&lt;/p>
&lt;p>&lt;strong>但不应该：&lt;/strong> 测试所有可能的组合既不必要也不切实际。重点是覆盖用户实际使用的关键场景。而且开发技术的发展如响应式编程等，也大大减少了兼容性问题的风险。&lt;/p>
&lt;h3 id="结语">结语
&lt;/h3>&lt;p>在软件测试中，“有能力做” 却并不总意味着是最佳选择。我们需要在技术能力和实际可行性之间找到平衡。通过避免这些“因为可以做到”的陷阱，去建立一个精简、高效且真正有价值的测试集，对产品的质量保障更有意义。&lt;/p>
&lt;p>欢迎关注秋草，持续带来更多软件质量相关技术干货！&lt;/p></description></item><item><title>如何快速完成测试</title><link>https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/</link><pubDate>Wed, 12 Feb 2025 15:31:20 +0800</pubDate><guid>https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212.png" alt="Featured image of post 如何快速完成测试" />&lt;blockquote>
&lt;p>有同学提问，团队中没有专职的测试人员，要怎么才能快速完成测试？&lt;/p>&lt;/blockquote>
&lt;p>先说结论，这里并没有标准答案！&lt;/p>
&lt;p>没有测试岗位只是没有专门负责这个职能的人员，但测试这个事并没有消失&lt;/p>
&lt;p>快速完成测试，其实应该换种说法，就是快速建立质量信心。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212.png"
width="512"
height="512"
srcset="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212_hu_abba87d4733d6d62.png 480w, https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212_hu_f4e60964569403a6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>因为测试无穷尽，所以没有绝对的完成测试，按历史经验或大家达成基本共识，产品应该没啥问题了，就算完成测试。&lt;/p>
&lt;p>那既然我们现在希望做的就是快速建立这个质量信心，或者说能快速跟相关干系人达成质量OK的共识，基于这个思路，要考虑哪些因素呢？&lt;/p>
&lt;h3 id="待测范围">待测范围
&lt;/h3>&lt;p>要快速做完测试，一个途径就是测试范围少，比如改动很小，而且没啥关联影响模块，快速检验一下就可以了。道理跟开发代码及时提交、高频集成是一样的，不要积累变更，节省出问题后倒查一堆变更的时间。&lt;/p>
&lt;p>开发阶段充分自测，并及时集成测试，不要积累变更。&lt;/p>
&lt;h3 id="已有质量">已有质量
&lt;/h3>&lt;p>另一个方面是是否对产品现有质量有信心，开发是增量的，之前的存量是否质量是过关的？新增部分和存量部分的关联、影响是否都是已知的？产品质量是全量的，历史功能或影响同样对影响当前的质量信心，所以是否清晰新增和存量的关系，存量本身的质量是否过关也是关键。&lt;/p>
&lt;h3 id="潜在问题">潜在问题
&lt;/h3>&lt;p>再有就是，测试是黑盒的，并不能清晰知道冰山之下有多大的危险。但质量信心这个东西其实跟潜在问题并没有直接关系，它主要跟已知问题和已测范围相关，也就是已知问题越少、已测范围越大则信心越足。背后的逻辑就是，已知问题越多，往往意味着潜在问题越多，发现一只蟑螂，可能代表有一窝蟑螂。所以还是强调提测质量！自测没充分，就先别集成测试了，每个开发先把自己的一亩三分地扫干净先。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-1.png"
width="512"
height="512"
srcset="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-1_hu_83c4de157a81ff7b.png 480w, https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-1_hu_e9aae0c38c7e98e3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h3 id="问题暴露风险">问题暴露风险
&lt;/h3>&lt;p>最后，还有一道防火墙，就是出问题的风险。问题暴露，炸了！ 但炸的影响其实不同，是冒个火星就灭了，还是炸个洞，甚至整栋楼塌了！除了问题本身的大小，不同产品对问题的接受程度其实也不一样，在一个等着拆迁的大楼里放个炮仗，大不了也就是提前拆迁了，容忍度高，信心就足！&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-2.png"
width="640"
height="360"
srcset="https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-2_hu_74fa70fcd5d9b2b1.png 480w, https://chengxiaqiucao.github.io/post/054-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E6%B5%8B%E8%AF%95/Pasted-20250212-2_hu_99a93e33a749c607.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>综合以上几个方面，快速完成测试，归根到底就是能不能尽快建立交付的信心，跟个人能力、产品属性、研发流程都有关。其实是个认知问题&lt;/p>
&lt;p>最后，还是要说，任何事物都无法背离内在规律，一个运行稳定，健壮，耐造的系统，必然是会要经过各种磨合、内外部各种问题锤炼才可能达成的。&lt;/p>
&lt;p>你以为的快速交付、一战功成，哪有什么岁月静好，不过是有人替你负重前行罢了。只是这个负重的可能是前期的开发人员、也可能是测试人员、或者运维人员，抑或最后，靠用户抗下所有！&lt;/p></description></item><item><title>不可不知的5Why根因分析法</title><link>https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/</link><pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate><guid>https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/</guid><description>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/5why.png" alt="Featured image of post 不可不知的5Why根因分析法" />&lt;p>在质量管理领域，对质量进行改进的一个重要过程就是发现问题并解决问题。这其中，解决问题实践中，一个关键的步骤是根因分析RCA（Root Cause Analysis）。RCA 的方法有很多，常用的有鱼骨图（Fishbone Diagram），亲和图（Affinity Diagram），FMEA（Failure mode and effects analysis）等。&lt;/p>
&lt;p>不过最易于应用，应用最广泛的可能还是 5Why 根因分析法&lt;/p>
&lt;h2 id="5why-的提出">5Why 的提出
&lt;/h2>&lt;p>&lt;strong>5Why&lt;/strong> 方法最早起源于丰田汽车，是丰田之父&lt;strong>丰田章男&lt;/strong>提出的。但被引入主流是丰田生产系统负责人&lt;strong>大野耐一&lt;/strong>的功劳。&lt;/p>
&lt;p>丰田的网站有这样一段说明，描述了大野耐一对这个方法的推崇：&lt;/p>
&lt;blockquote>
&lt;p>Whenever a problem cropped up, Taiichi Ohno encouraged his staff to explore problems first-hand until the root causes were found. “Observe the production floor without preconceptions,” he would advise. “Ask ‘why’ five times about every matter.”&lt;/p>&lt;/blockquote>
&lt;p>5Why 方法的是基于这样一个基本认识：&lt;/p>
&lt;blockquote>
&lt;p>“每个问题背后都有原因，但肤浅的分析只能描述症状。” 为了找到问题背后的根本原因，需要持续的调查，只有得到根本原因，这样才能针对性采取持久的解决方案，使问题不再重现。&lt;/p>&lt;/blockquote>
&lt;p>所以 5Why，其实就是我们遇到遇到一个问题，不应该仅仅只从表面上看待导致这个问题的浅层原因，而是要抱着 “打破砂锅问到底” 的精神，探究出它的根本原因。只有解决了导致问题出现的根本原因，才有可能避免问题的不断重复出现。&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007.png"
width="906"
height="490"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007_hu_3700f4b37d3e8fdd.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007_hu_312d1f8c6f0dd22.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>举一个软件行业的案例来说， 客户验收发现一个比较严重的功能bug，影响产品的最终交付。这时通过 5Why 方法来分析根本原因：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>客户为什么会遇到这个问题？&lt;/strong> 据技术负责人透露，测试团队尚未向开发团队报告任何此类问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么测试团队无法发现问题？&lt;/strong> 测试团队只进行了冒烟测试，并没有对功能做完整的回归验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么测试团队只进行冒烟测试&lt;/strong>？ 因为他们没有足够的时间对整个应用程序进行彻底的回归验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么没有足够的时间进行彻底的回归&lt;/strong>？ 因为开发提测版本只比最后交给客户验收提前了一天，而彻底的功能测试至少需要 3 天。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为什么开发在交付前一天才提测&lt;/strong>？因为其中一个关键功能的实现比预期的复杂，花了更多的时间。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>分析到这里，其实发现了两个根本原因：&lt;/p>
&lt;ul>
&lt;li>团队成员对工作量的预估出现严重偏差，开发时间估算不足&lt;/li>
&lt;li>项目管理上的问题，提测时间比测试预估时间晚太多，牺牲质量，不进行回归就交付给客户。版本准出控制不足。&lt;/li>
&lt;/ul>
&lt;p>所以针对分析出来的原因，需要从两方面改进，才能避免类似的情况持续出现。&lt;/p>
&lt;ol>
&lt;li>提高开发团队对功能实现的估算准确度，包括培训，需求拆分，尽早理解需求等。&lt;/li>
&lt;li>项目管理改进，需要加强测试的准入准出控制和风险预防。延期提测需要顺延交付时间；产品未完成回归就进行发布，至少需要完成异常发布的审核流程。&lt;/li>
&lt;/ol>
&lt;h2 id="5why的实施步骤">5Why的实施步骤
&lt;/h2>&lt;p>5Why 方法虽然很简单，但它的实施还是需要遵循一定的步骤流程：&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-3.png"
width="904"
height="161"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-3_hu_370aa8478e43c7ee.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-3_hu_ba47ffa88983facd.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="561"
data-flex-basis="1347px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，当然是需要跟问题相关的关键成员要共同来对问题进行分析，这一步应该是需要团队中跟问题相关的关联角色都能够参加。否则可能因为关键人员的缺席导致分析不能继续进行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而在确定参与的团队人员之后，还要保证所有人对问题都比较明确，需要分析什么？有哪些背景信息，大家对问题的理解应该达成共识，而不是以不同的理解进入 Why 的讨论环节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而在具体的分析会议期间中，主持人应该通过合适的提问，来逐步地帮助团队挖掘出真正的原因&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当然，分析问题最终是为了解决问题，所以，我们还要针对得到的根因讨论出对应的纠正措施，以避免同类问题再次发生。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后，纠正措施的实施成效怎么样，也需要有对应的举措、时间节点来进行跟踪，对根因分析的效果进行检验确认。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>通过这样一个过程，才是一个完整的、基于 5Why 方法的根因分析实施过程。&lt;/p>
&lt;h2 id="实施-5why-的注意事项">实施 5Why 的注意事项
&lt;/h2>&lt;p>5Why 方法虽然简单，但在实践中，其实并不容易做好，这里有一些需要注意的关键点：&lt;/p>
&lt;h3 id="团队活动">团队活动
&lt;/h3>&lt;p>5Why 分析是一个团队活动，需要跟问题相关的人员积极参与，只有跟问题分析路径上的关键角色能给出有效的答案才能保证分析链路的有效&lt;/p>
&lt;h3 id="并非高效方法">并非高效方法
&lt;/h3>&lt;p>这个方法虽然理解上很简单，但因为是团队活动，且跟问题的各种背景信息是否充分紧密相关。所以包括信息收集、人员召集以及会议上的头脑风暴，都是需要时间投入的，并不是一个高效、快速得到结论的活动，有时甚至要进行多次会议讨论。&lt;/p>
&lt;h3 id="主持人的经验">主持人的经验
&lt;/h3>&lt;p>5Why 方法是否能成功，很关键的一个角色是会议的主持者，这个角色应该对 5Why 方法有充分理解并且对问题相关领域比较熟悉，能够引导团队在正确的方向上去挖掘根本原因。避免过度发散&lt;/p>
&lt;h3 id="对事不对人避免责任推卸">对事不对人，避免责任推卸
&lt;/h3>&lt;p>根因分析不是定责，也就是会议的重点是为了发现将来改进的要点，而不是界定当前问题的责任，避免把分析会变成责任推协会和甩锅会&lt;/p>
&lt;h3 id="关注可控因素">关注可控因素
&lt;/h3>&lt;p>根因分析，得到的根因应该是可以采取措施的一些可控的因素。而不是找到一些根本无法完成修正的不可抗因素。比如说人手不足了，根本原因是公司效益不好，而公司效益不好是经济下行.. 结论会变成不了了之&lt;/p>
&lt;p>总而言之，5Why 分析法是一个简单实用的根因分析方法，但并不是高效方法，并且它的有效性跟团队成员的齐心合力和实施方式关系紧密。只有理解它的内部逻辑，根据团队的实际情况，有选择地实施才能真正起到应有的效用。&lt;/p>
&lt;h2 id="分析模板">分析模板
&lt;/h2>&lt;p>附上两个常见的分析模板，供大家参考&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-1.png"
width="1535"
height="942"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-1_hu_9ca5effb15927f19.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-1_hu_18350f0bb32a2b99.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="391px"
>&lt;/p>
&lt;p>&lt;img src="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-2.png"
width="959"
height="594"
srcset="https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-2_hu_17b489783c746c6d.png 480w, https://chengxiaqiucao.github.io/post/027-%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%845why%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90%E6%B3%95/Pasted-20241007-2_hu_ba35b65a9ef6a80c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;hr></description></item></channel></rss>